{"path":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","commits":[{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,boolean).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, boolean needsFreqs) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int flags;\n        switch (random.nextInt(4)) {\n          case 0: flags = 0; break;\n          case 1: flags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: flags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: flags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, flags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      final DocsEnum docsAndFreqs = termsEnum.docs(liveDocs, reuse, true);\n      if (docsAndFreqs != null) {\n        return docsAndFreqs;\n      }\n    }\n    return termsEnum.docs(liveDocs, reuse, needsFreqs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","pathOld":"/dev/null","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":5,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/_TestUtil#docs(Random,TermsEnum,Bits,DocsEnum,int).mjava","sourceNew":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","sourceOld":"  // Returns a DocsEnum from a positioned TermsEnum, but\n  // randomly sometimes uses a DocsAndFreqsEnum, DocsAndPositionsEnum.\n  public static DocsEnum docs(Random random, TermsEnum termsEnum, Bits liveDocs, DocsEnum reuse, int flags) throws IOException {\n    if (random.nextBoolean()) {\n      if (random.nextBoolean()) {\n        final int posFlags;\n        switch (random.nextInt(4)) {\n          case 0: posFlags = 0; break;\n          case 1: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS; break;\n          case 2: posFlags = DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n          default: posFlags = DocsAndPositionsEnum.FLAG_OFFSETS | DocsAndPositionsEnum.FLAG_PAYLOADS; break;\n        }\n        // TODO: cast to DocsAndPositionsEnum?\n        DocsAndPositionsEnum docsAndPositions = termsEnum.docsAndPositions(liveDocs, null, posFlags);\n        if (docsAndPositions != null) {\n          return docsAndPositions;\n        }\n      }\n      flags |= DocsEnum.FLAG_FREQS;\n    }\n    return termsEnum.docs(liveDocs, reuse, flags);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["02331260bb246364779cb6f04919ca47900d01bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","02331260bb246364779cb6f04919ca47900d01bb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6613659748fe4411a7dcf85266e55db1f95f7315"],"02331260bb246364779cb6f04919ca47900d01bb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","02331260bb246364779cb6f04919ca47900d01bb"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"02331260bb246364779cb6f04919ca47900d01bb":["6613659748fe4411a7dcf85266e55db1f95f7315","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}