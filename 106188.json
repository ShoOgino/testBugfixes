{"path":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.termLength = term.text().length();\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    this.minSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minSimilarity);\n    \n    // calculate the maximum k edits for this similarity\n    maxEdits = initialMaxDistance(minSimilarity, termLength);\n  \n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum(reader, term, minSimilarity, prefixLength));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb0ee59cc50caf85402e92d148fdb2af61bc19","date":1272929037,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    this.minSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minSimilarity);\n    \n    // calculate the maximum k edits for this similarity\n    maxEdits = initialMaxDistance(minSimilarity, termLength);\n  \n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.termLength = term.text().length();\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    this.minSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minSimilarity);\n    \n    // calculate the maximum k edits for this similarity\n    maxEdits = initialMaxDistance(minSimilarity, termLength);\n  \n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum(reader, term, minSimilarity, prefixLength));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a4d59223802237d352245759cf541e315aab20a","date":1285686672,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    this.minSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minSimilarity);\n    \n    // calculate the maximum k edits for this similarity\n    maxEdits = initialMaxDistance(minSimilarity, termLength);\n  \n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,AttributeSource,Term,float,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","sourceNew":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param atts {@link AttributeSource} created by the rewrite method of {@link MultiTermQuery}\n   * thats contains information about competitive boosts during rewrite. It is also used\n   * to cache DFAs between segment transitions.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, AttributeSource atts, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n    this.dfaAtt = atts.addAttribute(Priv.LevenshteinAutomataAttribute.class);\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    this.maxBoostAtt = atts.addAttribute(MultiTermQuery.MaxNonCompetitiveBoostAttribute.class);\n    bottom = maxBoostAtt.getMaxNonCompetitiveBoost();\n    bottomTerm = maxBoostAtt.getCompetitiveTerm();\n    bottomChanged(null, true);\n  }\n\n","sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f && minSimilarity != (int)minSimilarity)\n      throw new IllegalArgumentException(\"fractional edit distances are not allowed\");\n    if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    // if minSimilarity >= 1, we treat it as number of edits\n    if (minSimilarity >= 1f) {\n      this.minSimilarity = 1 - (minSimilarity+1) / this.termLength;\n      maxEdits = (int) minSimilarity;\n      raw = true;\n    } else {\n      this.minSimilarity = minSimilarity;\n      // calculate the maximum k edits for this similarity\n      maxEdits = initialMaxDistance(this.minSimilarity, termLength);\n      raw = false;\n    }\n    this.scale_factor = 1.0f / (1.0f - this.minSimilarity);\n\n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/FuzzyTermsEnum#FuzzyTermsEnum(IndexReader,Term,float,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor for enumeration of all terms from specified <code>reader</code> which share a prefix of\n   * length <code>prefixLength</code> with <code>term</code> and which have a fuzzy similarity &gt;\n   * <code>minSimilarity</code>.\n   * <p>\n   * After calling the constructor the enumeration is already pointing to the first \n   * valid term if such a term exists. \n   * \n   * @param reader Delivers terms.\n   * @param term Pattern term.\n   * @param minSimilarity Minimum required similarity for terms from the reader. Default value is 0.5f.\n   * @param prefixLength Length of required common prefix. Default value is 0.\n   * @throws IOException\n   */\n  public FuzzyTermsEnum(IndexReader reader, Term term, \n      final float minSimilarity, final int prefixLength) throws IOException {\n    if (minSimilarity >= 1.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be greater than or equal to 1\");\n    else if (minSimilarity < 0.0f)\n      throw new IllegalArgumentException(\"minimumSimilarity cannot be less than 0\");\n    if(prefixLength < 0)\n      throw new IllegalArgumentException(\"prefixLength cannot be less than 0\");\n    this.reader = reader;\n    this.term = term;\n\n    // convert the string into a utf32 int[] representation for fast comparisons\n    final String utf16 = term.text();\n    this.termText = new int[utf16.codePointCount(0, utf16.length())];\n    for (int cp, i = 0, j = 0; i < utf16.length(); i += Character.charCount(cp))\n           termText[j++] = cp = utf16.codePointAt(i);\n    this.termLength = termText.length;\n\n    //The prefix could be longer than the word.\n    //It's kind of silly though.  It means we must match the entire word.\n    this.realPrefixLength = prefixLength > termLength ? termLength : prefixLength;\n    this.minSimilarity = minSimilarity;\n    this.scale_factor = 1.0f / (1.0f - minSimilarity);\n    \n    // calculate the maximum k edits for this similarity\n    maxEdits = initialMaxDistance(minSimilarity, termLength);\n  \n    TermsEnum subEnum = getAutomatonEnum(maxEdits, null);\n    setEnum(subEnum != null ? subEnum : \n      new LinearFuzzyTermsEnum());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["3a4d59223802237d352245759cf541e315aab20a"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a4d59223802237d352245759cf541e315aab20a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5acb0ee59cc50caf85402e92d148fdb2af61bc19","33a8b1f99104f4144f210f5d068411c297cd7163"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["3a4d59223802237d352245759cf541e315aab20a","33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["33a8b1f99104f4144f210f5d068411c297cd7163"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acb0ee59cc50caf85402e92d148fdb2af61bc19":["3a4d59223802237d352245759cf541e315aab20a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["5acb0ee59cc50caf85402e92d148fdb2af61bc19"],"3a4d59223802237d352245759cf541e315aab20a":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}