{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","commits":[{"id":"744486748bc5bee772100e49230e5bca39bac99a","date":1289776426,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9a970f8ee7d1a6394019bbb267c13dc5d4b3a9c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanMultiTermQueryWrapper#SpanMultiTermQueryWrapper(Q).mjava","sourceNew":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","sourceOld":"  /**\n   * Create a new SpanMultiTermQueryWrapper. \n   * \n   * @param query Query to wrap.\n   * <p>\n   * NOTE: This will call {@link MultiTermQuery#setRewriteMethod(MultiTermQuery.RewriteMethod)}\n   * on the wrapped <code>query</code>, changing its rewrite method to a suitable one for spans.\n   * Be sure to not change the rewrite method on the wrapped query afterwards! Doing so will\n   * throw {@link UnsupportedOperationException} on rewriting this query!\n   */\n  public SpanMultiTermQueryWrapper(Q query) {\n    this.query = query;\n    \n    MultiTermQuery.RewriteMethod method = query.getRewriteMethod();\n    if (method instanceof TopTermsRewrite) {\n      final int pqsize = ((TopTermsRewrite) method).getSize();\n      setRewriteMethod(new TopTermsSpanBooleanQueryRewrite(pqsize));\n    } else {\n      setRewriteMethod(SCORING_SPAN_QUERY_REWRITE); \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["744486748bc5bee772100e49230e5bca39bac99a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","744486748bc5bee772100e49230e5bca39bac99a"],"744486748bc5bee772100e49230e5bca39bac99a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","744486748bc5bee772100e49230e5bca39bac99a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"744486748bc5bee772100e49230e5bca39bac99a":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}