{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","sourceNew":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, loader.getConfigDir(), myName, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          if (requestParams.debug) {\n            if (debugDocuments == null)\n              debugDocuments = new ArrayList<SolrInputDocument>();\n            debugDocuments.add(document);\n          }\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, loader.getConfigDir(), myName, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          if (requestParams.debug) {\n            if (debugDocuments == null)\n              debugDocuments = new ArrayList<SolrInputDocument>();\n            debugDocuments.add(document);\n          }\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","sourceNew":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, loader.getConfigDir(), myName, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          if (requestParams.debug) {\n            if (debugDocuments == null)\n              debugDocuments = new ArrayList<SolrInputDocument>();\n            debugDocuments.add(document);\n          }\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, loader.getConfigDir(), myName, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          if (requestParams.debug) {\n            if (debugDocuments == null)\n              debugDocuments = new ArrayList<SolrInputDocument>();\n            debugDocuments.add(document);\n          }\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82c0f50a240cf02105b13b11e49095779864d37f","date":1311151772,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","sourceNew":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          if (requestParams.debug) {\n            if (debugDocuments == null)\n              debugDocuments = new ArrayList<SolrInputDocument>();\n            debugDocuments.add(document);\n          }\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, loader.getConfigDir(), myName, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          if (requestParams.debug) {\n            if (debugDocuments == null)\n              debugDocuments = new ArrayList<SolrInputDocument>();\n            debugDocuments.add(document);\n          }\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95755793ac5f02eed6154c705e8638e001a5a0a","date":1312178495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","sourceNew":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          if (requestParams.debug) {\n            if (debugDocuments == null)\n              debugDocuments = new ArrayList<SolrInputDocument>();\n            debugDocuments.add(document);\n          }\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,RequestInfo,SolrQueryRequest).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler#getSolrWriter(UpdateRequestProcessor,SolrResourceLoader,DataImporter.RequestParams,SolrQueryRequest).mjava","sourceNew":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final RequestInfo requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","sourceOld":"  private SolrWriter getSolrWriter(final UpdateRequestProcessor processor,\n                                   final SolrResourceLoader loader, final DataImporter.RequestParams requestParams, SolrQueryRequest req) {\n\n    return new SolrWriter(processor, req) {\n\n      @Override\n      public boolean upload(SolrInputDocument document) {\n        try {\n          return super.upload(document);\n        } catch (RuntimeException e) {\n          LOG.error( \"Exception while adding: \" + document, e);\n          return false;\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82c0f50a240cf02105b13b11e49095779864d37f":["c26f00b574427b55127e869b935845554afde1fa"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["f95755793ac5f02eed6154c705e8638e001a5a0a"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95755793ac5f02eed6154c705e8638e001a5a0a":["82c0f50a240cf02105b13b11e49095779864d37f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"82c0f50a240cf02105b13b11e49095779864d37f":["f95755793ac5f02eed6154c705e8638e001a5a0a"],"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["82c0f50a240cf02105b13b11e49095779864d37f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"f95755793ac5f02eed6154c705e8638e001a5a0a":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}