{"path":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","commits":[{"id":"08f9f60ad238cb88d12306a20077e84d1f1f93e4","date":1416549887,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(MessageFormat.format(\"tried these servers {0} succeeded only in {1} \", urls,succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bdb19206b4aeab66b9fb393c53969f44bdd48be","date":1426629125,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(MessageFormat.format(\"tried these servers {0} succeeded only in {1} \", urls,succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(MessageFormat.format(\"tried these servers {0} succeeded only in {1} \", urls,succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9b4296bd51ca61b482138791478afdd0f7d3a3d","date":1498058739,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 20;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri);\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri);\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri);\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri+\"?wt=json\");\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c9780b447ddf847479e7fa9978cb7809a15a0bf","date":1538692320,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        MapWriter respMap = getAsMap(url + uri);\n        if (String.valueOf(newVersion).equals(respMap._getStr(asList(name, \"znodeVersion\"), null))) {\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        Map respMap = getAsMap(url+uri);\n        if(String.valueOf(newVersion).equals(String.valueOf( getObjectByPath(respMap, true, asList(name, \"znodeVersion\"))))){\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestConfigReload#checkConfReload(SolrZkClient,String,String,String).mjava","sourceNew":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    if (log.isInfoEnabled()) {\n      log.info(\"new_version {}\", newStat.getVersion());\n    }\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        MapWriter respMap = getAsMap(url + uri);\n        if (String.valueOf(newVersion).equals(respMap._getStr(asList(name, \"znodeVersion\"), null))) {\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","sourceOld":"  private void checkConfReload(SolrZkClient client, String resPath, String name, String uri) throws Exception {\n    Stat stat =  new Stat();\n    byte[] data = null;\n    try {\n      data = client.getData(resPath, null, stat, true);\n    } catch (KeeperException.NoNodeException e) {\n      data = \"{}\".getBytes(StandardCharsets.UTF_8);\n      log.info(\"creating_node {}\",resPath);\n      client.create(resPath,data, CreateMode.PERSISTENT,true);\n    }\n    long startTime = System.nanoTime();\n    Stat newStat = client.setData(resPath, data, true);\n    client.setData(\"/configs/conf1\", new byte[]{1}, true);\n    assertTrue(newStat.getVersion() > stat.getVersion());\n    log.info(\"new_version \"+ newStat.getVersion());\n    Integer newVersion = newStat.getVersion();\n    long maxTimeoutSeconds = 60;\n    DocCollection coll = cloudClient.getZkStateReader().getClusterState().getCollection(\"collection1\");\n    List<String> urls = new ArrayList<>();\n    for (Slice slice : coll.getSlices()) {\n      for (Replica replica : slice.getReplicas())\n        urls.add(\"\"+replica.get(ZkStateReader.BASE_URL_PROP) + \"/\"+replica.get(ZkStateReader.CORE_NAME_PROP));\n    }\n    HashSet<String> succeeded = new HashSet<>();\n\n    while ( TimeUnit.SECONDS.convert(System.nanoTime() - startTime, TimeUnit.NANOSECONDS) < maxTimeoutSeconds){\n      Thread.sleep(50);\n      for (String url : urls) {\n        MapWriter respMap = getAsMap(url + uri);\n        if (String.valueOf(newVersion).equals(respMap._getStr(asList(name, \"znodeVersion\"), null))) {\n          succeeded.add(url);\n        }\n      }\n      if(succeeded.size() == urls.size()) break;\n      succeeded.clear();\n    }\n    assertEquals(StrUtils.formatString(\"tried these servers {0} succeeded only in {1} \", urls, succeeded) , urls.size(), succeeded.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["a52341299179de5479672f7cf518bf4b173f34b3"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["9bdb19206b4aeab66b9fb393c53969f44bdd48be","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"28288370235ed02234a64753cdbf0c6ec096304a":["9bdb19206b4aeab66b9fb393c53969f44bdd48be","a9b4296bd51ca61b482138791478afdd0f7d3a3d"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["08f9f60ad238cb88d12306a20077e84d1f1f93e4","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a52341299179de5479672f7cf518bf4b173f34b3":["28288370235ed02234a64753cdbf0c6ec096304a","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"08f9f60ad238cb88d12306a20077e84d1f1f93e4":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bdb19206b4aeab66b9fb393c53969f44bdd48be"],"a9b4296bd51ca61b482138791478afdd0f7d3a3d":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c9780b447ddf847479e7fa9978cb7809a15a0bf":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"28288370235ed02234a64753cdbf0c6ec096304a":["a52341299179de5479672f7cf518bf4b173f34b3","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a52341299179de5479672f7cf518bf4b173f34b3":["9c9780b447ddf847479e7fa9978cb7809a15a0bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08f9f60ad238cb88d12306a20077e84d1f1f93e4"],"9bdb19206b4aeab66b9fb393c53969f44bdd48be":["a9b4296bd51ca61b482138791478afdd0f7d3a3d","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["936cdd5882761db3b844afd6f84ab81cbb011a75","a52341299179de5479672f7cf518bf4b173f34b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}