{"path":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws CorruptIndexException, LockObtainFailedException, IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\"));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\"));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws CorruptIndexException, LockObtainFailedException, IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\"));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\"));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws CorruptIndexException, LockObtainFailedException, IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws CorruptIndexException, LockObtainFailedException, IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\"));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\"));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws CorruptIndexException, LockObtainFailedException, IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws CorruptIndexException, LockObtainFailedException, IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      facetFields.addFields(doc, paths);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      facetFields.addFields(doc, paths);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      CategoryDocumentBuilder builder = new CategoryDocumentBuilder(taxoWriter);\n      builder.setCategoryPaths(paths).build(doc);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bceb02c33032dd9bbf107cd06d0b74e5db4f110a","date":1357909746,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      if (paths.size() > 0) {\n        facetFields.addFields(doc, paths);\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      facetFields.addFields(doc, paths);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      if (paths.size() > 0) {\n        facetFields.addFields(doc, paths);\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      facetFields.addFields(doc, paths);\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownQueryTest#beforeClassDrillDownQueryTest().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/DrillDownTest#createIndexes().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClassDrillDownQueryTest() throws Exception {\n    dir = newDirectory();\n    Random r = random();\n    RandomIndexWriter writer = new RandomIndexWriter(r, dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(r, MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        if (r.nextBoolean()) {\n          paths.add(new CategoryPath(\"a/1\", '/'));\n        } else {\n          paths.add(new CategoryPath(\"a/2\", '/'));\n        }\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      if (paths.size() > 0) {\n        facetFields.addFields(doc, paths);\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void createIndexes() throws IOException {\n    dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    \n    taxoDir = newDirectory();\n    TaxonomyWriter taxoWriter = new DirectoryTaxonomyWriter(taxoDir);\n    \n    for (int i = 0; i < 100; i++) {\n      ArrayList<CategoryPath> paths = new ArrayList<CategoryPath>();\n      Document doc = new Document();\n      if (i % 2 == 0) { // 50\n        doc.add(new TextField(\"content\", \"foo\", Field.Store.NO));\n      }\n      if (i % 3 == 0) { // 33\n        doc.add(new TextField(\"content\", \"bar\", Field.Store.NO));\n      }\n      if (i % 4 == 0) { // 25\n        paths.add(new CategoryPath(\"a\"));\n      }\n      if (i % 5 == 0) { // 20\n        paths.add(new CategoryPath(\"b\"));\n      }\n      FacetFields facetFields = new FacetFields(taxoWriter);\n      if (paths.size() > 0) {\n        facetFields.addFields(doc, paths);\n      }\n      writer.addDocument(doc);\n    }\n    \n    taxoWriter.close();\n    reader = writer.getReader();\n    writer.close();\n    \n    taxo = new DirectoryTaxonomyReader(taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["04f07771a2a7dd3a395700665ed839c3dae2def2","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f793470bad5ce8422502e33eaae65fc6a3271bd2"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bceb02c33032dd9bbf107cd06d0b74e5db4f110a"],"bceb02c33032dd9bbf107cd06d0b74e5db4f110a":["f793470bad5ce8422502e33eaae65fc6a3271bd2","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}