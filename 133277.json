{"path":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","commits":[{"id":"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","date":1456224289,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/JarRepository#getJarIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public JarContentRef getJarIncRef(String key) {\n    JarContent jar = jars.get(key);\n    if (jar == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        jars.put(key, jar = new JarContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    JarContentRef ref = new JarContentRef(jar);\n    synchronized (jar.references) {\n      jar.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet, HttpClientUtil.createNewHttpClientRequestContext());\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet);\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5fab1d180f47e9924e0e56501b42034b3476f2b1","date":1460974879,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","sourceNew":"  // I wanted to {@link SolrCore#loadDecodeAndCacheBlob(String, Decoder)} below but precommit complains\n  /**\n   * Returns the contents of a blob containing a ByteBuffer and increments a reference count. Please return the \n   * same object to decrease the refcount. This is normally used for storing jar files, and binary raw data.\n   * If you are caching Java Objects you want to use {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)}\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a blob\n   */\n  public BlobContentRef<ByteBuffer> getBlobIncRef(String key) {\n   return getBlobIncRef(key, () -> addBlob(key));\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet, HttpClientUtil.createNewHttpClientRequestContext());\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","sourceNew":"  // I wanted to {@link SolrCore#loadDecodeAndCacheBlob(String, Decoder)} below but precommit complains\n  /**\n   * Returns the contents of a blob containing a ByteBuffer and increments a reference count. Please return the \n   * same object to decrease the refcount. This is normally used for storing jar files, and binary raw data.\n   * If you are caching Java Objects you want to use {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)}\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a blob\n   */\n  public BlobContentRef<ByteBuffer> getBlobIncRef(String key) {\n   return getBlobIncRef(key, () -> addBlob(key));\n  }\n\n","sourceOld":"  /**\n   * Returns the contents of a jar and increments a reference count. Please return the same object to decrease the refcount\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a jar\n   */\n  public BlobContentRef getBlobIncRef(String key) {\n    BlobContent aBlob = blobs.get(key);\n    if (aBlob == null) {\n      if (this.coreContainer.isZooKeeperAware()) {\n        Replica replica = getSystemCollReplica();\n        String url = replica.getStr(BASE_URL_PROP) + \"/.system/blob/\" + key + \"?wt=filestream\";\n\n        HttpClient httpClient = coreContainer.getUpdateShardHandler().getHttpClient();\n        HttpGet httpGet = new HttpGet(url);\n        ByteBuffer b;\n        try {\n          HttpResponse entity = httpClient.execute(httpGet, HttpClientUtil.createNewHttpClientRequestContext());\n          int statusCode = entity.getStatusLine().getStatusCode();\n          if (statusCode != 200) {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"no such blob or version available: \" + key);\n          }\n          b = SimplePostTool.inputStreamToByteArray(entity.getEntity().getContent());\n        } catch (Exception e) {\n          if (e instanceof SolrException) {\n            throw (SolrException) e;\n          } else {\n            throw new SolrException(SolrException.ErrorCode.NOT_FOUND, \"could not load : \" + key, e);\n          }\n        } finally {\n          httpGet.releaseConnection();\n        }\n        blobs.put(key, aBlob = new BlobContent(key, b));\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Jar loading is not supported in non-cloud mode\");\n        // todo\n      }\n\n    }\n\n    BlobContentRef ref = new BlobContentRef(aBlob);\n    synchronized (aBlob.references) {\n      aBlob.references.add(ref);\n    }\n    return ref;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/BlobRepository#getBlobIncRef(String).mjava","sourceNew":"  /**\n   * Returns the contents of a blob containing a ByteBuffer and increments a reference count. Please return the\n   * same object to decrease the refcount. This is normally used for storing jar files, and binary raw data.\n   * If you are caching Java Objects you want to use {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)}\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a blob\n   */\n  public BlobContentRef<ByteBuffer> getBlobIncRef(String key) {\n    return getBlobIncRef(key, () -> addBlob(key));\n  }\n\n","sourceOld":"  // I wanted to {@link SolrCore#loadDecodeAndCacheBlob(String, Decoder)} below but precommit complains\n  /**\n   * Returns the contents of a blob containing a ByteBuffer and increments a reference count. Please return the \n   * same object to decrease the refcount. This is normally used for storing jar files, and binary raw data.\n   * If you are caching Java Objects you want to use {@code SolrCore#loadDecodeAndCacheBlob(String, Decoder)}\n   *\n   * @param key it is a combination of blobname and version like blobName/version\n   * @return The reference of a blob\n   */\n  public BlobContentRef<ByteBuffer> getBlobIncRef(String key) {\n   return getBlobIncRef(key, () -> addBlob(key));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"859081acf00749f5dd462772c571d611d4a4d2db":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["859081acf00749f5dd462772c571d611d4a4d2db","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["859081acf00749f5dd462772c571d611d4a4d2db"],"a5296efc4b319f5647b606629c093a94b23692c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f46a888512a86ee1f37a7682bac9b2f4b38bb5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"0f46a888512a86ee1f37a7682bac9b2f4b38bb5a":["859081acf00749f5dd462772c571d611d4a4d2db","a5296efc4b319f5647b606629c093a94b23692c6"],"859081acf00749f5dd462772c571d611d4a4d2db":["713122036535651642e6d4fe57ce12b449e18473","5fab1d180f47e9924e0e56501b42034b3476f2b1"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f46a888512a86ee1f37a7682bac9b2f4b38bb5a","a5296efc4b319f5647b606629c093a94b23692c6"],"5fab1d180f47e9924e0e56501b42034b3476f2b1":["713122036535651642e6d4fe57ce12b449e18473"],"a5296efc4b319f5647b606629c093a94b23692c6":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a5296efc4b319f5647b606629c093a94b23692c6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}