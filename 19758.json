{"path":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","commits":[{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#doTest().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        REPLICATION_FACTOR, replicationFactor,\n        MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b","date":1432801743,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null))  {\n      int replicationFactor = 1;\n      int maxShardsPerNode = 5;\n\n      Map<String, Object> props = ZkNodeProps.makeMap(\n              \"router.name\", ImplicitDocRouter.NAME,\n              ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n              ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n              NUM_SLICES, 1,\n              SHARDS_PROP,\"a,b\");\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n      String collectionName = \"customcollreplicadeletion\";\n\n      createCollection(collectionInfos, collectionName, props, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n      removeAndWaitForLastReplicaGone(client, collectionName, replica, \"a\");\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    int replicationFactor = 1;\n    int maxShardsPerNode = 5;\n\n    Map<String, Object> props = ZkNodeProps.makeMap(\n        \"router.name\", ImplicitDocRouter.NAME,\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n        NUM_SLICES, 1,\n        SHARDS_PROP,\"a,b\");\n\n    Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n    String collectionName = \"customcollreplicadeletion\";\n\n    createCollection(collectionInfos, collectionName, props, client);\n\n    waitForRecoveriesToFinish(collectionName, false);\n\n    DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState().getCollection(collectionName);\n    Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n    removeAndWaitForLastReplicaGone(collectionName, replica, \"a\");\n  }\n\n","bugFix":null,"bugIntro":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null))  {\n      int replicationFactor = 1;\n      int maxShardsPerNode = 5;\n\n      Map<String, Object> props = Utils.makeMap(\n          \"router.name\", ImplicitDocRouter.NAME,\n          ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n          ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, 1,\n          SHARDS_PROP, \"a,b\");\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n      String collectionName = \"customcollreplicadeletion\";\n\n      createCollection(collectionInfos, collectionName, props, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n      removeAndWaitForLastReplicaGone(client, collectionName, replica, \"a\");\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null))  {\n      int replicationFactor = 1;\n      int maxShardsPerNode = 5;\n\n      Map<String, Object> props = ZkNodeProps.makeMap(\n              \"router.name\", ImplicitDocRouter.NAME,\n              ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n              ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n              NUM_SLICES, 1,\n              SHARDS_PROP,\"a,b\");\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n      String collectionName = \"customcollreplicadeletion\";\n\n      createCollection(collectionInfos, collectionName, props, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n      removeAndWaitForLastReplicaGone(client, collectionName, replica, \"a\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"175a04d27a2b736171e7e51ca46a03b2aec094d4","date":1452534768,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","sourceNew":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null))  {\n      int replicationFactor = 1;\n      int maxShardsPerNode = 5;\n\n      Map<String, Object> props = Utils.makeMap(\n          \"router.name\", ImplicitDocRouter.NAME,\n          ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n          ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, 1,\n          SHARDS_PROP, \"a,b\");\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n      String collectionName = \"customcollreplicadeletion\";\n\n      createCollection(collectionInfos, collectionName, props, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n      removeAndWaitForReplicaGone(client, collectionName, replica, \"a\", replicationFactor-1);\n    }\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null))  {\n      int replicationFactor = 1;\n      int maxShardsPerNode = 5;\n\n      Map<String, Object> props = Utils.makeMap(\n          \"router.name\", ImplicitDocRouter.NAME,\n          ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n          ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, 1,\n          SHARDS_PROP, \"a,b\");\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n      String collectionName = \"customcollreplicadeletion\";\n\n      createCollection(collectionInfos, collectionName, props, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n      removeAndWaitForLastReplicaGone(client, collectionName, replica, \"a\");\n    }\n  }\n\n","bugFix":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"636a04bc82e662bf141a55f1d10f52e1c76c727b","date":1483014160,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final String collectionName = \"customcollreplicadeletion\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .setMaxShardsPerNode(5)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Replica replica = getRandomReplica(collectionState.getSlice(\"a\"));\n\n    CollectionAdminRequest.deleteReplica(collectionName, \"a\", replica.getName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expected shard 'a' to have no replicas\", collectionName, (n, c) -> {\n      return c.getSlice(\"a\") == null || c.getSlice(\"a\").getReplicas().size() == 0;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null))  {\n      int replicationFactor = 1;\n      int maxShardsPerNode = 5;\n\n      Map<String, Object> props = Utils.makeMap(\n          \"router.name\", ImplicitDocRouter.NAME,\n          ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n          ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, 1,\n          SHARDS_PROP, \"a,b\");\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n      String collectionName = \"customcollreplicadeletion\";\n\n      createCollection(collectionInfos, collectionName, props, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n      removeAndWaitForReplicaGone(client, collectionName, replica, \"a\", replicationFactor-1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final String collectionName = \"customcollreplicadeletion\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .setMaxShardsPerNode(5)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Replica replica = getRandomReplica(collectionState.getSlice(\"a\"));\n\n    CollectionAdminRequest.deleteReplica(collectionName, \"a\", replica.getName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expected shard 'a' to have no replicas\", collectionName, (n, c) -> {\n      return c.getSlice(\"a\") == null || c.getSlice(\"a\").getReplicas().size() == 0;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  @ShardsFixed(num = 2)\n  public void test() throws Exception {\n    try (CloudSolrClient client = createCloudClient(null))  {\n      int replicationFactor = 1;\n      int maxShardsPerNode = 5;\n\n      Map<String, Object> props = Utils.makeMap(\n          \"router.name\", ImplicitDocRouter.NAME,\n          ZkStateReader.REPLICATION_FACTOR, replicationFactor,\n          ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode,\n          NUM_SLICES, 1,\n          SHARDS_PROP, \"a,b\");\n\n      Map<String,List<Integer>> collectionInfos = new HashMap<>();\n\n      String collectionName = \"customcollreplicadeletion\";\n\n      createCollection(collectionInfos, collectionName, props, client);\n\n      waitForRecoveriesToFinish(collectionName, false);\n\n      DocCollection testcoll = getCommonCloudSolrClient().getZkStateReader()\n              .getClusterState().getCollection(collectionName);\n      Replica replica = testcoll.getSlice(\"a\").getReplicas().iterator().next();\n\n      removeAndWaitForReplicaGone(client, collectionName, replica, \"a\", replicationFactor-1);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DeleteLastCustomShardedReplicaTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n\n    final String collectionName = \"customcollreplicadeletion\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Replica replica = getRandomReplica(collectionState.getSlice(\"a\"));\n\n    CollectionAdminRequest.deleteReplica(collectionName, \"a\", replica.getName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expected shard 'a' to have no replicas\", collectionName, (n, c) -> {\n      return c.getSlice(\"a\") == null || c.getSlice(\"a\").getReplicas().size() == 0;\n    });\n\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n\n    final String collectionName = \"customcollreplicadeletion\";\n\n    CollectionAdminRequest.createCollectionWithImplicitRouter(collectionName, \"conf\", \"a,b\", 1)\n        .setMaxShardsPerNode(5)\n        .process(cluster.getSolrClient());\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    Replica replica = getRandomReplica(collectionState.getSlice(\"a\"));\n\n    CollectionAdminRequest.deleteReplica(collectionName, \"a\", replica.getName())\n        .process(cluster.getSolrClient());\n\n    waitForState(\"Expected shard 'a' to have no replicas\", collectionName, (n, c) -> {\n      return c.getSlice(\"a\") == null || c.getSlice(\"a\").getReplicas().size() == 0;\n    });\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["abb23fcc2461782ab204e61213240feb77d355aa"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"abb23fcc2461782ab204e61213240feb77d355aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["636a04bc82e662bf141a55f1d10f52e1c76c727b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["175a04d27a2b736171e7e51ca46a03b2aec094d4","636a04bc82e662bf141a55f1d10f52e1c76c727b"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b"],"2bf454e5dea7bb5bcf27f8332ded09afcc4b6a1b":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"636a04bc82e662bf141a55f1d10f52e1c76c727b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"abb23fcc2461782ab204e61213240feb77d355aa":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abb23fcc2461782ab204e61213240feb77d355aa"],"175a04d27a2b736171e7e51ca46a03b2aec094d4":["636a04bc82e662bf141a55f1d10f52e1c76c727b","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["175a04d27a2b736171e7e51ca46a03b2aec094d4"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}