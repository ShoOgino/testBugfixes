{"path":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9ab26a8ff05b83949c16901ea1e6df4d56c2946b","b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":["b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreDescriptor().getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a","date":1502924492,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor().submit(bootstrapCallable);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          running.set(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9ab26a8ff05b83949c16901ea1e6df4d56c2946b","date":1506548085,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc","date":1507866341,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    //additional logging\n    log.info(\"cdcr: bootstrap executing for collection: \" + collectionName + \" and shard: \" + shard);\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          //additional logging\n          log.info(\"cdcr: couldn't acquire lock for bootstrap, issue CANCEL\");\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //additional logging\n          log.info(\"cdcr: acquire lock for bootstrap, latch removed\");\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n      //additional logging\n      log.info(\"cdcr: bootstrap status after action: \" + coreState.getCdcrBootstrapRunning());\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786","date":1508967813,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    //additional logging\n    log.info(\"cdcr: bootstrap executing for collection: \" + collectionName + \" and shard: \" + shard);\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          //additional logging\n          log.info(\"cdcr: couldn't acquire lock for bootstrap, issue CANCEL\");\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //additional logging\n          log.info(\"cdcr: acquire lock for bootstrap, latch removed\");\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n      //additional logging\n      log.info(\"cdcr: bootstrap status after action: \" + coreState.getCdcrBootstrapRunning());\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //running.set(true);\n          String leaderUrl = ReplicationHandler.getObjectWithBackwardCompatibility(req.getParams(), ReplicationHandler.LEADER_URL, ReplicationHandler.LEGACY_LEADER_URL, null);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(leaderUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //running.set(true);\n          String masterUrl = req.getParams().get(ReplicationHandler.MASTER_URL);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(masterUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/CdcrRequestHandler#handleBootstrapAction(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":null,"sourceOld":"  private void handleBootstrapAction(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException, InterruptedException, SolrServerException {\n    String collectionName = core.getCoreDescriptor().getCloudDescriptor().getCollectionName();\n    String shard = core.getCoreDescriptor().getCloudDescriptor().getShardId();\n    if (!leaderStateManager.amILeader()) {\n      log.warn(\"Action {} sent to non-leader replica @ {}:{}\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Action \" + CdcrParams.CdcrAction.BOOTSTRAP +\n          \" sent to non-leader replica\");\n    }\n    CountDownLatch latch = new CountDownLatch(1); // latch to make sure BOOTSTRAP_STATUS gives correct response\n\n    Runnable runnable = () -> {\n      Lock recoveryLock = req.getCore().getSolrCoreState().getRecoveryLock();\n      boolean locked = recoveryLock.tryLock();\n      SolrCoreState coreState = core.getSolrCoreState();\n      try {\n        if (!locked)  {\n          handleCancelBootstrap(req, rsp);\n        } else if (leaderStateManager.amILeader())  {\n          coreState.setCdcrBootstrapRunning(true);\n          latch.countDown(); // free the latch as current bootstrap is executing\n          //running.set(true);\n          String leaderUrl = ReplicationHandler.getObjectWithBackwardCompatibility(req.getParams(), ReplicationHandler.LEADER_URL, ReplicationHandler.LEGACY_LEADER_URL, null);\n          BootstrapCallable bootstrapCallable = new BootstrapCallable(leaderUrl, core);\n          coreState.setCdcrBootstrapCallable(bootstrapCallable);\n          Future<Boolean> bootstrapFuture = core.getCoreContainer().getUpdateShardHandler().getRecoveryExecutor()\n              .submit(bootstrapCallable);\n          coreState.setCdcrBootstrapFuture(bootstrapFuture);\n          try {\n            bootstrapFuture.get();\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            log.warn(\"Bootstrap was interrupted\", e);\n          } catch (ExecutionException e) {\n            log.error(\"Bootstrap operation failed\", e);\n          }\n        } else  {\n          log.error(\"Action {} sent to non-leader replica @ {}:{}. Aborting bootstrap.\", CdcrParams.CdcrAction.BOOTSTRAP, collectionName, shard);\n        }\n      } finally {\n        if (locked) {\n          coreState.setCdcrBootstrapRunning(false);\n          recoveryLock.unlock();\n        } else {\n          latch.countDown(); // free the latch as current bootstrap is executing\n        }\n      }\n    };\n\n    try {\n      core.getCoreContainer().getUpdateShardHandler().getUpdateExecutor().submit(runnable);\n      rsp.add(RESPONSE_STATUS, \"submitted\");\n      latch.await(10000, TimeUnit.MILLISECONDS); // put the latch for current bootstrap command\n    } catch (RejectedExecutionException ree)  {\n      // no problem, we're probably shutting down\n      rsp.add(RESPONSE_STATUS, \"failed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"9ab26a8ff05b83949c16901ea1e6df4d56c2946b":["b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","9ab26a8ff05b83949c16901ea1e6df4d56c2946b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["9ab26a8ff05b83949c16901ea1e6df4d56c2946b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"9ab26a8ff05b83949c16901ea1e6df4d56c2946b":["6240b74b884c5587f2a4062dd27d6c32bf228889","3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"b9b92fa3c73ed8d71f951bbcb358cd144bf25c2a":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","9ab26a8ff05b83949c16901ea1e6df4d56c2946b"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b3a7b6cea3f16e7a4352814c2a2ccff08308bbc":["0d0b2b4f3a6b86bcf8fa84fb5e2d65df5b953786"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","6240b74b884c5587f2a4062dd27d6c32bf228889","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}