{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter).mjava","commits":[{"id":"aa3636f020dd2f593d4df8cf2a55798e984ae749","date":1483541265,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters, MetricFilter mustMatchFilter) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter]).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters, MetricFilter mustMatchFilter) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param metricFilters a list of {@link MetricFilter} instances\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> metricFilters) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream().filter(s -> metricFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s)))).forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter).mjava","sourceNew":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param metadata optional metadata. If not null and not empty then this map will be added under a\n   *                 {@code _metadata_} key.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                      MetricFilter mustMatchFilter, boolean skipHistograms,\n                                      boolean skipAggregateValues,\n                                      Map<String, Object> metadata) {\n    NamedList result = new NamedList();\n    toNamedMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, (k, v) -> {\n      result.add(k, new NamedList(v));\n    });\n    if (metadata != null && !metadata.isEmpty()) {\n      result.add(\"_metadata_\", new NamedList(metadata));\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters, MetricFilter mustMatchFilter) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":["81b762f1026e8caf0a77c73d3db32b2a5db9107b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":6,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toNamedList(MetricRegistry,List[MetricFilter],MetricFilter).mjava","sourceNew":"  /**\n   * Returns a representation of the given metric registry as a list of {@link SolrInputDocument}-s.\n   Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @param skipHistograms discard any {@link Histogram}-s and histogram parts of {@link Timer}-s.\n   * @param metadata optional metadata. If not null and not empty then this map will be added under a\n   *                 {@code _metadata_} key.\n   * @return a list of {@link SolrInputDocument}-s\n   */\n  public static List<SolrInputDocument> toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                                             MetricFilter mustMatchFilter, boolean skipHistograms,\n                                                             boolean skipAggregateValues,\n                                                             Map<String, Object> metadata) {\n    List<SolrInputDocument> result = new LinkedList<>();\n    toSolrInputDocuments(registry, shouldMatchFilters, mustMatchFilter, skipHistograms,\n        skipAggregateValues, metadata, doc -> {\n      result.add(doc);\n    });\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns a NamedList representation of the given metric registry. Only those metrics\n   * are converted to NamedList which match at least one of the given MetricFilter instances.\n   *\n   * @param registry      the {@link MetricRegistry} to be converted to NamedList\n   * @param shouldMatchFilters a list of {@link MetricFilter} instances.\n   *                           A metric must match <em>any one</em> of the filters from this list to be\n   *                           included in the output\n   * @param mustMatchFilter a {@link MetricFilter}.\n   *                        A metric <em>must</em> match this filter to be included in the output.\n   * @return a {@link NamedList}\n   */\n  public static NamedList toNamedList(MetricRegistry registry, List<MetricFilter> shouldMatchFilters, MetricFilter mustMatchFilter) {\n    NamedList response = new NamedList();\n    Map<String, Metric> metrics = registry.getMetrics();\n    SortedSet<String> names = registry.getNames();\n    names.stream()\n        .filter(s -> shouldMatchFilters.stream().anyMatch(metricFilter -> metricFilter.matches(s, metrics.get(s))))\n        .filter(s -> mustMatchFilter.matches(s, metrics.get(s)))\n        .forEach(n -> {\n      Metric metric = metrics.get(n);\n      if (metric instanceof Counter) {\n        Counter counter = (Counter) metric;\n        response.add(n, counterToNamedList(counter));\n      } else if (metric instanceof Gauge) {\n        Gauge gauge = (Gauge) metric;\n        response.add(n, gaugeToNamedList(gauge));\n      } else if (metric instanceof Meter) {\n        Meter meter = (Meter) metric;\n        response.add(n, meterToNamedList(meter));\n      } else if (metric instanceof Timer) {\n        Timer timer = (Timer) metric;\n        response.add(n, timerToNamedList(timer));\n      } else if (metric instanceof Histogram) {\n        Histogram histogram = (Histogram) metric;\n        response.add(n, histogramToNamedList(histogram));\n      }\n    });\n    return response;\n  }\n\n","bugFix":null,"bugIntro":["81b762f1026e8caf0a77c73d3db32b2a5db9107b"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aa3636f020dd2f593d4df8cf2a55798e984ae749":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["aa3636f020dd2f593d4df8cf2a55798e984ae749"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aa3636f020dd2f593d4df8cf2a55798e984ae749"]},"commit2Childs":{"aa3636f020dd2f593d4df8cf2a55798e984ae749":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aa3636f020dd2f593d4df8cf2a55798e984ae749","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"491c9672ec42582fe43960452dbd37f1c80fe0f0":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}