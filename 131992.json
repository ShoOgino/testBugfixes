{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions).mjava","commits":[{"id":"95323da8eca89d45766013f5b300a865a5ac7dfb","date":1348933777,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat#testTerms(Fields,EnumSet[Option],IndexOptions).mjava","sourceNew":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options, final IndexOptions maxIndexOptions) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options, final IndexOptions maxIndexOptions) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29baaefef1b62d76a3370ff72a0fe5f9bd84e365","date":1348949582,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions).mjava","sourceNew":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options, final IndexOptions maxIndexOptions) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["95323da8eca89d45766013f5b300a865a5ac7dfb"],"95323da8eca89d45766013f5b300a865a5ac7dfb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"]},"commit2Childs":{"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"95323da8eca89d45766013f5b300a865a5ac7dfb":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95323da8eca89d45766013f5b300a865a5ac7dfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}