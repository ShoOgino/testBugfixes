{"path":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT, new StandardAnalyzer(Version.LUCENE_CURRENT))\n          .setMaxFieldLength(1000000).setOpenMode(\n              create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT, new StandardAnalyzer(Version.LUCENE_CURRENT))\n          .setMaxFieldLength(1000000).setOpenMode(\n              create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/IndexHTML#main(String[]).mjava","sourceNew":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT, new StandardAnalyzer(Version.LUCENE_CURRENT))\n          .setMaxFieldLength(1000000).setOpenMode(\n              create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","sourceOld":"  /** Indexer for HTML files.*/\n  public static void main(String[] argv) {\n    try {\n      File index = new File(\"index\");\n      boolean create = false;\n      File root = null;\n\n      String usage = \"IndexHTML [-create] [-index <index>] <root_directory>\";\n\n      if (argv.length == 0) {\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      for (int i = 0; i < argv.length; i++) {\n        if (argv[i].equals(\"-index\")) {\t\t  // parse -index option\n          index = new File(argv[++i]);\n        } else if (argv[i].equals(\"-create\")) {\t  // parse -create option\n          create = true;\n        } else if (i != argv.length-1) {\n          System.err.println(\"Usage: \" + usage);\n          return;\n        } else\n          root = new File(argv[i]);\n      }\n      \n      if(root == null) {\n        System.err.println(\"Specify directory to index\");\n        System.err.println(\"Usage: \" + usage);\n        return;\n      }\n\n      Date start = new Date();\n\n      if (!create) {\t\t\t\t  // delete stale docs\n        deleting = true;\n        indexDocs(root, index, create);\n      }\n      writer = new IndexWriter(FSDirectory.open(index), new IndexWriterConfig(\n          Version.LUCENE_CURRENT, new StandardAnalyzer(Version.LUCENE_CURRENT))\n          .setMaxFieldLength(1000000).setOpenMode(\n              create ? OpenMode.CREATE : OpenMode.CREATE_OR_APPEND));\n      indexDocs(root, index, create);\t\t  // add new docs\n\n      System.out.println(\"Optimizing index...\");\n      writer.optimize();\n      writer.close();\n\n      Date end = new Date();\n\n      System.out.print(end.getTime() - start.getTime());\n      System.out.println(\" total milliseconds\");\n\n    } catch (Exception e) {\n      e.printStackTrace();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}