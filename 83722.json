{"path":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","commits":[{"id":"ba3a184cc785359756dd0a77bbdb0e4f06bf727b","date":1344450045,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList termVectors = new NamedList<Object>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(new NamedList<Object>(arr)));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList termVectors = new NamedList<Object>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(new NamedList<Object>(arr)));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList termVectors = new NamedList<Object>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(new NamedList<Object>(arr)));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList termVectors = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(new NamedList<>(arr)));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList termVectors = new NamedList<Object>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<Object>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(new NamedList<Object>(arr)));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c1af881a1691e32ac2275b4008656709aa96e369"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c1af881a1691e32ac2275b4008656709aa96e369","date":1404496493,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList<Object> termVectors = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(arr, new NamedList<Object>()));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList termVectors = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(new NamedList<>(arr)));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bugIntro":["4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e32cd9d49e5cda7e131c54c05d8e970583b7063","date":1450404956,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList<Object> termVectorsNL = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n\n          // Add metadata (that which isn't a uniqueKey value):\n          Object warningsNL = nl.get(TV_KEY_WARNINGS);\n          // assume if that if warnings is already present; we don't need to merge.\n          if (warningsNL != null && termVectorsNL.indexOf(TV_KEY_WARNINGS, 0) < 0) {\n            termVectorsNL.add(TV_KEY_WARNINGS, warningsNL);\n          }\n\n          // UniqueKey data\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (sdoc != null) {// can be null when rb.onePassDistributedQuery\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      SolrPluginUtils.removeNulls(arr, termVectorsNL);\n      rb.rsp.add(TERM_VECTORS, termVectorsNL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList<Object> termVectors = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (null == sdoc) {\n              // metadata, only need from one node, leave in order\n              if (termVectors.indexOf(key,0) < 0) {\n                termVectors.add(key, nl.getVal(i));\n              }\n            } else {\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      termVectors.addAll(SolrPluginUtils.removeNulls(arr, new NamedList<Object>()));\n      rb.rsp.add(TERM_VECTORS, termVectors);\n    }\n  }\n\n","bugFix":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b","c1af881a1691e32ac2275b4008656709aa96e369"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fbf043f7a109d13b86b6fc6fee3953b0c103c24","date":1450713625,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList<Object> termVectorsNL = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n\n          // Add metadata (that which isn't a uniqueKey value):\n          Object warningsNL = nl.get(TV_KEY_WARNINGS);\n          // assume if that if warnings is already present; we don't need to merge.\n          if (warningsNL != null && termVectorsNL.indexOf(TV_KEY_WARNINGS, 0) < 0) {\n            termVectorsNL.add(TV_KEY_WARNINGS, warningsNL);\n          }\n\n          // UniqueKey data\n          SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(nl, rb.resultIds, arr);\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      SolrPluginUtils.removeNulls(arr, termVectorsNL);\n      rb.rsp.add(TERM_VECTORS, termVectorsNL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList<Object> termVectorsNL = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n\n          // Add metadata (that which isn't a uniqueKey value):\n          Object warningsNL = nl.get(TV_KEY_WARNINGS);\n          // assume if that if warnings is already present; we don't need to merge.\n          if (warningsNL != null && termVectorsNL.indexOf(TV_KEY_WARNINGS, 0) < 0) {\n            termVectorsNL.add(TV_KEY_WARNINGS, warningsNL);\n          }\n\n          // UniqueKey data\n          for (int i=0; i < nl.size(); i++) {\n            String key = nl.getName(i);\n            ShardDoc sdoc = rb.resultIds.get(key);\n            if (sdoc != null) {// can be null when rb.onePassDistributedQuery\n              int idx = sdoc.positionInResponse;\n              arr[idx] = new NamedList.NamedListEntry<>(key, nl.getVal(i));\n            }\n          }\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      SolrPluginUtils.removeNulls(arr, termVectorsNL);\n      rb.rsp.add(TERM_VECTORS, termVectorsNL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent#finishStage(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList<Object> termVectorsNL = new NamedList<>();\n\n      @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          @SuppressWarnings({\"unchecked\"})\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n\n          // Add metadata (that which isn't a uniqueKey value):\n          Object warningsNL = nl.get(TV_KEY_WARNINGS);\n          // assume if that if warnings is already present; we don't need to merge.\n          if (warningsNL != null && termVectorsNL.indexOf(TV_KEY_WARNINGS, 0) < 0) {\n            termVectorsNL.add(TV_KEY_WARNINGS, warningsNL);\n          }\n\n          // UniqueKey data\n          SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(nl, rb.resultIds, arr);\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      SolrPluginUtils.removeNulls(arr, termVectorsNL);\n      rb.rsp.add(TERM_VECTORS, termVectorsNL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishStage(ResponseBuilder rb) {\n    if (rb.stage == ResponseBuilder.STAGE_GET_FIELDS) {\n      \n      NamedList<Object> termVectorsNL = new NamedList<>();\n      Map.Entry<String, Object>[] arr = new NamedList.NamedListEntry[rb.resultIds.size()];\n\n      for (ShardRequest sreq : rb.finished) {\n        if ((sreq.purpose & ShardRequest.PURPOSE_GET_FIELDS) == 0 || !sreq.params.getBool(COMPONENT_NAME, false)) {\n          continue;\n        }\n        for (ShardResponse srsp : sreq.responses) {\n          NamedList<Object> nl = (NamedList<Object>)srsp.getSolrResponse().getResponse().get(TERM_VECTORS);\n\n          // Add metadata (that which isn't a uniqueKey value):\n          Object warningsNL = nl.get(TV_KEY_WARNINGS);\n          // assume if that if warnings is already present; we don't need to merge.\n          if (warningsNL != null && termVectorsNL.indexOf(TV_KEY_WARNINGS, 0) < 0) {\n            termVectorsNL.add(TV_KEY_WARNINGS, warningsNL);\n          }\n\n          // UniqueKey data\n          SolrPluginUtils.copyNamedListIntoArrayByDocPosInResponse(nl, rb.resultIds, arr);\n        }\n      }\n      // remove nulls in case not all docs were able to be retrieved\n      SolrPluginUtils.removeNulls(arr, termVectorsNL);\n      rb.rsp.add(TERM_VECTORS, termVectorsNL);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"4e32cd9d49e5cda7e131c54c05d8e970583b7063":["c1af881a1691e32ac2275b4008656709aa96e369"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba3a184cc785359756dd0a77bbdb0e4f06bf727b"],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"c1af881a1691e32ac2275b4008656709aa96e369":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c1af881a1691e32ac2275b4008656709aa96e369"],"ba3a184cc785359756dd0a77bbdb0e4f06bf727b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"4e32cd9d49e5cda7e131c54c05d8e970583b7063":["6fbf043f7a109d13b86b6fc6fee3953b0c103c24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba3a184cc785359756dd0a77bbdb0e4f06bf727b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"6fbf043f7a109d13b86b6fc6fee3953b0c103c24":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"c1af881a1691e32ac2275b4008656709aa96e369":["4e32cd9d49e5cda7e131c54c05d8e970583b7063"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}