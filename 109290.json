{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","commits":[{"id":"a5aa159e1ac4009d23cea92797d3804da4f5e7ad","date":1264041909,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"contrib/snowball/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    System.err.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    System.err.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42607aa380c892dc1ec0ab26e86a575c28e13618","date":1268641604,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    System.err.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballVocab#assertCorrectOutput(String,String).mjava","sourceNew":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","sourceOld":"  /**\n   * For the supplied language, run the stemmer against all strings in voc.txt\n   * The output should be the same as the string in output.txt\n   */\n  private void assertCorrectOutput(String snowballLanguage, String dataDirectory)\n      throws IOException {\n    if (VERBOSE) System.out.println(\"checking snowball language: \" + snowballLanguage);\n    TokenStream filter = new SnowballFilter(tokenizer, snowballLanguage);\n    InputStream vocFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/voc.txt\"));\n    InputStream outputFile = new FileInputStream(new File(dataRoot, \n        dataDirectory + \"/output.txt\"));\n    BufferedReader vocReader = new BufferedReader(new InputStreamReader(\n        vocFile, \"UTF-8\"));\n    BufferedReader outputReader = new BufferedReader(new InputStreamReader(\n        outputFile, \"UTF-8\"));\n    String inputWord = null;\n    while ((inputWord = vocReader.readLine()) != null) {\n      String expectedWord = outputReader.readLine();\n      assertNotNull(expectedWord);\n      tokenizer.reset(new StringReader(inputWord));\n      filter.reset();\n      assertTokenStreamContents(filter, new String[] {expectedWord});\n    }\n    vocReader.close();\n    outputReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42607aa380c892dc1ec0ab26e86a575c28e13618":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["42607aa380c892dc1ec0ab26e86a575c28e13618"]},"commit2Childs":{"a5aa159e1ac4009d23cea92797d3804da4f5e7ad":["42607aa380c892dc1ec0ab26e86a575c28e13618"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5aa159e1ac4009d23cea92797d3804da4f5e7ad"],"42607aa380c892dc1ec0ab26e86a575c28e13618":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}