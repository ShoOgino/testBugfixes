{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","commits":[{"id":"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7","date":1411591737,"type":1,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,String).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, String origOldName) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected;\n    if (compare(origOldName, \"24\") < 0) {\n      expected = 44;\n    } else {\n      expected = 45;\n    }\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), null, 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f3189d15ef66702bbb45771403a68793d5cd137","date":1433872507,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    if (nameVersion.onOrAfter(Version.LUCENE_5_3_0)) {\n      assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    }\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    if (nameVersion.onOrAfter(Version.LUCENE_5_3_0)) {\n      assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    }\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    if (nameVersion.onOrAfter(Version.LUCENE_5_3_0)) {\n      assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    }\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    StoredDocument d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98c87780d12c9a7445efb0e3edc4208e0546f140","date":1456917407,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    if (nameVersion.onOrAfter(Version.LUCENE_5_3_0)) {\n      assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    }\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    if (nameVersion.onOrAfter(Version.LUCENE_5_3_0)) {\n      assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    }\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"feb4029567b43f074ed7b6eb8fb126d355075dfd","date":1544812585,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#changeIndexWithAdds(Random,Directory,Version).mjava","sourceNew":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.getDocStats().numDocs);\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","sourceOld":"  public void changeIndexWithAdds(Random random, Directory dir, Version nameVersion) throws IOException {\n    SegmentInfos infos = SegmentInfos.readLatestCommit(dir);\n    assertEquals(nameVersion, infos.getCommitLuceneVersion());\n    assertEquals(nameVersion, infos.getMinSegmentLuceneVersion());\n\n    // open writer\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                                 .setOpenMode(OpenMode.APPEND)\n                                                 .setMergePolicy(newLogMergePolicy()));\n    // add 10 docs\n    for(int i=0;i<10;i++) {\n      addDoc(writer, 35+i);\n    }\n\n    // make sure writer sees right total -- writer seems not to know about deletes in .del?\n    final int expected = 45;\n    assertEquals(\"wrong doc count\", expected, writer.numDocs());\n    writer.close();\n\n    // make sure searching sees right # hits\n    IndexReader reader = DirectoryReader.open(dir);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    Document d = searcher.getIndexReader().document(hits[0].doc);\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    doTestHits(hits, 44, searcher.getIndexReader());\n    reader.close();\n\n    // fully merge\n    writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random))\n                                    .setOpenMode(OpenMode.APPEND)\n                                    .setMergePolicy(newLogMergePolicy()));\n    writer.forceMerge(1);\n    writer.close();\n\n    reader = DirectoryReader.open(dir);\n    searcher = newSearcher(reader);\n    hits = searcher.search(new TermQuery(new Term(\"content\", \"aaa\")), 1000).scoreDocs;\n    assertEquals(\"wrong number of hits\", 44, hits.length);\n    d = searcher.doc(hits[0].doc);\n    doTestHits(hits, 44, searcher.getIndexReader());\n    assertEquals(\"wrong first document\", \"0\", d.get(\"id\"));\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98c87780d12c9a7445efb0e3edc4208e0546f140":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","98c87780d12c9a7445efb0e3edc4208e0546f140"],"8f3189d15ef66702bbb45771403a68793d5cd137":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["8f3189d15ef66702bbb45771403a68793d5cd137"]},"commit2Childs":{"98c87780d12c9a7445efb0e3edc4208e0546f140":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"feb4029567b43f074ed7b6eb8fb126d355075dfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["8f3189d15ef66702bbb45771403a68793d5cd137"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["feb4029567b43f074ed7b6eb8fb126d355075dfd"],"8f3189d15ef66702bbb45771403a68793d5cd137":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["98c87780d12c9a7445efb0e3edc4208e0546f140","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}