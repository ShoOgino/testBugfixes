{"path":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":null,"sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"/dev/null","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8453ebc6118c1d077125edc1cf6fcebf372d761f","date":1295453502,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    if (synonyms != null) {\n      List<String> wlist=null;\n      try {\n        File synonymFile = new File(synonyms);\n        if (synonymFile.exists()) {\n          wlist = loader.getLines(synonyms);\n        } else  {\n          List<String> files = StrUtils.splitFileNames(synonyms);\n          wlist = new ArrayList<String>();\n          for (String file : files) {\n            List<String> lines = loader.getLines(file.trim());\n            wlist.addAll(lines);\n          }\n        }\n      } catch (IOException e) {\n        throw new RuntimeException(e);\n      }\n      synMap = new SynonymMap(ignoreCase);\n      parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd04250707c52f2a0cecd6303dcc85617b122f6d","date":1304372426,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    List<String> wlist=null;\n    try {\n      File synonymFile = new File(synonyms);\n      if (synonymFile.exists()) {\n        wlist = loader.getLines(synonyms);\n      } else  {\n        List<String> files = StrUtils.splitFileNames(synonyms);\n        wlist = new ArrayList<String>();\n        for (String file : files) {\n          List<String> lines = loader.getLines(file.trim());\n          wlist.addAll(lines);\n        }\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/SynonymFilterFactory#inform(ResourceLoader).mjava","sourceNew":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","sourceOld":"  public void inform(ResourceLoader loader) {\n    String synonyms = args.get(\"synonyms\");\n    if (synonyms == null)\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Missing required argument 'synonyms'.\");\n    boolean ignoreCase = getBoolean(\"ignoreCase\", false);\n    boolean expand = getBoolean(\"expand\", true);\n\n    String tf = args.get(\"tokenizerFactory\");\n    TokenizerFactory tokFactory = null;\n    if( tf != null ){\n      tokFactory = loadTokenizerFactory( loader, tf, args );\n    }\n\n    Iterable<String> wlist=loadRules( synonyms, loader );\n    \n    synMap = new SynonymMap(ignoreCase);\n    parseRules(wlist, synMap, \"=>\", \",\", expand,tokFactory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["dd04250707c52f2a0cecd6303dcc85617b122f6d","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8453ebc6118c1d077125edc1cf6fcebf372d761f":["1da8d55113b689b06716246649de6f62430f15c0"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["1da8d55113b689b06716246649de6f62430f15c0","8453ebc6118c1d077125edc1cf6fcebf372d761f"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["8453ebc6118c1d077125edc1cf6fcebf372d761f","dd04250707c52f2a0cecd6303dcc85617b122f6d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","8453ebc6118c1d077125edc1cf6fcebf372d761f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["29ef99d61cda9641b6250bf9567329a6e65f901d","dd04250707c52f2a0cecd6303dcc85617b122f6d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["dd04250707c52f2a0cecd6303dcc85617b122f6d"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"dd04250707c52f2a0cecd6303dcc85617b122f6d":["8453ebc6118c1d077125edc1cf6fcebf372d761f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"8453ebc6118c1d077125edc1cf6fcebf372d761f":["e79a6d080bdd5b2a8f56342cf571b5476de04180","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","dd04250707c52f2a0cecd6303dcc85617b122f6d"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"1da8d55113b689b06716246649de6f62430f15c0":["8453ebc6118c1d077125edc1cf6fcebf372d761f","e79a6d080bdd5b2a8f56342cf571b5476de04180","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"dd04250707c52f2a0cecd6303dcc85617b122f6d":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e79a6d080bdd5b2a8f56342cf571b5476de04180","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}