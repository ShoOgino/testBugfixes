{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","commits":[{"id":"40dce2b6d4360eb09fa16fb6c40a18b25507ed73","date":1383035822,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"/dev/null","sourceNew":"  public boolean hasCollection(String coll){\n    return collectionStates.get(coll)!=null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  public boolean hasCollection(String coll) {\n    if (collectionStates.containsKey(coll)) return true;\n    return stateReader.getAllCollections().contains(coll);\n  }\n\n","sourceOld":"  public boolean hasCollection(String coll){\n    return collectionStates.get(coll)!=null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5a233896b7f16ac9b4ed601ef8207d98f1f0500","date":1398857046,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  public boolean hasCollection(String coll) {\n    return  collectionStates.containsKey(coll) ;\n  }\n\n","sourceOld":"  public boolean hasCollection(String coll) {\n    if (collectionStates.containsKey(coll)) return true;\n    return stateReader.getAllCollections().contains(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6f693ed86f289b2e42b46684409b3997f2c264a","date":1404319832,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  public boolean hasCollection(String coll) {\n    if (collectionStates.containsKey(coll)) return true;\n    return stateReader.getAllCollections().contains(coll);\n  }\n\n","sourceOld":"  public boolean hasCollection(String coll) {\n    return  collectionStates.containsKey(coll) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4c07fa58a256dccf8b95364855fd5e9ad4d1401","date":1404386015,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  public boolean hasCollection(String coll) {\n    return  collectionStates.containsKey(coll) ;\n  }\n\n","sourceOld":"  public boolean hasCollection(String coll) {\n    if (collectionStates.containsKey(coll)) return true;\n    return stateReader.getAllCollections().contains(coll);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","date":1440482195,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","sourceOld":"  public boolean hasCollection(String coll) {\n    return  collectionStates.containsKey(coll) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6681d02f2302c363be938426e68f8dfd090cc1bf","date":1575339019,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#hasCollection(String).mjava","sourceNew":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","sourceOld":"  /**\n   * Returns true if the specified collection name exists, false otherwise.\n   *\n   * Implementation note: This method resolves the collection reference by calling\n   * {@link CollectionRef#get()} which can make a call to ZooKeeper. This is necessary\n   * because the semantics of how collection list is loaded have changed in SOLR-6629.\n   * Please see javadocs in {@link ZkStateReader#refreshCollectionList(Watcher)}\n   */\n  public boolean hasCollection(String collectionName) {\n    return getCollectionOrNull(collectionName) != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","6681d02f2302c363be938426e68f8dfd090cc1bf"],"a6f693ed86f289b2e42b46684409b3997f2c264a":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6681d02f2302c363be938426e68f8dfd090cc1bf"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"a6f693ed86f289b2e42b46684409b3997f2c264a":["f4c07fa58a256dccf8b95364855fd5e9ad4d1401"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["d3aa683bba99315838c968fefedf3d74f44aa993","6681d02f2302c363be938426e68f8dfd090cc1bf"],"f4c07fa58a256dccf8b95364855fd5e9ad4d1401":["8bf04c3f77a2936f29948b9c0dd215d82d43f5cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["40dce2b6d4360eb09fa16fb6c40a18b25507ed73"],"a5a233896b7f16ac9b4ed601ef8207d98f1f0500":["a6f693ed86f289b2e42b46684409b3997f2c264a"],"8bf04c3f77a2936f29948b9c0dd215d82d43f5cf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"40dce2b6d4360eb09fa16fb6c40a18b25507ed73":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["a5a233896b7f16ac9b4ed601ef8207d98f1f0500"],"6681d02f2302c363be938426e68f8dfd090cc1bf":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}