{"path":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.perDocTvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.perDocTvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"579b8e50af5927e2366553f5e237b2c6e46b258e","date":1274137954,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.perDocTvf.reset();\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"833a7987bc1c94455fde83e3311f72bddedcfb93","date":1279951470,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n    \n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":["5ef87af8c7bd0f8429622b83aa74202383f2e757","5ef87af8c7bd0f8429622b83aa74202383f2e757"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","date":1292695408,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++) {\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      }\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID;\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++) {\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      }\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID;\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++)\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID + docWriter.getDocStoreOffset();\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(TermsHash).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":"  @Override\n  void finishDocument(TermsHash termsHash) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    if (!hasVectors) {\n      return;\n    }\n\n    initTermVectorsWriter();\n\n    fill(docState.docID);\n\n    // Append term vectors to the real outputs:\n    long pointer = tvd.getFilePointer();\n    tvx.writeLong(pointer);\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(numVectorFields);\n    if (numVectorFields > 0) {\n      for(int i=0;i<numVectorFields;i++) {\n        tvd.writeVInt(perFields[i].fieldInfo.number);\n      }\n      long lastPos = tvf.getFilePointer();\n      perFields[0].finishDocument();\n      for(int i=1;i<numVectorFields;i++) {\n        long pos = tvf.getFilePointer();\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n        perFields[i].finishDocument();\n      }\n    }\n\n    assert lastDocID == docState.docID;\n\n    lastDocID++;\n\n    termsHash.reset();\n    reset();\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++) {\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      }\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID;\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":null,"sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++) {\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      }\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID;\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/TermVectorsTermsWriter#finishDocument(PerDoc).mjava","sourceNew":null,"sourceOld":"  synchronized void finishDocument(PerDoc perDoc) throws IOException {\n\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument start\");\n\n    initTermVectorsWriter();\n\n    fill(perDoc.docID);\n\n    // Append term vectors to the real outputs:\n    tvx.writeLong(tvd.getFilePointer());\n    tvx.writeLong(tvf.getFilePointer());\n    tvd.writeVInt(perDoc.numVectorFields);\n    if (perDoc.numVectorFields > 0) {\n      for(int i=0;i<perDoc.numVectorFields;i++) {\n        tvd.writeVInt(perDoc.fieldNumbers[i]);\n      }\n      assert 0 == perDoc.fieldPointers[0];\n      long lastPos = perDoc.fieldPointers[0];\n      for(int i=1;i<perDoc.numVectorFields;i++) {\n        long pos = perDoc.fieldPointers[i];\n        tvd.writeVLong(pos-lastPos);\n        lastPos = pos;\n      }\n      perDoc.perDocTvf.writeTo(tvf);\n      perDoc.numVectorFields = 0;\n    }\n\n    assert lastDocID == perDoc.docID;\n\n    lastDocID++;\n\n    perDoc.reset();\n    free(perDoc);\n    assert docWriter.writer.testPoint(\"TermVectorsTermsWriter.finishDocument end\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["579b8e50af5927e2366553f5e237b2c6e46b258e"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["4948bc5d29211f0c9b5ccc31b2632cdd27066ea5","833a7987bc1c94455fde83e3311f72bddedcfb93"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["579b8e50af5927e2366553f5e237b2c6e46b258e","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"579b8e50af5927e2366553f5e237b2c6e46b258e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["579b8e50af5927e2366553f5e237b2c6e46b258e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["6c18273ea5b3974d2f30117f46f1ae416c28f727"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["833a7987bc1c94455fde83e3311f72bddedcfb93"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"579b8e50af5927e2366553f5e237b2c6e46b258e":["6c18273ea5b3974d2f30117f46f1ae416c28f727","ab5cb6a74aefb78aa0569857970b9151dfe2e787","4948bc5d29211f0c9b5ccc31b2632cdd27066ea5"],"4948bc5d29211f0c9b5ccc31b2632cdd27066ea5":["a3776dccca01c11e7046323cfad46a3b4a471233","b3e06be49006ecac364d39d12b9c9f74882f9b9f","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"833a7987bc1c94455fde83e3311f72bddedcfb93":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["579b8e50af5927e2366553f5e237b2c6e46b258e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}