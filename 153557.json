{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","commits":[{"id":"6256acedd658c13275a01e4ba106a621956a22f6","date":1400192928,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a0b58a171748f1022e63a0483908e6f50b0abf","date":1400686165,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        sumDocFreq += state.docFreq;\n        sumTotalTermFreq += state.totalTermFreq;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20","date":1400712483,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","date":1400786907,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/idversion/VersionBlockTreeTermsWriter.TermsWriter#write(BytesRef,TermsEnum).mjava","sourceNew":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","sourceOld":"    /** Writes one term's worth of postings. */\n    public void write(BytesRef text, TermsEnum termsEnum) throws IOException {\n\n      BlockTermState state = postingsWriter.writeTerm(text, termsEnum, docsSeen);\n      // TODO: LUCENE-5693: we don't need this check if we fix IW to not send deleted docs to us on flush:\n      if (state != null && ((IDVersionPostingsWriter) postingsWriter).lastDocID != -1) {\n        assert state.docFreq != 0;\n        assert fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY || state.totalTermFreq >= state.docFreq: \"postingsWriter=\" + postingsWriter;\n        blockBuilder.add(Util.toIntsRef(text, scratchIntsRef), noOutputs.getNoOutput());\n\n        PendingTerm term = new PendingTerm(BytesRef.deepCopyOf(text), state);\n        pending.add(term);\n        numTerms++;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"6256acedd658c13275a01e4ba106a621956a22f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["6256acedd658c13275a01e4ba106a621956a22f6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e":[],"4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e"],"6256acedd658c13275a01e4ba106a621956a22f6":["a2a0b58a171748f1022e63a0483908e6f50b0abf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6256acedd658c13275a01e4ba106a621956a22f6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a2a0b58a171748f1022e63a0483908e6f50b0abf":["4ae62bdfdfc2a17d4df98e6004938c8b0eed0a20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3cf3e973ce145ef8b164e2e7c0d57cf807cf9a6e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}