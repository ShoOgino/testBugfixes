{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testPositionLengthAndType().mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testPositionLengthAndType().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts.\n   */\n  public void testPositionLengthAndType() throws Exception {\n    String testFile =\n        \"spider man, spiderman\\n\" +\n        \"usa,united states,u s a,united states of america\";\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n\n    parser.parse(new StringReader(testFile));\n    analyzer.close();\n\n    SynonymMap map = parser.build();\n    analyzer = getFlattenAnalyzer(parser, true);\n\n    BytesRef value = Util.get(map.fst, Util.toUTF32(new CharsRef(\"usa\"), new IntsRefBuilder()));\n    ByteArrayDataInput bytesReader = new ByteArrayDataInput(value.bytes, value.offset, value.length);\n    final int code = bytesReader.readVInt();\n    final int count = code >>> 1;\n\n    final int[] synonymsIdxs = new int[count];\n    for (int i = 0; i < count; i++) {\n      synonymsIdxs[i] = bytesReader.readVInt();\n    }\n\n    BytesRef scratchBytes = new BytesRef();\n    map.words.get(synonymsIdxs[2], scratchBytes);\n\n    int synonymLength = 1;\n    for (int i = scratchBytes.offset; i < scratchBytes.offset + scratchBytes.length; i++) {\n      if (scratchBytes.bytes[i] == SynonymMap.WORD_SEPARATOR) {\n        synonymLength++;\n      }\n    }\n\n    assertEquals(count, 3);\n    assertEquals(synonymLength, 4);\n\n    assertAnalyzesTo(analyzer, \"spider man\",\n                     new String[]{\"spiderman\", \"spider\", \"man\"},\n                     new int[]{0, 0, 7},\n                     new int[]{10, 6, 10},\n                     new String[]{\"SYNONYM\", \"word\", \"word\"},\n                     new int[]{1, 0, 1},\n                     new int[]{2, 1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing spider man\",\n                              new String[]{\"amazing\", \"spiderman\", \"spider\", \"man\"},\n                              new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n                              new int[]{1, 1, 0, 1},\n                              new int[]{1, 2, 1, 1});\n\n    // System.out.println(toDot(getAnalyzer(parser, true).tokenStream(\"field\", new StringReader(\"the usa is wealthy\"))));\n\n    assertAnalyzesTo(analyzer, \"the united states of america is wealthy\",\n                     new String[]{\"the\", \"usa\", \"united\", \"u\", \"united\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,        4,   4,        4,       11,  11,       11,   18,  18,        21,   29,        32},\n                     new int[]      {3,    28,       10,  10,       10,       28,  17,       17,   28,  20,        28,   31,        39},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"word\", \"word\", \"word\", \"word\"},\n                     new int[]      {1,     1,        0,   0,        0,        1,   0,        0,    1,   0,         1,    1,         1},\n                     new int[]      {1,     4,        1,   1,        1,        3,   1,        1,    2,   1,         1,    1,         1});\n\n    assertAnalyzesToPositions(analyzer, \"spiderman\",\n                              new String[]{\"spider\", \"spiderman\", \"man\"},\n                              new String[]{\"SYNONYM\", \"word\", \"SYNONYM\"},\n                              new int[]{1, 0, 1},\n                              new int[]{1, 2, 1});\n\n    assertAnalyzesTo(analyzer, \"spiderman enemies\",\n                     new String[]{\"spider\", \"spiderman\", \"man\", \"enemies\"},\n                     new int[]{0, 0, 0, 10},\n                     new int[]{9, 9, 9, 17},\n                     new String[]{\"SYNONYM\", \"word\", \"SYNONYM\", \"word\"},\n                     new int[]{1, 0, 1, 1},\n                     new int[]{1, 2, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"the usa is wealthy\",\n                     new String[]{\"the\", \"united\", \"u\", \"united\", \"usa\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,        4,   4,        4,     4,        4,   4,        4,   4,    4,         4,    8,        11},\n                     new int[]      {3,        7,   7,        7,     7,        7,   7,        7,   7,    7,         7,   10,        18},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,        1,   0,        0,     0,        1,   0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,        1,   1,        1,     4,        3,   1,        1,   2,    1,         1,    1,         1});\n    \n    assertAllStrings(analyzer, \"the usa is wealthy\", new String[] {\n        \"the usa is wealthy\",\n        \"the united states is wealthy\",\n        \"the u s a is wealthy\",\n        \"the united states of america is wealthy\",\n        // Wrong. Here only due to \"sausagization\" of the multi word synonyms.\n        \"the u states is wealthy\",\n        \"the u states a is wealthy\",\n        \"the u s of america is wealthy\",\n        \"the u states of america is wealthy\",\n        \"the united s a is wealthy\",\n        \"the united states a is wealthy\",\n        \"the united s of america is wealthy\"});\n\n    assertAnalyzesTo(analyzer, \"the united states is wealthy\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1},\n                     false);\n\n    assertAnalyzesTo(analyzer, \"the united states of balance\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"of\", \"balance\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1});\n\n    analyzer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testPositionLengthAndType().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts.\n   */\n  public void testPositionLengthAndType() throws Exception {\n    String testFile =\n        \"spider man, spiderman\\n\" +\n        \"usa,united states,u s a,united states of america\";\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n\n    parser.parse(new StringReader(testFile));\n    analyzer.close();\n\n    SynonymMap map = parser.build();\n    analyzer = getFlattenAnalyzer(parser, true);\n\n    BytesRef value = Util.get(map.fst, Util.toUTF32(new CharsRef(\"usa\"), new IntsRefBuilder()));\n    ByteArrayDataInput bytesReader = new ByteArrayDataInput(value.bytes, value.offset, value.length);\n    final int code = bytesReader.readVInt();\n    final int count = code >>> 1;\n\n    final int[] synonymsIdxs = new int[count];\n    for (int i = 0; i < count; i++) {\n      synonymsIdxs[i] = bytesReader.readVInt();\n    }\n\n    BytesRef scratchBytes = new BytesRef();\n    map.words.get(synonymsIdxs[2], scratchBytes);\n\n    int synonymLength = 1;\n    for (int i = scratchBytes.offset; i < scratchBytes.offset + scratchBytes.length; i++) {\n      if (scratchBytes.bytes[i] == SynonymMap.WORD_SEPARATOR) {\n        synonymLength++;\n      }\n    }\n\n    assertEquals(count, 3);\n    assertEquals(synonymLength, 4);\n\n    assertAnalyzesTo(analyzer, \"spider man\",\n                     new String[]{\"spiderman\", \"spider\", \"man\"},\n                     new int[]{0, 0, 7},\n                     new int[]{10, 6, 10},\n                     new String[]{\"SYNONYM\", \"word\", \"word\"},\n                     new int[]{1, 0, 1},\n                     new int[]{2, 1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing spider man\",\n                              new String[]{\"amazing\", \"spiderman\", \"spider\", \"man\"},\n                              new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n                              new int[]{1, 1, 0, 1},\n                              new int[]{1, 2, 1, 1});\n\n    // System.out.println(toDot(getAnalyzer(parser, true).tokenStream(\"field\", new StringReader(\"the usa is wealthy\"))));\n\n    assertAnalyzesTo(analyzer, \"the united states of america is wealthy\",\n                     new String[]{\"the\", \"usa\", \"united\", \"u\", \"united\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,        4,   4,        4,       11,  11,       11,   18,  18,        21,   29,        32},\n                     new int[]      {3,    28,       10,  10,       10,       28,  17,       17,   28,  20,        28,   31,        39},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"word\", \"word\", \"word\", \"word\"},\n                     new int[]      {1,     1,        0,   0,        0,        1,   0,        0,    1,   0,         1,    1,         1},\n                     new int[]      {1,     4,        1,   1,        1,        3,   1,        1,    2,   1,         1,    1,         1});\n\n    assertAnalyzesToPositions(analyzer, \"spiderman\",\n                              new String[]{\"spider\", \"spiderman\", \"man\"},\n                              new String[]{\"SYNONYM\", \"word\", \"SYNONYM\"},\n                              new int[]{1, 0, 1},\n                              new int[]{1, 2, 1});\n\n    assertAnalyzesTo(analyzer, \"spiderman enemies\",\n                     new String[]{\"spider\", \"spiderman\", \"man\", \"enemies\"},\n                     new int[]{0, 0, 0, 10},\n                     new int[]{9, 9, 9, 17},\n                     new String[]{\"SYNONYM\", \"word\", \"SYNONYM\", \"word\"},\n                     new int[]{1, 0, 1, 1},\n                     new int[]{1, 2, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"the usa is wealthy\",\n                     new String[]{\"the\", \"united\", \"u\", \"united\", \"usa\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,        4,   4,        4,     4,        4,   4,        4,   4,    4,         4,    8,        11},\n                     new int[]      {3,        7,   7,        7,     7,        7,   7,        7,   7,    7,         7,   10,        18},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,        1,   0,        0,     0,        1,   0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,        1,   1,        1,     4,        3,   1,        1,   2,    1,         1,    1,         1});\n    \n    assertAllStrings(analyzer, \"the usa is wealthy\", new String[] {\n        \"the usa is wealthy\",\n        \"the united states is wealthy\",\n        \"the u s a is wealthy\",\n        \"the united states of america is wealthy\",\n        // Wrong. Here only due to \"sausagization\" of the multi word synonyms.\n        \"the u states is wealthy\",\n        \"the u states a is wealthy\",\n        \"the u s of america is wealthy\",\n        \"the u states of america is wealthy\",\n        \"the united s a is wealthy\",\n        \"the united states a is wealthy\",\n        \"the united s of america is wealthy\"});\n\n    assertAnalyzesTo(analyzer, \"the united states is wealthy\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1},\n                     false);\n\n    assertAnalyzesTo(analyzer, \"the united states of balance\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"of\", \"balance\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1});\n\n    analyzer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testPositionLengthAndType().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testPositionLengthAndType().mjava","sourceNew":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts.\n   */\n  public void testPositionLengthAndType() throws Exception {\n    String testFile =\n        \"spider man, spiderman\\n\" +\n        \"usa,united states,u s a,united states of america\";\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n\n    parser.parse(new StringReader(testFile));\n    analyzer.close();\n\n    SynonymMap map = parser.build();\n    analyzer = getFlattenAnalyzer(parser, true);\n\n    BytesRef value = Util.get(map.fst, Util.toUTF32(new CharsRef(\"usa\"), new IntsRefBuilder()));\n    ByteArrayDataInput bytesReader = new ByteArrayDataInput(value.bytes, value.offset, value.length);\n    final int code = bytesReader.readVInt();\n    final int count = code >>> 1;\n\n    final int[] synonymsIdxs = new int[count];\n    for (int i = 0; i < count; i++) {\n      synonymsIdxs[i] = bytesReader.readVInt();\n    }\n\n    BytesRef scratchBytes = new BytesRef();\n    map.words.get(synonymsIdxs[2], scratchBytes);\n\n    int synonymLength = 1;\n    for (int i = scratchBytes.offset; i < scratchBytes.offset + scratchBytes.length; i++) {\n      if (scratchBytes.bytes[i] == SynonymMap.WORD_SEPARATOR) {\n        synonymLength++;\n      }\n    }\n\n    assertEquals(count, 3);\n    assertEquals(synonymLength, 4);\n\n    assertAnalyzesTo(analyzer, \"spider man\",\n                     new String[]{\"spiderman\", \"spider\", \"man\"},\n                     new int[]{0, 0, 7},\n                     new int[]{10, 6, 10},\n                     new String[]{\"SYNONYM\", \"word\", \"word\"},\n                     new int[]{1, 0, 1},\n                     new int[]{2, 1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing spider man\",\n                              new String[]{\"amazing\", \"spiderman\", \"spider\", \"man\"},\n                              new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n                              new int[]{1, 1, 0, 1},\n                              new int[]{1, 2, 1, 1});\n\n    // System.out.println(toDot(getAnalyzer(parser, true).tokenStream(\"field\", new StringReader(\"the usa is wealthy\"))));\n\n    assertAnalyzesTo(analyzer, \"the united states of america is wealthy\",\n                     new String[]{\"the\", \"usa\", \"united\", \"u\", \"united\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,        4,   4,        4,       11,  11,       11,   18,  18,        21,   29,        32},\n                     new int[]      {3,    28,       10,  10,       10,       28,  17,       17,   28,  20,        28,   31,        39},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"word\", \"word\", \"word\", \"word\"},\n                     new int[]      {1,     1,        0,   0,        0,        1,   0,        0,    1,   0,         1,    1,         1},\n                     new int[]      {1,     4,        1,   1,        1,        3,   1,        1,    2,   1,         1,    1,         1});\n\n    assertAnalyzesToPositions(analyzer, \"spiderman\",\n                              new String[]{\"spider\", \"spiderman\", \"man\"},\n                              new String[]{\"SYNONYM\", \"word\", \"SYNONYM\"},\n                              new int[]{1, 0, 1},\n                              new int[]{1, 2, 1});\n\n    assertAnalyzesTo(analyzer, \"spiderman enemies\",\n                     new String[]{\"spider\", \"spiderman\", \"man\", \"enemies\"},\n                     new int[]{0, 0, 0, 10},\n                     new int[]{9, 9, 9, 17},\n                     new String[]{\"SYNONYM\", \"word\", \"SYNONYM\", \"word\"},\n                     new int[]{1, 0, 1, 1},\n                     new int[]{1, 2, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"the usa is wealthy\",\n                     new String[]{\"the\", \"united\", \"u\", \"united\", \"usa\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,        4,   4,        4,     4,        4,   4,        4,   4,    4,         4,    8,        11},\n                     new int[]      {3,        7,   7,        7,     7,        7,   7,        7,   7,    7,         7,   10,        18},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,        1,   0,        0,     0,        1,   0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,        1,   1,        1,     4,        3,   1,        1,   2,    1,         1,    1,         1});\n    \n    assertGraphStrings(analyzer, \"the usa is wealthy\", new String[] {\n        \"the usa is wealthy\",\n        \"the united states is wealthy\",\n        \"the u s a is wealthy\",\n        \"the united states of america is wealthy\",\n        // Wrong. Here only due to \"sausagization\" of the multi word synonyms.\n        \"the u states is wealthy\",\n        \"the u states a is wealthy\",\n        \"the u s of america is wealthy\",\n        \"the u states of america is wealthy\",\n        \"the united s a is wealthy\",\n        \"the united states a is wealthy\",\n        \"the united s of america is wealthy\"});\n\n    assertAnalyzesTo(analyzer, \"the united states is wealthy\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1},\n                     false);\n\n    assertAnalyzesTo(analyzer, \"the united states of balance\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"of\", \"balance\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1});\n\n    analyzer.close();\n  }\n\n","sourceOld":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts.\n   */\n  public void testPositionLengthAndType() throws Exception {\n    String testFile =\n        \"spider man, spiderman\\n\" +\n        \"usa,united states,u s a,united states of america\";\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n\n    parser.parse(new StringReader(testFile));\n    analyzer.close();\n\n    SynonymMap map = parser.build();\n    analyzer = getFlattenAnalyzer(parser, true);\n\n    BytesRef value = Util.get(map.fst, Util.toUTF32(new CharsRef(\"usa\"), new IntsRefBuilder()));\n    ByteArrayDataInput bytesReader = new ByteArrayDataInput(value.bytes, value.offset, value.length);\n    final int code = bytesReader.readVInt();\n    final int count = code >>> 1;\n\n    final int[] synonymsIdxs = new int[count];\n    for (int i = 0; i < count; i++) {\n      synonymsIdxs[i] = bytesReader.readVInt();\n    }\n\n    BytesRef scratchBytes = new BytesRef();\n    map.words.get(synonymsIdxs[2], scratchBytes);\n\n    int synonymLength = 1;\n    for (int i = scratchBytes.offset; i < scratchBytes.offset + scratchBytes.length; i++) {\n      if (scratchBytes.bytes[i] == SynonymMap.WORD_SEPARATOR) {\n        synonymLength++;\n      }\n    }\n\n    assertEquals(count, 3);\n    assertEquals(synonymLength, 4);\n\n    assertAnalyzesTo(analyzer, \"spider man\",\n                     new String[]{\"spiderman\", \"spider\", \"man\"},\n                     new int[]{0, 0, 7},\n                     new int[]{10, 6, 10},\n                     new String[]{\"SYNONYM\", \"word\", \"word\"},\n                     new int[]{1, 0, 1},\n                     new int[]{2, 1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing spider man\",\n                              new String[]{\"amazing\", \"spiderman\", \"spider\", \"man\"},\n                              new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n                              new int[]{1, 1, 0, 1},\n                              new int[]{1, 2, 1, 1});\n\n    // System.out.println(toDot(getAnalyzer(parser, true).tokenStream(\"field\", new StringReader(\"the usa is wealthy\"))));\n\n    assertAnalyzesTo(analyzer, \"the united states of america is wealthy\",\n                     new String[]{\"the\", \"usa\", \"united\", \"u\", \"united\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,        4,   4,        4,       11,  11,       11,   18,  18,        21,   29,        32},\n                     new int[]      {3,    28,       10,  10,       10,       28,  17,       17,   28,  20,        28,   31,        39},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"word\", \"word\", \"word\", \"word\"},\n                     new int[]      {1,     1,        0,   0,        0,        1,   0,        0,    1,   0,         1,    1,         1},\n                     new int[]      {1,     4,        1,   1,        1,        3,   1,        1,    2,   1,         1,    1,         1});\n\n    assertAnalyzesToPositions(analyzer, \"spiderman\",\n                              new String[]{\"spider\", \"spiderman\", \"man\"},\n                              new String[]{\"SYNONYM\", \"word\", \"SYNONYM\"},\n                              new int[]{1, 0, 1},\n                              new int[]{1, 2, 1});\n\n    assertAnalyzesTo(analyzer, \"spiderman enemies\",\n                     new String[]{\"spider\", \"spiderman\", \"man\", \"enemies\"},\n                     new int[]{0, 0, 0, 10},\n                     new int[]{9, 9, 9, 17},\n                     new String[]{\"SYNONYM\", \"word\", \"SYNONYM\", \"word\"},\n                     new int[]{1, 0, 1, 1},\n                     new int[]{1, 2, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"the usa is wealthy\",\n                     new String[]{\"the\", \"united\", \"u\", \"united\", \"usa\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,        4,   4,        4,     4,        4,   4,        4,   4,    4,         4,    8,        11},\n                     new int[]      {3,        7,   7,        7,     7,        7,   7,        7,   7,    7,         7,   10,        18},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,        1,   0,        0,     0,        1,   0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,        1,   1,        1,     4,        3,   1,        1,   2,    1,         1,    1,         1});\n    \n    assertAllStrings(analyzer, \"the usa is wealthy\", new String[] {\n        \"the usa is wealthy\",\n        \"the united states is wealthy\",\n        \"the u s a is wealthy\",\n        \"the united states of america is wealthy\",\n        // Wrong. Here only due to \"sausagization\" of the multi word synonyms.\n        \"the u states is wealthy\",\n        \"the u states a is wealthy\",\n        \"the u s of america is wealthy\",\n        \"the u states of america is wealthy\",\n        \"the united s a is wealthy\",\n        \"the united states a is wealthy\",\n        \"the united s of america is wealthy\"});\n\n    assertAnalyzesTo(analyzer, \"the united states is wealthy\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1},\n                     false);\n\n    assertAnalyzesTo(analyzer, \"the united states of balance\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"of\", \"balance\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1});\n\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testPositionLengthAndType().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testPositionLengthAndType().mjava","sourceNew":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts.\n   */\n  public void testPositionLengthAndType() throws Exception {\n    String testFile =\n        \"spider man, spiderman\\n\" +\n        \"usa,united states,u s a,united states of america\";\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n\n    parser.parse(new StringReader(testFile));\n    analyzer.close();\n\n    SynonymMap map = parser.build();\n    analyzer = getFlattenAnalyzer(parser, true);\n\n    BytesRef value = Util.get(map.fst, Util.toUTF32(new CharsRef(\"usa\"), new IntsRefBuilder()));\n    ByteArrayDataInput bytesReader = new ByteArrayDataInput(value.bytes, value.offset, value.length);\n    final int code = bytesReader.readVInt();\n    final int count = code >>> 1;\n\n    final int[] synonymsIdxs = new int[count];\n    for (int i = 0; i < count; i++) {\n      synonymsIdxs[i] = bytesReader.readVInt();\n    }\n\n    BytesRef scratchBytes = new BytesRef();\n    map.words.get(synonymsIdxs[2], scratchBytes);\n\n    int synonymLength = 1;\n    for (int i = scratchBytes.offset; i < scratchBytes.offset + scratchBytes.length; i++) {\n      if (scratchBytes.bytes[i] == SynonymMap.WORD_SEPARATOR) {\n        synonymLength++;\n      }\n    }\n\n    assertEquals(count, 3);\n    assertEquals(synonymLength, 4);\n\n    assertAnalyzesTo(analyzer, \"spider man\",\n                     new String[]{\"spiderman\", \"spider\", \"man\"},\n                     new int[]{0, 0, 7},\n                     new int[]{10, 6, 10},\n                     new String[]{\"SYNONYM\", \"word\", \"word\"},\n                     new int[]{1, 0, 1},\n                     new int[]{2, 1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing spider man\",\n                              new String[]{\"amazing\", \"spiderman\", \"spider\", \"man\"},\n                              new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n                              new int[]{1, 1, 0, 1},\n                              new int[]{1, 2, 1, 1});\n\n    // System.out.println(toDot(getAnalyzer(parser, true).tokenStream(\"field\", new StringReader(\"the usa is wealthy\"))));\n\n    assertAnalyzesTo(analyzer, \"the united states of america is wealthy\",\n                     new String[]{\"the\", \"usa\", \"united\", \"u\", \"united\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,        4,   4,        4,       11,  11,       11,   18,  18,        21,   29,        32},\n                     new int[]      {3,    28,       10,  10,       10,       28,  17,       17,   28,  20,        28,   31,        39},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"word\", \"word\", \"word\", \"word\"},\n                     new int[]      {1,     1,        0,   0,        0,        1,   0,        0,    1,   0,         1,    1,         1},\n                     new int[]      {1,     4,        1,   1,        1,        3,   1,        1,    2,   1,         1,    1,         1});\n\n    assertAnalyzesToPositions(analyzer, \"spiderman\",\n                              new String[]{\"spider\", \"spiderman\", \"man\"},\n                              new String[]{\"SYNONYM\", \"word\", \"SYNONYM\"},\n                              new int[]{1, 0, 1},\n                              new int[]{1, 2, 1});\n\n    assertAnalyzesTo(analyzer, \"spiderman enemies\",\n                     new String[]{\"spider\", \"spiderman\", \"man\", \"enemies\"},\n                     new int[]{0, 0, 0, 10},\n                     new int[]{9, 9, 9, 17},\n                     new String[]{\"SYNONYM\", \"word\", \"SYNONYM\", \"word\"},\n                     new int[]{1, 0, 1, 1},\n                     new int[]{1, 2, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"the usa is wealthy\",\n                     new String[]{\"the\", \"united\", \"u\", \"united\", \"usa\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,        4,   4,        4,     4,        4,   4,        4,   4,    4,         4,    8,        11},\n                     new int[]      {3,        7,   7,        7,     7,        7,   7,        7,   7,    7,         7,   10,        18},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,        1,   0,        0,     0,        1,   0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,        1,   1,        1,     4,        3,   1,        1,   2,    1,         1,    1,         1});\n    \n    assertGraphStrings(analyzer, \"the usa is wealthy\", new String[] {\n        \"the usa is wealthy\",\n        \"the united states is wealthy\",\n        \"the u s a is wealthy\",\n        \"the united states of america is wealthy\",\n        // Wrong. Here only due to \"sausagization\" of the multi word synonyms.\n        \"the u states is wealthy\",\n        \"the u states a is wealthy\",\n        \"the u s of america is wealthy\",\n        \"the u states of america is wealthy\",\n        \"the united s a is wealthy\",\n        \"the united states a is wealthy\",\n        \"the united s of america is wealthy\"});\n\n    assertAnalyzesTo(analyzer, \"the united states is wealthy\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1},\n                     false);\n\n    assertAnalyzesTo(analyzer, \"the united states of balance\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"of\", \"balance\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1});\n\n    analyzer.close();\n  }\n\n","sourceOld":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts.\n   */\n  public void testPositionLengthAndType() throws Exception {\n    String testFile =\n        \"spider man, spiderman\\n\" +\n        \"usa,united states,u s a,united states of america\";\n    Analyzer analyzer = new MockAnalyzer(random());\n    SolrSynonymParser parser = new SolrSynonymParser(true, true, analyzer);\n\n    parser.parse(new StringReader(testFile));\n    analyzer.close();\n\n    SynonymMap map = parser.build();\n    analyzer = getFlattenAnalyzer(parser, true);\n\n    BytesRef value = Util.get(map.fst, Util.toUTF32(new CharsRef(\"usa\"), new IntsRefBuilder()));\n    ByteArrayDataInput bytesReader = new ByteArrayDataInput(value.bytes, value.offset, value.length);\n    final int code = bytesReader.readVInt();\n    final int count = code >>> 1;\n\n    final int[] synonymsIdxs = new int[count];\n    for (int i = 0; i < count; i++) {\n      synonymsIdxs[i] = bytesReader.readVInt();\n    }\n\n    BytesRef scratchBytes = new BytesRef();\n    map.words.get(synonymsIdxs[2], scratchBytes);\n\n    int synonymLength = 1;\n    for (int i = scratchBytes.offset; i < scratchBytes.offset + scratchBytes.length; i++) {\n      if (scratchBytes.bytes[i] == SynonymMap.WORD_SEPARATOR) {\n        synonymLength++;\n      }\n    }\n\n    assertEquals(count, 3);\n    assertEquals(synonymLength, 4);\n\n    assertAnalyzesTo(analyzer, \"spider man\",\n                     new String[]{\"spiderman\", \"spider\", \"man\"},\n                     new int[]{0, 0, 7},\n                     new int[]{10, 6, 10},\n                     new String[]{\"SYNONYM\", \"word\", \"word\"},\n                     new int[]{1, 0, 1},\n                     new int[]{2, 1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing spider man\",\n                              new String[]{\"amazing\", \"spiderman\", \"spider\", \"man\"},\n                              new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n                              new int[]{1, 1, 0, 1},\n                              new int[]{1, 2, 1, 1});\n\n    // System.out.println(toDot(getAnalyzer(parser, true).tokenStream(\"field\", new StringReader(\"the usa is wealthy\"))));\n\n    assertAnalyzesTo(analyzer, \"the united states of america is wealthy\",\n                     new String[]{\"the\", \"usa\", \"united\", \"u\", \"united\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,        4,   4,        4,       11,  11,       11,   18,  18,        21,   29,        32},\n                     new int[]      {3,    28,       10,  10,       10,       28,  17,       17,   28,  20,        28,   31,        39},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"word\", \"word\", \"word\", \"word\"},\n                     new int[]      {1,     1,        0,   0,        0,        1,   0,        0,    1,   0,         1,    1,         1},\n                     new int[]      {1,     4,        1,   1,        1,        3,   1,        1,    2,   1,         1,    1,         1});\n\n    assertAnalyzesToPositions(analyzer, \"spiderman\",\n                              new String[]{\"spider\", \"spiderman\", \"man\"},\n                              new String[]{\"SYNONYM\", \"word\", \"SYNONYM\"},\n                              new int[]{1, 0, 1},\n                              new int[]{1, 2, 1});\n\n    assertAnalyzesTo(analyzer, \"spiderman enemies\",\n                     new String[]{\"spider\", \"spiderman\", \"man\", \"enemies\"},\n                     new int[]{0, 0, 0, 10},\n                     new int[]{9, 9, 9, 17},\n                     new String[]{\"SYNONYM\", \"word\", \"SYNONYM\", \"word\"},\n                     new int[]{1, 0, 1, 1},\n                     new int[]{1, 2, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"the usa is wealthy\",\n                     new String[]{\"the\", \"united\", \"u\", \"united\", \"usa\", \"states\", \"s\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,        4,   4,        4,     4,        4,   4,        4,   4,    4,         4,    8,        11},\n                     new int[]      {3,        7,   7,        7,     7,        7,   7,        7,   7,    7,         7,   10,        18},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,        1,   0,        0,     0,        1,   0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,        1,   1,        1,     4,        3,   1,        1,   2,    1,         1,    1,         1});\n    \n    assertAllStrings(analyzer, \"the usa is wealthy\", new String[] {\n        \"the usa is wealthy\",\n        \"the united states is wealthy\",\n        \"the u s a is wealthy\",\n        \"the united states of america is wealthy\",\n        // Wrong. Here only due to \"sausagization\" of the multi word synonyms.\n        \"the u states is wealthy\",\n        \"the u states a is wealthy\",\n        \"the u s of america is wealthy\",\n        \"the u states of america is wealthy\",\n        \"the united s a is wealthy\",\n        \"the united states a is wealthy\",\n        \"the united s of america is wealthy\"});\n\n    assertAnalyzesTo(analyzer, \"the united states is wealthy\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"is\", \"wealthy\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1},\n                     false);\n\n    assertAnalyzesTo(analyzer, \"the united states of balance\",\n                     new String[]{\"the\", \"usa\", \"u\", \"united\", \"united\", \"s\", \"states\", \"states\", \"a\", \"of\", \"america\", \"of\", \"balance\"},\n                     new int[]      {0,     4,   4,        4,        4,  11,       11,       11,  11,   11,        11,   18,        21},\n                     new int[]      {3,    17,  10,       10,       10,  17,       17,       17,  17,   17,        17,   20,        28},\n                     new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\", \"word\"},\n                     new int[]      {1,     1,   0,        0,        0,   1,        0,        0,   1,    0,         1,    1,         1},\n                     new int[]      {1,     4,   1,        1,        1,   1,        1,        3,   2,    1,         1,    1,         1});\n\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["098528909bb70948871fd7ed865fafb87ed73964"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"302d34f2c66e8d489ee13078305c330cbf67b226":["f03e4bed5023ec3ef93a771b8888cae991cf448d","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["098528909bb70948871fd7ed865fafb87ed73964","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["302d34f2c66e8d489ee13078305c330cbf67b226"],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}