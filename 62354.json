{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  public void doTestBatchAddsWithDelete() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertEquals(59, getNumDocs(SOURCE_COLLECTION));\n    assertEquals(59, getNumDocs(TARGET_COLLECTION));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06e38ae84477e7a7eacea808dc3de9950fce5ccf","date":1470634560,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testBatchAddsWithDelete().mjava","sourceNew":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","sourceOld":"  /**\n   * Check that batch updates with deletes\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testBatchAddsWithDelete() throws Exception {\n    // Index 50 documents\n    int start = 0;\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (; start < 50; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 10 documents: 10-19\n    List<String> ids = new ArrayList<>();\n    for (int id = 10; id < 20; id++) {\n      ids.add(Integer.toString(id));\n    }\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 60; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Delete 1 document: 50\n    ids = new ArrayList<>();\n    ids.add(Integer.toString(50));\n    deleteById(SOURCE_COLLECTION, ids);\n\n    // Index 10 documents\n    docs = new ArrayList<>();\n    for (; start < 70; start++) {\n      docs.add(getDoc(id, Integer.toString(start)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(TARGET_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // If the non-leader node were buffering updates, then the replication must be complete\n    assertNumDocs(59, SOURCE_COLLECTION);\n    assertNumDocs(59, TARGET_COLLECTION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","06e38ae84477e7a7eacea808dc3de9950fce5ccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["06e38ae84477e7a7eacea808dc3de9950fce5ccf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"06e38ae84477e7a7eacea808dc3de9950fce5ccf":["e7da9d8536c11576df10e348efa79d2739170936","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}