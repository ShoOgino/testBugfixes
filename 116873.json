{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testInfiniteRect().mjava","commits":[{"id":"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5","date":1458616189,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testInfiniteRect().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testInfiniteRect().mjava","sourceNew":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 1000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n      GeoRect rect = GeoUtils.circleToBBox(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","sourceOld":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 100000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n      GeoRect rect = GeoUtils.circleToBBox(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9","date":1459176843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testInfiniteRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testInfiniteRect().mjava","sourceNew":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 1000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n      GeoRect rect = GeoUtils.circleToBBox(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","sourceOld":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 1000; i++) {\n      double centerLat = -90 + 180.0 * random().nextDouble();\n      double centerLon = -180 + 360.0 * random().nextDouble();\n      GeoRect rect = GeoUtils.circleToBBox(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43ddc1b7a872fafd838d3f3129984ca661e29b36","date":1459526591,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testInfiniteRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testInfiniteRect().mjava","sourceNew":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 1000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n      GeoRect rect = GeoRect.fromPointDistance(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","sourceOld":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 1000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n      GeoRect rect = GeoUtils.circleToBBox(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestGeoUtils#testInfiniteRect().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestGeoUtils#testInfiniteRect().mjava","sourceNew":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 1000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n      Rectangle rect = Rectangle.fromPointDistance(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","sourceOld":"  /** Test infinite radius covers whole earth */\n  public void testInfiniteRect() {\n    for (int i = 0; i < 1000; i++) {\n      double centerLat = GeoTestUtil.nextLatitude();\n      double centerLon = GeoTestUtil.nextLongitude();\n      GeoRect rect = GeoRect.fromPointDistance(centerLat, centerLon, Double.POSITIVE_INFINITY);\n      assertEquals(-180.0, rect.minLon, 0.0D);\n      assertEquals(180.0, rect.maxLon, 0.0D);\n      assertEquals(-90.0, rect.minLat, 0.0D);\n      assertEquals(90.0, rect.maxLat, 0.0D);\n      assertFalse(rect.crossesDateline());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9":["ed05bb51ea0663dafe0ae9b600553ef0e851f0e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9"],"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"]},"commit2Childs":{"6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9":["43ddc1b7a872fafd838d3f3129984ca661e29b36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ed05bb51ea0663dafe0ae9b600553ef0e851f0e5"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43ddc1b7a872fafd838d3f3129984ca661e29b36":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"ed05bb51ea0663dafe0ae9b600553ef0e851f0e5":["6c1079b0e8cc08b4c818211a4fa79d31f0c66ba9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}