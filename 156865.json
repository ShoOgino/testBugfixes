{"path":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(ramDir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n    reader.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexSearcher searcher = new IndexSearcher(ramDir, true);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(ramDir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(ramDir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(ramDir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(ramDir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    searcher.close();\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/analysis/CollationTestBase#testFarsiRangeFilterCollating(Analyzer,BytesRef,BytesRef,BytesRef,BytesRef).mjava","sourceNew":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(ramDir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    reader.close();\n  }\n\n","sourceOld":"  public void testFarsiRangeFilterCollating(Analyzer analyzer, BytesRef firstBeg, \n                                            BytesRef firstEnd, BytesRef secondBeg,\n                                            BytesRef secondEnd) throws Exception {\n    RAMDirectory ramDir = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(ramDir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", TextField.TYPE_STORED));\n    doc.add(new Field(\"body\", \"body\", StringField.TYPE_STORED));\n    writer.addDocument(doc);\n    writer.close();\n    IndexReader reader = IndexReader.open(ramDir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    Query query = new TermQuery(new Term(\"body\",\"body\"));\n\n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeFilter with a Farsi\n    // Collator (or an Arabic one for the case when Farsi searcher not\n    // supported).\n    ScoreDoc[] result = searcher.search\n      (query, new TermRangeFilter(\"content\", firstBeg, firstEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    result = searcher.search\n      (query, new TermRangeFilter(\"content\", secondBeg, secondEnd, true, true), 1).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["0e7c2454a6a8237bfd0e953f5b940838408c9055","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}