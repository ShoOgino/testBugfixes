{"path":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testOps().mjava","commits":[{"id":"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5","date":1446841099,"type":1,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#doTestOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  public void doTestOps() throws Exception {\n    this.clearSourceCollection();\n    this.clearTargetCollection();\n\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testOps().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testOps().mjava","sourceNew":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","sourceOld":"  /**\n   * Check the ops statistics.\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testOps() throws Exception {\n    // Index documents\n    List<SolrInputDocument> docs = new ArrayList<>();\n    for (int i = 0; i < 200; i++) {\n      docs.add(getDoc(id, Integer.toString(i)));\n    }\n    index(SOURCE_COLLECTION, docs);\n\n    // Start CDCR\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    NamedList rsp = this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.OPS);\n    NamedList collections = (NamedList) ((NamedList) rsp.get(CdcrParams.OPERATIONS_PER_SECOND)).getVal(0);\n    NamedList ops = (NamedList) collections.get(TARGET_COLLECTION);\n    double opsAll = (Double) ops.get(CdcrParams.COUNTER_ALL);\n    double opsAdds = (Double) ops.get(CdcrParams.COUNTER_ADDS);\n    assertTrue(opsAll > 0);\n    assertEquals(opsAll, opsAdds, 0);\n\n    double opsDeletes = (Double) ops.get(CdcrParams.COUNTER_DELETES);\n    assertEquals(0, opsDeletes, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e7da9d8536c11576df10e348efa79d2739170936":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"e586ff50ac71d5ef3a27ced78f69deb41ab35ad5":["e7da9d8536c11576df10e348efa79d2739170936"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e586ff50ac71d5ef3a27ced78f69deb41ab35ad5"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}