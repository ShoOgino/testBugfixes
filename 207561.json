{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","commits":[{"id":"b58bd8dd457a9b46b007c641d5b6e747afb8904a","date":1393616676,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[Long]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (ignoreCase) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              writer.write(line.toLowerCase(Locale.ROOT).getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              StringBuilder sb = new StringBuilder();\n              sb.append(line.substring(0, flagSep).toLowerCase(Locale.ROOT));\n              if (flagSep < line.length()) {\n                sb.append(line.substring(flagSep, line.length()));\n              }\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<Long> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (ignoreCase) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              writer.write(line.toLowerCase(Locale.ROOT).getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              StringBuilder sb = new StringBuilder();\n              sb.append(line.substring(0, flagSep).toLowerCase(Locale.ROOT));\n              if (flagSep < line.length()) {\n                sb.append(line.substring(flagSep, line.length()));\n              }\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        return scratch1.compareTo(scratch2);\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    BytesRef currentEntry = new BytesRef();\n    char currentFlags[] = new char[0];\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      BytesRef scratch = new BytesRef(entry);\n      int cmp = scratch.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + scratch.utf8ToString() + \" < \" + currentEntry.utf8ToString());\n      } else if (cmp == 0) {\n        currentFlags = merge(currentFlags, wordForm);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, currentFlags);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        UnicodeUtil.UTF8toUTF32(currentEntry, scratchInts);\n        words.add(scratchInts, (long)ord);\n        currentEntry = scratch;\n        currentFlags = wordForm;\n      }\n    }\n    \n    final int hashCode = encodeFlagsWithHash(flagsScratch, currentFlags);\n    int ord = flagLookup.add(flagsScratch, hashCode);\n    if (ord < 0) {\n      // already exists in our hash\n      ord = (-ord)-1;\n    }\n    UnicodeUtil.UTF8toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, (long)ord);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ae9942cbee38a49d234c2f022e3a265133d1914","date":1393952688,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (ignoreCase) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              writer.write(line.toLowerCase(Locale.ROOT).getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              StringBuilder sb = new StringBuilder();\n              sb.append(line.substring(0, flagSep).toLowerCase(Locale.ROOT));\n              if (flagSep < line.length()) {\n                sb.append(line.substring(flagSep, line.length()));\n              }\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (ignoreCase) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              writer.write(line.toLowerCase(Locale.ROOT).getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              StringBuilder sb = new StringBuilder();\n              sb.append(line.substring(0, flagSep).toLowerCase(Locale.ROOT));\n              if (flagSep < line.length()) {\n                sb.append(line.substring(flagSep, line.length()));\n              }\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6b9214e93abd5c360b7dc32483691d5555a9c7e","date":1394289706,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":["1e385072da6c236ef0826c91e97101d1a39981d0","211216ec4602e62cede2940d33a93a36c2aaf8a6","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","date":1394564625,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf('/');\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == '/') {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == '/') {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf('/');\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d89d7e4e5101347833eea558851bf4209218619","date":1396265641,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(IOUtils.CHARSET_UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(IOUtils.CHARSET_UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        encodeFlags(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        final int hashCode = encodeFlagsWithHash(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch, hashCode);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5916de6e2f6deb9da923b2710f6451668e94a20c","date":1403356557,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      int end;\n\n      int flagSep = line.indexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        end = line.indexOf(MORPH_SEPARATOR);\n        entry = line.substring(0, end);\n      } else {\n        end = line.indexOf(MORPH_SEPARATOR);\n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n      // we possibly have morphological data\n      int stemExceptionID = 0;\n      if (hasStemExceptions && end+1 < line.length()) {\n        String stemException = parseStemException(line.substring(end+1));\n        if (stemException != null) {\n          if (stemExceptionCount == stemExceptions.length) {\n            int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n          }\n          stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n          stemExceptions[stemExceptionCount++] = stemException;\n        }\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        encodeFlags(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        if (hasStemExceptions) {\n          currentOrds.grow(currentOrds.length+2);\n          currentOrds.ints[currentOrds.length++] = ord;\n          currentOrds.ints[currentOrds.length++] = stemExceptionID;\n        } else {\n          currentOrds.grow(currentOrds.length+1);\n          currentOrds.ints[currentOrds.length++] = ord;\n        }\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          line = unescapeEntry(line);\n          if (needsInputCleaning) {\n            int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      \n      int flagSep = line.lastIndexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        entry = line;\n      } else {\n        // note, there can be comments (morph description) after a flag.\n        // we should really look for any whitespace: currently just tab and space\n        int end = line.indexOf('\\t', flagSep);\n        if (end == -1)\n          end = line.length();\n        int end2 = line.indexOf(' ', flagSep);\n        if (end2 == -1)\n          end2 = line.length();\n        end = Math.min(end, end2);\n        \n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        encodeFlags(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        currentOrds.grow(currentOrds.length+1);\n        currentOrds.ints[currentOrds.length++] = ord;\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRefBuilder flagsScratch = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRefBuilder scratchLine = new BytesRefBuilder();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRefBuilder currentOrds = new IntsRefBuilder();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.get().utf8ToString();\n      String entry;\n      char wordForm[];\n      int end;\n\n      int flagSep = line.indexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        end = line.indexOf(MORPH_SEPARATOR);\n        entry = line.substring(0, end);\n      } else {\n        end = line.indexOf(MORPH_SEPARATOR);\n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n      // we possibly have morphological data\n      int stemExceptionID = 0;\n      if (hasStemExceptions && end+1 < line.length()) {\n        String stemException = parseStemException(line.substring(end+1));\n        if (stemException != null) {\n          if (stemExceptionCount == stemExceptions.length) {\n            int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n          }\n          stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n          stemExceptions[stemExceptionCount++] = stemException;\n        }\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        encodeFlags(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch.get());\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts.get(), currentOrds.get());\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRefBuilder(); // must be this way\n        }\n        if (hasStemExceptions) {\n          currentOrds.append(ord);\n          currentOrds.append(stemExceptionID);\n        } else {\n          currentOrds.append(ord);\n        }\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts.get(), currentOrds.get());\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRef flagsScratch = new BytesRef();\n    IntsRef scratchInts = new IntsRef();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRef scratchLine = new BytesRef();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRef currentOrds = new IntsRef();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.utf8ToString();\n      String entry;\n      char wordForm[];\n      int end;\n\n      int flagSep = line.indexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        end = line.indexOf(MORPH_SEPARATOR);\n        entry = line.substring(0, end);\n      } else {\n        end = line.indexOf(MORPH_SEPARATOR);\n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n      // we possibly have morphological data\n      int stemExceptionID = 0;\n      if (hasStemExceptions && end+1 < line.length()) {\n        String stemException = parseStemException(line.substring(end+1));\n        if (stemException != null) {\n          if (stemExceptionCount == stemExceptions.length) {\n            int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n          }\n          stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n          stemExceptions[stemExceptionCount++] = stemException;\n        }\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        encodeFlags(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch);\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts, currentOrds);\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRef(); // must be this way\n        }\n        if (hasStemExceptions) {\n          currentOrds.grow(currentOrds.length+2);\n          currentOrds.ints[currentOrds.length++] = ord;\n          currentOrds.ints[currentOrds.length++] = stemExceptionID;\n        } else {\n          currentOrds.grow(currentOrds.length+1);\n          currentOrds.ints[currentOrds.length++] = ord;\n        }\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts, currentOrds);\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":["5916de6e2f6deb9da923b2710f6451668e94a20c","1e385072da6c236ef0826c91e97101d1a39981d0","30fe9fa09df804ce770f1b667401a7a7647301ed","b58bd8dd457a9b46b007c641d5b6e747afb8904a","211216ec4602e62cede2940d33a93a36c2aaf8a6"],"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRefBuilder flagsScratch = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    boolean success = false;\n    try {\n      sorter.sort(unsorted, sorted);\n      success = true;\n    } finally {\n      if (success) {\n        Files.delete(unsorted.toPath());\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(unsorted);\n      }\n    }\n    \n    boolean success2 = false;\n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    try {\n      BytesRefBuilder scratchLine = new BytesRefBuilder();\n    \n      // TODO: the flags themselves can be double-chars (long) or also numeric\n      // either way the trick is to encode them as char... but they must be parsed differently\n    \n      String currentEntry = null;\n      IntsRefBuilder currentOrds = new IntsRefBuilder();\n    \n      String line;\n      while (reader.read(scratchLine)) {\n        line = scratchLine.get().utf8ToString();\n        String entry;\n        char wordForm[];\n        int end;\n\n        int flagSep = line.indexOf(FLAG_SEPARATOR);\n        if (flagSep == -1) {\n          wordForm = NOFLAGS;\n          end = line.indexOf(MORPH_SEPARATOR);\n          entry = line.substring(0, end);\n        } else {\n          end = line.indexOf(MORPH_SEPARATOR);\n          String flagPart = line.substring(flagSep + 1, end);\n          if (aliasCount > 0) {\n            flagPart = getAliasValue(Integer.parseInt(flagPart));\n          } \n        \n          wordForm = flagParsingStrategy.parseFlags(flagPart);\n          Arrays.sort(wordForm);\n          entry = line.substring(0, flagSep);\n        }\n        // we possibly have morphological data\n        int stemExceptionID = 0;\n        if (hasStemExceptions && end+1 < line.length()) {\n          String stemException = parseStemException(line.substring(end+1));\n          if (stemException != null) {\n            if (stemExceptionCount == stemExceptions.length) {\n              int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n              stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n            }\n            stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n            stemExceptions[stemExceptionCount++] = stemException;\n          }\n        }\n\n        int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n        if (cmp < 0) {\n          throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n        } else {\n          encodeFlags(flagsScratch, wordForm);\n          int ord = flagLookup.add(flagsScratch.get());\n          if (ord < 0) {\n            // already exists in our hash\n            ord = (-ord)-1;\n          }\n          // finalize current entry, and switch \"current\" if necessary\n          if (cmp > 0 && currentEntry != null) {\n            Util.toUTF32(currentEntry, scratchInts);\n            words.add(scratchInts.get(), currentOrds.get());\n          }\n          // swap current\n          if (cmp > 0 || currentEntry == null) {\n            currentEntry = entry;\n            currentOrds = new IntsRefBuilder(); // must be this way\n          }\n          if (hasStemExceptions) {\n            currentOrds.append(ord);\n            currentOrds.append(stemExceptionID);\n          } else {\n            currentOrds.append(ord);\n          }\n        }\n      }\n    \n      // finalize last entry\n      Util.toUTF32(currentEntry, scratchInts);\n      words.add(scratchInts.get(), currentOrds.get());\n      success2 = true;\n    } finally {\n      IOUtils.closeWhileHandlingException(reader);\n      if (success2) {\n        Files.delete(sorted.toPath());\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(sorted);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRefBuilder flagsScratch = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    sorter.sort(unsorted, sorted);\n    unsorted.delete();\n    \n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    BytesRefBuilder scratchLine = new BytesRefBuilder();\n    \n    // TODO: the flags themselves can be double-chars (long) or also numeric\n    // either way the trick is to encode them as char... but they must be parsed differently\n    \n    String currentEntry = null;\n    IntsRefBuilder currentOrds = new IntsRefBuilder();\n    \n    String line;\n    while (reader.read(scratchLine)) {\n      line = scratchLine.get().utf8ToString();\n      String entry;\n      char wordForm[];\n      int end;\n\n      int flagSep = line.indexOf(FLAG_SEPARATOR);\n      if (flagSep == -1) {\n        wordForm = NOFLAGS;\n        end = line.indexOf(MORPH_SEPARATOR);\n        entry = line.substring(0, end);\n      } else {\n        end = line.indexOf(MORPH_SEPARATOR);\n        String flagPart = line.substring(flagSep + 1, end);\n        if (aliasCount > 0) {\n          flagPart = getAliasValue(Integer.parseInt(flagPart));\n        } \n        \n        wordForm = flagParsingStrategy.parseFlags(flagPart);\n        Arrays.sort(wordForm);\n        entry = line.substring(0, flagSep);\n      }\n      // we possibly have morphological data\n      int stemExceptionID = 0;\n      if (hasStemExceptions && end+1 < line.length()) {\n        String stemException = parseStemException(line.substring(end+1));\n        if (stemException != null) {\n          if (stemExceptionCount == stemExceptions.length) {\n            int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n            stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n          }\n          stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n          stemExceptions[stemExceptionCount++] = stemException;\n        }\n      }\n\n      int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n      if (cmp < 0) {\n        throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n      } else {\n        encodeFlags(flagsScratch, wordForm);\n        int ord = flagLookup.add(flagsScratch.get());\n        if (ord < 0) {\n          // already exists in our hash\n          ord = (-ord)-1;\n        }\n        // finalize current entry, and switch \"current\" if necessary\n        if (cmp > 0 && currentEntry != null) {\n          Util.toUTF32(currentEntry, scratchInts);\n          words.add(scratchInts.get(), currentOrds.get());\n        }\n        // swap current\n        if (cmp > 0 || currentEntry == null) {\n          currentEntry = entry;\n          currentOrds = new IntsRefBuilder(); // must be this way\n        }\n        if (hasStemExceptions) {\n          currentOrds.append(ord);\n          currentOrds.append(stemExceptionID);\n        } else {\n          currentOrds.append(ord);\n        }\n      }\n    }\n    \n    // finalize last entry\n    Util.toUTF32(currentEntry, scratchInts);\n    words.add(scratchInts.get(), currentOrds.get());\n    \n    reader.close();\n    sorted.delete();\n  }\n\n","bugFix":["5916de6e2f6deb9da923b2710f6451668e94a20c","1e385072da6c236ef0826c91e97101d1a39981d0","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","30fe9fa09df804ce770f1b667401a7a7647301ed","b58bd8dd457a9b46b007c641d5b6e747afb8904a","211216ec4602e62cede2940d33a93a36c2aaf8a6","dc3f094cafa4a87b4066e1d6710fa4e6afe6260e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRefBuilder flagsScratch = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    Path unsorted = Files.createTempFile(tempDir, \"unsorted\", \"dat\");\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    Path sorted = Files.createTempFile(tempDir, \"sorted\", \"dat\");\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    boolean success = false;\n    try {\n      sorter.sort(unsorted, sorted);\n      success = true;\n    } finally {\n      if (success) {\n        Files.delete(unsorted);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(unsorted);\n      }\n    }\n    \n    boolean success2 = false;\n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    try {\n      BytesRefBuilder scratchLine = new BytesRefBuilder();\n    \n      // TODO: the flags themselves can be double-chars (long) or also numeric\n      // either way the trick is to encode them as char... but they must be parsed differently\n    \n      String currentEntry = null;\n      IntsRefBuilder currentOrds = new IntsRefBuilder();\n    \n      String line;\n      while (reader.read(scratchLine)) {\n        line = scratchLine.get().utf8ToString();\n        String entry;\n        char wordForm[];\n        int end;\n\n        int flagSep = line.indexOf(FLAG_SEPARATOR);\n        if (flagSep == -1) {\n          wordForm = NOFLAGS;\n          end = line.indexOf(MORPH_SEPARATOR);\n          entry = line.substring(0, end);\n        } else {\n          end = line.indexOf(MORPH_SEPARATOR);\n          String flagPart = line.substring(flagSep + 1, end);\n          if (aliasCount > 0) {\n            flagPart = getAliasValue(Integer.parseInt(flagPart));\n          } \n        \n          wordForm = flagParsingStrategy.parseFlags(flagPart);\n          Arrays.sort(wordForm);\n          entry = line.substring(0, flagSep);\n        }\n        // we possibly have morphological data\n        int stemExceptionID = 0;\n        if (hasStemExceptions && end+1 < line.length()) {\n          String stemException = parseStemException(line.substring(end+1));\n          if (stemException != null) {\n            if (stemExceptionCount == stemExceptions.length) {\n              int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n              stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n            }\n            stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n            stemExceptions[stemExceptionCount++] = stemException;\n          }\n        }\n\n        int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n        if (cmp < 0) {\n          throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n        } else {\n          encodeFlags(flagsScratch, wordForm);\n          int ord = flagLookup.add(flagsScratch.get());\n          if (ord < 0) {\n            // already exists in our hash\n            ord = (-ord)-1;\n          }\n          // finalize current entry, and switch \"current\" if necessary\n          if (cmp > 0 && currentEntry != null) {\n            Util.toUTF32(currentEntry, scratchInts);\n            words.add(scratchInts.get(), currentOrds.get());\n          }\n          // swap current\n          if (cmp > 0 || currentEntry == null) {\n            currentEntry = entry;\n            currentOrds = new IntsRefBuilder(); // must be this way\n          }\n          if (hasStemExceptions) {\n            currentOrds.append(ord);\n            currentOrds.append(stemExceptionID);\n          } else {\n            currentOrds.append(ord);\n          }\n        }\n      }\n    \n      // finalize last entry\n      Util.toUTF32(currentEntry, scratchInts);\n      words.add(scratchInts.get(), currentOrds.get());\n      success2 = true;\n    } finally {\n      IOUtils.closeWhileHandlingException(reader);\n      if (success2) {\n        Files.delete(sorted);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(sorted);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRefBuilder flagsScratch = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    File unsorted = File.createTempFile(\"unsorted\", \"dat\", tempDir);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    File sorted = File.createTempFile(\"sorted\", \"dat\", tempDir);\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    boolean success = false;\n    try {\n      sorter.sort(unsorted, sorted);\n      success = true;\n    } finally {\n      if (success) {\n        Files.delete(unsorted.toPath());\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(unsorted);\n      }\n    }\n    \n    boolean success2 = false;\n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    try {\n      BytesRefBuilder scratchLine = new BytesRefBuilder();\n    \n      // TODO: the flags themselves can be double-chars (long) or also numeric\n      // either way the trick is to encode them as char... but they must be parsed differently\n    \n      String currentEntry = null;\n      IntsRefBuilder currentOrds = new IntsRefBuilder();\n    \n      String line;\n      while (reader.read(scratchLine)) {\n        line = scratchLine.get().utf8ToString();\n        String entry;\n        char wordForm[];\n        int end;\n\n        int flagSep = line.indexOf(FLAG_SEPARATOR);\n        if (flagSep == -1) {\n          wordForm = NOFLAGS;\n          end = line.indexOf(MORPH_SEPARATOR);\n          entry = line.substring(0, end);\n        } else {\n          end = line.indexOf(MORPH_SEPARATOR);\n          String flagPart = line.substring(flagSep + 1, end);\n          if (aliasCount > 0) {\n            flagPart = getAliasValue(Integer.parseInt(flagPart));\n          } \n        \n          wordForm = flagParsingStrategy.parseFlags(flagPart);\n          Arrays.sort(wordForm);\n          entry = line.substring(0, flagSep);\n        }\n        // we possibly have morphological data\n        int stemExceptionID = 0;\n        if (hasStemExceptions && end+1 < line.length()) {\n          String stemException = parseStemException(line.substring(end+1));\n          if (stemException != null) {\n            if (stemExceptionCount == stemExceptions.length) {\n              int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n              stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n            }\n            stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n            stemExceptions[stemExceptionCount++] = stemException;\n          }\n        }\n\n        int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n        if (cmp < 0) {\n          throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n        } else {\n          encodeFlags(flagsScratch, wordForm);\n          int ord = flagLookup.add(flagsScratch.get());\n          if (ord < 0) {\n            // already exists in our hash\n            ord = (-ord)-1;\n          }\n          // finalize current entry, and switch \"current\" if necessary\n          if (cmp > 0 && currentEntry != null) {\n            Util.toUTF32(currentEntry, scratchInts);\n            words.add(scratchInts.get(), currentOrds.get());\n          }\n          // swap current\n          if (cmp > 0 || currentEntry == null) {\n            currentEntry = entry;\n            currentOrds = new IntsRefBuilder(); // must be this way\n          }\n          if (hasStemExceptions) {\n            currentOrds.append(ord);\n            currentOrds.append(stemExceptionID);\n          } else {\n            currentOrds.append(ord);\n          }\n        }\n      }\n    \n      // finalize last entry\n      Util.toUTF32(currentEntry, scratchInts);\n      words.add(scratchInts.get(), currentOrds.get());\n      success2 = true;\n    } finally {\n      IOUtils.closeWhileHandlingException(reader);\n      if (success2) {\n        Files.delete(sorted.toPath());\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(sorted);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(Directory,String,List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary#readDictionaryFiles(List[InputStream],CharsetDecoder,Builder[IntsRef]).mjava","sourceNew":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(Directory tempDir, String tempFileNamePrefix, List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRefBuilder flagsScratch = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    \n    StringBuilder sb = new StringBuilder();\n\n    IndexOutput unsorted = tempDir.createTempOutput(tempFileNamePrefix, \"dat\", IOContext.DEFAULT);\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n\n    OfflineSorter sorter = new OfflineSorter(tempDir, tempFileNamePrefix, new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n\n    String sorted;\n    boolean success = false;\n    try {\n      sorted = sorter.sort(unsorted.getName());\n      success = true;\n    } finally {\n      if (success) {\n        tempDir.deleteFile(unsorted.getName());\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(tempDir, unsorted.getName());\n      }\n    }\n    \n    boolean success2 = false;\n    \n    try (ByteSequencesReader reader = new ByteSequencesReader(tempDir.openInput(sorted, IOContext.READONCE))) {\n      BytesRefBuilder scratchLine = new BytesRefBuilder();\n    \n      // TODO: the flags themselves can be double-chars (long) or also numeric\n      // either way the trick is to encode them as char... but they must be parsed differently\n    \n      String currentEntry = null;\n      IntsRefBuilder currentOrds = new IntsRefBuilder();\n    \n      String line;\n      while (reader.read(scratchLine)) {\n        line = scratchLine.get().utf8ToString();\n        String entry;\n        char wordForm[];\n        int end;\n\n        int flagSep = line.indexOf(FLAG_SEPARATOR);\n        if (flagSep == -1) {\n          wordForm = NOFLAGS;\n          end = line.indexOf(MORPH_SEPARATOR);\n          entry = line.substring(0, end);\n        } else {\n          end = line.indexOf(MORPH_SEPARATOR);\n          String flagPart = line.substring(flagSep + 1, end);\n          if (aliasCount > 0) {\n            flagPart = getAliasValue(Integer.parseInt(flagPart));\n          } \n        \n          wordForm = flagParsingStrategy.parseFlags(flagPart);\n          Arrays.sort(wordForm);\n          entry = line.substring(0, flagSep);\n        }\n        // we possibly have morphological data\n        int stemExceptionID = 0;\n        if (hasStemExceptions && end+1 < line.length()) {\n          String stemException = parseStemException(line.substring(end+1));\n          if (stemException != null) {\n            if (stemExceptionCount == stemExceptions.length) {\n              int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n              stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n            }\n            stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n            stemExceptions[stemExceptionCount++] = stemException;\n          }\n        }\n\n        int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n        if (cmp < 0) {\n          throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n        } else {\n          encodeFlags(flagsScratch, wordForm);\n          int ord = flagLookup.add(flagsScratch.get());\n          if (ord < 0) {\n            // already exists in our hash\n            ord = (-ord)-1;\n          }\n          // finalize current entry, and switch \"current\" if necessary\n          if (cmp > 0 && currentEntry != null) {\n            Util.toUTF32(currentEntry, scratchInts);\n            words.add(scratchInts.get(), currentOrds.get());\n          }\n          // swap current\n          if (cmp > 0 || currentEntry == null) {\n            currentEntry = entry;\n            currentOrds = new IntsRefBuilder(); // must be this way\n          }\n          if (hasStemExceptions) {\n            currentOrds.append(ord);\n            currentOrds.append(stemExceptionID);\n          } else {\n            currentOrds.append(ord);\n          }\n        }\n      }\n    \n      // finalize last entry\n      Util.toUTF32(currentEntry, scratchInts);\n      words.add(scratchInts.get(), currentOrds.get());\n      success2 = true;\n    } finally {\n      if (success2) {\n        tempDir.deleteFile(sorted);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(tempDir, sorted);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reads the dictionary file through the provided InputStreams, building up the words map\n   *\n   * @param dictionaries InputStreams to read the dictionary file through\n   * @param decoder CharsetDecoder used to decode the contents of the file\n   * @throws IOException Can be thrown while reading from the file\n   */\n  private void readDictionaryFiles(List<InputStream> dictionaries, CharsetDecoder decoder, Builder<IntsRef> words) throws IOException {\n    BytesRefBuilder flagsScratch = new BytesRefBuilder();\n    IntsRefBuilder scratchInts = new IntsRefBuilder();\n    \n    StringBuilder sb = new StringBuilder();\n    \n    Path unsorted = Files.createTempFile(tempDir, \"unsorted\", \"dat\");\n    try (ByteSequencesWriter writer = new ByteSequencesWriter(unsorted)) {\n      for (InputStream dictionary : dictionaries) {\n        BufferedReader lines = new BufferedReader(new InputStreamReader(dictionary, decoder));\n        String line = lines.readLine(); // first line is number of entries (approximately, sometimes)\n        \n        while ((line = lines.readLine()) != null) {\n          // wild and unpredictable code comment rules\n          if (line.isEmpty() || line.charAt(0) == '/' || line.charAt(0) == '#' || line.charAt(0) == '\\t') {\n            continue;\n          }\n          line = unescapeEntry(line);\n          // if we havent seen any stem exceptions, try to parse one\n          if (hasStemExceptions == false) {\n            int morphStart = line.indexOf(MORPH_SEPARATOR);\n            if (morphStart >= 0 && morphStart < line.length()) {\n              hasStemExceptions = parseStemException(line.substring(morphStart+1)) != null;\n            }\n          }\n          if (needsInputCleaning) {\n            int flagSep = line.indexOf(FLAG_SEPARATOR);\n            if (flagSep == -1) {\n              flagSep = line.indexOf(MORPH_SEPARATOR);\n            }\n            if (flagSep == -1) {\n              CharSequence cleansed = cleanInput(line, sb);\n              writer.write(cleansed.toString().getBytes(StandardCharsets.UTF_8));\n            } else {\n              String text = line.substring(0, flagSep);\n              CharSequence cleansed = cleanInput(text, sb);\n              if (cleansed != sb) {\n                sb.setLength(0);\n                sb.append(cleansed);\n              }\n              sb.append(line.substring(flagSep));\n              writer.write(sb.toString().getBytes(StandardCharsets.UTF_8));\n            }\n          } else {\n            writer.write(line.getBytes(StandardCharsets.UTF_8));\n          }\n        }\n      }\n    }\n    Path sorted = Files.createTempFile(tempDir, \"sorted\", \"dat\");\n    \n    OfflineSorter sorter = new OfflineSorter(new Comparator<BytesRef>() {\n      BytesRef scratch1 = new BytesRef();\n      BytesRef scratch2 = new BytesRef();\n      \n      @Override\n      public int compare(BytesRef o1, BytesRef o2) {\n        scratch1.bytes = o1.bytes;\n        scratch1.offset = o1.offset;\n        scratch1.length = o1.length;\n        \n        for (int i = scratch1.length - 1; i >= 0; i--) {\n          if (scratch1.bytes[scratch1.offset + i] == FLAG_SEPARATOR || scratch1.bytes[scratch1.offset + i] == MORPH_SEPARATOR) {\n            scratch1.length = i;\n            break;\n          }\n        }\n        \n        scratch2.bytes = o2.bytes;\n        scratch2.offset = o2.offset;\n        scratch2.length = o2.length;\n        \n        for (int i = scratch2.length - 1; i >= 0; i--) {\n          if (scratch2.bytes[scratch2.offset + i] == FLAG_SEPARATOR || scratch2.bytes[scratch2.offset + i] == MORPH_SEPARATOR) {\n            scratch2.length = i;\n            break;\n          }\n        }\n        \n        int cmp = scratch1.compareTo(scratch2);\n        if (cmp == 0) {\n          // tie break on whole row\n          return o1.compareTo(o2);\n        } else {\n          return cmp;\n        }\n      }\n    });\n    boolean success = false;\n    try {\n      sorter.sort(unsorted, sorted);\n      success = true;\n    } finally {\n      if (success) {\n        Files.delete(unsorted);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(unsorted);\n      }\n    }\n    \n    boolean success2 = false;\n    ByteSequencesReader reader = new ByteSequencesReader(sorted);\n    try {\n      BytesRefBuilder scratchLine = new BytesRefBuilder();\n    \n      // TODO: the flags themselves can be double-chars (long) or also numeric\n      // either way the trick is to encode them as char... but they must be parsed differently\n    \n      String currentEntry = null;\n      IntsRefBuilder currentOrds = new IntsRefBuilder();\n    \n      String line;\n      while (reader.read(scratchLine)) {\n        line = scratchLine.get().utf8ToString();\n        String entry;\n        char wordForm[];\n        int end;\n\n        int flagSep = line.indexOf(FLAG_SEPARATOR);\n        if (flagSep == -1) {\n          wordForm = NOFLAGS;\n          end = line.indexOf(MORPH_SEPARATOR);\n          entry = line.substring(0, end);\n        } else {\n          end = line.indexOf(MORPH_SEPARATOR);\n          String flagPart = line.substring(flagSep + 1, end);\n          if (aliasCount > 0) {\n            flagPart = getAliasValue(Integer.parseInt(flagPart));\n          } \n        \n          wordForm = flagParsingStrategy.parseFlags(flagPart);\n          Arrays.sort(wordForm);\n          entry = line.substring(0, flagSep);\n        }\n        // we possibly have morphological data\n        int stemExceptionID = 0;\n        if (hasStemExceptions && end+1 < line.length()) {\n          String stemException = parseStemException(line.substring(end+1));\n          if (stemException != null) {\n            if (stemExceptionCount == stemExceptions.length) {\n              int newSize = ArrayUtil.oversize(stemExceptionCount+1, RamUsageEstimator.NUM_BYTES_OBJECT_REF);\n              stemExceptions = Arrays.copyOf(stemExceptions, newSize);\n            }\n            stemExceptionID = stemExceptionCount+1; // we use '0' to indicate no exception for the form\n            stemExceptions[stemExceptionCount++] = stemException;\n          }\n        }\n\n        int cmp = currentEntry == null ? 1 : entry.compareTo(currentEntry);\n        if (cmp < 0) {\n          throw new IllegalArgumentException(\"out of order: \" + entry + \" < \" + currentEntry);\n        } else {\n          encodeFlags(flagsScratch, wordForm);\n          int ord = flagLookup.add(flagsScratch.get());\n          if (ord < 0) {\n            // already exists in our hash\n            ord = (-ord)-1;\n          }\n          // finalize current entry, and switch \"current\" if necessary\n          if (cmp > 0 && currentEntry != null) {\n            Util.toUTF32(currentEntry, scratchInts);\n            words.add(scratchInts.get(), currentOrds.get());\n          }\n          // swap current\n          if (cmp > 0 || currentEntry == null) {\n            currentEntry = entry;\n            currentOrds = new IntsRefBuilder(); // must be this way\n          }\n          if (hasStemExceptions) {\n            currentOrds.append(ord);\n            currentOrds.append(stemExceptionID);\n          } else {\n            currentOrds.append(ord);\n          }\n        }\n      }\n    \n      // finalize last entry\n      Util.toUTF32(currentEntry, scratchInts);\n      words.add(scratchInts.get(), currentOrds.get());\n      success2 = true;\n    } finally {\n      IOUtils.closeWhileHandlingException(reader);\n      if (success2) {\n        Files.delete(sorted);\n      } else {\n        IOUtils.deleteFilesIgnoringExceptions(sorted);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["b6b9214e93abd5c360b7dc32483691d5555a9c7e","7d89d7e4e5101347833eea558851bf4209218619"],"30fe9fa09df804ce770f1b667401a7a7647301ed":["7d89d7e4e5101347833eea558851bf4209218619"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["b58bd8dd457a9b46b007c641d5b6e747afb8904a","5ae9942cbee38a49d234c2f022e3a265133d1914"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["5ae9942cbee38a49d234c2f022e3a265133d1914"],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["5916de6e2f6deb9da923b2710f6451668e94a20c"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"7d89d7e4e5101347833eea558851bf4209218619":["b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"5916de6e2f6deb9da923b2710f6451668e94a20c":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["867e3d9153fb761456b54a9dcce566e1545c5ef6"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"30fe9fa09df804ce770f1b667401a7a7647301ed":["5916de6e2f6deb9da923b2710f6451668e94a20c"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a58bbbe1c866963764d3f15d3a26a6a85f6c6af4"],"a58bbbe1c866963764d3f15d3a26a6a85f6c6af4":[],"b6b9214e93abd5c360b7dc32483691d5555a9c7e":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","7d89d7e4e5101347833eea558851bf4209218619"],"b58bd8dd457a9b46b007c641d5b6e747afb8904a":["96ea64d994d340044e0d57aeb6a5871539d10ca5","5ae9942cbee38a49d234c2f022e3a265133d1914"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"7d89d7e4e5101347833eea558851bf4209218619":["5eb2511ababf862ea11e10761c70ee560cd84510","30fe9fa09df804ce770f1b667401a7a7647301ed"],"f4abec28b874149a7223e32cc7a01704c27790de":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"5916de6e2f6deb9da923b2710f6451668e94a20c":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"5ae9942cbee38a49d234c2f022e3a265133d1914":["96ea64d994d340044e0d57aeb6a5871539d10ca5","b6b9214e93abd5c360b7dc32483691d5555a9c7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b58bd8dd457a9b46b007c641d5b6e747afb8904a"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","a58bbbe1c866963764d3f15d3a26a6a85f6c6af4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}