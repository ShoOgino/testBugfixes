{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = blockSize;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == blockSize) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = blockSize;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == blockSize) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      if (DEBUG) {\n        System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      }\n      if (posPendingFP != -1) {\n        if (DEBUG) {\n          System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      if (DEBUG) {\n        System.out.println(\"      return pos=\" + position);\n      }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsAndPositionsEnum#nextPosition().mjava","sourceNew":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","sourceOld":"    @Override\n    public int nextPosition() throws IOException {\n      // if (DEBUG) {\n      //   System.out.println(\"    FPR.nextPosition posPendingCount=\" + posPendingCount + \" posBufferUpto=\" + posBufferUpto);\n      // }\n      if (posPendingFP != -1) {\n        // if (DEBUG) {\n        //   System.out.println(\"      seek to pendingFP=\" + posPendingFP);\n        // }\n        posIn.seek(posPendingFP);\n        posPendingFP = -1;\n\n        // Force buffer refill:\n        posBufferUpto = BLOCK_SIZE;\n      }\n\n      if (posPendingCount > freq) {\n        skipPositions();\n        posPendingCount = freq;\n      }\n\n      if (posBufferUpto == BLOCK_SIZE) {\n        refillPositions();\n        posBufferUpto = 0;\n      }\n      position += posDeltaBuffer[posBufferUpto++];\n      posPendingCount--;\n      // if (DEBUG) {\n      //   System.out.println(\"      return pos=\" + position);\n      // }\n      return position;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcc6cbc7e8693270112e8d40ca98226199c0288e"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}