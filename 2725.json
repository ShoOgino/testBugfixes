{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/documents/TermVectorEntry#of(TermsEnum).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/documents/TermVectorEntry#of(TermsEnum).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns a new term vector entry representing the specified term, and optionally, positions.\n   *\n   * @param te - positioned terms iterator\n   * @return term vector entry\n   * @throws IOException - if there is a low level IO error.\n   */\n  static TermVectorEntry of(TermsEnum te) throws IOException {\n    Objects.requireNonNull(te);\n\n    String termText = BytesRefUtils.decode(te.term());\n\n    List<TermVectorEntry.TermVectorPosition> tvPositions = new ArrayList<>();\n    PostingsEnum pe = te.postings(null, PostingsEnum.OFFSETS);\n    pe.nextDoc();\n    int freq = pe.freq();\n    for (int i = 0; i < freq; i++) {\n      int pos = pe.nextPosition();\n      if (pos < 0) {\n        // no position information available\n        continue;\n      }\n      TermVectorPosition tvPos = TermVectorPosition.of(pos, pe);\n      tvPositions.add(tvPos);\n    }\n\n    return new TermVectorEntry(termText, te.totalTermFreq(), tvPositions);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f554f2d9b5456248ab6467b9d4f6015686797a6c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}