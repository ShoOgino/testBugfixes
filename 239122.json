{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PointWriter,PointWriter,PointWriter,long,long,long,int).mjava","commits":[{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":0,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PointWriter,PointWriter,PointWriter,long,long,long,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   *\n   * Method to partition the input data. It returns the value of the dimension where\n   * the split happens. The method destroys the original writer.\n   *\n   */\n  public byte[] select(PointWriter points, PointWriter left, PointWriter right, long from, long to, long partitionPoint, int dim) throws IOException {\n    checkArgs(from, to, partitionPoint);\n\n    //If we are on heap then we just select on heap\n    if (points instanceof HeapPointWriter) {\n      return heapSelect((HeapPointWriter) points, left, right, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), 0);\n    }\n\n    //reset histogram\n    for (int i = 0; i < bytesSorted; i++) {\n      Arrays.fill(histogram[i], 0);\n    }\n    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points;\n\n    //find common prefix, it does already set histogram values if needed\n    int commonPrefix = findCommonPrefix(offlinePointWriter, from, to, dim);\n\n    //if all equals we just partition the data\n    if (commonPrefix ==  bytesSorted) {\n      partition(offlinePointWriter, left,  right, null, from, to, dim, commonPrefix - 1, partitionPoint);\n      return partitionPointFromCommonPrefix();\n    }\n    //let's rock'n'roll\n    return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, commonPrefix, dim);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69ebf290ab26d026cc224e517e0d93d931ac87b","date":1549869083,"type":4,"author":"iverase","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDRadixSelector#select(PointWriter,PointWriter,PointWriter,long,long,long,int).mjava","sourceNew":null,"sourceOld":"  /**\n   *\n   * Method to partition the input data. It returns the value of the dimension where\n   * the split happens. The method destroys the original writer.\n   *\n   */\n  public byte[] select(PointWriter points, PointWriter left, PointWriter right, long from, long to, long partitionPoint, int dim) throws IOException {\n    checkArgs(from, to, partitionPoint);\n\n    //If we are on heap then we just select on heap\n    if (points instanceof HeapPointWriter) {\n      return heapSelect((HeapPointWriter) points, left, right, dim, Math.toIntExact(from), Math.toIntExact(to),  Math.toIntExact(partitionPoint), 0);\n    }\n\n    //reset histogram\n    for (int i = 0; i < bytesSorted; i++) {\n      Arrays.fill(histogram[i], 0);\n    }\n    OfflinePointWriter offlinePointWriter = (OfflinePointWriter) points;\n\n    //find common prefix, it does already set histogram values if needed\n    int commonPrefix = findCommonPrefix(offlinePointWriter, from, to, dim);\n\n    //if all equals we just partition the data\n    if (commonPrefix ==  bytesSorted) {\n      partition(offlinePointWriter, left,  right, null, from, to, dim, commonPrefix - 1, partitionPoint);\n      return partitionPointFromCommonPrefix();\n    }\n    //let's rock'n'roll\n    return buildHistogramAndPartition(offlinePointWriter, left, right, from, to, partitionPoint, 0, commonPrefix, dim);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a69ebf290ab26d026cc224e517e0d93d931ac87b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["a69ebf290ab26d026cc224e517e0d93d931ac87b"],"a69ebf290ab26d026cc224e517e0d93d931ac87b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}