{"path":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],byte[][]).mjava","commits":[{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],byte[][]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field, byte[][] lowerPoint, byte[][] upperPoint) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    this.numDims = lowerPoint.length;\n\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n\n    if (lowerPoint[0] == null) {\n      throw new IllegalArgumentException(\"lowerPoint[0] is null\");\n    }\n    this.bytesPerDim = lowerPoint[0].length;\n    for (int i = 0; i < numDims; i++) {\n      if (lowerPoint[i] == null) {\n        throw new IllegalArgumentException(\"lowerPoint[\" + i + \"] is null\");\n      }\n      if (upperPoint[i] == null) {\n        throw new IllegalArgumentException(\"upperPoint[\" + i + \"] is null\");\n      }\n      if (lowerPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + lowerPoint[i].length);\n      }\n      if (upperPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + upperPoint[i].length);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],byte[][]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field, byte[][] lowerPoint, byte[][] upperPoint) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    this.numDims = lowerPoint.length;\n\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n\n    if (lowerPoint[0] == null) {\n      throw new IllegalArgumentException(\"lowerPoint[0] is null\");\n    }\n    this.bytesPerDim = lowerPoint[0].length;\n    for (int i = 0; i < numDims; i++) {\n      if (lowerPoint[i] == null) {\n        throw new IllegalArgumentException(\"lowerPoint[\" + i + \"] is null\");\n      }\n      if (upperPoint[i] == null) {\n        throw new IllegalArgumentException(\"upperPoint[\" + i + \"] is null\");\n      }\n      if (lowerPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + lowerPoint[i].length);\n      }\n      if (upperPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + upperPoint[i].length);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],byte[][]).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field, byte[][] lowerPoint, byte[][] upperPoint) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    this.numDims = lowerPoint.length;\n\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n\n    if (lowerPoint[0] == null) {\n      throw new IllegalArgumentException(\"lowerPoint[0] is null\");\n    }\n    this.bytesPerDim = lowerPoint[0].length;\n    for (int i = 0; i < numDims; i++) {\n      if (lowerPoint[i] == null) {\n        throw new IllegalArgumentException(\"lowerPoint[\" + i + \"] is null\");\n      }\n      if (upperPoint[i] == null) {\n        throw new IllegalArgumentException(\"upperPoint[\" + i + \"] is null\");\n      }\n      if (lowerPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + lowerPoint[i].length);\n      }\n      if (upperPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + upperPoint[i].length);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"606ea169579957651185909e7264798e99e714f9","date":1458504317,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[],byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/PointRangeQuery#PointRangeQuery(String,byte[][],byte[][]).mjava","sourceNew":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @param numDims number of dimensions.\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field, byte[] lowerPoint, byte[] upperPoint, int numDims) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    if (lowerPoint.length % numDims != 0) {\n      throw new IllegalArgumentException(\"lowerPoint is not a fixed multiple of numDims\");\n    }\n    if (upperPoint.length != upperPoint.length) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.numDims = numDims;\n    this.bytesPerDim = lowerPoint.length / numDims;\n\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n  }\n\n","sourceOld":"  /** \n   * Expert: create a multidimensional range query for point values.\n   *\n   * @param field field name. must not be {@code null}.\n   * @param lowerPoint lower portion of the range (inclusive).\n   * @param upperPoint upper portion of the range (inclusive).\n   * @throws IllegalArgumentException if {@code field} is null, or if {@code lowerValue.length != upperValue.length}\n   */\n  protected PointRangeQuery(String field, byte[][] lowerPoint, byte[][] upperPoint) {\n    checkArgs(field, lowerPoint, upperPoint);\n    this.field = field;\n    if (lowerPoint.length == 0) {\n      throw new IllegalArgumentException(\"lowerPoint has length of zero\");\n    }\n    this.numDims = lowerPoint.length;\n\n    if (upperPoint.length != numDims) {\n      throw new IllegalArgumentException(\"lowerPoint has length=\" + numDims + \" but upperPoint has different length=\" + upperPoint.length);\n    }\n    this.lowerPoint = lowerPoint;\n    this.upperPoint = upperPoint;\n\n    if (lowerPoint[0] == null) {\n      throw new IllegalArgumentException(\"lowerPoint[0] is null\");\n    }\n    this.bytesPerDim = lowerPoint[0].length;\n    for (int i = 0; i < numDims; i++) {\n      if (lowerPoint[i] == null) {\n        throw new IllegalArgumentException(\"lowerPoint[\" + i + \"] is null\");\n      }\n      if (upperPoint[i] == null) {\n        throw new IllegalArgumentException(\"upperPoint[\" + i + \"] is null\");\n      }\n      if (lowerPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + lowerPoint[i].length);\n      }\n      if (upperPoint[i].length != bytesPerDim) {\n        throw new IllegalArgumentException(\"all dimensions must have same bytes length, but saw \" + bytesPerDim + \" and \" + upperPoint[i].length);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c422e924212367b334b4938f1fd3e44438e88c40"],"606ea169579957651185909e7264798e99e714f9":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"c422e924212367b334b4938f1fd3e44438e88c40":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["606ea169579957651185909e7264798e99e714f9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["606ea169579957651185909e7264798e99e714f9"],"606ea169579957651185909e7264798e99e714f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}