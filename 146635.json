{"path":"src/java/org/apache/solr/schema/IndexSchema#getFieldType(String).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFieldType(String).mjava","pathOld":"/dev/null","sourceNew":"  // This method exists because it can be more efficient for dynamic fields\n  // if a full SchemaField isn't needed.\n  public FieldType getFieldType(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f.getType();\n\n    return getDynamicFieldType(fieldName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f80211c8197bb79dae092b6ea66a4a839be2add","date":1149580420,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#getFieldType(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFieldType(String).mjava","sourceNew":"  /**\n   * Returns the FieldType for the specified field name.\n   *\n   * <p>\n   * This method exists because it can be more efficient then\n   * {@link #getField} for dynamic fields if a full SchemaField isn't needed.\n   * </p>\n   *\n   * @param fieldName may be an explicitly created field, or a name that\n   * excercies a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getField(String)\n   * @see #getFieldTypeNoEx\n   */\n  public FieldType getFieldType(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f.getType();\n\n    return getDynamicFieldType(fieldName);\n  }\n\n","sourceOld":"  // This method exists because it can be more efficient for dynamic fields\n  // if a full SchemaField isn't needed.\n  public FieldType getFieldType(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f.getType();\n\n    return getDynamicFieldType(fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/IndexSchema#getFieldType(String).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#getFieldType(String).mjava","sourceNew":"  /**\n   * Returns the FieldType for the specified field name.\n   *\n   * <p>\n   * This method exists because it can be more efficient then\n   * {@link #getField} for dynamic fields if a full SchemaField isn't needed.\n   * </p>\n   *\n   * @param fieldName may be an explicitly created field, or a name that\n   * excercies a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getField(String)\n   * @see #getFieldTypeNoEx\n   */\n  public FieldType getFieldType(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f.getType();\n\n    return getDynamicFieldType(fieldName);\n  }\n\n","sourceOld":"  /**\n   * Returns the FieldType for the specified field name.\n   *\n   * <p>\n   * This method exists because it can be more efficient then\n   * {@link #getField} for dynamic fields if a full SchemaField isn't needed.\n   * </p>\n   *\n   * @param fieldName may be an explicitly created field, or a name that\n   * excercies a dynamic field.\n   * @throws SolrException if no such field exists\n   * @see #getField(String)\n   * @see #getFieldTypeNoEx\n   */\n  public FieldType getFieldType(String fieldName) {\n    SchemaField f = fields.get(fieldName);\n    if (f != null) return f.getType();\n\n    return getDynamicFieldType(fieldName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"2f80211c8197bb79dae092b6ea66a4a839be2add":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["2f80211c8197bb79dae092b6ea66a4a839be2add"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"2f80211c8197bb79dae092b6ea66a4a839be2add":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}