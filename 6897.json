{"path":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#setMBPerSec(double).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#setMBPerSec(double).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized void setMBPerSec(double mbPerSec) {\n    // 0.0 is allowed: it means the merge is paused\n    if (mbPerSec < 0.0) {\n      throw new IllegalArgumentException(\"mbPerSec must be positive; got: \" + mbPerSec);\n    }\n    this.mbPerSec = mbPerSec;\n    // NOTE: Double.POSITIVE_INFINITY casts to Long.MAX_VALUE\n    minPauseCheckBytes = Math.min(1024*1024, (long) ((MIN_PAUSE_CHECK_MSEC / 1000.0) * mbPerSec * 1024 * 1024));\n    assert minPauseCheckBytes >= 0;\n    notify();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1ee9437ba5a8297220428d48a6bb823d1fcd57b","date":1489137809,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#setMBPerSec(double).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#setMBPerSec(double).mjava","sourceNew":"  @Override\n  public void setMBPerSec(double mbPerSec) {\n    // Synchronized to make updates to mbPerSec and minPauseCheckBytes atomic. \n    synchronized (this) {\n      // 0.0 is allowed: it means the merge is paused\n      if (mbPerSec < 0.0) {\n        throw new IllegalArgumentException(\"mbPerSec must be positive; got: \" + mbPerSec);\n      }\n      this.mbPerSec = mbPerSec;\n  \n      // NOTE: Double.POSITIVE_INFINITY casts to Long.MAX_VALUE\n      this.minPauseCheckBytes = Math.min(1024*1024, (long) ((MIN_PAUSE_CHECK_MSEC / 1000.0) * mbPerSec * 1024 * 1024));\n      assert minPauseCheckBytes >= 0;\n    }\n\n    mergeProgress.wakeup();\n  }\n\n","sourceOld":"  @Override\n  public synchronized void setMBPerSec(double mbPerSec) {\n    // 0.0 is allowed: it means the merge is paused\n    if (mbPerSec < 0.0) {\n      throw new IllegalArgumentException(\"mbPerSec must be positive; got: \" + mbPerSec);\n    }\n    this.mbPerSec = mbPerSec;\n    // NOTE: Double.POSITIVE_INFINITY casts to Long.MAX_VALUE\n    minPauseCheckBytes = Math.min(1024*1024, (long) ((MIN_PAUSE_CHECK_MSEC / 1000.0) * mbPerSec * 1024 * 1024));\n    assert minPauseCheckBytes >= 0;\n    notify();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}