{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","commits":[{"id":"1a7bf5332d569e3d07c4b248462f5d212e26e9af","date":1376929683,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61558dab896ba60794837a7dd3b3be5b7940044d","date":1376939269,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","sourceNew":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":"  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"/dev/null","sourceNew":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8376536b651fde872bbc15edad6cda0ec3f6a51c","date":1392306302,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","sourceNew":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db1893644d5f20456c9524b28e826293d767db65","date":1401985804,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","sourceNew":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = new MonotonicBlockPackedReader(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","sourceNew":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesProducer#getOrdIndexInstance(IndexInput,FieldInfo,NumericEntry).mjava","sourceNew":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","sourceOld":"  /** returns an address instance for sortedset ordinal lists\n   * @lucene.internal */\n  protected MonotonicBlockPackedReader getOrdIndexInstance(IndexInput data, FieldInfo field, NumericEntry entry) throws IOException {\n    final MonotonicBlockPackedReader ordIndex;\n    synchronized (ordIndexInstances) {\n      MonotonicBlockPackedReader ordIndexInstance = ordIndexInstances.get(field.number);\n      if (ordIndexInstance == null) {\n        data.seek(entry.offset);\n        ordIndexInstance = MonotonicBlockPackedReader.of(data, entry.packedIntsVersion, entry.blockSize, entry.count, false);\n        ordIndexInstances.put(field.number, ordIndexInstance);\n        ramBytesUsed.addAndGet(ordIndexInstance.ramBytesUsed() + RamUsageEstimator.NUM_BYTES_INT);\n      }\n      ordIndex = ordIndexInstance;\n    }\n    return ordIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"db1893644d5f20456c9524b28e826293d767db65":["8376536b651fde872bbc15edad6cda0ec3f6a51c"],"61558dab896ba60794837a7dd3b3be5b7940044d":["1a7bf5332d569e3d07c4b248462f5d212e26e9af"],"8376536b651fde872bbc15edad6cda0ec3f6a51c":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["db1893644d5f20456c9524b28e826293d767db65"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61558dab896ba60794837a7dd3b3be5b7940044d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["db1893644d5f20456c9524b28e826293d767db65","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"db1893644d5f20456c9524b28e826293d767db65":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"61558dab896ba60794837a7dd3b3be5b7940044d":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"8376536b651fde872bbc15edad6cda0ec3f6a51c":["db1893644d5f20456c9524b28e826293d767db65"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","1a7bf5332d569e3d07c4b248462f5d212e26e9af","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"1a7bf5332d569e3d07c4b248462f5d212e26e9af":["61558dab896ba60794837a7dd3b3be5b7940044d"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["8376536b651fde872bbc15edad6cda0ec3f6a51c","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}