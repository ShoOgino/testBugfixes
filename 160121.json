{"path":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","sourceNew":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    assert chars != null;\n    assert chars.length >= offset + length;\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    assert chars != null;\n    assert chars.length >= offset + length;\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57","date":1338306244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","sourceNew":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    assert chars != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert chars.length >= offset + length;\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    assert chars != null;\n    assert chars.length >= offset + length;\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d189fdc8896d2ade49b5f851148067314984ab42","date":1359349780,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","sourceNew":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n    assert isValid();\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    assert chars != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert chars.length >= offset + length;\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/CharsRef#CharsRef(char[],int,int).mjava","sourceNew":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n    assert isValid();\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link CharsRef} initialized with the given array, offset and\n   * length\n   */\n  public CharsRef(char[] chars, int offset, int length) {\n    assert chars != null;\n    assert offset >= 0;\n    assert length >= 0;\n    assert chars.length >= offset + length;\n    this.chars = chars;\n    this.offset = offset;\n    this.length = length;\n  }\n\n","bugFix":["a1b3a24d5d9b47345473ff564f5cc127a7b526b4","ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57","d189fdc8896d2ade49b5f851148067314984ab42"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d189fdc8896d2ade49b5f851148067314984ab42":["ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57"],"ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d189fdc8896d2ade49b5f851148067314984ab42":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"ecb9a70c11e1f9dea44bb46bc2f75ed0c2603b57":["d4d69c535930b5cce125cff868d40f6373dc27d4","d189fdc8896d2ade49b5f851148067314984ab42"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}