{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentWriterRequest().mjava","commits":[{"id":"7b6c193737882b94fcb01749c75371bf7d7d4c93","date":1539067480,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentWriterRequest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultiContentWriterRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    List<Pair<NamedList, Object>> docs = new ArrayList<>();\n    NamedList params = new NamedList();\n    docs.add(new Pair(params, getFileContent(params, \"solrj/docs1.xml\")));\n\n    params = new NamedList();\n    params.add(ASSUME_CONTENT_TYPE, \"application/csv\");\n    docs.add(new Pair(params, getFileContent(params, \"solrj/books.csv\")));\n\n    MultiContentWriterRequest up = new MultiContentWriterRequest(SolrRequest.METHOD.POST, \"/update\", docs.iterator());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    System.out.println(result.jsonStr());\n    rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(12, rsp.getResults().getNumFound());\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentWriterRequest().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testMultiContentWriterRequest().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testMultiContentWriterRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    List<Pair<NamedList, Object>> docs = new ArrayList<>();\n    NamedList params = new NamedList();\n    docs.add(new Pair(params, getFileContent(params, \"solrj/docs1.xml\")));\n\n    params = new NamedList();\n    params.add(ASSUME_CONTENT_TYPE, \"application/csv\");\n    docs.add(new Pair(params, getFileContent(params, \"solrj/books.csv\")));\n\n    MultiContentWriterRequest up = new MultiContentWriterRequest(SolrRequest.METHOD.POST, \"/update\", docs.iterator());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    System.out.println(result.jsonStr());\n    rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(12, rsp.getResults().getNumFound());\n\n  }\n\n","sourceOld":"  @Test\n  public void testMultiContentWriterRequest() throws Exception {\n    SolrClient client = getSolrClient();\n    client.deleteByQuery(\"*:*\");// delete everything!\n    client.commit();\n    QueryResponse rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(0, rsp.getResults().getNumFound());\n\n    List<Pair<NamedList, Object>> docs = new ArrayList<>();\n    NamedList params = new NamedList();\n    docs.add(new Pair(params, getFileContent(params, \"solrj/docs1.xml\")));\n\n    params = new NamedList();\n    params.add(ASSUME_CONTENT_TYPE, \"application/csv\");\n    docs.add(new Pair(params, getFileContent(params, \"solrj/books.csv\")));\n\n    MultiContentWriterRequest up = new MultiContentWriterRequest(SolrRequest.METHOD.POST, \"/update\", docs.iterator());\n    up.setAction(AbstractUpdateRequest.ACTION.COMMIT, true, true);\n    NamedList<Object> result = client.request(up);\n    System.out.println(result.jsonStr());\n    rsp = client.query(new SolrQuery(\"*:*\"));\n    Assert.assertEquals(12, rsp.getResults().getNumFound());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"7b6c193737882b94fcb01749c75371bf7d7d4c93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b6c193737882b94fcb01749c75371bf7d7d4c93":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b6c193737882b94fcb01749c75371bf7d7d4c93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}