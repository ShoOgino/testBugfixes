{"path":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"/dev/null","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":null,"sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"/dev/null","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    // query a random server\n    params.set(\"shards\", shards);\n    int which = r.nextInt(clients.size());\n    SolrServer client = clients.get(which);\n    QueryResponse rsp = client.query(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252","e19067e820b148e8dc0b240da4f2771cf7b68252"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":null,"sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["1da8d55113b689b06716246649de6f62430f15c0"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b09c7419b92e982a901698cb401ce22ac35e4b04"],"d20d5e40789b1c42f4f926e3174b271256c43657":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b09c7419b92e982a901698cb401ce22ac35e4b04":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["1da8d55113b689b06716246649de6f62430f15c0","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","b09c7419b92e982a901698cb401ce22ac35e4b04"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["d20d5e40789b1c42f4f926e3174b271256c43657","29ef99d61cda9641b6250bf9567329a6e65f901d","b09c7419b92e982a901698cb401ce22ac35e4b04","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1da8d55113b689b06716246649de6f62430f15c0":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["135621f3a0670a9394eb563224a3b76cc4dddc0f","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"45669a651c970812a680841b97a77cce06af559f":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}