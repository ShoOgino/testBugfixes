{"path":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":["c084e47df29de3330311d69dabf515ceaa989512"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    TopScorer ts = weight.topScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a5794e5c995c57444b154b01a9f3c837cd530a77","date":1394190201,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    TopScorer ts = weight.topScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    Scorer ts = weight.scorer(context, true, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<TestHit>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new Collector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      public void setNextReader(AtomicReaderContext context) {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof AtomicReaderContext);\n    AtomicReaderContext context = (AtomicReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, true, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean acceptsDocsOutOfOrder() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs(), true);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs(), true);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, PostingsEnum.FLAG_FREQS);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, PostingsEnum.FLAG_FREQS);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context, context.reader().getLiveDocs());\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    });\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n    /*\n     * Score should be (based on Default Sim.: All floats are approximate tf = 1\n     * numDocs = 6 docFreq(all) = 2 idf = ln(6/3) + 1 = 1.693147 idf ^ 2 =\n     * 2.8667 boost = 1 lengthNorm = 1 //there is 1 term in every document coord\n     * = 1 sumOfSquaredWeights = (idf * boost) ^ 2 = 1.693147 ^ 2 = 2.8667\n     * queryNorm = 1 / (sumOfSquaredWeights)^0.5 = 1 /(1.693147) = 0.590\n     * \n     * score = 1 * 2.8667 * 1 * 1 * 0.590 = 1.69\n     */\n    assertTrue(doc0.score + \" does not equal: \" + 1.6931472f,\n        doc0.score == 1.6931472f);\n  }\n\n","bugFix":["c084e47df29de3330311d69dabf515ceaa989512"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, true);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public boolean needsScores() {\n        return true;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"475584d5e08a22ad3fc7babefe006d77bc744567","date":1523282824,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE, 1);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE, 1);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createNormalizedWeight(termQuery, ScoreMode.COMPLETE);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestTermScorer#test().mjava","sourceNew":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE, 1);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorable scorer;\n      \n      @Override\n      public void setScorer(Scorable scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    \n    Term allTerm = new Term(FIELD, \"all\");\n    TermQuery termQuery = new TermQuery(allTerm);\n    \n    Weight weight = indexSearcher.createWeight(termQuery, ScoreMode.COMPLETE, 1);\n    assertTrue(indexSearcher.getTopReaderContext() instanceof LeafReaderContext);\n    LeafReaderContext context = (LeafReaderContext)indexSearcher.getTopReaderContext();\n    BulkScorer ts = weight.bulkScorer(context);\n    // we have 2 documents with the term all in them, one document for all the\n    // other values\n    final List<TestHit> docs = new ArrayList<>();\n    // must call next first\n    \n    ts.score(new SimpleCollector() {\n      private int base = 0;\n      private Scorer scorer;\n      \n      @Override\n      public void setScorer(Scorer scorer) {\n        this.scorer = scorer;\n      }\n      \n      @Override\n      public void collect(int doc) throws IOException {\n        float score = scorer.score();\n        doc = doc + base;\n        docs.add(new TestHit(doc, score));\n        assertTrue(\"score \" + score + \" is not greater than 0\", score > 0);\n        assertTrue(\"Doc: \" + doc + \" does not equal 0 or doc does not equal 5\",\n            doc == 0 || doc == 5);\n      }\n      \n      @Override\n      protected void doSetNextReader(LeafReaderContext context) throws IOException {\n        base = context.docBase;\n      }\n      \n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.COMPLETE;\n      }\n    }, null);\n    assertTrue(\"docs Size: \" + docs.size() + \" is not: \" + 2, docs.size() == 2);\n    TestHit doc0 = docs.get(0);\n    TestHit doc5 = docs.get(1);\n    // The scores should be the same\n    assertTrue(doc0.score + \" does not equal: \" + doc5.score,\n        doc0.score == doc5.score);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"475584d5e08a22ad3fc7babefe006d77bc744567":["417142ff08fda9cf0b72d5133e63097a166c6458"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"417142ff08fda9cf0b72d5133e63097a166c6458":["6e75448368ba628d73e9967b45e29c40bbfe39fa","9fc47cb7b4346802411bb432f501ed0673d7119e"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["417142ff08fda9cf0b72d5133e63097a166c6458","475584d5e08a22ad3fc7babefe006d77bc744567"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","ae73da626f97850c922c42736f808d0378e165f0"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","a5794e5c995c57444b154b01a9f3c837cd530a77"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a5794e5c995c57444b154b01a9f3c837cd530a77"],"6a47d642ab24da1a811adce4bda9cc52c520ca13":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"475584d5e08a22ad3fc7babefe006d77bc744567":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["417142ff08fda9cf0b72d5133e63097a166c6458","9fc47cb7b4346802411bb432f501ed0673d7119e"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"417142ff08fda9cf0b72d5133e63097a166c6458":["475584d5e08a22ad3fc7babefe006d77bc744567","d58e44159788900f4a2113b84463dc3fbbf80f20"],"d58e44159788900f4a2113b84463dc3fbbf80f20":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ae73da626f97850c922c42736f808d0378e165f0":["c9fb5f46e264daf5ba3860defe623a89d202dd87","15e323346eac5e4685c0a9f2df85eb96b4239bbb"],"a5794e5c995c57444b154b01a9f3c837cd530a77":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","fe33227f6805edab2036cbb80645cc4e2d1fa424","acf00221f44c5f08ccea014f2492b53af15ecd66"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}