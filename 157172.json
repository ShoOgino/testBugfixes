{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#listZnode(SolrZkClient,String,Boolean).mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#listZnode(SolrZkClient,String,Boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Lists a ZNode child and (optionally) the znodes of all the children. No data is dumped.\n   *\n   * @param path    The node to remove on Zookeeper\n   * @param recurse Whether to remove children.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   * @throws SolrServerException  zookeeper node has children and recurse not specified.\n   * @returns an indented list of the znodes suitable for display\n   */\n  public static String listZnode(SolrZkClient zkClient, String path, Boolean recurse) throws KeeperException, InterruptedException, SolrServerException {\n    String root = path;\n\n    if (path.toLowerCase(Locale.ROOT).startsWith(\"zk:\")) {\n      root = path.substring(3);\n    }\n    if (root.equals(\"/\") == false && root.endsWith(\"/\")) {\n      root = root.substring(0, root.length() - 1);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    \n    if (recurse == false) {\n      for (String node : zkClient.getChildren(root, null, true)) {\n        if (node.equals(\"zookeeper\") == false) {\n          sb.append(node).append(System.lineSeparator());\n        }\n      }\n      return sb.toString();\n    }\n    \n    traverseZkTree(zkClient, root, VISIT_ORDER.VISIT_PRE, znode -> {\n      if (znode.startsWith(\"/zookeeper\")) return; // can't do anything with this node!\n      int iPos = znode.lastIndexOf(\"/\");\n      if (iPos > 0) {\n        for (int idx = 0; idx < iPos; ++idx) sb.append(\" \");\n        sb.append(znode.substring(iPos + 1)).append(System.lineSeparator());\n      } else {\n        sb.append(znode).append(System.lineSeparator());\n      }\n    });\n\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d5b515f281a63ffbd9030d4f3d458ede2e416337","date":1467591265,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#listZnode(SolrZkClient,String,Boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#listZnode(SolrZkClient,String,Boolean).mjava","sourceNew":"  /**\n   * Lists a ZNode child and (optionally) the znodes of all the children. No data is dumped.\n   *\n   * @param path    The node to remove on Zookeeper\n   * @param recurse Whether to remove children.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   * @throws SolrServerException  zookeeper node has children and recurse not specified.\n   * @return an indented list of the znodes suitable for display\n   */\n  public static String listZnode(SolrZkClient zkClient, String path, Boolean recurse) throws KeeperException, InterruptedException, SolrServerException {\n    String root = path;\n\n    if (path.toLowerCase(Locale.ROOT).startsWith(\"zk:\")) {\n      root = path.substring(3);\n    }\n    if (root.equals(\"/\") == false && root.endsWith(\"/\")) {\n      root = root.substring(0, root.length() - 1);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    \n    if (recurse == false) {\n      for (String node : zkClient.getChildren(root, null, true)) {\n        if (node.equals(\"zookeeper\") == false) {\n          sb.append(node).append(System.lineSeparator());\n        }\n      }\n      return sb.toString();\n    }\n    \n    traverseZkTree(zkClient, root, VISIT_ORDER.VISIT_PRE, znode -> {\n      if (znode.startsWith(\"/zookeeper\")) return; // can't do anything with this node!\n      int iPos = znode.lastIndexOf(\"/\");\n      if (iPos > 0) {\n        for (int idx = 0; idx < iPos; ++idx) sb.append(\" \");\n        sb.append(znode.substring(iPos + 1)).append(System.lineSeparator());\n      } else {\n        sb.append(znode).append(System.lineSeparator());\n      }\n    });\n\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Lists a ZNode child and (optionally) the znodes of all the children. No data is dumped.\n   *\n   * @param path    The node to remove on Zookeeper\n   * @param recurse Whether to remove children.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   * @throws SolrServerException  zookeeper node has children and recurse not specified.\n   * @returns an indented list of the znodes suitable for display\n   */\n  public static String listZnode(SolrZkClient zkClient, String path, Boolean recurse) throws KeeperException, InterruptedException, SolrServerException {\n    String root = path;\n\n    if (path.toLowerCase(Locale.ROOT).startsWith(\"zk:\")) {\n      root = path.substring(3);\n    }\n    if (root.equals(\"/\") == false && root.endsWith(\"/\")) {\n      root = root.substring(0, root.length() - 1);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    \n    if (recurse == false) {\n      for (String node : zkClient.getChildren(root, null, true)) {\n        if (node.equals(\"zookeeper\") == false) {\n          sb.append(node).append(System.lineSeparator());\n        }\n      }\n      return sb.toString();\n    }\n    \n    traverseZkTree(zkClient, root, VISIT_ORDER.VISIT_PRE, znode -> {\n      if (znode.startsWith(\"/zookeeper\")) return; // can't do anything with this node!\n      int iPos = znode.lastIndexOf(\"/\");\n      if (iPos > 0) {\n        for (int idx = 0; idx < iPos; ++idx) sb.append(\" \");\n        sb.append(znode.substring(iPos + 1)).append(System.lineSeparator());\n      } else {\n        sb.append(znode).append(System.lineSeparator());\n      }\n    });\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#listZnode(SolrZkClient,String,Boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Lists a ZNode child and (optionally) the znodes of all the children. No data is dumped.\n   *\n   * @param path    The node to remove on Zookeeper\n   * @param recurse Whether to remove children.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   * @throws SolrServerException  zookeeper node has children and recurse not specified.\n   * @return an indented list of the znodes suitable for display\n   */\n  public static String listZnode(SolrZkClient zkClient, String path, Boolean recurse) throws KeeperException, InterruptedException, SolrServerException {\n    String root = path;\n\n    if (path.toLowerCase(Locale.ROOT).startsWith(\"zk:\")) {\n      root = path.substring(3);\n    }\n    if (root.equals(\"/\") == false && root.endsWith(\"/\")) {\n      root = root.substring(0, root.length() - 1);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    \n    if (recurse == false) {\n      for (String node : zkClient.getChildren(root, null, true)) {\n        if (node.equals(\"zookeeper\") == false) {\n          sb.append(node).append(System.lineSeparator());\n        }\n      }\n      return sb.toString();\n    }\n    \n    traverseZkTree(zkClient, root, VISIT_ORDER.VISIT_PRE, znode -> {\n      if (znode.startsWith(\"/zookeeper\")) return; // can't do anything with this node!\n      int iPos = znode.lastIndexOf(\"/\");\n      if (iPos > 0) {\n        for (int idx = 0; idx < iPos; ++idx) sb.append(\" \");\n        sb.append(znode.substring(iPos + 1)).append(System.lineSeparator());\n      } else {\n        sb.append(znode).append(System.lineSeparator());\n      }\n    });\n\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b4e25416a41abd13d1febb3eebf589cbc71e5ae","date":1595017101,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#listZnode(SolrZkClient,String,Boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ZkMaintenanceUtils#listZnode(SolrZkClient,String,Boolean).mjava","sourceNew":"  /**\n   * Lists a ZNode child and (optionally) the znodes of all the children. No data is dumped.\n   *\n   * @param path    The node to remove on Zookeeper\n   * @param recurse Whether to remove children.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   * @throws SolrServerException  zookeeper node has children and recurse not specified.\n   * @return an indented list of the znodes suitable for display\n   */\n  public static String listZnode(SolrZkClient zkClient, String path, Boolean recurse) throws KeeperException, InterruptedException, SolrServerException {\n    String root = path;\n\n    if (path.toLowerCase(Locale.ROOT).startsWith(\"zk:\")) {\n      root = path.substring(3);\n    }\n    if (root.equals(\"/\") == false && root.endsWith(\"/\")) {\n      root = root.substring(0, root.length() - 1);\n    }\n\n    StringBuilder sb = new StringBuilder();\n\n    if (recurse == false) {\n      for (String node : zkClient.getChildren(root, null, true)) {\n        if (node.equals(\"zookeeper\") == false) {\n          sb.append(node).append(System.lineSeparator());\n        }\n      }\n      return sb.toString();\n    }\n\n    traverseZkTree(zkClient, root, VISIT_ORDER.VISIT_PRE, znode -> {\n      if (znode.startsWith(\"/zookeeper\")) return; // can't do anything with this node!\n      int iPos = znode.lastIndexOf(\"/\");\n      if (iPos > 0) {\n        for (int idx = 0; idx < iPos; ++idx) sb.append(\" \");\n        sb.append(znode.substring(iPos + 1)).append(System.lineSeparator());\n      } else {\n        sb.append(znode).append(System.lineSeparator());\n      }\n    });\n\n    return sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Lists a ZNode child and (optionally) the znodes of all the children. No data is dumped.\n   *\n   * @param path    The node to remove on Zookeeper\n   * @param recurse Whether to remove children.\n   * @throws KeeperException      Could not perform the Zookeeper operation.\n   * @throws InterruptedException Thread interrupted\n   * @throws SolrServerException  zookeeper node has children and recurse not specified.\n   * @return an indented list of the znodes suitable for display\n   */\n  public static String listZnode(SolrZkClient zkClient, String path, Boolean recurse) throws KeeperException, InterruptedException, SolrServerException {\n    String root = path;\n\n    if (path.toLowerCase(Locale.ROOT).startsWith(\"zk:\")) {\n      root = path.substring(3);\n    }\n    if (root.equals(\"/\") == false && root.endsWith(\"/\")) {\n      root = root.substring(0, root.length() - 1);\n    }\n\n    StringBuilder sb = new StringBuilder();\n    \n    if (recurse == false) {\n      for (String node : zkClient.getChildren(root, null, true)) {\n        if (node.equals(\"zookeeper\") == false) {\n          sb.append(node).append(System.lineSeparator());\n        }\n      }\n      return sb.toString();\n    }\n    \n    traverseZkTree(zkClient, root, VISIT_ORDER.VISIT_PRE, znode -> {\n      if (znode.startsWith(\"/zookeeper\")) return; // can't do anything with this node!\n      int iPos = znode.lastIndexOf(\"/\");\n      if (iPos > 0) {\n        for (int idx = 0; idx < iPos; ++idx) sb.append(\" \");\n        sb.append(znode.substring(iPos + 1)).append(System.lineSeparator());\n      } else {\n        sb.append(znode).append(System.lineSeparator());\n      }\n    });\n\n    return sb.toString();\n  }\n\n","bugFix":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["d5b515f281a63ffbd9030d4f3d458ede2e416337"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d5b515f281a63ffbd9030d4f3d458ede2e416337":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5b515f281a63ffbd9030d4f3d458ede2e416337"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae"]},"commit2Childs":{"1b4e25416a41abd13d1febb3eebf589cbc71e5ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["d5b515f281a63ffbd9030d4f3d458ede2e416337"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d5b515f281a63ffbd9030d4f3d458ede2e416337":["1b4e25416a41abd13d1febb3eebf589cbc71e5ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}