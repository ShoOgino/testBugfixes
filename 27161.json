{"path":"backwards/src/java/org/apache/lucene/analysis/TokenStream#incrementToken().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/TokenStream#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Consumers (i.e., {@link IndexWriter}) use this method to advance the stream to\n   * the next token. Implementing classes must implement this method and update\n   * the appropriate {@link AttributeImpl}s with the attributes of the next\n   * token.\n   * <P>\n   * The producer must make no assumptions about the attributes after the method\n   * has been returned: the caller may arbitrarily change it. If the producer\n   * needs to preserve the state for subsequent calls, it can use\n   * {@link #captureState} to create a copy of the current attribute state.\n   * <p>\n   * This method is called for every token of a document, so an efficient\n   * implementation is crucial for good performance. To avoid calls to\n   * {@link #addAttribute(Class)} and {@link #getAttribute(Class)},\n   * references to all {@link AttributeImpl}s that this stream uses should be\n   * retrieved during instantiation.\n   * <p>\n   * To ensure that filters and consumers know which attributes are available,\n   * the attributes must be added during instantiation. Filters and consumers\n   * are not required to check for availability of attributes in\n   * {@link #incrementToken()}.\n   * \n   * @return false for end of stream; true otherwise\n   */\n  public abstract boolean incrementToken() throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/TokenStream#incrementToken().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/TokenStream#incrementToken().mjava","sourceNew":"  /**\n   * Consumers (i.e., {@link IndexWriter}) use this method to advance the stream to\n   * the next token. Implementing classes must implement this method and update\n   * the appropriate {@link AttributeImpl}s with the attributes of the next\n   * token.\n   * <P>\n   * The producer must make no assumptions about the attributes after the method\n   * has been returned: the caller may arbitrarily change it. If the producer\n   * needs to preserve the state for subsequent calls, it can use\n   * {@link #captureState} to create a copy of the current attribute state.\n   * <p>\n   * This method is called for every token of a document, so an efficient\n   * implementation is crucial for good performance. To avoid calls to\n   * {@link #addAttribute(Class)} and {@link #getAttribute(Class)},\n   * references to all {@link AttributeImpl}s that this stream uses should be\n   * retrieved during instantiation.\n   * <p>\n   * To ensure that filters and consumers know which attributes are available,\n   * the attributes must be added during instantiation. Filters and consumers\n   * are not required to check for availability of attributes in\n   * {@link #incrementToken()}.\n   * \n   * @return false for end of stream; true otherwise\n   */\n  public abstract boolean incrementToken() throws IOException;\n\n","sourceOld":"  /**\n   * Consumers (i.e., {@link IndexWriter}) use this method to advance the stream to\n   * the next token. Implementing classes must implement this method and update\n   * the appropriate {@link AttributeImpl}s with the attributes of the next\n   * token.\n   * <P>\n   * The producer must make no assumptions about the attributes after the method\n   * has been returned: the caller may arbitrarily change it. If the producer\n   * needs to preserve the state for subsequent calls, it can use\n   * {@link #captureState} to create a copy of the current attribute state.\n   * <p>\n   * This method is called for every token of a document, so an efficient\n   * implementation is crucial for good performance. To avoid calls to\n   * {@link #addAttribute(Class)} and {@link #getAttribute(Class)},\n   * references to all {@link AttributeImpl}s that this stream uses should be\n   * retrieved during instantiation.\n   * <p>\n   * To ensure that filters and consumers know which attributes are available,\n   * the attributes must be added during instantiation. Filters and consumers\n   * are not required to check for availability of attributes in\n   * {@link #incrementToken()}.\n   * \n   * @return false for end of stream; true otherwise\n   */\n  public abstract boolean incrementToken() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":6,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/analysis/TokenStream#incrementToken().mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/TokenStream#incrementToken().mjava","sourceNew":"  /**\n   * Consumers (i.e., {@link IndexWriter}) use this method to advance the stream to\n   * the next token. Implementing classes must implement this method and update\n   * the appropriate {@link AttributeImpl}s with the attributes of the next\n   * token.\n   * <P>\n   * The producer must make no assumptions about the attributes after the method\n   * has been returned: the caller may arbitrarily change it. If the producer\n   * needs to preserve the state for subsequent calls, it can use\n   * {@link #captureState} to create a copy of the current attribute state.\n   * <p>\n   * This method is called for every token of a document, so an efficient\n   * implementation is crucial for good performance. To avoid calls to\n   * {@link #addAttribute(Class)} and {@link #getAttribute(Class)},\n   * references to all {@link AttributeImpl}s that this stream uses should be\n   * retrieved during instantiation.\n   * <p>\n   * To ensure that filters and consumers know which attributes are available,\n   * the attributes must be added during instantiation. Filters and consumers\n   * are not required to check for availability of attributes in\n   * {@link #incrementToken()}.\n   * \n   * @return false for end of stream; true otherwise\n   */\n  public abstract boolean incrementToken() throws IOException;\n\n","sourceOld":"  /**\n   * Consumers (i.e., {@link IndexWriter}) use this method to advance the stream to\n   * the next token. Implementing classes must implement this method and update\n   * the appropriate {@link AttributeImpl}s with the attributes of the next\n   * token.\n   * <P>\n   * The producer must make no assumptions about the attributes after the method\n   * has been returned: the caller may arbitrarily change it. If the producer\n   * needs to preserve the state for subsequent calls, it can use\n   * {@link #captureState} to create a copy of the current attribute state.\n   * <p>\n   * This method is called for every token of a document, so an efficient\n   * implementation is crucial for good performance. To avoid calls to\n   * {@link #addAttribute(Class)} and {@link #getAttribute(Class)},\n   * references to all {@link AttributeImpl}s that this stream uses should be\n   * retrieved during instantiation.\n   * <p>\n   * To ensure that filters and consumers know which attributes are available,\n   * the attributes must be added during instantiation. Filters and consumers\n   * are not required to check for availability of attributes in\n   * {@link #incrementToken()}.\n   * \n   * @return false for end of stream; true otherwise\n   */\n  public abstract boolean incrementToken() throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}