{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#insert(TernaryTreeNode,CharSequence,Object,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#insert(TernaryTreeNode,CharSequence,Object,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/tst/TSTAutocomplete#insert(TernaryTreeNode,CharSequence,Object,int).mjava","sourceNew":"  /**\n   * Inserts a key in TST creating a series of Binary Search Trees at each node.\n   * The key is actually stored across the eqKid of each node in a successive\n   * manner.\n   * \n   * @param currentNode\n   *          a reference node where the insertion will take currently.\n   * @param s\n   *          key to be inserted in TST.\n   * @param x\n   *          index of character in key to be inserted currently.\n   * @return currentNode The new reference to root node of TST\n   */\n  public TernaryTreeNode insert(TernaryTreeNode currentNode, CharSequence s,\n          Object val, int x) {\n    if (s == null || s.length() <= x) {\n      return currentNode;\n    }\n    if (currentNode == null) {\n      TernaryTreeNode newNode = new TernaryTreeNode();\n      newNode.splitchar = s.charAt(x);\n      currentNode = newNode;\n      if (x < s.length() - 1) {\n        currentNode.eqKid = insert(currentNode.eqKid, s, val, x + 1);\n      } else {\n        currentNode.token = s.toString();\n        currentNode.val = val;\n        return currentNode;\n      }\n    } else if (currentNode.splitchar > s.charAt(x)) {\n      currentNode.loKid = insert(currentNode.loKid, s, val, x);\n    } else if (currentNode.splitchar == s.charAt(x)) {\n      if (x < s.length() - 1) {\n        currentNode.eqKid = insert(currentNode.eqKid, s, val, x + 1);\n      } else {\n        currentNode.token = s.toString();\n        currentNode.val = val;\n        return currentNode;\n      }\n    } else {\n      currentNode.hiKid = insert(currentNode.hiKid, s, val, x);\n    }\n    return currentNode;\n  }\n\n","sourceOld":"  /**\n   * Inserts a key in TST creating a series of Binary Search Trees at each node.\n   * The key is actually stored across the eqKid of each node in a successive\n   * manner.\n   * \n   * @param currentNode\n   *          a reference node where the insertion will take currently.\n   * @param s\n   *          key to be inserted in TST.\n   * @param x\n   *          index of character in key to be inserted currently.\n   * @return currentNode The new reference to root node of TST\n   */\n  public TernaryTreeNode insert(TernaryTreeNode currentNode, CharSequence s,\n          Object val, int x) {\n    if (s == null || s.length() <= x) {\n      return currentNode;\n    }\n    if (currentNode == null) {\n      TernaryTreeNode newNode = new TernaryTreeNode();\n      newNode.splitchar = s.charAt(x);\n      currentNode = newNode;\n      if (x < s.length() - 1) {\n        currentNode.eqKid = insert(currentNode.eqKid, s, val, x + 1);\n      } else {\n        currentNode.token = s.toString();\n        currentNode.val = val;\n        return currentNode;\n      }\n    } else if (currentNode.splitchar > s.charAt(x)) {\n      currentNode.loKid = insert(currentNode.loKid, s, val, x);\n    } else if (currentNode.splitchar == s.charAt(x)) {\n      if (x < s.length() - 1) {\n        currentNode.eqKid = insert(currentNode.eqKid, s, val, x + 1);\n      } else {\n        currentNode.token = s.toString();\n        currentNode.val = val;\n        return currentNode;\n      }\n    } else {\n      currentNode.hiKid = insert(currentNode.hiKid, s, val, x);\n    }\n    return currentNode;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}