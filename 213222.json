{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNotNearVersusSpanTerm().mjava","commits":[{"id":"83d0ae2c96d5b296baa43ab95461a740ba9cb1a6","date":1428265225,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNotNearVersusSpanTerm().mjava","pathOld":"/dev/null","sourceNew":"  /** SpanNotQuery(A, [B C]) ⊆ SpanTermQuery(A) */\n  public void testSpanNotNearVersusSpanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery near = new SpanNearQuery(new SpanQuery[] { new SpanTermQuery(t2), new SpanTermQuery(t3) }, 10, random().nextBoolean());\n    assertSubsetOf(new SpanNotQuery(new SpanTermQuery(t1), near), new SpanTermQuery(t1));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28b61f1c9cf357a13efbb645d116d056feb80cf6","date":1428863054,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNotNearVersusSpanTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNotNearVersusSpanTerm().mjava","sourceNew":"  /** SpanNotQuery(A, [B C]) ⊆ SpanTermQuery(A) */\n  public void testSpanNotNearVersusSpanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery near = span(new SpanNearQuery(new SpanQuery[] { \n                                              span(new SpanTermQuery(t2)), \n                                              span(new SpanTermQuery(t3)) \n                                            }, 10, random().nextBoolean()));\n    assertSubsetOf(span(new SpanNotQuery(span(new SpanTermQuery(t1)), near)), span(new SpanTermQuery(t1)));\n  }\n\n","sourceOld":"  /** SpanNotQuery(A, [B C]) ⊆ SpanTermQuery(A) */\n  public void testSpanNotNearVersusSpanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery near = new SpanNearQuery(new SpanQuery[] { new SpanTermQuery(t2), new SpanTermQuery(t3) }, 10, random().nextBoolean());\n    assertSubsetOf(new SpanNotQuery(new SpanTermQuery(t1), near), new SpanTermQuery(t1));\n  }\n\n","bugFix":["83d0ae2c96d5b296baa43ab95461a740ba9cb1a6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNotNearVersusSpanTerm().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpanSearchEquivalence#testSpanNotNearVersusSpanTerm().mjava","sourceNew":"  /** SpanNotQuery(A, [B C]) ⊆ SpanTermQuery(A) */\n  public void testSpanNotNearVersusSpanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery near = spanQuery(new SpanNearQuery(new SpanQuery[] { \n                                              spanQuery(new SpanTermQuery(t2)), \n                                              spanQuery(new SpanTermQuery(t3)) \n                                            }, 10, random().nextBoolean()));\n    assertSubsetOf(spanQuery(new SpanNotQuery(spanQuery(new SpanTermQuery(t1)), near)), spanQuery(new SpanTermQuery(t1)));\n  }\n\n","sourceOld":"  /** SpanNotQuery(A, [B C]) ⊆ SpanTermQuery(A) */\n  public void testSpanNotNearVersusSpanTerm() throws Exception {\n    Term t1 = randomTerm();\n    Term t2 = randomTerm();\n    Term t3 = randomTerm();\n    SpanQuery near = span(new SpanNearQuery(new SpanQuery[] { \n                                              span(new SpanTermQuery(t2)), \n                                              span(new SpanTermQuery(t3)) \n                                            }, 10, random().nextBoolean()));\n    assertSubsetOf(span(new SpanNotQuery(span(new SpanTermQuery(t1)), near)), span(new SpanTermQuery(t1)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["83d0ae2c96d5b296baa43ab95461a740ba9cb1a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"83d0ae2c96d5b296baa43ab95461a740ba9cb1a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83d0ae2c96d5b296baa43ab95461a740ba9cb1a6"],"28b61f1c9cf357a13efbb645d116d056feb80cf6":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"83d0ae2c96d5b296baa43ab95461a740ba9cb1a6":["28b61f1c9cf357a13efbb645d116d056feb80cf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}