{"path":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","commits":[{"id":"ce511b88510766951528ad497e1886e27b7688e4","date":1332778117,"type":1,"author":"Christian Moen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestKuromojiTokenizerFactory#testUserDict().mjava","sourceNew":"  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"user-dictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","sourceOld":"  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"user-dictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2337069d9afb809f117538f07c3e20ee830125f","date":1332955248,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","sourceNew":"  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","sourceOld":"  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"user-dictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a39b75721995ff0b560f0e1cfc08ab55c70ac41","date":1342084742,"type":3,"author":"Christian Moen","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","sourceNew":"  /**\n   * Test user dictionary\n   */\n  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","sourceOld":"  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","sourceNew":"  /**\n   * Test user dictionary\n   */\n  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","sourceOld":"  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testUserDict().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","sourceNew":"  /**\n   * Test user dictionary\n   */\n  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","sourceOld":"  /**\n   * Test user dictionary\n   */\n  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizerFactory#testUserDict().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","sourceNew":"  /**\n   * Test user dictionary\n   */\n  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","sourceOld":"  /**\n   * Test user dictionary\n   */\n  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","sourceNew":null,"sourceOld":"  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestJapaneseTokenizerFactory#testUserDict().mjava","sourceNew":null,"sourceOld":"  /**\n   * Test user dictionary\n   */\n  public void testUserDict() throws IOException {\n    String userDict = \n        \"# Custom segmentation for long entries\\n\" +\n        \"日本経済新聞,日本 経済 新聞,ニホン ケイザイ シンブン,カスタム名詞\\n\" +\n        \"関西国際空港,関西 国際 空港,カンサイ コクサイ クウコウ,テスト名詞\\n\" +\n        \"# Custom reading for sumo wrestler\\n\" +\n        \"朝青龍,朝青龍,アサショウリュウ,カスタム人名\\n\";\n    JapaneseTokenizerFactory factory = new JapaneseTokenizerFactory();\n    Map<String,String> args = new HashMap<String,String>();\n    args.put(\"userDictionary\", \"userdict.txt\");\n    factory.init(args);\n    factory.inform(new StringMockSolrResourceLoader(userDict));\n    TokenStream ts = factory.create(new StringReader(\"関西国際空港に行った\"));\n    assertTokenStreamContents(ts,\n        new String[] { \"関西\", \"国際\", \"空港\", \"に\",  \"行っ\",  \"た\" }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["d2337069d9afb809f117538f07c3e20ee830125f","5a1a22b1ad88b436661458df567f3fdb446392a4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d2337069d9afb809f117538f07c3e20ee830125f","3a39b75721995ff0b560f0e1cfc08ab55c70ac41"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4"],"d2337069d9afb809f117538f07c3e20ee830125f":["ce511b88510766951528ad497e1886e27b7688e4"],"ce511b88510766951528ad497e1886e27b7688e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a39b75721995ff0b560f0e1cfc08ab55c70ac41":["d2337069d9afb809f117538f07c3e20ee830125f"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["3a39b75721995ff0b560f0e1cfc08ab55c70ac41","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["3a39b75721995ff0b560f0e1cfc08ab55c70ac41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a1a22b1ad88b436661458df567f3fdb446392a4"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ce511b88510766951528ad497e1886e27b7688e4"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d2337069d9afb809f117538f07c3e20ee830125f":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","3a39b75721995ff0b560f0e1cfc08ab55c70ac41"],"ce511b88510766951528ad497e1886e27b7688e4":["d2337069d9afb809f117538f07c3e20ee830125f"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a39b75721995ff0b560f0e1cfc08ab55c70ac41":["fe33227f6805edab2036cbb80645cc4e2d1fa424","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}