{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/Config#Config(Reader).mjava","sourceNew":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","sourceOld":"  /**\n   * Read both algorithm and config properties.\n   *\n   * @param algReader from where to read algorithm and config properties.\n   * @throws IOException\n   */\n  public Config(Reader algReader) throws IOException {\n    // read alg file to array of lines\n    ArrayList<String> lines = new ArrayList<String>();\n    BufferedReader r = new BufferedReader(algReader);\n    int lastConfigLine = 0;\n    for (String line = r.readLine(); line != null; line = r.readLine()) {\n      lines.add(line);\n      if (line.indexOf('=') > 0) {\n        lastConfigLine = lines.size();\n      }\n    }\n    r.close();\n    // copy props lines to string\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < lastConfigLine; i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    // read props from string\n    this.props = new Properties();\n    props.load(new ByteArrayInputStream(sb.toString().getBytes()));\n\n    // make sure work dir is set properly \n    if (props.get(\"work.dir\") == null) {\n      props.setProperty(\"work.dir\", System.getProperty(\"benchmark.work.dir\", \"work\"));\n    }\n\n    if (Boolean.valueOf(props.getProperty(\"print.props\", DEFAULT_PRINT_PROPS)).booleanValue()) {\n      printProps();\n    }\n\n    // copy algorithm lines\n    sb = new StringBuilder();\n    for (int i = lastConfigLine; i < lines.size(); i++) {\n      sb.append(lines.get(i));\n      sb.append(NEW_LINE);\n    }\n    algorithmText = sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","b89678825b68eccaf09e6ab71675fc0b0af1e099","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}