{"path":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parsePoint(String[],String,int).mjava","commits":[{"id":"459be89020f9023e3b60066066a892c7edb5de58","date":1279657074,"type":1,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parsePoint(String[],String,int).mjava","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/tier/DistanceUtils#parsePoint(String[],String,int).mjava","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a String array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws org.apache.lucene.spatial.tier.InvalidGeoException if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static String[] parsePoint(String[] out, String externalVal, int dimension) throws InvalidGeoException {\n    //TODO: Should we support sparse vectors?\n    if (out == null || out.length != dimension) out = new String[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = externalVal.trim();\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        if (start == end) {\n          break;\n        }\n        out[i] = externalVal.substring(start, end);\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        idx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new InvalidGeoException(\"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a String array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws InvalidGeoException if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static String[] parsePoint(String[] out, String externalVal, int dimension) throws InvalidGeoException{\n    //TODO: Should we support sparse vectors?\n    if (out == null || out.length != dimension) out = new String[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = externalVal.trim();\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        if (start == end) {\n          break;\n        }\n        out[i] = externalVal.substring(start, end);\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        idx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new InvalidGeoException(\"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parsePoint(String[],String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a String array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws org.apache.lucene.spatial.tier.InvalidGeoException if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static String[] parsePoint(String[] out, String externalVal, int dimension) throws InvalidGeoException {\n    //TODO: Should we support sparse vectors?\n    if (out == null || out.length != dimension) out = new String[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = externalVal.trim();\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        if (start == end) {\n          break;\n        }\n        out[i] = externalVal.substring(start, end);\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        idx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new InvalidGeoException(\"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fb7e38713d15939e085d376c6391e6e6262a81f","date":1329897272,"type":4,"author":"David Wayne Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parsePoint(String[],String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a String array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws org.apache.lucene.spatial.tier.InvalidGeoException if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static String[] parsePoint(String[] out, String externalVal, int dimension) throws InvalidGeoException {\n    //TODO: Should we support sparse vectors?\n    if (out == null || out.length != dimension) out = new String[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = externalVal.trim();\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        if (start == end) {\n          break;\n        }\n        out[i] = externalVal.substring(start, end);\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        idx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new InvalidGeoException(\"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":4,"author":"Ryan McKinley","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/DistanceUtils#parsePoint(String[],String,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Given a string containing <i>dimension</i> values encoded in it, separated by commas, return a String array of length <i>dimension</i>\n   * containing the values.\n   *\n   * @param out         A preallocated array.  Must be size dimension.  If it is not it will be resized.\n   * @param externalVal The value to parse\n   * @param dimension   The expected number of values for the point\n   * @return An array of the values that make up the point (aka vector)\n   * @throws org.apache.lucene.spatial.tier.InvalidGeoException if the dimension specified does not match the number of values in the externalValue.\n   */\n  public static String[] parsePoint(String[] out, String externalVal, int dimension) throws InvalidGeoException {\n    //TODO: Should we support sparse vectors?\n    if (out == null || out.length != dimension) out = new String[dimension];\n    int idx = externalVal.indexOf(',');\n    int end = idx;\n    int start = 0;\n    int i = 0;\n    if (idx == -1 && dimension == 1 && externalVal.length() > 0) {//we have a single point, dimension better be 1\n      out[0] = externalVal.trim();\n      i = 1;\n    } else if (idx > 0) {//if it is zero, that is an error\n      //Parse out a comma separated list of point values, as in: 73.5,89.2,7773.4\n      for (; i < dimension; i++) {\n        while (start < end && externalVal.charAt(start) == ' ') start++;\n        while (end > start && externalVal.charAt(end - 1) == ' ') end--;\n        if (start == end) {\n          break;\n        }\n        out[i] = externalVal.substring(start, end);\n        start = idx + 1;\n        end = externalVal.indexOf(',', start);\n        idx = end;\n        if (end == -1) {\n          end = externalVal.length();\n        }\n      }\n    }\n    if (i != dimension) {\n      throw new InvalidGeoException(\"incompatible dimension (\" + dimension +\n              \") and values (\" + externalVal + \").  Only \" + i + \" values specified\");\n    }\n    return out;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"459be89020f9023e3b60066066a892c7edb5de58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","459be89020f9023e3b60066066a892c7edb5de58"],"e47768b261c28e7e6032060e8331475c81057953":["459be89020f9023e3b60066066a892c7edb5de58","2fb7e38713d15939e085d376c6391e6e6262a81f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e47768b261c28e7e6032060e8331475c81057953"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["459be89020f9023e3b60066066a892c7edb5de58"]},"commit2Childs":{"459be89020f9023e3b60066066a892c7edb5de58":["5f4e87790277826a2aea119328600dfb07761f32","e47768b261c28e7e6032060e8331475c81057953","2fb7e38713d15939e085d376c6391e6e6262a81f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["459be89020f9023e3b60066066a892c7edb5de58","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"e47768b261c28e7e6032060e8331475c81057953":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2fb7e38713d15939e085d376c6391e6e6262a81f":["e47768b261c28e7e6032060e8331475c81057953"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}