{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","commits":[{"id":"e7da9d8536c11576df10e348efa79d2739170936","date":1509475399,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","date":1509475828,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f607a0a2e930f55385c7a24afb68ef661ef7e3ee","date":1530823671,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testUpdateLogSynchronisation().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrReplicationDistributedZkTest#testUpdateLogSynchronisation().mjava","sourceNew":"  @Test\n  public void testUpdateLogSynchronisation() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc, true);\n    }\n    Thread.sleep(2000);\n\n    //verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = CdcrTestsUtil.getNumberOfTlogFilesOnReplicas(source);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    CdcrTestsUtil.cdcrDisableBuffer(sourceSolrClient);\n    Thread.sleep(2000);\n\n    int cnt = 15; // timeout after 15 seconds\n    int n = 0;\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + random().nextLong());\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc, true);\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      n = CdcrTestsUtil.getNumberOfTlogFilesOnReplicas(source);\n      if (n < nTlogs) {\n        cnt = Integer.MIN_VALUE;\n        break;\n      }\n      cnt--;\n      Thread.sleep(1000);\n    }\n    if (cnt == 0) {\n      throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection, \" + n + \" \" + nTlogs);\n    }\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","sourceOld":"  /**\n   * Check that the update logs are synchronised between leader and non-leader nodes\n   * when CDCR is on and buffer is disabled\n   */\n  @Test\n  @ShardsFixed(num = 4)\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 05-Jul-2018\n  public void testUpdateLogSynchronisation() throws Exception {\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.START);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    for (int i = 0; i < 100; i++) {\n      // will perform a commit for every document and will create one tlog file per commit\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(i)));\n    }\n\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForBootstrapToComplete(SOURCE_COLLECTION, SHARD2);\n\n    // wait a bit for the replication to complete\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD1);\n    this.waitForReplicationToComplete(SOURCE_COLLECTION, SHARD2);\n\n    commit(TARGET_COLLECTION);\n\n    // Check that the replication was done properly\n    assertNumDocs(100, SOURCE_COLLECTION);\n    assertNumDocs(100, TARGET_COLLECTION);\n\n    // Get the number of tlog files on the replicas (should be equal to the number of documents indexed)\n    int nTlogs = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n\n    // Disable the buffer - ulog synch should start on non-leader nodes\n    this.invokeCdcrAction(shardToLeaderJetty.get(SOURCE_COLLECTION).get(SHARD1), CdcrParams.CdcrAction.DISABLEBUFFER);\n    this.waitForCdcrStateReplication(SOURCE_COLLECTION);\n\n    int cnt = 15; // timeout after 15 seconds\n    while (cnt > 0) {\n      // Index a new document with a commit to trigger update log cleaning\n      index(SOURCE_COLLECTION, getDoc(id, Integer.toString(50)));\n\n      // Check the update logs on non-leader nodes, the number of tlog files should decrease\n      int n = getNumberOfTlogFilesOnReplicas(SOURCE_COLLECTION);\n      if (n < nTlogs) return;\n\n      cnt--;\n      Thread.sleep(1000);\n    }\n\n    throw new AssertionError(\"Timeout while trying to assert update logs @ source_collection\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f607a0a2e930f55385c7a24afb68ef661ef7e3ee"],"e7da9d8536c11576df10e348efa79d2739170936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f607a0a2e930f55385c7a24afb68ef661ef7e3ee":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["e7da9d8536c11576df10e348efa79d2739170936"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["f607a0a2e930f55385c7a24afb68ef661ef7e3ee"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","f607a0a2e930f55385c7a24afb68ef661ef7e3ee"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"e7da9d8536c11576df10e348efa79d2739170936":["1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","f607a0a2e930f55385c7a24afb68ef661ef7e3ee","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e7da9d8536c11576df10e348efa79d2739170936"],"f607a0a2e930f55385c7a24afb68ef661ef7e3ee":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","11f21773085db637873ba6e0bcd4265b2b4c7730","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"1a885a9bb91342e3cf8bfcf53610ab8d6307ef3d":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"11f21773085db637873ba6e0bcd4265b2b4c7730":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}