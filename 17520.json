{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","commits":[{"id":"1bf853f0385a540ee0fb220fd272f2c362432294","date":1311520789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testStopPoll().mjava","sourceNew":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  @Test\n  public void testStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","sourceNew":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","sourceNew":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47c952a4f0f0e9b74763a0609a3726dbb217164a","date":1347968413,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","sourceNew":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://localhost:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a59489bd57cb6434aab4e536a03b260fec1d47f3","date":1361571364,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","sourceNew":"  @Test\n  public void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"disablepoll\");\n    \n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"enablepoll\");\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","sourceOld":"  private void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    String slaveURL = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=disablepoll\";\n    URL url = new URL(slaveURL);\n    InputStream stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    slaveURL = \"http://127.0.0.1:\" + slaveJetty.getLocalPort() + \"/solr/replication?command=enablepoll\";\n    url = new URL(slaveURL);\n    stream = url.openStream();\n    try {\n      stream.close();\n    } catch (IOException e) {\n      //e.printStackTrace();\n    }\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","sourceNew":"  @Test\n  public void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"disablepoll\");\n    \n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", masterClient)));\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    assertEquals(nDocs, numFound(rQuery(nDocs, \"*:*\", slaveClient)));\n\n    // re-enable replication\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"enablepoll\");\n\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", slaveClient)));\n  }\n\n","sourceOld":"  @Test\n  public void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"disablepoll\");\n    \n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    masterQueryRsp = rQuery(nDocs+1, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, masterQueryResult.getNumFound());\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    // re-enable replication\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"enablepoll\");\n\n    slaveQueryRsp = rQuery(nDocs+1, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs+1, slaveQueryResult.getNumFound());   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","sourceNew":"  @Test\n  public void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"disablepoll\");\n    \n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", masterClient)));\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    assertEquals(nDocs, numFound(rQuery(nDocs, \"*:*\", slaveClient)));\n\n    // re-enable replication\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"enablepoll\");\n\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", slaveClient)));\n  }\n\n","sourceOld":"  @Test\n  public void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"disablepoll\");\n    \n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", masterClient)));\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    assertEquals(nDocs, numFound(rQuery(nDocs, \"*:*\", slaveClient)));\n\n    // re-enable replication\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"enablepoll\");\n\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", slaveClient)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestStopPoll().mjava","sourceNew":"  @Test\n  public void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup leader/follower.\n    // stop polling on follower, add a doc to leader and verify follower hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n\n    leaderClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList leaderQueryRsp = rQuery(nDocs, \"*:*\", leaderClient);\n    SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(leaderQueryRsp));\n\n    //get docs from follower and check if number is equal to leader\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList followerQueryRsp = rQuery(nDocs, \"*:*\", followerClient);\n    SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(followerQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    invokeReplicationCommand(followerJetty.getLocalPort(), \"disablepoll\");\n    \n    index(leaderClient, \"id\", 501, \"name\", \"name = \" + 501);\n    leaderClient.commit();\n\n    //get docs from leader and check if number is equal to leader\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", leaderClient)));\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from follower and check if number is not equal to leader; polling is disabled\n    assertEquals(nDocs, numFound(rQuery(nDocs, \"*:*\", followerClient)));\n\n    // re-enable replication\n    invokeReplicationCommand(followerJetty.getLocalPort(), \"enablepoll\");\n\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", followerClient)));\n  }\n\n","sourceOld":"  @Test\n  public void doTestStopPoll() throws Exception {\n    clearIndexWithReplication();\n\n    // Test:\n    // setup master/slave.\n    // stop polling on slave, add a doc to master and verify slave hasn't picked it.\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    // start stop polling test\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"disablepoll\");\n    \n    index(masterClient, \"id\", 501, \"name\", \"name = \" + 501);\n    masterClient.commit();\n\n    //get docs from master and check if number is equal to master\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", masterClient)));\n    \n    // NOTE: this test is wierd, we want to verify it DOESNT replicate...\n    // for now, add a sleep for this.., but the logic is wierd.\n    Thread.sleep(3000);\n    \n    //get docs from slave and check if number is not equal to master; polling is disabled\n    assertEquals(nDocs, numFound(rQuery(nDocs, \"*:*\", slaveClient)));\n\n    // re-enable replication\n    invokeReplicationCommand(slaveJetty.getLocalPort(), \"enablepoll\");\n\n    assertEquals(nDocs+1, numFound(rQuery(nDocs+1, \"*:*\", slaveClient)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bf853f0385a540ee0fb220fd272f2c362432294":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1bf853f0385a540ee0fb220fd272f2c362432294","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["1bf853f0385a540ee0fb220fd272f2c362432294"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["a59489bd57cb6434aab4e536a03b260fec1d47f3"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["47c952a4f0f0e9b74763a0609a3726dbb217164a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"e98520789adb1d5ad05afb4956eca0944a929688":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"]},"commit2Childs":{"1bf853f0385a540ee0fb220fd272f2c362432294":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"47c952a4f0f0e9b74763a0609a3726dbb217164a":["a59489bd57cb6434aab4e536a03b260fec1d47f3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["47c952a4f0f0e9b74763a0609a3726dbb217164a","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bf853f0385a540ee0fb220fd272f2c362432294"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["e98520789adb1d5ad05afb4956eca0944a929688"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}