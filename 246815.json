{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.FullLinearCrossingEdgeIterator#FullLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","commits":[{"id":"1e7090fb56105afb6515b6506724359c32ec7639","date":1521211434,"type":2,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.FullLinearCrossingEdgeIterator#FullLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.LinearCrossingEdgeIterator#LinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public FullLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // It doesn't matter which 1/2 of the world we choose, but we must choose only one.\n      this.bound = new SidedPlane(plane, testPoint);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public LinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      this.bound1 = new SidedPlane(thePointX, thePointY, thePointZ, plane, testPoint);\n      this.bound2 = new SidedPlane(testPoint, plane, thePointX, thePointY, thePointZ);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6","date":1522950981,"type":3,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.FullLinearCrossingEdgeIterator#FullLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.FullLinearCrossingEdgeIterator#FullLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public FullLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      if (plane.isNumericallyIdentical(testPoint)) {\n        throw new IllegalArgumentException(\"Plane vector identical to testpoint vector\");\n      }\n      // It doesn't matter which 1/2 of the world we choose, but we must choose only one.\n      this.bound = new SidedPlane(plane, testPoint);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public FullLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      // It doesn't matter which 1/2 of the world we choose, but we must choose only one.\n      this.bound = new SidedPlane(plane, testPoint);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"039615f2ceafe5881c61222281f45a0631b90174","date":1524725949,"type":5,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.FullLinearCrossingEdgeIterator#FullLinearCrossingEdgeIterator(GeoPoint,Plane,Plane,Plane,double,double,double).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/GeoComplexPolygon.FullLinearCrossingEdgeIterator#FullLinearCrossingEdgeIterator(Plane,Plane,Plane,double,double,double).mjava","sourceNew":"    public FullLinearCrossingEdgeIterator(final GeoPoint testPoint,\n      final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.testPoint = testPoint;\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      if (plane.isNumericallyIdentical(testPoint)) {\n        throw new IllegalArgumentException(\"Plane vector identical to testpoint vector\");\n      }\n      // It doesn't matter which 1/2 of the world we choose, but we must choose only one.\n      this.bound = new SidedPlane(plane, testPoint);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","sourceOld":"    public FullLinearCrossingEdgeIterator(final Plane plane, final Plane abovePlane, final Plane belowPlane, final double thePointX, final double thePointY, final double thePointZ) {\n      this.plane = plane;\n      this.abovePlane = abovePlane;\n      this.belowPlane = belowPlane;\n      if (plane.isNumericallyIdentical(testPoint)) {\n        throw new IllegalArgumentException(\"Plane vector identical to testpoint vector\");\n      }\n      // It doesn't matter which 1/2 of the world we choose, but we must choose only one.\n      this.bound = new SidedPlane(plane, testPoint);\n      this.thePointX = thePointX;\n      this.thePointY = thePointY;\n      this.thePointZ = thePointZ;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e7090fb56105afb6515b6506724359c32ec7639":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6":["1e7090fb56105afb6515b6506724359c32ec7639"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039615f2ceafe5881c61222281f45a0631b90174":["b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["039615f2ceafe5881c61222281f45a0631b90174"]},"commit2Childs":{"1e7090fb56105afb6515b6506724359c32ec7639":["b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6"],"b69c4d16cfa7d88d9a2ae23fdd1790a8d412a1b6":["039615f2ceafe5881c61222281f45a0631b90174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e7090fb56105afb6515b6506724359c32ec7639"],"039615f2ceafe5881c61222281f45a0631b90174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}