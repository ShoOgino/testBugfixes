{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":2,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      // TODO: make a real iterator in this case!\n      docsWithField = getSparseLiveBits(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      // TODO: make a real iterator in this case!\n      docsWithField = getSparseLiveBits(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9abf8f0376991d8b97ef287f53f330a54bdbdb66","date":1475480039,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      // TODO: make a real iterator in this case!\n      docsWithField = getSparseLiveBits(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3607fe579ac3eb5d35b8dc39dffa376491f417f0","date":1475480207,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      // TODO: make a real iterator in this case!\n      docsWithField = getSparseLiveBits(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    Bits docsWithField;\n\n    if (entry.format == SPARSE_COMPRESSED) {\n      return getSparseNumericDocValues(entry);\n    } else {\n      if (entry.missingOffset == ALL_MISSING) {\n        return DocValues.emptyNumeric();\n      } else if (entry.missingOffset == ALL_LIVE) {\n        LongValues values = getNumeric(entry);\n        return new NumericDocValues() {\n          private int docID = -1;\n\n          @Override\n          public int docID() {\n            return docID;\n          }\n\n          @Override\n          public int nextDoc() {\n            docID++;\n            if (docID == maxDoc) {\n              docID = NO_MORE_DOCS;\n            }\n            return docID;\n          }\n\n          @Override\n          public int advance(int target) {\n            if (target >= maxDoc) {\n              docID = NO_MORE_DOCS;\n            } else {\n              docID = target;\n            }\n            return docID;\n          }\n\n          @Override\n          public long cost() {\n            // TODO\n            return 0;\n          }\n\n          @Override\n          public long longValue() {\n            return values.get(docID);\n          }\n        };\n      } else {\n        docsWithField = getLiveBits(entry.missingOffset, maxDoc);\n      }\n    }\n    return new LegacyNumericDocValuesWrapper(docsWithField, getNumeric(entry));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesProducer#getNumeric(FieldInfo).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer#getNumeric(FieldInfo).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumeric(FieldInfo field) throws IOException {\n    NumericEntry entry = numerics.get(field.name);\n    return getNumeric(entry);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a870f9917149dc600c4ad4417d615c1795de5864","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a870f9917149dc600c4ad4417d615c1795de5864"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","9abf8f0376991d8b97ef287f53f330a54bdbdb66"],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9abf8f0376991d8b97ef287f53f330a54bdbdb66","3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9abf8f0376991d8b97ef287f53f330a54bdbdb66":["3607fe579ac3eb5d35b8dc39dffa376491f417f0"],"3607fe579ac3eb5d35b8dc39dffa376491f417f0":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a870f9917149dc600c4ad4417d615c1795de5864":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}