{"path":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","commits":[{"id":"3cdd24a5b48ffd59f921ccc4f5199fc029f65797","date":1485039431,"type":1,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = Float.parseFloat(min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = Float.parseFloat(max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","sourceOld":"  @Override\n  public Query getRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = Float.parseFloat(min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = Float.parseFloat(max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90a682dc1bfd188ef61cc28373c7f5d700b4ac75","date":1485186128,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = Float.parseFloat(min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = Float.parseFloat(max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92f8ab19a30ff70981e43b8cc78069cb0941476e","date":1497374252,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = parseFloatFromUser(field.getName(), min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = parseFloatFromUser(field.getName(), max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","sourceOld":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = Float.parseFloat(min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = Float.parseFloat(max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","bugFix":["46dc9ac8b3e748407baaef82453138ff3974480c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = parseFloatFromUser(field.getName(), min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = parseFloatFromUser(field.getName(), max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","sourceOld":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = Float.parseFloat(min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = Float.parseFloat(max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = parseFloatFromUser(field.getName(), min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = parseFloatFromUser(field.getName(), max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","sourceOld":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = Float.parseFloat(min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = Float.parseFloat(max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35","date":1501089160,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = parseFloatFromUser(field.getName(), min);\n      if (!minInclusive) {\n        if (actualMin == Float.POSITIVE_INFINITY) return new MatchNoDocsQuery();\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = parseFloatFromUser(field.getName(), max);\n      if (!maxInclusive) {\n        if (actualMax == Float.NEGATIVE_INFINITY) return new MatchNoDocsQuery();\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","sourceOld":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = parseFloatFromUser(field.getName(), min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = parseFloatFromUser(field.getName(), max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/FloatPointField#getPointRangeQuery(QParser,SchemaField,String,String,boolean,boolean).mjava","sourceNew":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = parseFloatFromUser(field.getName(), min);\n      if (!minInclusive) {\n        if (actualMin == Float.POSITIVE_INFINITY) return new MatchNoDocsQuery();\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = parseFloatFromUser(field.getName(), max);\n      if (!maxInclusive) {\n        if (actualMax == Float.NEGATIVE_INFINITY) return new MatchNoDocsQuery();\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","sourceOld":"  @Override\n  public Query getPointRangeQuery(QParser parser, SchemaField field, String min, String max, boolean minInclusive,\n      boolean maxInclusive) {\n    float actualMin, actualMax;\n    if (min == null) {\n      actualMin = Float.NEGATIVE_INFINITY;\n    } else {\n      actualMin = parseFloatFromUser(field.getName(), min);\n      if (!minInclusive) {\n        actualMin = FloatPoint.nextUp(actualMin);\n      }\n    }\n    if (max == null) {\n      actualMax = Float.POSITIVE_INFINITY;\n    } else {\n      actualMax = parseFloatFromUser(field.getName(), max);\n      if (!maxInclusive) {\n        actualMax = FloatPoint.nextDown(actualMax);\n      }\n    }\n    return FloatPoint.newRangeQuery(field.getName(), actualMin, actualMax);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","92f8ab19a30ff70981e43b8cc78069cb0941476e"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdd24a5b48ffd59f921ccc4f5199fc029f65797"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"]},"commit2Childs":{"3cdd24a5b48ffd59f921ccc4f5199fc029f65797":["92f8ab19a30ff70981e43b8cc78069cb0941476e","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cdd24a5b48ffd59f921ccc4f5199fc029f65797","90a682dc1bfd188ef61cc28373c7f5d700b4ac75"],"92f8ab19a30ff70981e43b8cc78069cb0941476e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"dfa8ee8a03218e801f864cf0ef8171a2fdd06f35":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["dfa8ee8a03218e801f864cf0ef8171a2fdd06f35"],"90a682dc1bfd188ef61cc28373c7f5d700b4ac75":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","90a682dc1bfd188ef61cc28373c7f5d700b4ac75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}