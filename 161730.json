{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","sourceNew":"  public int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","sourceOld":"  public int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"533890d1266aa8169162ec556395d0c5d0377566","date":1337173867,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","sourceNew":"  @Override\n  public synchronized int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","sourceOld":"  public int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","sourceNew":"  @Override\n  public synchronized int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","sourceOld":"  public int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","date":1357499264,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/writercache/lru/LruTaxonomyWriterCache#get(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized int get(CategoryPath categoryPath, int length) {\n    if (length<0 || length>categoryPath.length()) {\n      length = categoryPath.length();\n    }\n    // TODO (Facet): unfortunately, we make a copy here! we can avoid part of\n    // the copy by creating a wrapper object (but this still creates a new\n    // object). A better implementation of the cache would not use Java's\n    // hash table, but rather some other hash table we can control, and\n    // pass the length parameter into it...\n    Integer res = cache.get(new CategoryPath(categoryPath, length));\n    if (res==null) {\n      return -1;\n    }\n    return res.intValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["533890d1266aa8169162ec556395d0c5d0377566","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["533890d1266aa8169162ec556395d0c5d0377566"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"533890d1266aa8169162ec556395d0c5d0377566":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ef0d8a69209261514c5739c770bba706c2308450":["b89678825b68eccaf09e6ab71675fc0b0af1e099","533890d1266aa8169162ec556395d0c5d0377566"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d90771c07d45c6ad884c5ef9cb3a6eeb257238d1"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d90771c07d45c6ad884c5ef9cb3a6eeb257238d1":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["533890d1266aa8169162ec556395d0c5d0377566","ef0d8a69209261514c5739c770bba706c2308450"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"533890d1266aa8169162ec556395d0c5d0377566":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d90771c07d45c6ad884c5ef9cb3a6eeb257238d1","ef0d8a69209261514c5739c770bba706c2308450"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}