{"path":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","commits":[{"id":"58b7eb80017f1c5b32035176b965fa0cc0287d04","date":1432069816,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. \n   * PriviledgedAccessException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasi≈Ñski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. \n   * PriviledgedAccessException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. \n   * PriviledgedAccessException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20be168d828ac40d262f85364d02f15b491dd88b","date":1469725145,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. \n   * PriviledgedAccessException\n   */\n  public abstract void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d55d0cc95bfc03461b5c355153ca28c49076eb","date":1515469157,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  //TODO redeclare params as HttpServletRequest & HttpServletResponse\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  //TODO redeclare params as HttpServletRequest & HttpServletResponse\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23b436ffee26b67f87efef6a3bab24697332b6b2","date":1587575178,"type":5,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(HttpServletRequest,HttpServletResponse,FilterChain).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/AuthenticationPlugin#doAuthenticate(ServletRequest,ServletResponse,FilterChain).mjava","sourceNew":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  public abstract boolean doAuthenticate(HttpServletRequest request, HttpServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","sourceOld":"  /**\n   * This method attempts to authenticate the request. Upon a successful authentication, this\n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   *\n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @return false if the request not be processed by Solr (not continue), i.e.\n   * the response and status code have already been sent.\n   * @throws Exception any exception thrown during the authentication, e.g. PrivilegedActionException\n   */\n  //TODO redeclare params as HttpServletRequest & HttpServletResponse\n  public abstract boolean doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["20be168d828ac40d262f85364d02f15b491dd88b","61d55d0cc95bfc03461b5c355153ca28c49076eb"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["20be168d828ac40d262f85364d02f15b491dd88b"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20be168d828ac40d262f85364d02f15b491dd88b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["58b7eb80017f1c5b32035176b965fa0cc0287d04","20be168d828ac40d262f85364d02f15b491dd88b"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["d470c8182e92b264680e34081b75e70a9f2b3c89","20be168d828ac40d262f85364d02f15b491dd88b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["58b7eb80017f1c5b32035176b965fa0cc0287d04","0158ced21948b6626f733c1c42c1e18d94449789"],"0158ced21948b6626f733c1c42c1e18d94449789":["58b7eb80017f1c5b32035176b965fa0cc0287d04"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["23b436ffee26b67f87efef6a3bab24697332b6b2"],"61d55d0cc95bfc03461b5c355153ca28c49076eb":["b94236357aaa22b76c10629851fe4e376e0cea82"],"58b7eb80017f1c5b32035176b965fa0cc0287d04":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"23b436ffee26b67f87efef6a3bab24697332b6b2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58b7eb80017f1c5b32035176b965fa0cc0287d04"],"20be168d828ac40d262f85364d02f15b491dd88b":["b94236357aaa22b76c10629851fe4e376e0cea82","61d55d0cc95bfc03461b5c355153ca28c49076eb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["20be168d828ac40d262f85364d02f15b491dd88b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}