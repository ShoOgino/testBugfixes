{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","commits":[{"id":"c6ff97491f7791aa98e90d71c4c7fee58688c37b","date":1434817448,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    // Given\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    // When : update the field definition\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    // Then\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"50df7436c3e299dbfef94654447a2e2cba43003c","date":1474971458,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    // Given\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    // When : update the field definition\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    // Then\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    // Given\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    // When : update the field definition\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    // Then\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    // Given\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    // When : update the field definition\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    // Then\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    // Given\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    // When : update the field definition\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    // Then\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/request/SchemaTest#testReplaceDynamicFieldAccuracy().mjava","sourceNew":"  @Test\n  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    // Given\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    // When : update the field definition\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    // Then\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n  }\n\n","sourceOld":"  @Test\n  public void testReplaceDynamicFieldAccuracy() throws Exception {\n    // Given\n    String fieldName = \"*_replace\";\n    Map<String, Object> fieldAttributes = new LinkedHashMap<>();\n    fieldAttributes.put(\"name\", fieldName);\n    fieldAttributes.put(\"type\", \"string\");\n    fieldAttributes.put(\"stored\", false);\n    fieldAttributes.put(\"indexed\", true);\n    fieldAttributes.put(\"required\", true);\n    SchemaRequest.AddDynamicField addDFieldUpdateSchemaRequest =\n        new SchemaRequest.AddDynamicField(fieldAttributes);\n    SchemaResponse.UpdateResponse addFieldResponse = addDFieldUpdateSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(addFieldResponse);\n\n    // When : update the field definition\n    Map<String, Object> replaceFieldAttributes = new LinkedHashMap<>(fieldAttributes);\n    replaceFieldAttributes.put(\"stored\", true);\n    replaceFieldAttributes.put(\"indexed\", false);\n    SchemaRequest.ReplaceDynamicField replaceFieldRequest =\n        new SchemaRequest.ReplaceDynamicField(replaceFieldAttributes);\n    SchemaResponse.UpdateResponse replaceFieldResponse = replaceFieldRequest.process(getSolrClient());\n    assertValidSchemaResponse(replaceFieldResponse);\n\n    // Then\n    SchemaRequest.DynamicField dynamicFieldSchemaRequest =\n        new SchemaRequest.DynamicField(fieldName);\n    SchemaResponse.DynamicFieldResponse newFieldResponse = dynamicFieldSchemaRequest.process(getSolrClient());\n    assertValidSchemaResponse(newFieldResponse);\n    Map<String, Object> newFieldAttributes = newFieldResponse.getDynamicField();\n    assertThat(fieldName, is(equalTo(newFieldAttributes.get(\"name\"))));\n    assertThat(\"string\", is(equalTo(newFieldAttributes.get(\"type\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"stored\"))));\n    assertThat(false, is(equalTo(newFieldAttributes.get(\"indexed\"))));\n    assertThat(true, is(equalTo(newFieldAttributes.get(\"required\"))));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","50df7436c3e299dbfef94654447a2e2cba43003c"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"50df7436c3e299dbfef94654447a2e2cba43003c":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c6ff97491f7791aa98e90d71c4c7fee58688c37b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6ff97491f7791aa98e90d71c4c7fee58688c37b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c6ff97491f7791aa98e90d71c4c7fee58688c37b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","50df7436c3e299dbfef94654447a2e2cba43003c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"50df7436c3e299dbfef94654447a2e2cba43003c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}