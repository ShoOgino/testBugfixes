{"path":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testRangeFacet().mjava","commits":[{"id":"6409f24cc7d96b04fb1c932845092b0e307fb5d4","date":1515972624,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRangeFacet() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider \" +\n               \"because it excercies the asymetric exchange rates option it supports\",\n               expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    \n    // NOTE: in our test conversions EUR uses an asynetric echange rate\n    // these are the equivilent values when converting to:     USD        EUR        GBP\n    assertU(adoc(\"id\", \"\" + 1, fieldName, \"10.00,USD\"));   // 10.00,USD  25.00,EUR   5.00,GBP\n    assertU(adoc(\"id\", \"\" + 2, fieldName, \"15.00,EUR\"));   //  7.50,USD  15.00,EUR   7.50,GBP\n    assertU(adoc(\"id\", \"\" + 3, fieldName, \"6.00,GBP\"));    // 12.00,USD  12.00,EUR   6.00,GBP\n    assertU(adoc(\"id\", \"\" + 4, fieldName, \"7.00,EUR\"));    //  3.50,USD   7.00,EUR   3.50,GBP\n    assertU(adoc(\"id\", \"\" + 5, fieldName, \"2,GBP\"));       //  4.00,USD   4.00,EUR   2.00,GBP\n    assertU(commit());\n\n    for (String suffix : Arrays.asList(\"\", \",USD\")) {\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (facet.range)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                  \"facet.range\", fieldName,\n                  \"f.\" + fieldName + \".facet.range.start\", \"4.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.end\", \"11.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.gap\", \"1.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.other\", \"all\")\n              ,\"count(//lst[@name='counts']/int)=7\"\n              ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n              ,\"//int[@name='after']='1'\"\n              ,\"//int[@name='before']='1'\"\n              ,\"//int[@name='between']='3'\"\n              );\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (json.facet)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                  \"{ xxx : { type:range, field:\" + fieldName + \", \" +\n                  \"          start:'4.00\"+suffix+\"', gap:'1.00\"+suffix+\"', end:'11.00\"+suffix+\"', other:all } }\")\n              ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n              ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n              );\n    }\n\n    assertQ(\"Zero value as start range point + mincount (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.mincount\", \"1\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"0,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\")\n            ,\"count(//lst[@name='counts']/int)=4\"\n            ,\"//lst[@name='counts']/int[@name='3.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            ,\"//int[@name='before']='0'\"\n            ,\"//int[@name='after']='1'\"\n            ,\"//int[@name='between']='4'\"\n            );\n    assertQ(\"Zero value as start range point + mincount (json.facet)\", \n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, mincount:1, field:\" + fieldName +\n                \", start:'0.00,USD', gap:'1.00,USD', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=4\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='4']\"\n            );\n\n    // NOTE: because of asymetric EUR exchange rate, these buckets are diff then the similar looking USD based request above\n    // This request converts the values in each doc into EUR to decide what range buck it's in.\n    assertQ(\"Ensure that we get correct facet counts back in EUR (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"8.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.end\", \"22.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"2.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='8.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='12.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='14.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='16.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='18.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='20.00,EUR']='0'\"\n            , \"//int[@name='before']='2'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='2'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in EUR (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'8.00,EUR', gap:'2.00,EUR', end:'22.00,EUR', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='10.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='12.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='14.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='16.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='18.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='20.00,EUR']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='2']\"\n            );\n\n    \n    // GBP has a symetric echange rate with USD, so these counts are *similar* to the USD based request above...\n    // but the asymetric EUR/USD rate means that when computing counts realtive to GBP the EUR based docs wind up in\n    // diff buckets\n    assertQ(\"Ensure that we get correct facet counts back in GBP (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"2.00,GBP\",\n                \"f.\" + fieldName + \".facet.range.end\", \"5.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='2.00,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='2.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.50,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='4.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='4.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='5.00,GBP']='1'\"\n            , \"//int[@name='before']='0'\"\n            , \"//int[@name='after']='2'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in GBP (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'2.00,GBP', gap:'0.50,GBP', end:'5.50,GBP', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='2.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='2.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='3.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='5.00,GBP']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            , \"//int[@name='before']='1'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', gap:'0.50,GBP', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            \n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    for (SolrParams facet : Arrays.asList(params(\"facet\", \"true\",\n                                                 \"facet.range\", fieldName,\n                                                 \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.end\", \"11.00,EUR\",\n                                                 \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.other\", \"all\"),\n                                          params(\"json.facet\",\n                                                 \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', \" +\n                                                 \"          gap:'1.00,USD', end:'11.00,EUR', other:all } }\"))) {\n      assertQEx(\"Ensure that we throw an error if we try to use different start and end currencies\",\n                \"Cannot compare CurrencyValues when their currencies are not equal\", \n                req(facet, \"q\", \"*:*\"),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1c841e27891873cab110ebeb89f124a8ec470176","9f4251f14d2db68330fc1e6f0495c053a905d560"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testRangeFacet().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRangeFacet() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider \" +\n               \"because it excercies the asymetric exchange rates option it supports\",\n               expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    \n    // NOTE: in our test conversions EUR uses an asynetric echange rate\n    // these are the equivilent values when converting to:     USD        EUR        GBP\n    assertU(adoc(\"id\", \"\" + 1, fieldName, \"10.00,USD\"));   // 10.00,USD  25.00,EUR   5.00,GBP\n    assertU(adoc(\"id\", \"\" + 2, fieldName, \"15.00,EUR\"));   //  7.50,USD  15.00,EUR   7.50,GBP\n    assertU(adoc(\"id\", \"\" + 3, fieldName, \"6.00,GBP\"));    // 12.00,USD  12.00,EUR   6.00,GBP\n    assertU(adoc(\"id\", \"\" + 4, fieldName, \"7.00,EUR\"));    //  3.50,USD   7.00,EUR   3.50,GBP\n    assertU(adoc(\"id\", \"\" + 5, fieldName, \"2,GBP\"));       //  4.00,USD   4.00,EUR   2.00,GBP\n    assertU(commit());\n\n    for (String suffix : Arrays.asList(\"\", \",USD\")) {\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (facet.range)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                  \"facet.range\", fieldName,\n                  \"f.\" + fieldName + \".facet.range.start\", \"4.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.end\", \"11.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.gap\", \"1.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.other\", \"all\")\n              ,\"count(//lst[@name='counts']/int)=7\"\n              ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n              ,\"//int[@name='after']='1'\"\n              ,\"//int[@name='before']='1'\"\n              ,\"//int[@name='between']='3'\"\n              );\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (json.facet)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                  \"{ xxx : { type:range, field:\" + fieldName + \", \" +\n                  \"          start:'4.00\"+suffix+\"', gap:'1.00\"+suffix+\"', end:'11.00\"+suffix+\"', other:all } }\")\n              ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n              ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n              );\n    }\n\n    assertQ(\"Zero value as start range point + mincount (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.mincount\", \"1\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"0,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\")\n            ,\"count(//lst[@name='counts']/int)=4\"\n            ,\"//lst[@name='counts']/int[@name='3.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            ,\"//int[@name='before']='0'\"\n            ,\"//int[@name='after']='1'\"\n            ,\"//int[@name='between']='4'\"\n            );\n    assertQ(\"Zero value as start range point + mincount (json.facet)\", \n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, mincount:1, field:\" + fieldName +\n                \", start:'0.00,USD', gap:'1.00,USD', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=4\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='4']\"\n            );\n\n    // NOTE: because of asymetric EUR exchange rate, these buckets are diff then the similar looking USD based request above\n    // This request converts the values in each doc into EUR to decide what range buck it's in.\n    assertQ(\"Ensure that we get correct facet counts back in EUR (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"8.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.end\", \"22.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"2.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='8.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='12.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='14.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='16.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='18.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='20.00,EUR']='0'\"\n            , \"//int[@name='before']='2'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='2'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in EUR (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'8.00,EUR', gap:'2.00,EUR', end:'22.00,EUR', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='10.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='12.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='14.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='16.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='18.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='20.00,EUR']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='2']\"\n            );\n\n    \n    // GBP has a symetric echange rate with USD, so these counts are *similar* to the USD based request above...\n    // but the asymetric EUR/USD rate means that when computing counts realtive to GBP the EUR based docs wind up in\n    // diff buckets\n    assertQ(\"Ensure that we get correct facet counts back in GBP (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"2.00,GBP\",\n                \"f.\" + fieldName + \".facet.range.end\", \"5.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='2.00,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='2.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.50,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='4.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='4.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='5.00,GBP']='1'\"\n            , \"//int[@name='before']='0'\"\n            , \"//int[@name='after']='2'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in GBP (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'2.00,GBP', gap:'0.50,GBP', end:'5.50,GBP', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='2.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='2.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='3.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='5.00,GBP']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            , \"//int[@name='before']='1'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', gap:'0.50,GBP', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            \n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    for (SolrParams facet : Arrays.asList(params(\"facet\", \"true\",\n                                                 \"facet.range\", fieldName,\n                                                 \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.end\", \"11.00,EUR\",\n                                                 \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.other\", \"all\"),\n                                          params(\"json.facet\",\n                                                 \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', \" +\n                                                 \"          gap:'1.00,USD', end:'11.00,EUR', other:all } }\"))) {\n      assertQEx(\"Ensure that we throw an error if we try to use different start and end currencies\",\n                \"Cannot compare CurrencyValues when their currencies are not equal\", \n                req(facet, \"q\", \"*:*\"),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9f4251f14d2db68330fc1e6f0495c053a905d560","date":1537116380,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testRangeFacet().mjava","sourceNew":"  @Test\n  public void testRangeFacet() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider \" +\n               \"because it excercies the asymetric exchange rates option it supports\",\n               expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    \n    // NOTE: in our test conversions EUR uses an asynetric echange rate\n    // these are the equivalent values when converting to:     USD        EUR        GBP\n    assertU(adoc(\"id\", \"\" + 1, fieldName, \"10.00,USD\"));   // 10.00,USD  25.00,EUR   5.00,GBP\n    assertU(adoc(\"id\", \"\" + 2, fieldName, \"15.00,EUR\"));   //  7.50,USD  15.00,EUR   7.50,GBP\n    assertU(adoc(\"id\", \"\" + 3, fieldName, \"6.00,GBP\"));    // 12.00,USD  12.00,EUR   6.00,GBP\n    assertU(adoc(\"id\", \"\" + 4, fieldName, \"7.00,EUR\"));    //  3.50,USD   7.00,EUR   3.50,GBP\n    assertU(adoc(\"id\", \"\" + 5, fieldName, \"2,GBP\"));       //  4.00,USD   4.00,EUR   2.00,GBP\n    assertU(commit());\n\n    for (String suffix : Arrays.asList(\"\", \",USD\")) {\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (facet.range)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                  \"facet.range\", fieldName,\n                  \"f.\" + fieldName + \".facet.range.start\", \"4.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.end\", \"11.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.gap\", \"1.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.other\", \"all\")\n              ,\"count(//lst[@name='counts']/int)=7\"\n              ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n              ,\"//int[@name='after']='1'\"\n              ,\"//int[@name='before']='1'\"\n              ,\"//int[@name='between']='3'\"\n              );\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (json.facet)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                  \"{ xxx : { type:range, field:\" + fieldName + \", \" +\n                  \"          start:'4.00\"+suffix+\"', gap:'1.00\"+suffix+\"', end:'11.00\"+suffix+\"', other:all } }\")\n              ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n              ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n              );\n    }\n\n    assertQ(\"Zero value as start range point + mincount (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.mincount\", \"1\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"0,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\")\n            ,\"count(//lst[@name='counts']/int)=4\"\n            ,\"//lst[@name='counts']/int[@name='3.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            ,\"//int[@name='before']='0'\"\n            ,\"//int[@name='after']='1'\"\n            ,\"//int[@name='between']='4'\"\n            );\n    assertQ(\"Zero value as start range point + mincount (json.facet)\", \n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, mincount:1, field:\" + fieldName +\n                \", start:'0.00,USD', gap:'1.00,USD', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=4\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='4']\"\n            );\n\n    // NOTE: because of asymetric EUR exchange rate, these buckets are diff then the similar looking USD based request above\n    // This request converts the values in each doc into EUR to decide what range buck it's in.\n    assertQ(\"Ensure that we get correct facet counts back in EUR (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"8.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.end\", \"22.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"2.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='8.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='12.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='14.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='16.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='18.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='20.00,EUR']='0'\"\n            , \"//int[@name='before']='2'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='2'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in EUR (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'8.00,EUR', gap:'2.00,EUR', end:'22.00,EUR', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='10.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='12.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='14.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='16.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='18.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='20.00,EUR']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='2']\"\n            );\n\n    \n    // GBP has a symetric echange rate with USD, so these counts are *similar* to the USD based request above...\n    // but the asymetric EUR/USD rate means that when computing counts realtive to GBP the EUR based docs wind up in\n    // diff buckets\n    assertQ(\"Ensure that we get correct facet counts back in GBP (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"2.00,GBP\",\n                \"f.\" + fieldName + \".facet.range.end\", \"5.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='2.00,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='2.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.50,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='4.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='4.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='5.00,GBP']='1'\"\n            , \"//int[@name='before']='0'\"\n            , \"//int[@name='after']='2'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in GBP (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'2.00,GBP', gap:'0.50,GBP', end:'5.50,GBP', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='2.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='2.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='3.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='5.00,GBP']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            , \"//int[@name='before']='1'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', gap:'0.50,GBP', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            \n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    for (SolrParams facet : Arrays.asList(params(\"facet\", \"true\",\n                                                 \"facet.range\", fieldName,\n                                                 \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.end\", \"11.00,EUR\",\n                                                 \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.other\", \"all\"),\n                                          params(\"json.facet\",\n                                                 \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', \" +\n                                                 \"          gap:'1.00,USD', end:'11.00,EUR', other:all } }\"))) {\n      assertQEx(\"Ensure that we throw an error if we try to use different start and end currencies\",\n                \"Cannot compare CurrencyValues when their currencies are not equal\", \n                req(facet, \"q\", \"*:*\"),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacet() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider \" +\n               \"because it excercies the asymetric exchange rates option it supports\",\n               expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    \n    // NOTE: in our test conversions EUR uses an asynetric echange rate\n    // these are the equivilent values when converting to:     USD        EUR        GBP\n    assertU(adoc(\"id\", \"\" + 1, fieldName, \"10.00,USD\"));   // 10.00,USD  25.00,EUR   5.00,GBP\n    assertU(adoc(\"id\", \"\" + 2, fieldName, \"15.00,EUR\"));   //  7.50,USD  15.00,EUR   7.50,GBP\n    assertU(adoc(\"id\", \"\" + 3, fieldName, \"6.00,GBP\"));    // 12.00,USD  12.00,EUR   6.00,GBP\n    assertU(adoc(\"id\", \"\" + 4, fieldName, \"7.00,EUR\"));    //  3.50,USD   7.00,EUR   3.50,GBP\n    assertU(adoc(\"id\", \"\" + 5, fieldName, \"2,GBP\"));       //  4.00,USD   4.00,EUR   2.00,GBP\n    assertU(commit());\n\n    for (String suffix : Arrays.asList(\"\", \",USD\")) {\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (facet.range)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                  \"facet.range\", fieldName,\n                  \"f.\" + fieldName + \".facet.range.start\", \"4.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.end\", \"11.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.gap\", \"1.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.other\", \"all\")\n              ,\"count(//lst[@name='counts']/int)=7\"\n              ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n              ,\"//int[@name='after']='1'\"\n              ,\"//int[@name='before']='1'\"\n              ,\"//int[@name='between']='3'\"\n              );\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (json.facet)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                  \"{ xxx : { type:range, field:\" + fieldName + \", \" +\n                  \"          start:'4.00\"+suffix+\"', gap:'1.00\"+suffix+\"', end:'11.00\"+suffix+\"', other:all } }\")\n              ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n              ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n              );\n    }\n\n    assertQ(\"Zero value as start range point + mincount (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.mincount\", \"1\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"0,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\")\n            ,\"count(//lst[@name='counts']/int)=4\"\n            ,\"//lst[@name='counts']/int[@name='3.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            ,\"//int[@name='before']='0'\"\n            ,\"//int[@name='after']='1'\"\n            ,\"//int[@name='between']='4'\"\n            );\n    assertQ(\"Zero value as start range point + mincount (json.facet)\", \n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, mincount:1, field:\" + fieldName +\n                \", start:'0.00,USD', gap:'1.00,USD', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=4\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='4']\"\n            );\n\n    // NOTE: because of asymetric EUR exchange rate, these buckets are diff then the similar looking USD based request above\n    // This request converts the values in each doc into EUR to decide what range buck it's in.\n    assertQ(\"Ensure that we get correct facet counts back in EUR (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"8.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.end\", \"22.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"2.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='8.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='12.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='14.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='16.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='18.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='20.00,EUR']='0'\"\n            , \"//int[@name='before']='2'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='2'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in EUR (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'8.00,EUR', gap:'2.00,EUR', end:'22.00,EUR', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='10.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='12.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='14.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='16.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='18.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='20.00,EUR']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='2']\"\n            );\n\n    \n    // GBP has a symetric echange rate with USD, so these counts are *similar* to the USD based request above...\n    // but the asymetric EUR/USD rate means that when computing counts realtive to GBP the EUR based docs wind up in\n    // diff buckets\n    assertQ(\"Ensure that we get correct facet counts back in GBP (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"2.00,GBP\",\n                \"f.\" + fieldName + \".facet.range.end\", \"5.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='2.00,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='2.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.50,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='4.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='4.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='5.00,GBP']='1'\"\n            , \"//int[@name='before']='0'\"\n            , \"//int[@name='after']='2'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in GBP (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'2.00,GBP', gap:'0.50,GBP', end:'5.50,GBP', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='2.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='2.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='3.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='5.00,GBP']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            , \"//int[@name='before']='1'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', gap:'0.50,GBP', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            \n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    for (SolrParams facet : Arrays.asList(params(\"facet\", \"true\",\n                                                 \"facet.range\", fieldName,\n                                                 \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.end\", \"11.00,EUR\",\n                                                 \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.other\", \"all\"),\n                                          params(\"json.facet\",\n                                                 \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', \" +\n                                                 \"          gap:'1.00,USD', end:'11.00,EUR', other:all } }\"))) {\n      assertQEx(\"Ensure that we throw an error if we try to use different start and end currencies\",\n                \"Cannot compare CurrencyValues when their currencies are not equal\", \n                req(facet, \"q\", \"*:*\"),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testRangeFacet().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/CurrencyFieldTypeTest#testRangeFacet().mjava","sourceNew":"  @Test\n  public void testRangeFacet() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider \" +\n               \"because it excercies the asymetric exchange rates option it supports\",\n               expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    \n    // NOTE: in our test conversions EUR uses an asynetric echange rate\n    // these are the equivalent values when converting to:     USD        EUR        GBP\n    assertU(adoc(\"id\", \"\" + 1, fieldName, \"10.00,USD\"));   // 10.00,USD  25.00,EUR   5.00,GBP\n    assertU(adoc(\"id\", \"\" + 2, fieldName, \"15.00,EUR\"));   //  7.50,USD  15.00,EUR   7.50,GBP\n    assertU(adoc(\"id\", \"\" + 3, fieldName, \"6.00,GBP\"));    // 12.00,USD  12.00,EUR   6.00,GBP\n    assertU(adoc(\"id\", \"\" + 4, fieldName, \"7.00,EUR\"));    //  3.50,USD   7.00,EUR   3.50,GBP\n    assertU(adoc(\"id\", \"\" + 5, fieldName, \"2,GBP\"));       //  4.00,USD   4.00,EUR   2.00,GBP\n    assertU(commit());\n\n    for (String suffix : Arrays.asList(\"\", \",USD\")) {\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (facet.range)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                  \"facet.range\", fieldName,\n                  \"f.\" + fieldName + \".facet.range.start\", \"4.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.end\", \"11.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.gap\", \"1.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.other\", \"all\")\n              ,\"count(//lst[@name='counts']/int)=7\"\n              ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n              ,\"//int[@name='after']='1'\"\n              ,\"//int[@name='before']='1'\"\n              ,\"//int[@name='between']='3'\"\n              );\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (json.facet)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                  \"{ xxx : { type:range, field:\" + fieldName + \", \" +\n                  \"          start:'4.00\"+suffix+\"', gap:'1.00\"+suffix+\"', end:'11.00\"+suffix+\"', other:all } }\")\n              ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n              ,\"//lst[@name='xxx']/lst[@name='before' ]/long[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='after'  ]/long[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='between']/long[@name='count'][.='3']\"\n              );\n    }\n\n    assertQ(\"Zero value as start range point + mincount (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.mincount\", \"1\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"0,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\")\n            ,\"count(//lst[@name='counts']/int)=4\"\n            ,\"//lst[@name='counts']/int[@name='3.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            ,\"//int[@name='before']='0'\"\n            ,\"//int[@name='after']='1'\"\n            ,\"//int[@name='between']='4'\"\n            );\n    assertQ(\"Zero value as start range point + mincount (json.facet)\", \n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, mincount:1, field:\" + fieldName +\n                \", start:'0.00,USD', gap:'1.00,USD', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=4\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='3.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/long[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/long[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/long[@name='count'][.='4']\"\n            );\n\n    // NOTE: because of asymetric EUR exchange rate, these buckets are diff then the similar looking USD based request above\n    // This request converts the values in each doc into EUR to decide what range buck it's in.\n    assertQ(\"Ensure that we get correct facet counts back in EUR (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"8.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.end\", \"22.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"2.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='8.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='12.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='14.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='16.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='18.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='20.00,EUR']='0'\"\n            , \"//int[@name='before']='2'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='2'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in EUR (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'8.00,EUR', gap:'2.00,EUR', end:'22.00,EUR', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='8.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='10.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='12.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='14.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='16.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='18.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='20.00,EUR']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/long[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/long[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/long[@name='count'][.='2']\"\n            );\n\n    \n    // GBP has a symetric echange rate with USD, so these counts are *similar* to the USD based request above...\n    // but the asymetric EUR/USD rate means that when computing counts realtive to GBP the EUR based docs wind up in\n    // diff buckets\n    assertQ(\"Ensure that we get correct facet counts back in GBP (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"2.00,GBP\",\n                \"f.\" + fieldName + \".facet.range.end\", \"5.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='2.00,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='2.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.50,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='4.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='4.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='5.00,GBP']='1'\"\n            , \"//int[@name='before']='0'\"\n            , \"//int[@name='after']='2'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in GBP (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'2.00,GBP', gap:'0.50,GBP', end:'5.50,GBP', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='2.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='2.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='3.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='3.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='4.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='4.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='5.00,GBP']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/long[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/long[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/long[@name='count'][.='3']\"\n            );\n\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            , \"//int[@name='before']='1'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', gap:'0.50,GBP', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[long[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            \n            ,\"//lst[@name='xxx']/lst[@name='before' ]/long[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/long[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/long[@name='count'][.='3']\"\n            );\n\n    for (SolrParams facet : Arrays.asList(params(\"facet\", \"true\",\n                                                 \"facet.range\", fieldName,\n                                                 \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.end\", \"11.00,EUR\",\n                                                 \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.other\", \"all\"),\n                                          params(\"json.facet\",\n                                                 \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', \" +\n                                                 \"          gap:'1.00,USD', end:'11.00,EUR', other:all } }\"))) {\n      assertQEx(\"Ensure that we throw an error if we try to use different start and end currencies\",\n                \"Cannot compare CurrencyValues when their currencies are not equal\", \n                req(facet, \"q\", \"*:*\"),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRangeFacet() throws Exception {\n    assumeTrue(\"This test is only applicable to the XML file based exchange rate provider \" +\n               \"because it excercies the asymetric exchange rates option it supports\",\n               expectedProviderClass.equals(FileExchangeRateProvider.class));\n    \n    clearIndex();\n    \n    // NOTE: in our test conversions EUR uses an asynetric echange rate\n    // these are the equivalent values when converting to:     USD        EUR        GBP\n    assertU(adoc(\"id\", \"\" + 1, fieldName, \"10.00,USD\"));   // 10.00,USD  25.00,EUR   5.00,GBP\n    assertU(adoc(\"id\", \"\" + 2, fieldName, \"15.00,EUR\"));   //  7.50,USD  15.00,EUR   7.50,GBP\n    assertU(adoc(\"id\", \"\" + 3, fieldName, \"6.00,GBP\"));    // 12.00,USD  12.00,EUR   6.00,GBP\n    assertU(adoc(\"id\", \"\" + 4, fieldName, \"7.00,EUR\"));    //  3.50,USD   7.00,EUR   3.50,GBP\n    assertU(adoc(\"id\", \"\" + 5, fieldName, \"2,GBP\"));       //  4.00,USD   4.00,EUR   2.00,GBP\n    assertU(commit());\n\n    for (String suffix : Arrays.asList(\"\", \",USD\")) {\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (facet.range)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                  \"facet.range\", fieldName,\n                  \"f.\" + fieldName + \".facet.range.start\", \"4.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.end\", \"11.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.gap\", \"1.00\" + suffix,\n                  \"f.\" + fieldName + \".facet.range.other\", \"all\")\n              ,\"count(//lst[@name='counts']/int)=7\"\n              ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n              ,\"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n              ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n              ,\"//int[@name='after']='1'\"\n              ,\"//int[@name='before']='1'\"\n              ,\"//int[@name='between']='3'\"\n              );\n      assertQ(\"Ensure that we get correct facet counts back in USD (explicit or implicit default) (json.facet)\",\n              req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                  \"{ xxx : { type:range, field:\" + fieldName + \", \" +\n                  \"          start:'4.00\"+suffix+\"', gap:'1.00\"+suffix+\"', end:'11.00\"+suffix+\"', other:all } }\")\n              ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n              ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n              ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n              ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n              );\n    }\n\n    assertQ(\"Zero value as start range point + mincount (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\", \"facet.mincount\", \"1\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"0,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\")\n            ,\"count(//lst[@name='counts']/int)=4\"\n            ,\"//lst[@name='counts']/int[@name='3.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            ,\"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            ,\"//int[@name='before']='0'\"\n            ,\"//int[@name='after']='1'\"\n            ,\"//int[@name='between']='4'\"\n            );\n    assertQ(\"Zero value as start range point + mincount (json.facet)\", \n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, mincount:1, field:\" + fieldName +\n                \", start:'0.00,USD', gap:'1.00,USD', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=4\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='4']\"\n            );\n\n    // NOTE: because of asymetric EUR exchange rate, these buckets are diff then the similar looking USD based request above\n    // This request converts the values in each doc into EUR to decide what range buck it's in.\n    assertQ(\"Ensure that we get correct facet counts back in EUR (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"8.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.end\", \"22.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"2.00,EUR\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='8.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='12.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='14.00,EUR']='1'\"\n            , \"//lst[@name='counts']/int[@name='16.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='18.00,EUR']='0'\"\n            , \"//lst[@name='counts']/int[@name='20.00,EUR']='0'\"\n            , \"//int[@name='before']='2'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='2'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in EUR (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'8.00,EUR', gap:'2.00,EUR', end:'22.00,EUR', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='10.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='12.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='14.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='16.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='18.00,EUR']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='20.00,EUR']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='2']\"\n            );\n\n    \n    // GBP has a symetric echange rate with USD, so these counts are *similar* to the USD based request above...\n    // but the asymetric EUR/USD rate means that when computing counts realtive to GBP the EUR based docs wind up in\n    // diff buckets\n    assertQ(\"Ensure that we get correct facet counts back in GBP (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"2.00,GBP\",\n                \"f.\" + fieldName + \".facet.range.end\", \"5.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='2.00,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='2.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='3.50,GBP']='1'\"\n            , \"//lst[@name='counts']/int[@name='4.00,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='4.50,GBP']='0'\"\n            , \"//lst[@name='counts']/int[@name='5.00,GBP']='1'\"\n            , \"//int[@name='before']='0'\"\n            , \"//int[@name='after']='2'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we get correct facet counts back in GBP (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'2.00,GBP', gap:'0.50,GBP', end:'5.50,GBP', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='2.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='2.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='3.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='3.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.00,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='4.50,GBP']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='5.00,GBP']]\"\n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='0']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='2']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (facet.range)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"facet\", \"true\",\n                \"facet.range\", fieldName,\n                \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                \"f.\" + fieldName + \".facet.range.end\", \"11.00,USD\",\n                \"f.\" + fieldName + \".facet.range.gap\", \"0.50,GBP\",\n                \"f.\" + fieldName + \".facet.range.other\", \"all\"\n                )\n            , \"count(//lst[@name='counts']/int)=7\"\n            , \"//lst[@name='counts']/int[@name='4.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='5.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='6.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='7.00,USD']='1'\"\n            , \"//lst[@name='counts']/int[@name='8.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='9.00,USD']='0'\"\n            , \"//lst[@name='counts']/int[@name='10.00,USD']='1'\"\n            , \"//int[@name='before']='1'\"\n            , \"//int[@name='after']='1'\"\n            , \"//int[@name='between']='3'\"\n            );\n    assertQ(\"Ensure that we can set a gap in a currency other than the start and end currencies (json.facet)\",\n            req(\"fl\", \"*,score\", \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n                \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', gap:'0.50,GBP', end:'11.00,USD', other:all } }\")\n            ,\"count(//lst[@name='xxx']/arr[@name='buckets']/lst)=7\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='4.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='5.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='6.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='7.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='8.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='0']][str[@name='val'][.='9.00,USD']]\"\n            ,\"//lst[@name='xxx']/arr[@name='buckets']/lst[int[@name='count'][.='1']][str[@name='val'][.='10.00,USD']]\"\n            \n            ,\"//lst[@name='xxx']/lst[@name='before' ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='after'  ]/int[@name='count'][.='1']\"\n            ,\"//lst[@name='xxx']/lst[@name='between']/int[@name='count'][.='3']\"\n            );\n\n    for (SolrParams facet : Arrays.asList(params(\"facet\", \"true\",\n                                                 \"facet.range\", fieldName,\n                                                 \"f.\" + fieldName + \".facet.range.start\", \"4.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.end\", \"11.00,EUR\",\n                                                 \"f.\" + fieldName + \".facet.range.gap\", \"1.00,USD\",\n                                                 \"f.\" + fieldName + \".facet.range.other\", \"all\"),\n                                          params(\"json.facet\",\n                                                 \"{ xxx : { type:range, field:\" + fieldName + \", start:'4.00,USD', \" +\n                                                 \"          gap:'1.00,USD', end:'11.00,EUR', other:all } }\"))) {\n      assertQEx(\"Ensure that we throw an error if we try to use different start and end currencies\",\n                \"Cannot compare CurrencyValues when their currencies are not equal\", \n                req(facet, \"q\", \"*:*\"),\n                SolrException.ErrorCode.BAD_REQUEST);\n    }\n  }\n\n","bugFix":["6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["9f4251f14d2db68330fc1e6f0495c053a905d560"],"9f4251f14d2db68330fc1e6f0495c053a905d560":["1c841e27891873cab110ebeb89f124a8ec470176"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6409f24cc7d96b04fb1c932845092b0e307fb5d4"],"6409f24cc7d96b04fb1c932845092b0e307fb5d4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}