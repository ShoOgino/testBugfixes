{"path":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","commits":[{"id":"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0","date":1367858986,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n   assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"1\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=17\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"3\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=4\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"100\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":["8df1678a43c7068815b38e922e40d8e2260ac2e5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d30626256898b32ff0ecc26c92890e3094d60565","date":1375919300,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  @Ignore(\"SOLR-5122: estimates don't seem to make any sense\")\n  public void testEstimatedHitCounts() throws Exception {\n   assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"1\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=17\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"3\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=4\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"100\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n  }  \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n   assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"1\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=17\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"3\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=4\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"100\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  @Ignore(\"SOLR-5122: estimates don't seem to make any sense\")\n  public void testEstimatedHitCounts() throws Exception {\n   assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"1\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=17\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"3\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=4\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"100\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n  }  \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n   assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"1\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=17\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"3\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=4\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"100\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c66792f6f4d853bde4d423587fb81b0940945369","date":1376589030,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = _TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  }  \n\n","sourceOld":"  @Test\n  @Ignore(\"SOLR-5122: estimates don't seem to make any sense\")\n  public void testEstimatedHitCounts() throws Exception {\n   assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"1\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=17\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"3\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=4\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"100\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n  }  \n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = _TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  }  \n\n","sourceOld":"  @Test\n  @Ignore(\"SOLR-5122: estimates don't seem to make any sense\")\n  public void testEstimatedHitCounts() throws Exception {\n   assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"1\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=17\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"3\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=4\"        \n      );\n    assertQ(\n        req(\n          SpellCheckComponent.COMPONENT_NAME, \"true\",\n          SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n          SpellingParams.SPELLCHECK_COUNT, \"1\",   \n          SpellingParams.SPELLCHECK_COLLATE, \"true\",\n          SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n          SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n          SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",\n          SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"100\",\n          \"qt\", \"spellCheckCompRH\",          \n          CommonParams.Q, \"teststop:metnoia\"\n        ),\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/str[@name='collationQuery']='teststop:metanoia'\",\n        \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/int[@name='hits']=6\"        \n      );\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  }  \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = _TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8df1678a43c7068815b38e922e40d8e2260ac2e5","date":1404915728,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  }  \n\n","bugFix":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"343d2d9477b299075fa3a19a46e654b6c3bf552b","date":1407872410,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc8eb4f360b24464d20341a2736cc99e6df7abc2","date":1478180339,"type":3,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  } \n\n","bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","1fbc54056c47df1f7e6f082f043d377592a5653b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and 6 <= . and . <= 10]\"        \n              );\n    }\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","bugFix":["c66792f6f4d853bde4d423587fb81b0940945369","fc8eb4f360b24464d20341a2736cc99e6df7abc2"],"bugIntro":["1fbc54056c47df1f7e6f082f043d377592a5653b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"/spellCheckCompRH\");\n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"/spellCheckCompRH\");\n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"int[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"int[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"int[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"/spellCheckCompRH\");\n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"spellCheckCompRH\");       \n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbc54056c47df1f7e6f082f043d377592a5653b","date":1574361995,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testEstimatedHitCounts().mjava","sourceNew":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"/spellCheckCompRH\");\n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      String hitsXPath = xpathPrefix + \"long[@name='hits']\"; // we will append to this...\n      \n      if (val <= NUM_DOCS_WITH_TERM_EVERYOTHER) {\n        // strongest assertions we can make given an arbirary MergePolicy on such a small index\n        // is based on the idea that the docs may all come *first* or all come *last*\n        // and then do the math on what estimate should come from that if we collected *exactly* 'val'..\n        //\n        // if they are all \"first\" we will overestimate and assume everything is a match...\n        int max = NUM_DOCS;\n        // if they are all \"last\" we will under-estimate based on how non-matches we had to skip...\n        int min = (/* min collected */ val) / (/* max docs possibly scanned */ NUM_DOCS);\n        hitsXPath += \"[\" + min + \" <= . and . <= \" + max + \"]\";\n      } else {\n        // we've asked for a number greater then what can possibly be found in our tiny index, which should\n        // force it to scan all docs so our hits should be exact\n        hitsXPath += \"[.=\" + NUM_DOCS_WITH_TERM_EVERYOTHER + \"]\";\n      }\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , hitsXPath\n              );\n    }\n\n  } \n\n","sourceOld":"  @Test\n  public void testEstimatedHitCounts() throws Exception {\n    final String xpathPrefix = \n      \"//lst[@name='spellcheck']/lst[@name='collations']/lst[@name='collation']/\";\n    final SolrParams reusedParams = params\n      (SpellCheckComponent.COMPONENT_NAME, \"true\",\n       SpellCheckComponent.SPELLCHECK_DICT, \"direct\",\n       SpellingParams.SPELLCHECK_COUNT, \"1\",   \n       SpellingParams.SPELLCHECK_COLLATE, \"true\",\n       SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, \"1\",\n       SpellingParams.SPELLCHECK_MAX_COLLATIONS, \"1\",\n       SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\",          \n       \"qt\", \"/spellCheckCompRH\");\n\n    // default case, no SPELLCHECK_COLLATE_MAX_COLLECT_DOCS should be exact num hits\n    assertQ(req(reusedParams, \n                CommonParams.Q, \"teststop:metnoia\")\n            , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n            , xpathPrefix + \"long[@name='hits']=6\"        \n            );\n\n    // specifying 0 means \"exact\" same as default, but specifing a value greater \n    // then the total number of docs in the index should also result in it\n    // \"estimating\" and getting exact number as well.\n    for (String val : new String[] { \"0\", \"30\", \"100\", \"10000\" }) {\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits']=6\"        \n              );\n    }\n\n    // values between 0 and the num docs in the index should not error, and should \n    // produce an estimate no more then the total number of docs\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; iter++) {\n      final int val = TestUtil.nextInt(random(), 1, 17);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:metnoia\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:metanoia'\"\n              , xpathPrefix + \"long[@name='hits' and . <= 17 and 0 < .]\"        \n              );\n    }\n\n    // \"everYother\" appears in every other doc in the index, so \"everother\" \n    // should produce a \"decent\" aproximation of the number of hits (8)\n    // for any 5 <= SPELLCHECK_COLLATE_MAX_COLLECT_DOCS\n    //\n    // (we have to be kind of flexible with our definition of \"decent\"\n    // since we're dealing with a fairly small index here)\n    for (int val = 5; val <= 20; val++) {\n      int max = MAX_DOC_ID * val / (val + MIN_DOC_ID_WITH_EVERYOTHER + 1);\n      int min = MAX_DOC_ID * val / (val + MAX_DOC_ID_WITH_EVERYOTHER + 1);\n      assertQ(req(reusedParams,\n                  CommonParams.Q, \"teststop:everother\",\n                  SpellingParams.SPELLCHECK_COLLATE_MAX_COLLECT_DOCS, \"\"+val)\n              , xpathPrefix + \"str[@name='collationQuery']='teststop:everyother'\"\n              , xpathPrefix + \"long[@name='hits' and \" + min + \" <= . and . <= \" + max + \"]\"\n              );\n    }\n\n  } \n\n","bugFix":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","fc8eb4f360b24464d20341a2736cc99e6df7abc2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d30626256898b32ff0ecc26c92890e3094d60565":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0","d30626256898b32ff0ecc26c92890e3094d60565"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["8df1678a43c7068815b38e922e40d8e2260ac2e5"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c66792f6f4d853bde4d423587fb81b0940945369"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["fc8eb4f360b24464d20341a2736cc99e6df7abc2"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["343d2d9477b299075fa3a19a46e654b6c3bf552b","fc8eb4f360b24464d20341a2736cc99e6df7abc2"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c66792f6f4d853bde4d423587fb81b0940945369"],"8df1678a43c7068815b38e922e40d8e2260ac2e5":["6613659748fe4411a7dcf85266e55db1f95f7315"],"c66792f6f4d853bde4d423587fb81b0940945369":["d30626256898b32ff0ecc26c92890e3094d60565"],"30c8e5574b55d57947e989443dfde611646530ee":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"fc8eb4f360b24464d20341a2736cc99e6df7abc2":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["fc8eb4f360b24464d20341a2736cc99e6df7abc2","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"28288370235ed02234a64753cdbf0c6ec096304a":["fc8eb4f360b24464d20341a2736cc99e6df7abc2","5ff704ef91e9ae30ca59babb23ece85720701b60"],"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1fbc54056c47df1f7e6f082f043d377592a5653b":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1fbc54056c47df1f7e6f082f043d377592a5653b"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"]},"commit2Childs":{"d30626256898b32ff0ecc26c92890e3094d60565":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","c66792f6f4d853bde4d423587fb81b0940945369"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"343d2d9477b299075fa3a19a46e654b6c3bf552b":["9720b151fde2073f4e401450f4574e5f31c2d0ff","fc8eb4f360b24464d20341a2736cc99e6df7abc2"],"6613659748fe4411a7dcf85266e55db1f95f7315":["8df1678a43c7068815b38e922e40d8e2260ac2e5"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","5ff704ef91e9ae30ca59babb23ece85720701b60"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"8df1678a43c7068815b38e922e40d8e2260ac2e5":["343d2d9477b299075fa3a19a46e654b6c3bf552b"],"c66792f6f4d853bde4d423587fb81b0940945369":["6613659748fe4411a7dcf85266e55db1f95f7315","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"30c8e5574b55d57947e989443dfde611646530ee":[],"fc8eb4f360b24464d20341a2736cc99e6df7abc2":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","9720b151fde2073f4e401450f4574e5f31c2d0ff","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["30c8e5574b55d57947e989443dfde611646530ee"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","1fbc54056c47df1f7e6f082f043d377592a5653b"],"ebcafb9e6302e7e39ce2199768a1428d22dd3ce0":["d30626256898b32ff0ecc26c92890e3094d60565","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebcafb9e6302e7e39ce2199768a1428d22dd3ce0"],"1fbc54056c47df1f7e6f082f043d377592a5653b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9720b151fde2073f4e401450f4574e5f31c2d0ff","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}