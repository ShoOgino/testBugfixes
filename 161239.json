{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#stem(char[],int,char[],int).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#stem(char[],int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, pr an empty if no stems are found\n   */\n  private List<Stem> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<Stem> stems = new ArrayList<Stem>();\n\n    for (int i = 0; i < length; i++) {\n      List<HunspellAffix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (HunspellAffix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int deAffixedLength = length - suffix.getAppend().length();\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addSuffix(suffix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<HunspellAffix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (HunspellAffix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = prefix.getAppend().length();\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addPrefix(prefix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#stem(char[],int,char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#stem(char[],int,char[],int).mjava","sourceNew":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, pr an empty if no stems are found\n   */\n  private List<Stem> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<Stem> stems = new ArrayList<Stem>();\n\n    for (int i = 0; i < length; i++) {\n      List<HunspellAffix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (HunspellAffix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int deAffixedLength = length - suffix.getAppend().length();\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addSuffix(suffix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<HunspellAffix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (HunspellAffix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = prefix.getAppend().length();\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addPrefix(prefix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Generates a list of stems for the provided word\n   *\n   * @param word Word to generate the stems for\n   * @param flags Flags from a previous stemming step that need to be cross-checked with any affixes in this recursive step\n   * @param recursionDepth Level of recursion this stemming step is at\n   * @return List of stems, pr an empty if no stems are found\n   */\n  private List<Stem> stem(char word[], int length, char[] flags, int recursionDepth) {\n    List<Stem> stems = new ArrayList<Stem>();\n\n    for (int i = 0; i < length; i++) {\n      List<HunspellAffix> suffixes = dictionary.lookupSuffix(word, i, length - i);\n      if (suffixes == null) {\n        continue;\n      }\n\n      for (HunspellAffix suffix : suffixes) {\n        if (hasCrossCheckedFlag(suffix.getFlag(), flags)) {\n          int deAffixedLength = length - suffix.getAppend().length();\n          // TODO: can we do this in-place?\n          String strippedWord = new StringBuilder().append(word, 0, deAffixedLength).append(suffix.getStrip()).toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), suffix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addSuffix(suffix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    for (int i = length - 1; i >= 0; i--) {\n      List<HunspellAffix> prefixes = dictionary.lookupPrefix(word, 0, i);\n      if (prefixes == null) {\n        continue;\n      }\n\n      for (HunspellAffix prefix : prefixes) {\n        if (hasCrossCheckedFlag(prefix.getFlag(), flags)) {\n          int deAffixedStart = prefix.getAppend().length();\n          int deAffixedLength = length - deAffixedStart;\n\n          String strippedWord = new StringBuilder().append(prefix.getStrip())\n              .append(word, deAffixedStart, deAffixedLength)\n              .toString();\n\n          List<Stem> stemList = applyAffix(strippedWord.toCharArray(), strippedWord.length(), prefix, recursionDepth);\n          for (Stem stem : stemList) {\n            stem.addPrefix(prefix);\n          }\n\n          stems.addAll(stemList);\n        }\n      }\n    }\n\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}