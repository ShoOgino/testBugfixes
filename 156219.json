{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","commits":[{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","pathOld":"/dev/null","sourceNew":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception,\n      InterruptedException, TimeoutException, IOException, KeeperException,\n      URISyntaxException {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","pathOld":"/dev/null","sourceNew":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception,\n      InterruptedException, TimeoutException, IOException, KeeperException,\n      URISyntaxException {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","pathOld":"/dev/null","sourceNew":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception,\n      InterruptedException, TimeoutException, IOException, KeeperException,\n      URISyntaxException {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cf464adc9721589a2872247d15442e59766e791","date":1327607202,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception,\n      InterruptedException, TimeoutException, IOException, KeeperException,\n      URISyntaxException {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78a55f24d9b493c2a1cecf79f1d78279062b545b","date":1327688152,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception,\n      InterruptedException, TimeoutException, IOException, KeeperException,\n      URISyntaxException {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd92b8bcc88e969302510acf77bd6970da3994c4","date":1327839530,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception,\n      InterruptedException, TimeoutException, IOException, KeeperException,\n      URISyntaxException {\n    List<JettySolrRunner> jettys = new ArrayList<JettySolrRunner>();\n    List<SolrServer> clients = new ArrayList<SolrServer>();\n    StringBuilder sb = new StringBuilder();\n    for (int i = 1; i <= numJettys; i++) {\n      if (sb.length() > 0) sb.append(',');\n      JettySolrRunner j = createJetty(testDir, testDir + \"/jetty\"\n          + this.jettyIntCntr.incrementAndGet(), null, \"solrconfig.xml\", null);\n      jettys.add(j);\n      SolrServer client = createNewSolrServer(j.getLocalPort());\n      clients.add(client);\n    }\n    \n    initCloud();\n    \n    this.jettys.addAll(jettys);\n    this.clients.addAll(clients);\n    \n    updateMappingsFromZk(this.jettys, this.clients);\n    \n    // build the shard string\n    for (int i = 1; i <= numJettys / 2; i++) {\n      JettySolrRunner j = this.jettys.get(i);\n      JettySolrRunner j2 = this.jettys.get(i + (numJettys / 2 - 1));\n      if (sb.length() > 0) sb.append(',');\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n    }\n    shards = sb.toString();\n    \n    return jettys;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","bugFix":null,"bugIntro":["275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":null,"sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#createJettys(int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#createJettys(int).mjava","sourceNew":"  protected List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","sourceOld":"  private List<JettySolrRunner> createJettys(int numJettys) throws Exception {\n    return createJettys(numJettys, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":["a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7cf464adc9721589a2872247d15442e59766e791"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["7cf464adc9721589a2872247d15442e59766e791","2c30e4c1cee08b3b229a77991882594fe7250b66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["7cf464adc9721589a2872247d15442e59766e791","2c30e4c1cee08b3b229a77991882594fe7250b66"],"fd92b8bcc88e969302510acf77bd6970da3994c4":["0d22ac6a4146774c1bc8400160fc0b6150294e92","7cf464adc9721589a2872247d15442e59766e791"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7cf464adc9721589a2872247d15442e59766e791":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["7cf464adc9721589a2872247d15442e59766e791"]},"commit2Childs":{"78a55f24d9b493c2a1cecf79f1d78279062b545b":[],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["fd92b8bcc88e969302510acf77bd6970da3994c4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["78a55f24d9b493c2a1cecf79f1d78279062b545b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"fd92b8bcc88e969302510acf77bd6970da3994c4":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7cf464adc9721589a2872247d15442e59766e791"],"7cf464adc9721589a2872247d15442e59766e791":["78a55f24d9b493c2a1cecf79f1d78279062b545b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["78a55f24d9b493c2a1cecf79f1d78279062b545b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","fd92b8bcc88e969302510acf77bd6970da3994c4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}