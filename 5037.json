{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    this.maxTokenLength = length;\n  }\n\n","sourceOld":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    this.maxTokenLength = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43acd3a99a12a5bec9c72097de0e294c80cb6daa","date":1396327381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.maxTokenLength = length;\n  }\n\n","sourceOld":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    this.maxTokenLength = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.maxTokenLength = length;\n  }\n\n","sourceOld":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    this.maxTokenLength = length;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c00ffa555aa637d932f7d491038cf9992403994","date":1408702746,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.maxTokenLength = length;\n    scanner.setBufferSize(Math.min(length, 1024 * 1024)); // limit buffer size to 1M chars\n  }\n\n","sourceOld":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.maxTokenLength = length;\n  }\n\n","bugFix":null,"bugIntro":["6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8","date":1437149796,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","sourceOld":"  /** Set the max allowed token length.  Any token longer\n   *  than this is skipped. */\n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    }\n    this.maxTokenLength = length;\n    scanner.setBufferSize(Math.min(length, 1024 * 1024)); // limit buffer size to 1M chars\n  }\n\n","bugFix":["3c00ffa555aa637d932f7d491038cf9992403994","a5b54d19e4682ef2b08bd06f76c13a4c8d785386"],"bugIntro":["56bed0a9b00f85c91255f5f43b34cbd65fba3c46","56bed0a9b00f85c91255f5f43b34cbd65fba3c46"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","date":1465936684,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizer#setMaxTokenLength(int).mjava","sourceNew":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","sourceOld":"  /**\n   * Set the max allowed token length.  No tokens longer than this are emitted.\n   * \n   * @throws IllegalArgumentException if the given length is outside of the\n   *  range [1, {@value #MAX_TOKEN_LENGTH_LIMIT}].\n   */ \n  public void setMaxTokenLength(int length) {\n    if (length < 1) {\n      throw new IllegalArgumentException(\"maxTokenLength must be greater than zero\");\n    } else if (length > MAX_TOKEN_LENGTH_LIMIT) {\n      throw new IllegalArgumentException(\"maxTokenLength may not exceed \" + MAX_TOKEN_LENGTH_LIMIT);\n    }\n    if (length != maxTokenLength) {\n      maxTokenLength = length;\n      scanner.setBufferSize(length);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["b89678825b68eccaf09e6ab71675fc0b0af1e099","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8":["3c00ffa555aa637d932f7d491038cf9992403994"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3c00ffa555aa637d932f7d491038cf9992403994":["43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8","b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5eb2511ababf862ea11e10761c70ee560cd84510","43acd3a99a12a5bec9c72097de0e294c80cb6daa"],"6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8":["b266fe0ac2172d4ad87cff12bd9bf9f8c8247345","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3c00ffa555aa637d932f7d491038cf9992403994":["6c778eaf7acbfbb4aff3494fe8b9e3674f0c87a8"],"43acd3a99a12a5bec9c72097de0e294c80cb6daa":["5eb2511ababf862ea11e10761c70ee560cd84510","3c00ffa555aa637d932f7d491038cf9992403994"],"b266fe0ac2172d4ad87cff12bd9bf9f8c8247345":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}