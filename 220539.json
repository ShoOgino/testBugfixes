{"path":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","commits":[{"id":"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a","date":1328740250,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(h.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","date":1329188942,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(h.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(h.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d264f386d864b5751209060e8886ca9845f70469","date":1372172126,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(h.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"354983dcdf70c800bf2573d10b54a7391b1dc167","date":1372183171,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(h.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7116474e2e390259937401cf928323e0cbc75e60","date":1372780249,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(h.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(h.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(h.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2106271e380c198349e0f6eac0395bb462913fab","date":1397072894,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_pl\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/LukeRequestHandlerTest#testFlParam().mjava","sourceNew":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_dt\", \"solr_b\")) {\n        if (h.getCore().getLatestSchema().getField(f).getType().isPointField()) continue;\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFlParam() {\n    SolrQueryRequest req = req(\"qt\", \"/admin/luke\", \"fl\", \"solr_t solr_s\", \"show\", \"all\");\n    try {\n      // First, determine that the two fields ARE there\n      String response = h.query(req);\n      assertNull(TestHarness.validateXPath(response,\n          getFieldXPathPrefix(\"solr_t\") + \"[@name='index']\",\n          getFieldXPathPrefix(\"solr_s\") + \"[@name='index']\"\n      ));\n\n      // Now test that the other fields are NOT there\n      for (String f : Arrays.asList(\"solr_ti\",\n          \"solr_td\", \"solr_dt\", \"solr_b\")) {\n\n        assertNotNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n\n      }\n      // Insure * works\n      req = req(\"qt\", \"/admin/luke\", \"fl\", \"*\");\n      response = h.query(req);\n      for (String f : Arrays.asList(\"solr_t\", \"solr_s\", \"solr_ti\",\n          \"solr_td\", \"solr_dt\", \"solr_b\")) {\n\n        assertNull(TestHarness.validateXPath(response,\n            getFieldXPathPrefix(f) + \"[@name='index']\"));\n      }\n    } catch (Exception e) {\n      fail(\"Caught unexpected exception \" + e.getMessage());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7116474e2e390259937401cf928323e0cbc75e60":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["2106271e380c198349e0f6eac0395bb462913fab"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c","7116474e2e390259937401cf928323e0cbc75e60"],"2106271e380c198349e0f6eac0395bb462913fab":["7116474e2e390259937401cf928323e0cbc75e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"354983dcdf70c800bf2573d10b54a7391b1dc167":["d264f386d864b5751209060e8886ca9845f70469"],"d264f386d864b5751209060e8886ca9845f70469":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"]},"commit2Childs":{"7116474e2e390259937401cf928323e0cbc75e60":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2106271e380c198349e0f6eac0395bb462913fab"],"6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a":["b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c"],"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"2106271e380c198349e0f6eac0395bb462913fab":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"354983dcdf70c800bf2573d10b54a7391b1dc167":["7116474e2e390259937401cf928323e0cbc75e60"],"d264f386d864b5751209060e8886ca9845f70469":["354983dcdf70c800bf2573d10b54a7391b1dc167"],"b6912d3e0a9ef2865124c6822bc9e4cfd3581c6c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","d264f386d864b5751209060e8886ca9845f70469"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}