{"path":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public Object clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = (IndexInput) delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = (IndexInput) delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5bf508bfc98425280b4bb708ab724f718705c9d","date":1332973345,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = (IndexInput) delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public Object clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = (IndexInput) delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7460755aa94143153400f49c8ac2746f5d092e1a","date":1345536974,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = (IndexInput) delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = (IndexInput) delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4329ea1888f09fb692caf2ad95056327be317144","date":1418146038,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5e561b4438c227a4d8960523d49ce735652ae66","date":1470733409,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone, parent != null ? parent : this);\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone, parent != null ? parent : this);\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone, parent != null ? parent : this);\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/store/MockIndexInputWrapper#clone().mjava","sourceNew":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone, parent != null ? parent : this);\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","sourceOld":"  @Override\n  public MockIndexInputWrapper clone() {\n    ensureOpen();\n    if (dir.verboseClone) {\n      new Exception(\"clone: \" + this).printStackTrace(System.out);\n    }\n    dir.inputCloneCount.incrementAndGet();\n    IndexInput iiclone = delegate.clone();\n    MockIndexInputWrapper clone = new MockIndexInputWrapper(dir, name, iiclone);\n    clone.isClone = true;\n    // Pending resolution on LUCENE-686 we may want to\n    // uncomment this code so that we also track that all\n    // clones get closed:\n    /*\n    synchronized(dir.openFiles) {\n      if (dir.openFiles.containsKey(name)) {\n        Integer v = (Integer) dir.openFiles.get(name);\n        v = Integer.valueOf(v.intValue()+1);\n        dir.openFiles.put(name, v);\n      } else {\n        throw new RuntimeException(\"BUG: cloned file was not open?\");\n      }\n    }\n    */\n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"001b25b42373b22a52f399dbf072f1224632e8e6":["f5bf508bfc98425280b4bb708ab724f718705c9d","7460755aa94143153400f49c8ac2746f5d092e1a"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4329ea1888f09fb692caf2ad95056327be317144","a5e561b4438c227a4d8960523d49ce735652ae66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4329ea1888f09fb692caf2ad95056327be317144":["7460755aa94143153400f49c8ac2746f5d092e1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5e561b4438c227a4d8960523d49ce735652ae66":["4329ea1888f09fb692caf2ad95056327be317144"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7460755aa94143153400f49c8ac2746f5d092e1a":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4329ea1888f09fb692caf2ad95056327be317144","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["4329ea1888f09fb692caf2ad95056327be317144","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"]},"commit2Childs":{"001b25b42373b22a52f399dbf072f1224632e8e6":[],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f5bf508bfc98425280b4bb708ab724f718705c9d"],"4329ea1888f09fb692caf2ad95056327be317144":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","a5e561b4438c227a4d8960523d49ce735652ae66","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a5e561b4438c227a4d8960523d49ce735652ae66":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"f5bf508bfc98425280b4bb708ab724f718705c9d":["001b25b42373b22a52f399dbf072f1224632e8e6","7460755aa94143153400f49c8ac2746f5d092e1a"],"7460755aa94143153400f49c8ac2746f5d092e1a":["001b25b42373b22a52f399dbf072f1224632e8e6","4329ea1888f09fb692caf2ad95056327be317144"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}