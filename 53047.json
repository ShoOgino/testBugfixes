{"path":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7e16ac84f9e5d560008fe1554462ff8b853b3d3c","date":1520142134,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","sourceNew":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","sourceNew":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    \n\n    try {\n      cloudClient.setDefaultCollection(testCollectionName);\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders, cloudClient);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    cloudClient.setDefaultCollection(testCollectionName);\n\n    try {\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(cloudClient, testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":["84f20f331d8001864545c7021812d8c6509c7593"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"574b23492dfd71945e5c252e0527a138d216a9d3","date":1551961121,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","sourceNew":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    \n\n    try {\n      cloudClient.setDefaultCollection(testCollectionName);\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders, cloudClient);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      if (useTlogReplicas()) {\n\n      }\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      if (useTlogReplicas()) {\n        TimeOut timeOut = new TimeOut(15, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Expected only 2 documents in the index\", () -> {\n          try {\n            return 2 == cloudClient.query(params).getResults().getNumFound();\n          } catch (Exception e) {\n            return false;\n          }\n        });\n      } else {\n        assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n      }\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    \n\n    try {\n      cloudClient.setDefaultCollection(testCollectionName);\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders, cloudClient);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","sourceNew":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    \n\n    try {\n      cloudClient.setDefaultCollection(testCollectionName);\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Before put non leaders into lower term: {}\", printClusterStateInfo());\n      }\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders, cloudClient);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      if (log.isInfoEnabled()) {\n        log.info(\"Before forcing leader: {}\", printClusterStateInfo());\n      }\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      if (log.isInfoEnabled()) {\n        log.info(\"After forcing leader: {}\", clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      }\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      if (useTlogReplicas()) {\n\n      }\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      if (useTlogReplicas()) {\n        TimeOut timeOut = new TimeOut(15, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Expected only 2 documents in the index\", () -> {\n          try {\n            return 2 == cloudClient.query(params).getResults().getNumFound();\n          } catch (Exception e) {\n            return false;\n          }\n        });\n      } else {\n        assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n      }\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    \n\n    try {\n      cloudClient.setDefaultCollection(testCollectionName);\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      log.info(\"Before put non leaders into lower term: \" + printClusterStateInfo());\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders, cloudClient);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      log.info(\"Before forcing leader: \" + printClusterStateInfo());\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      log.info(\"After forcing leader: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      if (useTlogReplicas()) {\n\n      }\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      if (useTlogReplicas()) {\n        TimeOut timeOut = new TimeOut(15, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Expected only 2 documents in the index\", () -> {\n          try {\n            return 2 == cloudClient.query(params).getResults().getNumFound();\n          } catch (Exception e) {\n            return false;\n          }\n        });\n      } else {\n        assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n      }\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/ForceLeaderTest#testReplicasInLowerTerms().mjava","sourceNew":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3);\n    \n\n    try {\n      cloudClient.setDefaultCollection(testCollectionName);\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Before put non leaders into lower term: {}\", printClusterStateInfo());\n      }\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders, cloudClient);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      if (log.isInfoEnabled()) {\n        log.info(\"Before forcing leader: {}\", printClusterStateInfo());\n      }\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      if (log.isInfoEnabled()) {\n        log.info(\"After forcing leader: {}\", clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      }\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      if (useTlogReplicas()) {\n\n      }\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      if (useTlogReplicas()) {\n        TimeOut timeOut = new TimeOut(15, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Expected only 2 documents in the index\", () -> {\n          try {\n            return 2 == cloudClient.query(params).getResults().getNumFound();\n          } catch (Exception e) {\n            return false;\n          }\n        });\n      } else {\n        assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n      }\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","sourceOld":"  /**\n   * Tests that FORCELEADER can get an active leader even only replicas with term lower than leader's term are live\n   */\n  @Test\n  @Slow\n  public void testReplicasInLowerTerms() throws Exception {\n    handle.put(\"maxScore\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    \n\n\n    String testCollectionName = \"forceleader_lower_terms_collection\";\n    createCollection(testCollectionName, \"conf1\", 1, 3, 1);\n    \n\n    try {\n      cloudClient.setDefaultCollection(testCollectionName);\n      List<Replica> notLeaders = ensureAllReplicasAreActive(testCollectionName, SHARD1, 1, 3, maxWaitSecsToSeeAllActive);\n      assertEquals(\"Expected 2 replicas for collection \" + testCollectionName\n          + \" but found \" + notLeaders.size() + \"; clusterState: \"\n          + printClusterStateInfo(testCollectionName), 2, notLeaders.size());\n\n      Replica leader = cloudClient.getZkStateReader().getLeaderRetry(testCollectionName, SHARD1);\n      JettySolrRunner notLeader0 = getJettyOnPort(getReplicaPort(notLeaders.get(0)));\n      ZkController zkController = notLeader0.getCoreContainer().getZkController();\n\n      if (log.isInfoEnabled()) {\n        log.info(\"Before put non leaders into lower term: {}\", printClusterStateInfo());\n      }\n      putNonLeadersIntoLowerTerm(testCollectionName, SHARD1, zkController, leader, notLeaders, cloudClient);\n\n      for (Replica replica : notLeaders) {\n        waitForState(testCollectionName, replica.getName(), State.DOWN, 60000);\n      }\n      waitForState(testCollectionName, leader.getName(), State.DOWN, 60000);\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      ClusterState clusterState = cloudClient.getZkStateReader().getClusterState();\n      int numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(\"Expected only 0 active replica but found \" + numActiveReplicas +\n          \"; clusterState: \" + printClusterStateInfo(), 0, numActiveReplicas);\n\n      int numReplicasOnLiveNodes = 0;\n      for (Replica rep : clusterState.getCollection(testCollectionName).getSlice(SHARD1).getReplicas()) {\n        if (clusterState.getLiveNodes().contains(rep.getNodeName())) {\n          numReplicasOnLiveNodes++;\n        }\n      }\n      assertEquals(2, numReplicasOnLiveNodes);\n      if (log.isInfoEnabled()) {\n        log.info(\"Before forcing leader: {}\", printClusterStateInfo());\n      }\n      // Assert there is no leader yet\n      assertNull(\"Expected no leader right now. State: \" + clusterState.getCollection(testCollectionName).getSlice(SHARD1),\n          clusterState.getCollection(testCollectionName).getSlice(SHARD1).getLeader());\n\n      assertSendDocFails(3);\n\n      log.info(\"Do force leader...\");\n      doForceLeader(testCollectionName, SHARD1);\n\n      // By now we have an active leader. Wait for recoveries to begin\n      waitForRecoveriesToFinish(testCollectionName, cloudClient.getZkStateReader(), true);\n\n      cloudClient.getZkStateReader().forceUpdateCollection(testCollectionName);\n      clusterState = cloudClient.getZkStateReader().getClusterState();\n      if (log.isInfoEnabled()) {\n        log.info(\"After forcing leader: {}\", clusterState.getCollection(testCollectionName).getSlice(SHARD1));\n      }\n      // we have a leader\n      Replica newLeader = clusterState.getCollectionOrNull(testCollectionName).getSlice(SHARD1).getLeader();\n      assertNotNull(newLeader);\n      // leader is active\n      assertEquals(State.ACTIVE, newLeader.getState());\n\n      numActiveReplicas = getNumberOfActiveReplicas(clusterState, testCollectionName, SHARD1);\n      assertEquals(2, numActiveReplicas);\n\n      // Assert that indexing works again\n      log.info(\"Sending doc 4...\");\n      sendDoc(4);\n      log.info(\"Committing...\");\n      cloudClient.commit();\n      log.info(\"Doc 4 sent and commit issued\");\n\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 1, 1);\n      assertDocsExistInAllReplicas(notLeaders, testCollectionName, 4, 4);\n\n      if (useTlogReplicas()) {\n\n      }\n      // Docs 1 and 4 should be here. 2 was lost during the partition, 3 had failed to be indexed.\n      log.info(\"Checking doc counts...\");\n      ModifiableSolrParams params = new ModifiableSolrParams();\n      params.add(\"q\", \"*:*\");\n      if (useTlogReplicas()) {\n        TimeOut timeOut = new TimeOut(15, TimeUnit.SECONDS, TimeSource.NANO_TIME);\n        timeOut.waitFor(\"Expected only 2 documents in the index\", () -> {\n          try {\n            return 2 == cloudClient.query(params).getResults().getNumFound();\n          } catch (Exception e) {\n            return false;\n          }\n        });\n      } else {\n        assertEquals(\"Expected only 2 documents in the index\", 2, cloudClient.query(params).getResults().getNumFound());\n      }\n\n      bringBackOldLeaderAndSendDoc(testCollectionName, leader, notLeaders, 5);\n    } finally {\n      log.info(\"Cleaning up after the test.\");\n      // try to clean up\n      attemptCollectionDelete(cloudClient, testCollectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["84f20f331d8001864545c7021812d8c6509c7593"],"574b23492dfd71945e5c252e0527a138d216a9d3":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["574b23492dfd71945e5c252e0527a138d216a9d3"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"7e16ac84f9e5d560008fe1554462ff8b853b3d3c":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"574b23492dfd71945e5c252e0527a138d216a9d3":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["574b23492dfd71945e5c252e0527a138d216a9d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"84f20f331d8001864545c7021812d8c6509c7593":["7e16ac84f9e5d560008fe1554462ff8b853b3d3c"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}