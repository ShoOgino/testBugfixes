{"path":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#parseIssuers(Map[String,Object]).mjava","commits":[{"id":"1ac780c217504f0ca673ac5dcb98768984267c60","date":1568879420,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#parseIssuers(Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initialize optional additional issuers configured in 'issuers' config map\n   * @param pluginConfig the main config object\n   * @return a list of parsed {@link JWTIssuerConfig} objects\n   */\n  @SuppressWarnings(\"unchecked\")\n  List<JWTIssuerConfig> parseIssuers(Map<String, Object> pluginConfig) {\n    List<JWTIssuerConfig> configs = new ArrayList<>();\n    try {\n      List<Map<String, Object>> issuers = (List<Map<String, Object>>) pluginConfig.get(PARAM_ISSUERS);\n      if (issuers != null) {\n        issuers.forEach(issuerConf -> {\n          JWTIssuerConfig ic = new JWTIssuerConfig(issuerConf);\n          ic.init();\n          configs.add(ic);\n          log.debug(\"Found issuer with name {} and issuerId {}\", ic.getName(), ic.getIss());\n        });\n      }\n      return configs;\n    } catch(ClassCastException cce) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Parameter \" + PARAM_ISSUERS + \" has wrong format.\", cce);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#parseIssuers(Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/security/JWTAuthPlugin#parseIssuers(Map[String,Object]).mjava","sourceNew":"  /**\n   * Initialize optional additional issuers configured in 'issuers' config map\n   * @param pluginConfig the main config object\n   * @return a list of parsed {@link JWTIssuerConfig} objects\n   */\n  @SuppressWarnings(\"unchecked\")\n  List<JWTIssuerConfig> parseIssuers(Map<String, Object> pluginConfig) {\n    List<JWTIssuerConfig> configs = new ArrayList<>();\n    try {\n      List<Map<String, Object>> issuers = (List<Map<String, Object>>) pluginConfig.get(PARAM_ISSUERS);\n      if (issuers != null) {\n        issuers.forEach(issuerConf -> {\n          JWTIssuerConfig ic = new JWTIssuerConfig(issuerConf);\n          ic.init();\n          configs.add(ic);\n          if (log.isDebugEnabled()) {\n            log.debug(\"Found issuer with name {} and issuerId {}\", ic.getName(), ic.getIss());\n          }\n        });\n      }\n      return configs;\n    } catch(ClassCastException cce) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Parameter \" + PARAM_ISSUERS + \" has wrong format.\", cce);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initialize optional additional issuers configured in 'issuers' config map\n   * @param pluginConfig the main config object\n   * @return a list of parsed {@link JWTIssuerConfig} objects\n   */\n  @SuppressWarnings(\"unchecked\")\n  List<JWTIssuerConfig> parseIssuers(Map<String, Object> pluginConfig) {\n    List<JWTIssuerConfig> configs = new ArrayList<>();\n    try {\n      List<Map<String, Object>> issuers = (List<Map<String, Object>>) pluginConfig.get(PARAM_ISSUERS);\n      if (issuers != null) {\n        issuers.forEach(issuerConf -> {\n          JWTIssuerConfig ic = new JWTIssuerConfig(issuerConf);\n          ic.init();\n          configs.add(ic);\n          log.debug(\"Found issuer with name {} and issuerId {}\", ic.getName(), ic.getIss());\n        });\n      }\n      return configs;\n    } catch(ClassCastException cce) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Parameter \" + PARAM_ISSUERS + \" has wrong format.\", cce);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["1ac780c217504f0ca673ac5dcb98768984267c60"],"1ac780c217504f0ca673ac5dcb98768984267c60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"]},"commit2Childs":{"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1ac780c217504f0ca673ac5dcb98768984267c60":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ac780c217504f0ca673ac5dcb98768984267c60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}