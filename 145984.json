{"path":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","commits":[{"id":"95f7ab6c9bc005d456da65d8d74c5338ffc031aa","date":1297016220,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","95f7ab6c9bc005d456da65d8d74c5338ffc031aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["60ba444201d2570214b6fcf1d15600dc1a01f548"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29ef99d61cda9641b6250bf9567329a6e65f901d","95f7ab6c9bc005d456da65d8d74c5338ffc031aa","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"95f7ab6c9bc005d456da65d8d74c5338ffc031aa":["60ba444201d2570214b6fcf1d15600dc1a01f548","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}