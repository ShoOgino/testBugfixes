{"path":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","commits":[{"id":"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1","date":1342716838,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit 2 is heuristic guess!!\n      // nocommit put cheating back!  does it help?\n      // nocommit use skipper!!!  it has next last doc id!!\n      //if (docFreq > blockSize && target - (blockSize - docBufferUpto) - 2*blockSize > accum) {\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force block read next:\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n        }\n      }\n\n      // Now scan:\n      while (nextDoc() != NO_MORE_DOCS) {\n        if (doc >= target) {\n          if (DEBUG) {\n            System.out.println(\"  advance return doc=\" + doc);\n          }\n          return doc;\n        }\n      }\n\n      if (DEBUG) {\n        System.out.println(\"  advance return doc=END\");\n      }\n\n      return NO_MORE_DOCS;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8081d5018e8846bf4080f2809432c759996e749f","date":1344206372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan:\n      while (nextDoc() != NO_MORE_DOCS) {\n        if (doc >= target) {\n          if (DEBUG) {\n            System.out.println(\"  advance return doc=\" + doc);\n          }\n          return doc;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  advance return doc=END\");\n      }\n      return NO_MORE_DOCS;\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit 2 is heuristic guess!!\n      // nocommit put cheating back!  does it help?\n      // nocommit use skipper!!!  it has next last doc id!!\n      //if (docFreq > blockSize && target - (blockSize - docBufferUpto) - 2*blockSize > accum) {\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force block read next:\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();\n          docIn.seek(skipper.getDocPointer());\n        }\n      }\n\n      // Now scan:\n      while (nextDoc() != NO_MORE_DOCS) {\n        if (doc >= target) {\n          if (DEBUG) {\n            System.out.println(\"  advance return doc=\" + doc);\n          }\n          return doc;\n        }\n      }\n\n      if (DEBUG) {\n        System.out.println(\"  advance return doc=END\");\n      }\n\n      return NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e68b3b96266072610a07d11b41f461c1ad69996f","date":1344209580,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == blockSize) {\n          // nocommit hmm skip freq?  but: we don't ever\n          // scan over more than one block?\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan:\n      while (nextDoc() != NO_MORE_DOCS) {\n        if (doc >= target) {\n          if (DEBUG) {\n            System.out.println(\"  advance return doc=\" + doc);\n          }\n          return doc;\n        }\n      }\n      if (DEBUG) {\n        System.out.println(\"  advance return doc=END\");\n      }\n      return NO_MORE_DOCS;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f67533f6945cbcb2b7d0e3541fa88205c1eac14f","date":1344342968,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n        if (docBufferUpto == blockSize) {\n          // nocommit hmm skip freq?  but: we don't ever\n          // scan over more than one block?\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51","date":1344355078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > BLOCK_SIZE && target - accum > BLOCK_SIZE) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > blockSize && target - accum > blockSize) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        blockSize,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % blockSize == (blockSize-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = blockSize;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == blockSize) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"660e1649fe0b5350127e9a2f7c4c3a5861883bee","date":1344374774,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n\n      // nocommit use skipper!!!  it has next last doc id!!\n\n      if (docFreq > BLOCK_SIZE && target - accum > BLOCK_SIZE) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74bd7635df51d421ac314f25514733c8f4c69981","date":1344466925,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target); \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == (BLOCK_SIZE-1): \"got \" + newDocUpto;\n          docUpto = newDocUpto+1;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n\n        // nocommit: in theory we should not hit this?  ie\n        // skipper should already have moved us to the block\n        // containing the doc?  yet assert false trips ... i\n        // think because if you advance w/o having done a\n        // nextDoc yet()... can we assert/remove this?\n        if (docBufferUpto == BLOCK_SIZE) {\n          refillDocs();\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"007463e97416788017c563017736002c3f72ea73","date":1344616184,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // nocommit make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcc6cbc7e8693270112e8d40ca98226199c0288e","date":1345039720,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      if (DEBUG) {\n        System.out.println(\"  FPR.advance target=\" + target);\n      }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        if (DEBUG) {\n          System.out.println(\"load skipper\");\n        }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          if (DEBUG) {\n            System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        if (DEBUG) {\n          System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        if (DEBUG) {\n          System.out.println(\"  return doc=\" + accum);\n        }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        if (DEBUG) {\n          System.out.println(\"  now do nextDoc()\");\n        }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c38ae4870232495dfc5814ab54cb772e3927b038","date":1345312757,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in BlockSkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8615860cb50aefb8eebca1d1b3893dbe21cf126","date":1345550448,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in BlockSkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67fae9c2f12c73cc68201fbd26960be531960b43","date":1345551913,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader(docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in BlockSkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader((IndexInput) docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in BlockSkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"001b25b42373b22a52f399dbf072f1224632e8e6","date":1345889167,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader(docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in BlockSkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#advance(int).mjava","sourceNew":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader(docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in BlockSkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","sourceOld":"    @Override\n    public int advance(int target) throws IOException {\n      // TODO: make frq block load lazy/skippable\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.advance target=\" + target);\n      // }\n\n      // current skip docID < docIDs generated from current buffer <= next skip docID\n      // we don't need to skip if target is buffered already\n      if (docFreq > BLOCK_SIZE && target > nextSkipDoc) {\n\n        // if (DEBUG) {\n        //   System.out.println(\"load skipper\");\n        // }\n\n        if (skipper == null) {\n          // Lazy init: first time this enum has ever been used for skipping\n          skipper = new BlockSkipReader(docIn.clone(),\n                                        BlockPostingsWriter.maxSkipLevels,\n                                        BLOCK_SIZE,\n                                        indexHasPos,\n                                        indexHasOffsets,\n                                        indexHasPayloads);\n        }\n\n        if (!skipped) {\n          assert skipOffset != -1;\n          // This is the first time this enum has skipped\n          // since reset() was called; load the skip data:\n          skipper.init(docTermStartFP+skipOffset, docTermStartFP, 0, 0, docFreq);\n          skipped = true;\n        }\n\n        // always plus one to fix the result, since skip position in BlockSkipReader \n        // is a little different from MultiLevelSkipListReader\n        final int newDocUpto = skipper.skipTo(target) + 1; \n\n        if (newDocUpto > docUpto) {\n          // Skipper moved\n          // if (DEBUG) {\n          //   System.out.println(\"skipper moved to docUpto=\" + newDocUpto + \" vs current=\" + docUpto + \"; docID=\" + skipper.getDoc() + \" fp=\" + skipper.getDocPointer());\n          // }\n          assert newDocUpto % BLOCK_SIZE == 0 : \"got \" + newDocUpto;\n          docUpto = newDocUpto;\n\n          // Force to read next block\n          docBufferUpto = BLOCK_SIZE;\n          accum = skipper.getDoc();               // actually, this is just lastSkipEntry\n          docIn.seek(skipper.getDocPointer());    // now point to the block we want to search\n        }\n        // next time we call advance, this is used to \n        // foresee whether skipper is necessary.\n        nextSkipDoc = skipper.getNextSkipDoc();\n      }\n      if (docUpto == docFreq) {\n        return doc = NO_MORE_DOCS;\n      }\n      if (docBufferUpto == BLOCK_SIZE) {\n        refillDocs();\n      }\n\n      // Now scan... this is an inlined/pared down version\n      // of nextDoc():\n      while (true) {\n        // if (DEBUG) {\n        //   System.out.println(\"  scan doc=\" + accum + \" docBufferUpto=\" + docBufferUpto);\n        // }\n        accum += docDeltaBuffer[docBufferUpto];\n        docUpto++;\n\n        if (accum >= target) {\n          break;\n        }\n        docBufferUpto++;\n        if (docUpto == docFreq) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n\n      if (liveDocs == null || liveDocs.get(accum)) {\n        // if (DEBUG) {\n        //   System.out.println(\"  return doc=\" + accum);\n        // }\n        freq = freqBuffer[docBufferUpto];\n        docBufferUpto++;\n        return doc = accum;\n      } else {\n        // if (DEBUG) {\n        //   System.out.println(\"  now do nextDoc()\");\n        // }\n        docBufferUpto++;\n        return nextDoc();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"007463e97416788017c563017736002c3f72ea73":["74bd7635df51d421ac314f25514733c8f4c69981"],"001b25b42373b22a52f399dbf072f1224632e8e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","67fae9c2f12c73cc68201fbd26960be531960b43"],"660e1649fe0b5350127e9a2f7c4c3a5861883bee":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["67fae9c2f12c73cc68201fbd26960be531960b43"],"c38ae4870232495dfc5814ab54cb772e3927b038":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c38ae4870232495dfc5814ab54cb772e3927b038"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["007463e97416788017c563017736002c3f72ea73"],"67fae9c2f12c73cc68201fbd26960be531960b43":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"74bd7635df51d421ac314f25514733c8f4c69981":["660e1649fe0b5350127e9a2f7c4c3a5861883bee"],"e68b3b96266072610a07d11b41f461c1ad69996f":["8081d5018e8846bf4080f2809432c759996e749f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f67533f6945cbcb2b7d0e3541fa88205c1eac14f":["e68b3b96266072610a07d11b41f461c1ad69996f"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["f67533f6945cbcb2b7d0e3541fa88205c1eac14f"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8081d5018e8846bf4080f2809432c759996e749f":["e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"007463e97416788017c563017736002c3f72ea73":["fcc6cbc7e8693270112e8d40ca98226199c0288e"],"001b25b42373b22a52f399dbf072f1224632e8e6":[],"660e1649fe0b5350127e9a2f7c4c3a5861883bee":["74bd7635df51d421ac314f25514733c8f4c69981"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c38ae4870232495dfc5814ab54cb772e3927b038":["f8615860cb50aefb8eebca1d1b3893dbe21cf126"],"f8615860cb50aefb8eebca1d1b3893dbe21cf126":["67fae9c2f12c73cc68201fbd26960be531960b43"],"fcc6cbc7e8693270112e8d40ca98226199c0288e":["c38ae4870232495dfc5814ab54cb772e3927b038"],"74bd7635df51d421ac314f25514733c8f4c69981":["007463e97416788017c563017736002c3f72ea73"],"67fae9c2f12c73cc68201fbd26960be531960b43":["001b25b42373b22a52f399dbf072f1224632e8e6","3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"e68b3b96266072610a07d11b41f461c1ad69996f":["f67533f6945cbcb2b7d0e3541fa88205c1eac14f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["001b25b42373b22a52f399dbf072f1224632e8e6","f8615860cb50aefb8eebca1d1b3893dbe21cf126","e885d2b1e112b1d9db6a2dae82b3b493dfba1df1"],"f67533f6945cbcb2b7d0e3541fa88205c1eac14f":["d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51"],"d2f8624b27ae4159f0d53a55e5c9c5c6f6fa8f51":["660e1649fe0b5350127e9a2f7c4c3a5861883bee"],"e885d2b1e112b1d9db6a2dae82b3b493dfba1df1":["8081d5018e8846bf4080f2809432c759996e749f"],"8081d5018e8846bf4080f2809432c759996e749f":["e68b3b96266072610a07d11b41f461c1ad69996f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["001b25b42373b22a52f399dbf072f1224632e8e6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}