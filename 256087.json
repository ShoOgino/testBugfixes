{"path":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#setPermission(File,FsPermission).mjava","commits":[{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#setPermission(File,FsPermission).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set permissions to the required value. Uses the java primitives instead\n   * of forking if group == other.\n   * @param f the file to change\n   * @param permission the new permissions\n   * @throws IOException exception on setPermission\n   */\n  public static void setPermission(File f, FsPermission permission\n  ) throws IOException {\n    FsAction user = permission.getUserAction();\n    FsAction group = permission.getGroupAction();\n    FsAction other = permission.getOtherAction();\n\n    // use the native/fork if the group/other permissions are different\n    // or if the native is available or on Windows\n    if (group != other || NativeIO.isAvailable() || Shell.WINDOWS) {\n      execSetPermission(f, permission);\n      return;\n    }\n\n    boolean rv = true;\n\n    // read perms\n    rv = f.setReadable(group.implies(FsAction.READ), false);\n    checkReturnValue(rv, f, permission);\n    if (group.implies(FsAction.READ) != user.implies(FsAction.READ)) {\n      rv = f.setReadable(user.implies(FsAction.READ), true);\n      checkReturnValue(rv, f, permission);\n    }\n\n    // write perms\n    rv = f.setWritable(group.implies(FsAction.WRITE), false);\n    checkReturnValue(rv, f, permission);\n    if (group.implies(FsAction.WRITE) != user.implies(FsAction.WRITE)) {\n      rv = f.setWritable(user.implies(FsAction.WRITE), true);\n      checkReturnValue(rv, f, permission);\n    }\n\n    // exec perms\n    rv = f.setExecutable(group.implies(FsAction.EXECUTE), false);\n    checkReturnValue(rv, f, permission);\n    if (group.implies(FsAction.EXECUTE) != user.implies(FsAction.EXECUTE)) {\n      rv = f.setExecutable(user.implies(FsAction.EXECUTE), true);\n      checkReturnValue(rv, f, permission);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/hadoop/fs/FileUtil#setPermission(File,FsPermission).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set permissions to the required value. Uses the java primitives instead\n   * of forking if group == other.\n   * @param f the file to change\n   * @param permission the new permissions\n   * @throws IOException exception on setPermission\n   */\n  public static void setPermission(File f, FsPermission permission\n  ) throws IOException {\n    FsAction user = permission.getUserAction();\n    FsAction group = permission.getGroupAction();\n    FsAction other = permission.getOtherAction();\n\n    // use the native/fork if the group/other permissions are different\n    // or if the native is available or on Windows\n    if (group != other || NativeIO.isAvailable() || Shell.WINDOWS) {\n      execSetPermission(f, permission);\n      return;\n    }\n\n    boolean rv = true;\n\n    // read perms\n    rv = f.setReadable(group.implies(FsAction.READ), false);\n    checkReturnValue(rv, f, permission);\n    if (group.implies(FsAction.READ) != user.implies(FsAction.READ)) {\n      rv = f.setReadable(user.implies(FsAction.READ), true);\n      checkReturnValue(rv, f, permission);\n    }\n\n    // write perms\n    rv = f.setWritable(group.implies(FsAction.WRITE), false);\n    checkReturnValue(rv, f, permission);\n    if (group.implies(FsAction.WRITE) != user.implies(FsAction.WRITE)) {\n      rv = f.setWritable(user.implies(FsAction.WRITE), true);\n      checkReturnValue(rv, f, permission);\n    }\n\n    // exec perms\n    rv = f.setExecutable(group.implies(FsAction.EXECUTE), false);\n    checkReturnValue(rv, f, permission);\n    if (group.implies(FsAction.EXECUTE) != user.implies(FsAction.EXECUTE)) {\n      rv = f.setExecutable(user.implies(FsAction.EXECUTE), true);\n      checkReturnValue(rv, f, permission);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}