{"path":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","commits":[{"id":"3e5922fb6b9f0e49b31ce0436420a7f4392031c4","date":1489025486,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","pathOld":"/dev/null","sourceNew":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while(paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if(param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for(String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if(collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2ca4206e5497c29b07a997ea7fc47d3bac0a352","date":1497801058,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","sourceNew":"  private Map<String,List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String,List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while(paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if(param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for(String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if(collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","sourceNew":"  private Map<String,List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String,List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while(paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if(param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for(String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if(collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","sourceNew":"  private Map<String,List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String,List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while(paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if(param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for(String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if(collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60c716cf818aff6857d8490cd0fb8b5aa432408f","date":1577074826,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","sourceNew":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private Map<String,List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String,List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","sourceNew":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private Map<String,List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String,List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/StreamHandler#getCollectionShards(SolrParams).mjava","sourceNew":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap<>();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        @SuppressWarnings({\"rawtypes\"})\n        List<String> shardList = new ArrayList<>();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","sourceOld":"  private Map<String, List<String>> getCollectionShards(SolrParams params) {\n\n    Map<String, List<String>> collectionShards = new HashMap();\n    Iterator<String> paramsIt = params.getParameterNamesIterator();\n    while (paramsIt.hasNext()) {\n      String param = paramsIt.next();\n      if (param.indexOf(\".shards\") > -1) {\n        String collection = param.split(\"\\\\.\")[0];\n        String shardString = params.get(param);\n        String[] shards = shardString.split(\",\");\n        List<String> shardList = new ArrayList();\n        for (String shard : shards) {\n          shardList.add(shard);\n        }\n        collectionShards.put(collection, shardList);\n      }\n    }\n\n    if (collectionShards.size() > 0) {\n      return collectionShards;\n    } else {\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["28288370235ed02234a64753cdbf0c6ec096304a"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["28288370235ed02234a64753cdbf0c6ec096304a","60c716cf818aff6857d8490cd0fb8b5aa432408f"],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["60c716cf818aff6857d8490cd0fb8b5aa432408f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"]},"commit2Childs":{"60c716cf818aff6857d8490cd0fb8b5aa432408f":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"3e5922fb6b9f0e49b31ce0436420a7f4392031c4":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","e2ca4206e5497c29b07a997ea7fc47d3bac0a352"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e5922fb6b9f0e49b31ce0436420a7f4392031c4"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28288370235ed02234a64753cdbf0c6ec096304a":["60c716cf818aff6857d8490cd0fb8b5aa432408f","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"e2ca4206e5497c29b07a997ea7fc47d3bac0a352":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}