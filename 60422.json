{"path":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(commit());    \n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","sourceNew":null,"sourceOld":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(commit());    \n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","pathOld":"src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(commit());    \n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(commit());    \n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(commit());    \n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98a8a68e6714cb8742c790308b9f5180d63417d4","date":1272554039,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(commit());    \n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"98a8a68e6714cb8742c790308b9f5180d63417d4":["1da8d55113b689b06716246649de6f62430f15c0"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98a8a68e6714cb8742c790308b9f5180d63417d4"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"98a8a68e6714cb8742c790308b9f5180d63417d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}