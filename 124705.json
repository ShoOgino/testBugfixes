{"path":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","sourceNew":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","sourceOld":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","pathOld":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/AnalyzerProfile#init().mjava","sourceNew":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","sourceOld":"  private static void init() {\n    String dirName = \"analysis-data\";\n    String propName = \"analysis.properties\";\n\n    // Try the system property：-Danalysis.data.dir=/path/to/analysis-data\n    ANALYSIS_DATA_DIR = System.getProperty(\"analysis.data.dir\", \"\");\n    if (ANALYSIS_DATA_DIR.length() != 0)\n      return;\n\n    File[] cadidateFiles = new File[] { new File(\"./\" + dirName),\n        new File(\"./lib/\" + dirName), new File(\"./\" + propName),\n        new File(\"./lib/\" + propName) };\n    for (int i = 0; i < cadidateFiles.length; i++) {\n      File file = cadidateFiles[i];\n      if (file.exists()) {\n        if (file.isDirectory()) {\n          ANALYSIS_DATA_DIR = file.getAbsolutePath();\n        } else if (file.isFile() && getAnalysisDataDir(file).length() != 0) {\n          ANALYSIS_DATA_DIR = getAnalysisDataDir(file);\n        }\n        break;\n      }\n    }\n\n    if (ANALYSIS_DATA_DIR.length() == 0) {\n      // Dictionary directory cannot be found.\n      System.err\n          .println(\"WARNING: Can not find lexical dictionary directory!\");\n      System.err\n          .println(\"WARNING: This will cause unpredictable exceptions in your application!\");\n      System.err\n          .println(\"WARNING: Please refer to the manual to download the dictionaries.\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}