{"path":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"ae6d782d7975eb2a0e325e798a7325372a0bf336","date":1360689518,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      totBytes += v.length;\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      out.writeBytes(v.bytes, v.offset, v.length);\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      address += v.length;\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      totBytes += v.length;\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      out.writeBytes(v.bytes, v.offset, v.length);\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      address += v.length;\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11a746437bc5c0a0b3df0337ed249c387c812871","date":1376687959,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      if (v != null) { \n        totBytes += v.length;\n      }\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      if (v != null) {\n        out.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      if (v != null) {\n        address += v.length;\n      }\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      totBytes += v.length;\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      out.writeBytes(v.bytes, v.offset, v.length);\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      address += v.length;\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      if (v != null) { \n        totBytes += v.length;\n      }\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      if (v != null) {\n        out.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      if (v != null) {\n        address += v.length;\n      }\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      totBytes += v.length;\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      out.writeBytes(v.bytes, v.offset, v.length);\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      address += v.length;\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      if (v != null) { \n        totBytes += v.length;\n      }\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      if (v != null) {\n        out.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      if (v != null) {\n        address += v.length;\n      }\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      totBytes += v.length;\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      out.writeBytes(v.bytes, v.offset, v.length);\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      address += v.length;\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84becf9f21f25fe1b9b54cf2a176015749af0283","date":1383417412,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesConsumer#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, final Iterable<BytesRef> values) throws IOException {\n    // write the byte[] data\n    out.writeVInt(field.number);\n\n    long totBytes = 0;\n    for (BytesRef v : values) {\n      if (v != null) { \n        totBytes += v.length;\n      }\n    }\n\n    if (totBytes > Integer.MAX_VALUE) {\n      throw new IllegalStateException(\"too many facets in one segment: Facet42DocValues cannot handle more than 2 GB facet data per segment\");\n    }\n\n    out.writeVInt((int) totBytes);\n\n    for (BytesRef v : values) {\n      if (v != null) {\n        out.writeBytes(v.bytes, v.offset, v.length);\n      }\n    }\n\n    PackedInts.Writer w = PackedInts.getWriter(out, maxDoc+1, PackedInts.bitsRequired(totBytes+1), acceptableOverheadRatio);\n\n    int address = 0;\n    for(BytesRef v : values) {\n      w.add(address);\n      if (v != null) {\n        address += v.length;\n      }\n    }\n    w.add(address);\n    w.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84becf9f21f25fe1b9b54cf2a176015749af0283":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"11a746437bc5c0a0b3df0337ed249c387c812871":["ae6d782d7975eb2a0e325e798a7325372a0bf336"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae6d782d7975eb2a0e325e798a7325372a0bf336"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ae6d782d7975eb2a0e325e798a7325372a0bf336","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ae6d782d7975eb2a0e325e798a7325372a0bf336","11a746437bc5c0a0b3df0337ed249c387c812871"],"ae6d782d7975eb2a0e325e798a7325372a0bf336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84becf9f21f25fe1b9b54cf2a176015749af0283"]},"commit2Childs":{"84becf9f21f25fe1b9b54cf2a176015749af0283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11a746437bc5c0a0b3df0337ed249c387c812871":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","ae6d782d7975eb2a0e325e798a7325372a0bf336"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["84becf9f21f25fe1b9b54cf2a176015749af0283","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"ae6d782d7975eb2a0e325e798a7325372a0bf336":["11a746437bc5c0a0b3df0337ed249c387c812871","6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}