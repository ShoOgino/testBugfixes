{"path":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","commits":[{"id":"d3c3c2404d1200c39220fa15054fae854db4e1ee","date":1140827958,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","pathOld":"/dev/null","sourceNew":"\t/**\r\n\t * Convenience routine to make it easy to return the most interesting words in a document.\r\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\r\n\t * @param r the source document\r\n\t * @return the most interesting words in the document\r\n\t *\r\n\t * @see #retrieveTerms(java.io.Reader)\r\n\t * @see #setMaxQueryTerms\r\n\t */\r\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\r\n\t\tArrayList al = new ArrayList( maxQueryTerms);\r\n\t\tPriorityQueue pq = retrieveTerms( r);\r\n\t\tObject cur;\r\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\r\n\t\t// we just want to return the top words\r\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\r\n            Object[] ar = (Object[]) cur;\r\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\r\n\t\t}\r\n\t\tString[] res = new String[ al.size()];\r\n\t\treturn (String[]) al.toArray( res);\r\n\t}\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98e01139a8d039526bfff63f2741bc1c9dae5455","date":1212409742,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","sourceNew":"  /**\r\n\t * Convenience routine to make it easy to return the most interesting words in a document.\r\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\r\n\t * @param r the source document\r\n\t * @return the most interesting words in the document\r\n\t *\r\n\t * @see #retrieveTerms(java.io.Reader)\r\n\t * @see #setMaxQueryTerms\r\n\t */\r\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\r\n\t\tArrayList al = new ArrayList( maxQueryTerms);\r\n\t\tPriorityQueue pq = retrieveTerms( r);\r\n\t\tObject cur;\r\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\r\n\t\t// we just want to return the top words\r\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\r\n            Object[] ar = (Object[]) cur;\r\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\r\n\t\t}\r\n\t\tString[] res = new String[ al.size()];\r\n\t\treturn (String[]) al.toArray( res);\r\n\t}\r\n\n","sourceOld":"\t/**\r\n\t * Convenience routine to make it easy to return the most interesting words in a document.\r\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\r\n\t * @param r the source document\r\n\t * @return the most interesting words in the document\r\n\t *\r\n\t * @see #retrieveTerms(java.io.Reader)\r\n\t * @see #setMaxQueryTerms\r\n\t */\r\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\r\n\t\tArrayList al = new ArrayList( maxQueryTerms);\r\n\t\tPriorityQueue pq = retrieveTerms( r);\r\n\t\tObject cur;\r\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\r\n\t\t// we just want to return the top words\r\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\r\n            Object[] ar = (Object[]) cur;\r\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\r\n\t\t}\r\n\t\tString[] res = new String[ al.size()];\r\n\t\treturn (String[]) al.toArray( res);\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","sourceNew":"  /**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList al = new ArrayList( maxQueryTerms);\n\t\tPriorityQueue pq = retrieveTerms( r);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn (String[]) al.toArray( res);\n\t}\n\n","sourceOld":"  /**\r\n\t * Convenience routine to make it easy to return the most interesting words in a document.\r\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\r\n\t * @param r the source document\r\n\t * @return the most interesting words in the document\r\n\t *\r\n\t * @see #retrieveTerms(java.io.Reader)\r\n\t * @see #setMaxQueryTerms\r\n\t */\r\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\r\n\t\tArrayList al = new ArrayList( maxQueryTerms);\r\n\t\tPriorityQueue pq = retrieveTerms( r);\r\n\t\tObject cur;\r\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\r\n\t\t// we just want to return the top words\r\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\r\n            Object[] ar = (Object[]) cur;\r\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\r\n\t\t}\r\n\t\tString[] res = new String[ al.size()];\r\n\t\treturn (String[]) al.toArray( res);\r\n\t}\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","sourceNew":"  /**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList<Object> al = new ArrayList<Object>( maxQueryTerms);\n\t\tPriorityQueue<Object[]> pq = retrieveTerms( r);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn al.toArray( res);\n\t}\n\n","sourceOld":"  /**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList al = new ArrayList( maxQueryTerms);\n\t\tPriorityQueue pq = retrieveTerms( r);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn (String[]) al.toArray( res);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","pathOld":"contrib/queries/src/java/org/apache/lucene/search/similar/MoreLikeThis#retrieveInterestingTerms(Reader).mjava","sourceNew":"  /**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList<Object> al = new ArrayList<Object>( maxQueryTerms);\n\t\tPriorityQueue<Object[]> pq = retrieveTerms( r);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn al.toArray( res);\n\t}\n\n","sourceOld":"  /**\n\t * Convenience routine to make it easy to return the most interesting words in a document.\n\t * More advanced users will call {@link #retrieveTerms(java.io.Reader) retrieveTerms()} directly.\n\t * @param r the source document\n\t * @return the most interesting words in the document\n\t *\n\t * @see #retrieveTerms(java.io.Reader)\n\t * @see #setMaxQueryTerms\n\t */\n\tpublic String[] retrieveInterestingTerms( Reader r) throws IOException {\n\t\tArrayList<Object> al = new ArrayList<Object>( maxQueryTerms);\n\t\tPriorityQueue<Object[]> pq = retrieveTerms( r);\n\t\tObject cur;\n\t\tint lim = maxQueryTerms; // have to be careful, retrieveTerms returns all words but that's probably not useful to our caller...\n\t\t// we just want to return the top words\n\t\twhile (((cur = pq.pop()) != null) && lim-- > 0) {\n            Object[] ar = (Object[]) cur;\n\t\t\tal.add( ar[ 0]); // the 1st entry is the interesting word\n\t\t}\n\t\tString[] res = new String[ al.size()];\n\t\treturn al.toArray( res);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["98e01139a8d039526bfff63f2741bc1c9dae5455"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"98e01139a8d039526bfff63f2741bc1c9dae5455":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3c3c2404d1200c39220fa15054fae854db4e1ee"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["60cdc0e643184821eb066795a8791cd82559f46e"],"d3c3c2404d1200c39220fa15054fae854db4e1ee":["98e01139a8d039526bfff63f2741bc1c9dae5455"],"98e01139a8d039526bfff63f2741bc1c9dae5455":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}