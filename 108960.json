{"path":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","commits":[{"id":"91e069c492cf4895697ef7b81df0ffb9a8bd4b48","date":1382134253,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor) {\n        @Override\n        public void handleError(Throwable ex) {\n          scdlog.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n\n      server.setPollQueueTime(0);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53764ade528df7aa0563b47409995911a869be79","date":1382153048,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor) {\n        @Override\n        public void handleError(Throwable ex) {\n          scdlog.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor) {\n        @Override\n        public void handleError(Throwable ex) {\n          scdlog.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n\n      server.setPollQueueTime(0);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7adf9b18b459a0b9db8cab49eb9411d5f136c65d","date":1382993026,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor) {\n        @Override\n        public void handleError(Throwable ex) {\n          scdlog.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e5ef402099a6d54398ce3ac65c0b7506bbfece5","date":1384830813,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<String>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<String>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<String>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d22d0f5940f155267b250876fa797ff69e8e6e7","date":1400540695,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          req.trackRequestResult(null, false);\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n        @Override\n        public void onSuccess(HttpResponse resp) {\n          req.trackRequestResult(resp, true);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          req.trackRequestResult(null, false);\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n        @Override\n        public void onSuccess(HttpResponse resp) {\n          req.trackRequestResult(resp, true);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/StreamingSolrClients#getSolrClient(SolrCmdDistributor.Req).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/StreamingSolrServers#getSolrServer(SolrCmdDistributor.Req).mjava","sourceNew":"  public synchronized SolrClient getSolrClient(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrClient client = solrClients.get(url);\n    if (client == null) {\n      client = new ConcurrentUpdateSolrClient(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          req.trackRequestResult(null, false);\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n        @Override\n        public void onSuccess(HttpResponse resp) {\n          req.trackRequestResult(resp, true);\n        }\n      };\n      client.setParser(new BinaryResponseParser());\n      client.setRequestWriter(new BinaryRequestWriter());\n      client.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      client.setQueryParams(queryParams);\n      solrClients.put(url, client);\n    }\n\n    return client;\n  }\n\n","sourceOld":"  public synchronized SolrServer getSolrServer(final SolrCmdDistributor.Req req) {\n    String url = getFullUrl(req.node.getUrl());\n    ConcurrentUpdateSolrServer server = solrServers.get(url);\n    if (server == null) {\n      server = new ConcurrentUpdateSolrServer(url, httpClient, 100, 1, updateExecutor, true) {\n        @Override\n        public void handleError(Throwable ex) {\n          req.trackRequestResult(null, false);\n          log.error(\"error\", ex);\n          Error error = new Error();\n          error.e = (Exception) ex;\n          if (ex instanceof SolrException) {\n            error.statusCode = ((SolrException) ex).code();\n          }\n          error.req = req;\n          errors.add(error);\n        }\n        @Override\n        public void onSuccess(HttpResponse resp) {\n          req.trackRequestResult(resp, true);\n        }\n      };\n      server.setParser(new BinaryResponseParser());\n      server.setRequestWriter(new BinaryRequestWriter());\n      server.setPollQueueTime(0);\n      Set<String> queryParams = new HashSet<>(2);\n      queryParams.add(DistributedUpdateProcessor.DISTRIB_FROM);\n      queryParams.add(DistributingUpdateProcessorFactory.DISTRIB_UPDATE_PARAM);\n      server.setQueryParams(queryParams);\n      solrServers.put(url, server);\n    }\n\n    return server;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3e5ef402099a6d54398ce3ac65c0b7506bbfece5"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53764ade528df7aa0563b47409995911a869be79":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["7adf9b18b459a0b9db8cab49eb9411d5f136c65d","3e5ef402099a6d54398ce3ac65c0b7506bbfece5"],"bafca15d8e408346a67f4282ad1143b88023893b":["9d22d0f5940f155267b250876fa797ff69e8e6e7"],"7adf9b18b459a0b9db8cab49eb9411d5f136c65d":["53764ade528df7aa0563b47409995911a869be79"],"b7605579001505896d48b07160075a5c8b8e128e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","9d22d0f5940f155267b250876fa797ff69e8e6e7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"],"3e5ef402099a6d54398ce3ac65c0b7506bbfece5":["7adf9b18b459a0b9db8cab49eb9411d5f136c65d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9d22d0f5940f155267b250876fa797ff69e8e6e7","b7605579001505896d48b07160075a5c8b8e128e"],"9d22d0f5940f155267b250876fa797ff69e8e6e7":["bafca15d8e408346a67f4282ad1143b88023893b","b7605579001505896d48b07160075a5c8b8e128e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91e069c492cf4895697ef7b81df0ffb9a8bd4b48"],"53764ade528df7aa0563b47409995911a869be79":["7adf9b18b459a0b9db8cab49eb9411d5f136c65d"],"91e069c492cf4895697ef7b81df0ffb9a8bd4b48":["53764ade528df7aa0563b47409995911a869be79"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"7adf9b18b459a0b9db8cab49eb9411d5f136c65d":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","3e5ef402099a6d54398ce3ac65c0b7506bbfece5"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"3e5ef402099a6d54398ce3ac65c0b7506bbfece5":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}