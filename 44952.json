{"path":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","commits":[{"id":"8be580b58bcc650d428f3f22de81cadcf51d650a","date":1325279655,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms());\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFields(Fields,Fields,boolean).mjava","sourceNew":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","sourceOld":"  /** \n   * Fields api equivalency \n   */\n  public void assertFields(Fields leftFields, Fields rightFields, boolean deep) throws Exception {\n    // Fields could be null if there are no postings,\n    // but then it must be null for both\n    if (leftFields == null || rightFields == null) {\n      assertNull(info, leftFields);\n      assertNull(info, rightFields);\n      return;\n    }\n    assertFieldStatistics(leftFields, rightFields);\n    \n    FieldsEnum leftEnum = leftFields.iterator();\n    FieldsEnum rightEnum = rightFields.iterator();\n    \n    String field;\n    while ((field = leftEnum.next()) != null) {\n      assertEquals(info, field, rightEnum.next());\n      assertTerms(leftEnum.terms(), rightEnum.terms(), deep);\n    }\n    assertNull(rightEnum.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8be580b58bcc650d428f3f22de81cadcf51d650a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8be580b58bcc650d428f3f22de81cadcf51d650a"],"8be580b58bcc650d428f3f22de81cadcf51d650a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}