{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name); \n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n      \n      boolean varLenEnd = false;\n      \n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n      return expression;\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name); \n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n      \n      boolean varLenEnd = false;\n      \n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n      return expression;\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name); \n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n      \n      boolean varLenEnd = false;\n      \n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n      return expression;\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":3,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","sourceNew":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n    \n    boolean allParamsConstant = true;\n    \n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n      \n      // Then update whether all of the params are constant\n      allParamsConstant &= paramStreams[i].getExpressionType().equals(ExpressionType.CONST);\n    }\n    \n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name); \n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n      \n      boolean varLenEnd = false;\n      \n      if (paramStreams.length < newVarFunc.params.length) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires at least \" + newVarFunc.params.length + \" parameters.\"\n            + \" Only \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n      }\n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        if (paramStreams.length > newVarFunc.params.length) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires \" + newVarFunc.params.length + \" parameters.\"\n              + \" \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n        }\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n    \n    // If the all params are constant, then try to convert the expression to a constant value.\n    expression = expression.convertToConstant();\n    \n    return expression;\n  }\n\n","sourceOld":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n    }\n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name); \n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n      \n      boolean varLenEnd = false;\n      \n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n      return expression;\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","sourceNew":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   *\n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n\n    boolean allParamsConstant = true;\n\n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n\n      // Then update whether all of the params are constant\n      allParamsConstant &= paramStreams[i].getExpressionType().equals(ExpressionType.CONST);\n    }\n\n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name);\n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n\n      boolean varLenEnd = false;\n\n      if (paramStreams.length < newVarFunc.params.length) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires at least \" + newVarFunc.params.length + \" parameters.\"\n            + \" Only \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n      }\n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        if (paramStreams.length > newVarFunc.params.length) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires \" + newVarFunc.params.length + \" parameters.\"\n              + \" \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n        }\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n\n    // If the all params are constant, then try to convert the expression to a constant value.\n    expression = expression.convertToConstant();\n\n    return expression;\n  }\n\n","sourceOld":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n    \n    boolean allParamsConstant = true;\n    \n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n      \n      // Then update whether all of the params are constant\n      allParamsConstant &= paramStreams[i].getExpressionType().equals(ExpressionType.CONST);\n    }\n    \n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name); \n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n      \n      boolean varLenEnd = false;\n      \n      if (paramStreams.length < newVarFunc.params.length) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires at least \" + newVarFunc.params.length + \" parameters.\"\n            + \" Only \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n      }\n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        if (paramStreams.length > newVarFunc.params.length) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires \" + newVarFunc.params.length + \" parameters.\"\n              + \" \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n        }\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n    \n    // If the all params are constant, then try to convert the expression to a constant value.\n    expression = expression.convertToConstant();\n    \n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/ExpressionFactory#createFunction(String,Map[String,AnalyticsValueStream],String,String[]).mjava","sourceNew":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   *\n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n\n    boolean allParamsConstant = true;\n\n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n\n      // Then update whether all of the params are constant\n      allParamsConstant &= paramStreams[i].getExpressionType().equals(ExpressionType.CONST);\n    }\n\n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name);\n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n\n      boolean varLenEnd = false;\n\n      if (paramStreams.length < newVarFunc.params.length) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires at least \" + newVarFunc.params.length + \" parameters.\"\n            + \" Only \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n      }\n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        if (paramStreams.length > newVarFunc.params.length) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires \" + newVarFunc.params.length + \" parameters.\"\n              + \" \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n        }\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n\n    // If the all params are constant, then try to convert the expression to a constant value.\n    expression = expression.convertToConstant();\n\n    return expression;\n  }\n\n","sourceOld":"  /**\n   * Create a function expression from the given expression string, with the given variable function information.\n   * \n   * @param expressionStr string that represents the desired expression\n   * @param varFuncParams the current set of variable function parameters and their values. If this expression is not a variable function\n   * return signature, the map should be empty.\n   * @param varFuncVarParamName if the current expression is a variable function return signature, this must be the name of the variable length\n   * parameter if it is included in the function signature.\n   * @param varFuncVarParamValues if the current expression is a variable function return signature, this must be the array values of the variable length\n   * parameter if they are included when calling the function.\n   * @return the object representation of the expression\n   * @throws SolrException if an error occurs while constructing the expression\n   */\n  private AnalyticsValueStream createFunction(String expressionStr, Map<String,AnalyticsValueStream> varFuncParams,\n                                              String varFuncVarParamName, String[] varFuncVarParamValues) throws SolrException {\n    AnalyticsValueStream expression = null;\n    String name = getFunctionName(expressionStr);\n\n    final String[] params = getParams(expressionStr, varFuncVarParamName, varFuncVarParamValues);\n    AnalyticsValueStream[] paramStreams = new AnalyticsValueStream[params.length];\n    \n    boolean allParamsConstant = true;\n    \n    for (int i = 0; i < params.length; i++) {\n      // First check if the parameter is a variable function variable otherwise create the expression\n      if (varFuncParams.containsKey(params[i])) {\n        paramStreams[i] = varFuncParams.get(params[i]);\n      } else {\n        paramStreams[i] = createExpression(params[i], varFuncParams, varFuncVarParamName, varFuncVarParamValues);\n      }\n      \n      // Then update whether all of the params are constant\n      allParamsConstant &= paramStreams[i].getExpressionType().equals(ExpressionType.CONST);\n    }\n    \n    // Check to see if the function name is a variable function name, if so apply the variables to the return signature\n    if (variableFunctions.containsKey(name)) {\n      if (variableFunctionNameHistory.contains(name)) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The following variable function is self referencing : \" + name); \n      }\n      variableFunctionNameHistory.add(name);\n      VariableFunctionInfo newVarFunc = variableFunctions.get(name);\n      Map<String, AnalyticsValueStream> newVarFuncParams = new HashMap<>();\n      \n      boolean varLenEnd = false;\n      \n      if (paramStreams.length < newVarFunc.params.length) {\n        throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires at least \" + newVarFunc.params.length + \" parameters.\"\n            + \" Only \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n      }\n      for (int i = 0; i < newVarFunc.params.length; ++i) {\n        String variable = newVarFunc.params[i];\n        if (variable.endsWith(variableLengthParamSuffix)) {\n          if (i != newVarFunc.params.length - 1) {\n            throw new SolrException(ErrorCode.BAD_REQUEST,\"The following invocation of a variable function has the incorrect number of arguments : \" + expressionStr);\n          }\n          variable = variable.substring(0, variable.length() - variableLengthParamSuffix.length()).trim();\n          int numVars = paramStreams.length - i;\n          String[] newVarFuncVarParamValues = new String[numVars];\n          for (int j = 0; j < numVars; ++j) {\n            // Create a new name for each variable length parameter value\n            String paramName = String.format(Locale.ROOT, funtionVarParamUniqueName, variable, j);\n            newVarFuncVarParamValues[j] = paramName;\n            newVarFuncParams.put(paramName, paramStreams[i + j]);\n          }\n          expression = createFunction(newVarFunc.returnSignature, newVarFuncParams, variable, newVarFuncVarParamValues);\n          varLenEnd = true;\n        } else {\n          newVarFuncParams.put(variable, paramStreams[i]);\n        }\n      }\n      if (!varLenEnd) {\n        if (paramStreams.length > newVarFunc.params.length) {\n          throw new SolrException(ErrorCode.BAD_REQUEST,\"The variable function '\" + name + \"' requires \" + newVarFunc.params.length + \" parameters.\"\n              + \" \" + paramStreams.length + \" arguments given in the following invocation : \" + expressionStr);\n        }\n        expression = createExpression(newVarFunc.returnSignature, newVarFuncParams, null, null);\n      }\n      variableFunctionNameHistory.remove(name);\n    } else if (expressionCreators.containsKey(name)) {\n      // It is a regular system function\n      expression = expressionCreators.get(name).apply(paramStreams);\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\"The following function does not exist: \" + name);\n    }\n    \n    // If the all params are constant, then try to convert the expression to a constant value.\n    expression = expression.convertToConstant();\n    \n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}