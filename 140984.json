{"path":"backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    // Remove the incRef we did in startTransaction:\n    deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/IndexWriter#rollbackTransaction().mjava","sourceNew":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    // Remove the incRef we did in startTransaction:\n    deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","sourceOld":"  /*\n   * Rolls back the transaction and restores state to where\n   * we were at the start.\n   */\n  private synchronized void rollbackTransaction() throws IOException {\n\n    if (infoStream != null)\n      message(\"now rollback transaction\");\n\n    if (docWriter != null) {\n      docWriter.setFlushedDocCount(localFlushedDocCount);\n    }\n\n    // Must finish merges before rolling back segmentInfos\n    // so merges don't hit exceptions on trying to commit\n    // themselves, don't get files deleted out from under\n    // them, etc:\n    finishMerges(false);\n\n    // Keep the same segmentInfos instance but replace all\n    // of its SegmentInfo instances.  This is so the next\n    // attempt to commit using this instance of IndexWriter\n    // will always write to a new generation (\"write once\").\n    segmentInfos.clear();\n    segmentInfos.addAll(localRollbackSegmentInfos);\n    localRollbackSegmentInfos = null;\n\n    // This must come after we rollback segmentInfos, so\n    // that if a commit() kicks off it does not see the\n    // segmentInfos with external segments\n    finishAddIndexes();\n\n    // Ask deleter to locate unreferenced files we had\n    // created & remove them:\n    deleter.checkpoint(segmentInfos, false);\n\n    // Remove the incRef we did in startTransaction:\n    deleter.decRef(segmentInfos);\n\n    // Also ask deleter to remove any newly created files\n    // that were never incref'd; this \"garbage\" is created\n    // when a merge kicks off but aborts part way through\n    // before it had a chance to incRef the files it had\n    // partially created\n    deleter.refresh();\n    \n    notifyAll();\n\n    assert !hasExternalSegments();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}