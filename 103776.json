{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testTrigger().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestNodeAddedTrigger#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode1 = cluster.simAddNode();\n      String newNode2 = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1));\n      assertTrue(nodeNames.contains(newNode2));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      cluster.simRemoveNode(newNode, false);\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode1 = cluster.simAddNode();\n      String newNode2 = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1));\n      assertTrue(nodeNames.contains(newNode2));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      cluster.simRemoveNode(newNode, false);\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testTrigger().mjava","sourceNew":"  @Test\n  public void testTrigger() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode1 = cluster.simAddNode();\n      String newNode2 = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      @SuppressWarnings({\"unchecked\"})\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1));\n      assertTrue(nodeNames.contains(newNode2));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      cluster.simRemoveNode(newNode, false);\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode1 = cluster.simAddNode();\n      String newNode2 = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1));\n      assertTrue(nodeNames.contains(newNode2));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      cluster.simRemoveNode(newNode, false);\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimNodeAddedTrigger#testTrigger().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testTrigger() throws Exception {\n    long waitForSeconds = 1 + random().nextInt(5);\n    Map<String, Object> props = createTriggerProps(waitForSeconds);\n\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode1 = cluster.simAddNode();\n      String newNode2 = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      AtomicReference<TriggerEvent> eventRef = new AtomicReference<>();\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          eventRef.set(event);\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > 10) {\n          fail(\"Newly added node was not discovered by trigger even after 10 seconds\");\n        }\n      } while (!fired.get());\n\n      TriggerEvent nodeAddedEvent = eventRef.get();\n      assertNotNull(nodeAddedEvent);\n      @SuppressWarnings({\"unchecked\"})\n      List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n      assertTrue(nodeNames.contains(newNode1));\n      assertTrue(nodeNames.contains(newNode2));\n    }\n\n    // add a new node but remove it before the waitFor period expires\n    // and assert that the trigger doesn't fire at all\n    try (NodeAddedTrigger trigger = new NodeAddedTrigger(\"node_added_trigger\")) {\n      trigger.configure(cluster.getLoader(), cluster, props);\n      trigger.init();\n      final long waitTime = 2;\n      props.put(\"waitFor\", waitTime);\n      trigger.setProcessor(noFirstRunProcessor);\n      trigger.run();\n\n      String newNode = cluster.simAddNode();\n      AtomicBoolean fired = new AtomicBoolean(false);\n      trigger.setProcessor(event -> {\n        if (fired.compareAndSet(false, true)) {\n          long currentTimeNanos = timeSource.getTimeNs();\n          long eventTimeNanos = event.getEventTime();\n          long waitForNanos = TimeUnit.NANOSECONDS.convert(waitForSeconds, TimeUnit.SECONDS) - WAIT_FOR_DELTA_NANOS;\n          if (currentTimeNanos - eventTimeNanos <= waitForNanos) {\n            fail(\"NodeAddedListener was fired before the configured waitFor period: currentTimeNanos=\" + currentTimeNanos + \", eventTimeNanos=\" +  eventTimeNanos + \",waitForNanos=\" + waitForNanos);\n          }\n        } else {\n          fail(\"NodeAddedTrigger was fired more than once!\");\n        }\n        return true;\n      });\n      trigger.run(); // first run should detect the new node\n      cluster.simRemoveNode(newNode, false);\n      int counter = 0;\n      do {\n        trigger.run();\n        timeSource.sleep(1000);\n        if (counter++ > waitTime + 1) { // run it a little more than the wait time\n          break;\n        }\n      } while (true);\n\n      // ensure the event was not fired\n      assertFalse(fired.get());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}