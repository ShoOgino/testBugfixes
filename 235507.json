{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CovarianceEvaluator#evaluate(Tuple).mjava","commits":[{"id":"c149f345c46f0fa905442bb227054fd828833611","date":1494204159,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"/dev/null","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12cb83a3f761dc612e1ece020f46e1886fc2550e","date":1495722768,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/CovarianceEvaluator#evaluate(Tuple).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/CovarianceEvaluator#evaluate(Tuple).mjava","sourceNew":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","sourceOld":"  public Number evaluate(Tuple tuple) throws IOException {\n    StreamEvaluator colEval1 = subEvaluators.get(0);\n    StreamEvaluator colEval2 = subEvaluators.get(1);\n\n    List<Number> numbers1 = (List<Number>)colEval1.evaluate(tuple);\n    List<Number> numbers2 = (List<Number>)colEval2.evaluate(tuple);\n    double[] column1 = new double[numbers1.size()];\n    double[] column2 = new double[numbers2.size()];\n\n    for(int i=0; i<numbers1.size(); i++) {\n      column1[i] = numbers1.get(i).doubleValue();\n    }\n\n    for(int i=0; i<numbers2.size(); i++) {\n      column2[i] = numbers2.get(i).doubleValue();\n    }\n\n    Covariance covariance = new Covariance();\n\n    return covariance.covariance(column1, column2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c149f345c46f0fa905442bb227054fd828833611":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12cb83a3f761dc612e1ece020f46e1886fc2550e":["c149f345c46f0fa905442bb227054fd828833611"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c149f345c46f0fa905442bb227054fd828833611","12cb83a3f761dc612e1ece020f46e1886fc2550e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"]},"commit2Childs":{"c149f345c46f0fa905442bb227054fd828833611":["12cb83a3f761dc612e1ece020f46e1886fc2550e","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"12cb83a3f761dc612e1ece020f46e1886fc2550e":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c149f345c46f0fa905442bb227054fd828833611"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}