{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertTrue(automata[n-1].subsetOf(tautomata[n]));\n        assertTrue(tautomata[n-1].subsetOf(automata[n]));\n        assertTrue(tautomata[n-1].subsetOf(tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(automata[n].subsetOf(tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertTrue(automata[n-1].subsetOf(tautomata[n]));\n        assertTrue(tautomata[n-1].subsetOf(automata[n]));\n        assertTrue(tautomata[n-1].subsetOf(tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(automata[n].subsetOf(tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2de8b489026711e8edde133418a7cacfd2ce4d3","date":1402528930,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    LightAutomaton automata[] = new LightAutomaton[maxDistance + 1];\n    LightAutomaton tautomata[] = new LightAutomaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toLightAutomaton(n);\n      tautomata[n] = tbuilder.toLightAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(BasicOperations.isDeterministic(automata[n]));\n      assertTrue(BasicOperations.isDeterministic(tautomata[n]));\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(BasicOperations.subsetOf(automata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(automata[n-1], tautomata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(BasicOperations.subsetOf(automata[n], tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertTrue(automata[n-1].subsetOf(tautomata[n]));\n        assertTrue(tautomata[n-1].subsetOf(automata[n]));\n        assertTrue(tautomata[n-1].subsetOf(tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(automata[n].subsetOf(tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67285d1a68175d877eb9fd1624fccad3db028ff","date":1402779028,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    LightAutomaton automata[] = new LightAutomaton[maxDistance + 1];\n    LightAutomaton tautomata[] = new LightAutomaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      // nocommit LEV creates detached states\n      //AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      //AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(BasicOperations.subsetOf(automata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(automata[n-1], tautomata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(BasicOperations.subsetOf(automata[n], tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    LightAutomaton automata[] = new LightAutomaton[maxDistance + 1];\n    LightAutomaton tautomata[] = new LightAutomaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toLightAutomaton(n);\n      tautomata[n] = tbuilder.toLightAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(BasicOperations.isDeterministic(automata[n]));\n      assertTrue(BasicOperations.isDeterministic(tautomata[n]));\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(BasicOperations.subsetOf(automata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(automata[n-1], tautomata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(BasicOperations.subsetOf(automata[n], tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9","date":1402946522,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    LightAutomaton automata[] = new LightAutomaton[maxDistance + 1];\n    LightAutomaton tautomata[] = new LightAutomaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      assertFalse(BasicOperations.hasDeadStatesFromInitial(automata[n]));\n      assertFalse(BasicOperations.hasDeadStatesFromInitial(tautomata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n-1]),\n                                            BasicOperations.removeDeadStates(automata[n])));\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n-1]),\n                                            BasicOperations.removeDeadStates(tautomata[n])));\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(tautomata[n-1]),\n                                            BasicOperations.removeDeadStates(automata[n])));\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(tautomata[n-1]),\n                                            BasicOperations.removeDeadStates(tautomata[n])));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n]),\n                                          BasicOperations.removeDeadStates(tautomata[n])));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), BasicOperations.removeDeadStates(automata[0])));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), BasicOperations.removeDeadStates(tautomata[0])));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), BasicOperations.removeDeadStates(automata[1])));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), BasicOperations.removeDeadStates(tautomata[1])));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    LightAutomaton automata[] = new LightAutomaton[maxDistance + 1];\n    LightAutomaton tautomata[] = new LightAutomaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      // nocommit LEV creates detached states\n      //AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      //AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(BasicOperations.subsetOf(automata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(automata[n-1], tautomata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], automata[n]));\n        assertTrue(BasicOperations.subsetOf(tautomata[n-1], tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(BasicOperations.subsetOf(automata[n], tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(Operations.isFinite(automata[n]));\n      assertTrue(Operations.isFinite(tautomata[n]));\n      assertFalse(Operations.hasDeadStatesFromInitial(automata[n]));\n      assertFalse(Operations.hasDeadStatesFromInitial(tautomata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n-1]),\n                                       Operations.removeDeadStates(automata[n])));\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n-1]),\n                                       Operations.removeDeadStates(tautomata[n])));\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(tautomata[n-1]),\n                                       Operations.removeDeadStates(automata[n])));\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(tautomata[n-1]),\n                                       Operations.removeDeadStates(tautomata[n])));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n]),\n                                     Operations.removeDeadStates(tautomata[n])));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(Operations.sameLanguage(Automata.makeString(s), Operations.removeDeadStates(automata[0])));\n          assertTrue(Operations.sameLanguage(Automata.makeString(s), Operations.removeDeadStates(tautomata[0])));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(Operations.sameLanguage(naiveLev1(s), Operations.removeDeadStates(automata[1])));\n          assertTrue(Operations.sameLanguage(naiveLev1T(s), Operations.removeDeadStates(tautomata[1])));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    LightAutomaton automata[] = new LightAutomaton[maxDistance + 1];\n    LightAutomaton tautomata[] = new LightAutomaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      assertFalse(BasicOperations.hasDeadStatesFromInitial(automata[n]));\n      assertFalse(BasicOperations.hasDeadStatesFromInitial(tautomata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n-1]),\n                                            BasicOperations.removeDeadStates(automata[n])));\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n-1]),\n                                            BasicOperations.removeDeadStates(tautomata[n])));\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(tautomata[n-1]),\n                                            BasicOperations.removeDeadStates(automata[n])));\n        assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(tautomata[n-1]),\n                                            BasicOperations.removeDeadStates(tautomata[n])));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(BasicOperations.subsetOf(BasicOperations.removeDeadStates(automata[n]),\n                                          BasicOperations.removeDeadStates(tautomata[n])));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), BasicOperations.removeDeadStates(automata[0])));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeStringLight(s), BasicOperations.removeDeadStates(tautomata[0])));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), BasicOperations.removeDeadStates(automata[1])));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), BasicOperations.removeDeadStates(tautomata[1])));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestLevenshteinAutomata#assertLev(String,int).mjava","sourceNew":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(Operations.isFinite(automata[n]));\n      assertTrue(Operations.isFinite(tautomata[n]));\n      assertFalse(Operations.hasDeadStatesFromInitial(automata[n]));\n      assertFalse(Operations.hasDeadStatesFromInitial(tautomata[n]));\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n-1]),\n                                       Operations.removeDeadStates(automata[n])));\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n-1]),\n                                       Operations.removeDeadStates(tautomata[n])));\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(tautomata[n-1]),\n                                       Operations.removeDeadStates(automata[n])));\n        assertTrue(Operations.subsetOf(Operations.removeDeadStates(tautomata[n-1]),\n                                       Operations.removeDeadStates(tautomata[n])));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(Operations.subsetOf(Operations.removeDeadStates(automata[n]),\n                                     Operations.removeDeadStates(tautomata[n])));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(Operations.sameLanguage(Automata.makeString(s), Operations.removeDeadStates(automata[0])));\n          assertTrue(Operations.sameLanguage(Automata.makeString(s), Operations.removeDeadStates(tautomata[0])));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(Operations.sameLanguage(naiveLev1(s), Operations.removeDeadStates(automata[1])));\n          assertTrue(Operations.sameLanguage(naiveLev1T(s), Operations.removeDeadStates(tautomata[1])));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds a DFA for some string, and checks all Lev automata\n   * up to some maximum distance.\n   */\n  private void assertLev(String s, int maxDistance) {\n    LevenshteinAutomata builder = new LevenshteinAutomata(s, false);\n    LevenshteinAutomata tbuilder = new LevenshteinAutomata(s, true);\n    Automaton automata[] = new Automaton[maxDistance + 1];\n    Automaton tautomata[] = new Automaton[maxDistance + 1];\n    for (int n = 0; n < automata.length; n++) {\n      automata[n] = builder.toAutomaton(n);\n      tautomata[n] = tbuilder.toAutomaton(n);\n      assertNotNull(automata[n]);\n      assertNotNull(tautomata[n]);\n      assertTrue(automata[n].isDeterministic());\n      assertTrue(tautomata[n].isDeterministic());\n      assertTrue(SpecialOperations.isFinite(automata[n]));\n      assertTrue(SpecialOperations.isFinite(tautomata[n]));\n      AutomatonTestUtil.assertNoDetachedStates(automata[n]);\n      AutomatonTestUtil.assertNoDetachedStates(tautomata[n]);\n      // check that the dfa for n-1 accepts a subset of the dfa for n\n      if (n > 0) {\n        assertTrue(automata[n-1].subsetOf(automata[n]));\n        assertTrue(automata[n-1].subsetOf(tautomata[n]));\n        assertTrue(tautomata[n-1].subsetOf(automata[n]));\n        assertTrue(tautomata[n-1].subsetOf(tautomata[n]));\n        assertNotSame(automata[n-1], automata[n]);\n      }\n      // check that Lev(N) is a subset of LevT(N)\n      assertTrue(automata[n].subsetOf(tautomata[n]));\n      // special checks for specific n\n      switch(n) {\n        case 0:\n          // easy, matches the string itself\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), automata[0]));\n          assertTrue(BasicOperations.sameLanguage(BasicAutomata.makeString(s), tautomata[0]));\n          break;\n        case 1:\n          // generate a lev1 naively, and check the accepted lang is the same.\n          assertTrue(BasicOperations.sameLanguage(naiveLev1(s), automata[1]));\n          assertTrue(BasicOperations.sameLanguage(naiveLev1T(s), tautomata[1]));\n          break;\n        default:\n          assertBruteForce(s, automata[n], n);\n          assertBruteForceT(s, tautomata[n], n);\n          break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["a2de8b489026711e8edde133418a7cacfd2ce4d3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"a2de8b489026711e8edde133418a7cacfd2ce4d3":["a67285d1a68175d877eb9fd1624fccad3db028ff"],"a67285d1a68175d877eb9fd1624fccad3db028ff":["31d9b8f9a2d48c7d06f33dd5734fbbca9d176ec9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a2de8b489026711e8edde133418a7cacfd2ce4d3","5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}