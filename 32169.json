{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (tree.contains(decodeLatitude(packedValue, 0), \n                                               decodeLongitude(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (tree.contains(decodeLatitude(packedValue, 0), \n                                               decodeLongitude(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (tree.contains(decodeLatitude(packedValue, 0), \n                                               decodeLongitude(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues();\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect(field, \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (tree.contains(decodeLatitude(packedValue, 0), \n                                               decodeLongitude(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (tree.contains(decodeLatitude(packedValue, 0), \n                                               decodeLongitude(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee49d43fb47965f24d4ad89e7a1bdcc10410d615","date":1485765906,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (tree.contains(decodeLatitude(packedValue, 0), \n                                               decodeLongitude(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (tree.contains(decodeLatitude(packedValue, 0), \n                                               decodeLongitude(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return context.reader().getCoreCacheHelper();\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPointInPolygonQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n    // I don't use RandomAccessWeight here: it's no good to approximate with \"match all docs\"; this is an inverted structure and should be\n    // used in the first pass:\n    \n    // bounding box over all polygons, this can speed up tree intersection/cheaply improve approximation for complex multi-polygons\n    // these are pre-encoded with LatLonPoint's encoding\n    final Rectangle box = Rectangle.fromPolygon(polygons);\n    final byte minLat[] = new byte[Integer.BYTES];\n    final byte maxLat[] = new byte[Integer.BYTES];\n    final byte minLon[] = new byte[Integer.BYTES];\n    final byte maxLon[] = new byte[Integer.BYTES];\n    NumericUtils.intToSortableBytes(encodeLatitude(box.minLat), minLat, 0);\n    NumericUtils.intToSortableBytes(encodeLatitude(box.maxLat), maxLat, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.minLon), minLon, 0);\n    NumericUtils.intToSortableBytes(encodeLongitude(box.maxLon), maxLon, 0);\n\n    final Polygon2D tree = Polygon2D.create(polygons);\n    final GeoEncodingUtils.PolygonPredicate polygonPredicate = GeoEncodingUtils.createPolygonPredicate(polygons, tree);\n\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        LeafReader reader = context.reader();\n        PointValues values = reader.getPointValues(field);\n        if (values == null) {\n          // No docs in this segment had any points fields\n          return null;\n        }\n        FieldInfo fieldInfo = reader.getFieldInfos().fieldInfo(field);\n        if (fieldInfo == null) {\n          // No docs in this segment indexed this field at all\n          return null;\n        }\n        LatLonPoint.checkCompatible(fieldInfo);\n\n        // matching docids\n        DocIdSetBuilder result = new DocIdSetBuilder(reader.maxDoc(), values, field);\n\n        values.intersect( \n                         new IntersectVisitor() {\n\n                           DocIdSetBuilder.BulkAdder adder;\n\n                           @Override\n                           public void grow(int count) {\n                             adder = result.grow(count);\n                           }\n\n                           @Override\n                           public void visit(int docID) {\n                             adder.add(docID);\n                           }\n\n                           @Override\n                           public void visit(int docID, byte[] packedValue) {\n                             if (polygonPredicate.test(NumericUtils.sortableBytesToInt(packedValue, 0),\n                                                       NumericUtils.sortableBytesToInt(packedValue, Integer.BYTES))) {\n                               adder.add(docID);\n                             }\n                           }\n\n                           @Override\n                           public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                             if (StringHelper.compare(Integer.BYTES, minPackedValue, 0, maxLat, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, 0, minLat, 0) < 0 ||\n                                 StringHelper.compare(Integer.BYTES, minPackedValue, Integer.BYTES, maxLon, 0) > 0 ||\n                                 StringHelper.compare(Integer.BYTES, maxPackedValue, Integer.BYTES, minLon, 0) < 0) {\n                               // outside of global bounding box range\n                               return Relation.CELL_OUTSIDE_QUERY;\n                             }\n                             \n                             double cellMinLat = decodeLatitude(minPackedValue, 0);\n                             double cellMinLon = decodeLongitude(minPackedValue, Integer.BYTES);\n                             double cellMaxLat = decodeLatitude(maxPackedValue, 0);\n                             double cellMaxLon = decodeLongitude(maxPackedValue, Integer.BYTES);\n\n                             return tree.relate(cellMinLat, cellMaxLat, cellMinLon, cellMaxLon);\n                           }\n                         });\n\n        return new ConstantScoreScorer(this, score(), result.build().iterator());\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ee49d43fb47965f24d4ad89e7a1bdcc10410d615"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["ee49d43fb47965f24d4ad89e7a1bdcc10410d615","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"ee49d43fb47965f24d4ad89e7a1bdcc10410d615":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}