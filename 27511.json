{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d374631bb6f5665bd5907a6186a9bb283a315f7d","date":1336345692,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2 t:one~2) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0 t:one~0) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2.0 t:one~2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0.8 t:one~0.8) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestMultiFieldQPHelper#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"(b:one t:one)^2.0 (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2 t:one~2) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0 t:one~0) (b:two t:two)^2.0\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    String[] fields = { \"b\", \"t\" };\n    StandardQueryParser mfqp = new StandardQueryParser();\n    mfqp.setMultiFields(fields);\n    mfqp.setAnalyzer(new MockAnalyzer(random()));\n\n    Query q = mfqp.parse(\"one\", null);\n    assertEquals(\"b:one t:one\", q.toString());\n\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"(b:one t:one) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one +two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"+one -two -three\", null);\n    assertEquals(\"+(b:one t:one) -(b:two t:two) -(b:three t:three)\", q\n        .toString());\n\n    q = mfqp.parse(\"one^2 two\", null);\n    assertEquals(\"((b:one t:one)^2.0) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~ two\", null);\n    assertEquals(\"(b:one~2 t:one~2) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"one~0.8 two^2\", null);\n    assertEquals(\"(b:one~0 t:one~0) ((b:two t:two)^2.0)\", q.toString());\n\n    q = mfqp.parse(\"one* two*\", null);\n    assertEquals(\"(b:one* t:one*) (b:two* t:two*)\", q.toString());\n\n    q = mfqp.parse(\"[a TO c] two\", null);\n    assertEquals(\"(b:[a TO c] t:[a TO c]) (b:two t:two)\", q.toString());\n\n    q = mfqp.parse(\"w?ldcard\", null);\n    assertEquals(\"b:w?ldcard t:w?ldcard\", q.toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"\", null);\n    assertEquals(\"b:\\\"foo bar\\\" t:\\\"foo bar\\\"\", q.toString());\n\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") (b:\\\"dd ee\\\" t:\\\"dd ee\\\")\", q\n        .toString());\n\n    q = mfqp.parse(\"\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4 t:\\\"foo bar\\\"~4\", q.toString());\n\n    // LUCENE-1213: QueryParser was ignoring slop when phrase\n    // had a field.\n    q = mfqp.parse(\"b:\\\"foo bar\\\"~4\", null);\n    assertEquals(\"b:\\\"foo bar\\\"~4\", q.toString());\n\n    // make sure that terms which have a field are not touched:\n    q = mfqp.parse(\"one f:two\", null);\n    assertEquals(\"(b:one t:one) f:two\", q.toString());\n\n    // AND mode:\n    mfqp.setDefaultOperator(StandardQueryConfigHandler.Operator.AND);\n    q = mfqp.parse(\"one two\", null);\n    assertEquals(\"+(b:one t:one) +(b:two t:two)\", q.toString());\n    q = mfqp.parse(\"\\\"aa bb cc\\\" \\\"dd ee\\\"\", null);\n    assertEquals(\"+(b:\\\"aa bb cc\\\" t:\\\"aa bb cc\\\") +(b:\\\"dd ee\\\" t:\\\"dd ee\\\")\",\n        q.toString());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d374631bb6f5665bd5907a6186a9bb283a315f7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d374631bb6f5665bd5907a6186a9bb283a315f7d":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}