{"path":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#getFieldProperties(SchemaField).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#getFieldProperties(SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  /** Get the properties for a given field.\n   *\n   * @param field not required to exist in the schema\n   */\n  protected SimpleOrderedMap<Object> getFieldProperties(SchemaField field) {\n    if (null == field) {\n      return null;\n    }\n    SimpleOrderedMap<Object> properties = field.getNamedPropertyValues(showDefaults);\n    if ( ! getSchema().getFields().containsKey(field.getName())) {\n      String dynamicBase = getSchema().getDynamicPattern(field.getName());\n      if ( ! field.getName().equals(dynamicBase)) {\n        // Don't add dynamicBase property if it's identical to the field name. \n        properties.add(DYNAMIC_BASE, getSchema().getDynamicPattern(field.getName()));\n      }\n    }\n    if (field == getSchema().getUniqueKeyField()) {\n      properties.add(UNIQUE_KEY, true);\n    }\n    return properties;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47ade09239358147b3ebd60bed41b957e2f75891","date":1362696078,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#getFieldProperties(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#getFieldProperties(SchemaField).mjava","sourceNew":"  /** Get the properties for a given field.\n   *\n   * @param field not required to exist in the schema\n   */\n  protected SimpleOrderedMap<Object> getFieldProperties(SchemaField field) {\n    if (null == field) {\n      return null;\n    }\n    SimpleOrderedMap<Object> properties = field.getNamedPropertyValues(showDefaults);\n    if ( ! getSchema().getFields().containsKey(field.getName())) {\n      String dynamicBase = getSchema().getDynamicPattern(field.getName());\n      // Add dynamicBase property if it's different from the field name. \n      if ( ! field.getName().equals(dynamicBase)) {\n        properties.add(DYNAMIC_BASE, dynamicBase);\n      }\n    }\n    if (field == getSchema().getUniqueKeyField()) {\n      properties.add(UNIQUE_KEY, true);\n    }\n    return properties;\n  }\n\n","sourceOld":"  /** Get the properties for a given field.\n   *\n   * @param field not required to exist in the schema\n   */\n  protected SimpleOrderedMap<Object> getFieldProperties(SchemaField field) {\n    if (null == field) {\n      return null;\n    }\n    SimpleOrderedMap<Object> properties = field.getNamedPropertyValues(showDefaults);\n    if ( ! getSchema().getFields().containsKey(field.getName())) {\n      String dynamicBase = getSchema().getDynamicPattern(field.getName());\n      if ( ! field.getName().equals(dynamicBase)) {\n        // Don't add dynamicBase property if it's identical to the field name. \n        properties.add(DYNAMIC_BASE, getSchema().getDynamicPattern(field.getName()));\n      }\n    }\n    if (field == getSchema().getUniqueKeyField()) {\n      properties.add(UNIQUE_KEY, true);\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/rest/schema/BaseFieldResource#getFieldProperties(SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/rest/BaseFieldResource#getFieldProperties(SchemaField).mjava","sourceNew":"  /** Get the properties for a given field.\n   *\n   * @param field not required to exist in the schema\n   */\n  protected SimpleOrderedMap<Object> getFieldProperties(SchemaField field) {\n    if (null == field) {\n      return null;\n    }\n    SimpleOrderedMap<Object> properties = field.getNamedPropertyValues(showDefaults);\n    if ( ! getSchema().getFields().containsKey(field.getName())) {\n      String dynamicBase = getSchema().getDynamicPattern(field.getName());\n      // Add dynamicBase property if it's different from the field name. \n      if ( ! field.getName().equals(dynamicBase)) {\n        properties.add(DYNAMIC_BASE, dynamicBase);\n      }\n    }\n    if (field == getSchema().getUniqueKeyField()) {\n      properties.add(IndexSchema.UNIQUE_KEY, true);\n    }\n    return properties;\n  }\n\n","sourceOld":"  /** Get the properties for a given field.\n   *\n   * @param field not required to exist in the schema\n   */\n  protected SimpleOrderedMap<Object> getFieldProperties(SchemaField field) {\n    if (null == field) {\n      return null;\n    }\n    SimpleOrderedMap<Object> properties = field.getNamedPropertyValues(showDefaults);\n    if ( ! getSchema().getFields().containsKey(field.getName())) {\n      String dynamicBase = getSchema().getDynamicPattern(field.getName());\n      // Add dynamicBase property if it's different from the field name. \n      if ( ! field.getName().equals(dynamicBase)) {\n        properties.add(DYNAMIC_BASE, dynamicBase);\n      }\n    }\n    if (field == getSchema().getUniqueKeyField()) {\n      properties.add(UNIQUE_KEY, true);\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"47ade09239358147b3ebd60bed41b957e2f75891":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["47ade09239358147b3ebd60bed41b957e2f75891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"]},"commit2Childs":{"47ade09239358147b3ebd60bed41b957e2f75891":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["47ade09239358147b3ebd60bed41b957e2f75891"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}