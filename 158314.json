{"path":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/DirectoryReader#acquireWriteLock().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tries to acquire the WriteLock on this directory. this method is only valid if this IndexReader is directory\n   * owner.\n   *\n   * @throws StaleReaderException  if the index has changed since this reader was opened\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws org.apache.lucene.store.LockObtainFailedException\n   *                               if another writer has this index open (<code>write.lock</code> could not be\n   *                               obtained)\n   * @throws IOException           if there is a low-level IO error\n   */\n  @Override\n  protected void acquireWriteLock() throws StaleReaderException, CorruptIndexException, LockObtainFailedException, IOException {\n\n    if (readOnly) {\n      // NOTE: we should not reach this code w/ the core\n      // IndexReader classes; however, an external subclass\n      // of IndexReader could reach this.\n      ReadOnlySegmentReader.noWrite();\n    }\n\n    if (segmentInfos != null) {\n      ensureOpen();\n      if (stale)\n        throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n\n      if (writeLock == null) {\n        Lock writeLock = directory.makeLock(IndexWriter.WRITE_LOCK_NAME);\n        if (!writeLock.obtain(IndexWriter.WRITE_LOCK_TIMEOUT)) // obtain write lock\n          throw new LockObtainFailedException(\"Index locked for write: \" + writeLock);\n        this.writeLock = writeLock;\n\n        // we have to check whether index has changed since this reader was opened.\n        // if so, this reader is no longer valid for deletion\n        if (SegmentInfos.readCurrentVersion(directory) > segmentInfos.getVersion()) {\n          stale = true;\n          this.writeLock.release();\n          this.writeLock = null;\n          throw new StaleReaderException(\"IndexReader out of date and no longer valid for delete, undelete, or setNorm operations\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}