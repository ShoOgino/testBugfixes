{"path":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","sourceNew":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter(term.charAt(c))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n","sourceOld":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter(term.charAt(c))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer#isStemmable(String).mjava","sourceNew":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter(term.charAt(c))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n","sourceOld":"\t/**\n\t * Checks a term if it can be processed correctly.\n\t *\n\t * @return  true if, and only if, the given term consists in letters.\n\t */\n\tprivate boolean isStemmable( String term ) {\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter(term.charAt(c))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}