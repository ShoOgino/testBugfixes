{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBits().mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBits().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBits() {\n    int low = Short.MIN_VALUE;\n    int high = Short.MAX_VALUE;\n    while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short) low))) {\n      ++low;\n    }\n    while (HalfFloatPoint.sortableShortToHalfFloat((short) low) == Float.NEGATIVE_INFINITY) {\n      ++low;\n    }\n    while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short) high))) {\n      --high;\n    }\n    while (HalfFloatPoint.sortableShortToHalfFloat((short) high) == Float.POSITIVE_INFINITY) {\n      --high;\n    }\n    for (int i = low; i <= high + 1; ++i) {\n      float previous = HalfFloatPoint.sortableShortToHalfFloat((short) (i - 1));\n      float current = HalfFloatPoint.sortableShortToHalfFloat((short) i);\n      assertEquals(i, HalfFloatPoint.halfFloatToSortableShort(current));\n      assertTrue(Float.compare(previous, current) < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBits().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBits() {\n    int low = Short.MIN_VALUE;\n    int high = Short.MAX_VALUE;\n    while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short) low))) {\n      ++low;\n    }\n    while (HalfFloatPoint.sortableShortToHalfFloat((short) low) == Float.NEGATIVE_INFINITY) {\n      ++low;\n    }\n    while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short) high))) {\n      --high;\n    }\n    while (HalfFloatPoint.sortableShortToHalfFloat((short) high) == Float.POSITIVE_INFINITY) {\n      --high;\n    }\n    for (int i = low; i <= high + 1; ++i) {\n      float previous = HalfFloatPoint.sortableShortToHalfFloat((short) (i - 1));\n      float current = HalfFloatPoint.sortableShortToHalfFloat((short) i);\n      assertEquals(i, HalfFloatPoint.halfFloatToSortableShort(current));\n      assertTrue(Float.compare(previous, current) < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testSortableBits().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortableBits() {\n    int low = Short.MIN_VALUE;\n    int high = Short.MAX_VALUE;\n    while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short) low))) {\n      ++low;\n    }\n    while (HalfFloatPoint.sortableShortToHalfFloat((short) low) == Float.NEGATIVE_INFINITY) {\n      ++low;\n    }\n    while (Float.isNaN(HalfFloatPoint.sortableShortToHalfFloat((short) high))) {\n      --high;\n    }\n    while (HalfFloatPoint.sortableShortToHalfFloat((short) high) == Float.POSITIVE_INFINITY) {\n      --high;\n    }\n    for (int i = low; i <= high + 1; ++i) {\n      float previous = HalfFloatPoint.sortableShortToHalfFloat((short) (i - 1));\n      float current = HalfFloatPoint.sortableShortToHalfFloat((short) i);\n      assertEquals(i, HalfFloatPoint.halfFloatToSortableShort(current));\n      assertTrue(Float.compare(previous, current) < 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"]},"commit2Childs":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}