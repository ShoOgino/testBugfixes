{"path":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","commits":[{"id":"3beec0828e9973095a4de926b078ebc3bdbfd2aa","date":1464816871,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Randomly produces an SSLTestConfig taking into account various factors \n     *\n     * @see LuceneTestCase#TEST_NIGHTLY\n     * @see LuceneTestCase#RANDOM_MULTIPLIER\n     * @see LuceneTestCase#random()\n     */\n    public SSLTestConfig createSSLTestConfig() {\n      // even if we know SSL is disabled, always consume the same amount of randomness\n      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n      return new SSLTestConfig(useSSL, useClientAuth);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Randomly produces an SSLTestConfig taking into account various factors \n     *\n     * @see LuceneTestCase#TEST_NIGHTLY\n     * @see LuceneTestCase#RANDOM_MULTIPLIER\n     * @see LuceneTestCase#random()\n     */\n    public SSLTestConfig createSSLTestConfig() {\n      // even if we know SSL is disabled, always consume the same amount of randomness\n      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n      return new SSLTestConfig(useSSL, useClientAuth);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Randomly produces an SSLTestConfig taking into account various factors \n     *\n     * @see LuceneTestCase#TEST_NIGHTLY\n     * @see LuceneTestCase#RANDOM_MULTIPLIER\n     * @see LuceneTestCase#random()\n     */\n    public SSLTestConfig createSSLTestConfig() {\n      // even if we know SSL is disabled, always consume the same amount of randomness\n      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n      return new SSLTestConfig(useSSL, useClientAuth);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Randomly produces an SSLTestConfig taking into account various factors \n     *\n     * @see LuceneTestCase#TEST_NIGHTLY\n     * @see LuceneTestCase#RANDOM_MULTIPLIER\n     * @see LuceneTestCase#random()\n     */\n    public SSLTestConfig createSSLTestConfig() {\n      // even if we know SSL is disabled, always consume the same amount of randomness\n      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n      return new SSLTestConfig(useSSL, useClientAuth);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"145861f27f99b5bc31624464001a77c3ddd952bc","date":1465411141,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","sourceNew":"    /** \n     * Randomly produces an SSLTestConfig taking into account various factors \n     *\n     * @see LuceneTestCase#TEST_NIGHTLY\n     * @see LuceneTestCase#RANDOM_MULTIPLIER\n     * @see LuceneTestCase#random()\n     */\n    public SSLTestConfig createSSLTestConfig() {\n      // even if we know SSL is disabled, always consume the same amount of randomness\n      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 999) <\n        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 999) <\n        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n      return new SSLTestConfig(useSSL, useClientAuth);\n    }\n\n","sourceOld":"    /** \n     * Randomly produces an SSLTestConfig taking into account various factors \n     *\n     * @see LuceneTestCase#TEST_NIGHTLY\n     * @see LuceneTestCase#RANDOM_MULTIPLIER\n     * @see LuceneTestCase#random()\n     */\n    public SSLTestConfig createSSLTestConfig() {\n      // even if we know SSL is disabled, always consume the same amount of randomness\n      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 1000) < \n        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n      return new SSLTestConfig(useSSL, useClientAuth);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/RandomizeSSL.SSLRandomizer#createSSLTestConfig().mjava","pathOld":"/dev/null","sourceNew":"    /** \n     * Randomly produces an SSLTestConfig taking into account various factors \n     *\n     * @see LuceneTestCase#TEST_NIGHTLY\n     * @see LuceneTestCase#RANDOM_MULTIPLIER\n     * @see LuceneTestCase#random()\n     */\n    public SSLTestConfig createSSLTestConfig() {\n      // even if we know SSL is disabled, always consume the same amount of randomness\n      // that way all other test behavior should be consistent even if a user adds/removes @SuppressSSL\n      \n      final boolean useSSL = TestUtil.nextInt(LuceneTestCase.random(), 0, 999) <\n        (int)(1000 * getEffectiveOdds(ssl, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n      final boolean useClientAuth = TestUtil.nextInt(LuceneTestCase.random(), 0, 999) <\n        (int)(1000 * getEffectiveOdds(clientAuth, LuceneTestCase.TEST_NIGHTLY, LuceneTestCase.RANDOM_MULTIPLIER));\n\n      return new SSLTestConfig(useSSL, useClientAuth);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"145861f27f99b5bc31624464001a77c3ddd952bc":["1f69e96b07e265f3e18957be540909b01fae36f8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","145861f27f99b5bc31624464001a77c3ddd952bc"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["145861f27f99b5bc31624464001a77c3ddd952bc"],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"145861f27f99b5bc31624464001a77c3ddd952bc":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f69e96b07e265f3e18957be540909b01fae36f8":["145861f27f99b5bc31624464001a77c3ddd952bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","3beec0828e9973095a4de926b078ebc3bdbfd2aa"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"3beec0828e9973095a4de926b078ebc3bdbfd2aa":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}