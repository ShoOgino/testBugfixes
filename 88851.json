{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/EscapeQuerySyntaxImpl#replaceIgnoreCase(CharSequence,CharSequence,CharSequence,Locale).mjava","commits":[{"id":"b955a87bc7c5daeda1ed56821ec0bec2e8789e44","date":1249270724,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/EscapeQuerySyntaxImpl#replaceIgnoreCase(CharSequence,CharSequence,CharSequence,Locale).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * replace with ignore case\n   * \n   * @param stringOrig\n   *          string to get replaced\n   * @param sequence1\n   *          the old character sequence in lowercase\n   * @param escapeChar\n   *          the new character to prefix sequence1 in return string.\n   * @return the new String\n   */\n  private static CharSequence replaceIgnoreCase(CharSequence string,\n      CharSequence sequence1, CharSequence escapeChar, Locale locale) {\n    if (escapeChar == null || sequence1 == null || string == null)\n      throw new NullPointerException();\n\n    // empty string case\n    int count = string.length();\n    int sequence1Length = sequence1.length();\n    if (sequence1Length == 0) {\n      StringBuilder result = new StringBuilder((count + 1)\n          * escapeChar.length());\n      result.append(escapeChar);\n      for (int i = 0; i < count; i++) {\n        result.append(string.charAt(i));\n        result.append(escapeChar);\n      }\n      return result.toString();\n    }\n\n    // normal case\n    StringBuilder result = new StringBuilder();\n    char first = sequence1.charAt(0);\n    int start = 0, copyStart = 0, firstIndex;\n    while (start < count) {\n      if ((firstIndex = string.toString().toLowerCase(locale).indexOf(first,\n          start)) == -1)\n        break;\n      boolean found = true;\n      if (sequence1.length() > 1) {\n        if (firstIndex + sequence1Length > count)\n          break;\n        for (int i = 1; i < sequence1Length; i++) {\n          if (string.toString().toLowerCase(locale).charAt(firstIndex + i) != sequence1\n              .charAt(i)) {\n            found = false;\n            break;\n          }\n        }\n      }\n      if (found) {\n        result.append(string.toString().substring(copyStart, firstIndex));\n        result.append(escapeChar);\n        result.append(string.toString().substring(firstIndex,\n            firstIndex + sequence1Length));\n        copyStart = start = firstIndex + sequence1Length;\n      } else {\n        start = firstIndex + 1;\n      }\n    }\n    if (result.length() == 0 && copyStart == 0)\n      return string;\n    result.append(string.toString().substring(copyStart));\n    return result.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/EscapeQuerySyntaxImpl#replaceIgnoreCase(CharSequence,CharSequence,CharSequence,Locale).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/EscapeQuerySyntaxImpl#replaceIgnoreCase(CharSequence,CharSequence,CharSequence,Locale).mjava","sourceNew":"  /**\n   * replace with ignore case\n   * \n   * @param stringOrig\n   *          string to get replaced\n   * @param sequence1\n   *          the old character sequence in lowercase\n   * @param escapeChar\n   *          the new character to prefix sequence1 in return string.\n   * @return the new String\n   */\n  private static CharSequence replaceIgnoreCase(CharSequence string,\n      CharSequence sequence1, CharSequence escapeChar, Locale locale) {\n    if (escapeChar == null || sequence1 == null || string == null)\n      throw new NullPointerException();\n\n    // empty string case\n    int count = string.length();\n    int sequence1Length = sequence1.length();\n    if (sequence1Length == 0) {\n      StringBuilder result = new StringBuilder((count + 1)\n          * escapeChar.length());\n      result.append(escapeChar);\n      for (int i = 0; i < count; i++) {\n        result.append(string.charAt(i));\n        result.append(escapeChar);\n      }\n      return result.toString();\n    }\n\n    // normal case\n    StringBuilder result = new StringBuilder();\n    char first = sequence1.charAt(0);\n    int start = 0, copyStart = 0, firstIndex;\n    while (start < count) {\n      if ((firstIndex = string.toString().toLowerCase(locale).indexOf(first,\n          start)) == -1)\n        break;\n      boolean found = true;\n      if (sequence1.length() > 1) {\n        if (firstIndex + sequence1Length > count)\n          break;\n        for (int i = 1; i < sequence1Length; i++) {\n          if (string.toString().toLowerCase(locale).charAt(firstIndex + i) != sequence1\n              .charAt(i)) {\n            found = false;\n            break;\n          }\n        }\n      }\n      if (found) {\n        result.append(string.toString().substring(copyStart, firstIndex));\n        result.append(escapeChar);\n        result.append(string.toString().substring(firstIndex,\n            firstIndex + sequence1Length));\n        copyStart = start = firstIndex + sequence1Length;\n      } else {\n        start = firstIndex + 1;\n      }\n    }\n    if (result.length() == 0 && copyStart == 0)\n      return string;\n    result.append(string.toString().substring(copyStart));\n    return result.toString();\n  }\n\n","sourceOld":"  /**\n   * replace with ignore case\n   * \n   * @param stringOrig\n   *          string to get replaced\n   * @param sequence1\n   *          the old character sequence in lowercase\n   * @param escapeChar\n   *          the new character to prefix sequence1 in return string.\n   * @return the new String\n   */\n  private static CharSequence replaceIgnoreCase(CharSequence string,\n      CharSequence sequence1, CharSequence escapeChar, Locale locale) {\n    if (escapeChar == null || sequence1 == null || string == null)\n      throw new NullPointerException();\n\n    // empty string case\n    int count = string.length();\n    int sequence1Length = sequence1.length();\n    if (sequence1Length == 0) {\n      StringBuilder result = new StringBuilder((count + 1)\n          * escapeChar.length());\n      result.append(escapeChar);\n      for (int i = 0; i < count; i++) {\n        result.append(string.charAt(i));\n        result.append(escapeChar);\n      }\n      return result.toString();\n    }\n\n    // normal case\n    StringBuilder result = new StringBuilder();\n    char first = sequence1.charAt(0);\n    int start = 0, copyStart = 0, firstIndex;\n    while (start < count) {\n      if ((firstIndex = string.toString().toLowerCase(locale).indexOf(first,\n          start)) == -1)\n        break;\n      boolean found = true;\n      if (sequence1.length() > 1) {\n        if (firstIndex + sequence1Length > count)\n          break;\n        for (int i = 1; i < sequence1Length; i++) {\n          if (string.toString().toLowerCase(locale).charAt(firstIndex + i) != sequence1\n              .charAt(i)) {\n            found = false;\n            break;\n          }\n        }\n      }\n      if (found) {\n        result.append(string.toString().substring(copyStart, firstIndex));\n        result.append(escapeChar);\n        result.append(string.toString().substring(firstIndex,\n            firstIndex + sequence1Length));\n        copyStart = start = firstIndex + sequence1Length;\n      } else {\n        start = firstIndex + 1;\n      }\n    }\n    if (result.length() == 0 && copyStart == 0)\n      return string;\n    result.append(string.toString().substring(copyStart));\n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8a848e758754282137f42bf85793c278e250390"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b955a87bc7c5daeda1ed56821ec0bec2e8789e44"],"b955a87bc7c5daeda1ed56821ec0bec2e8789e44":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}