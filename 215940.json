{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, true);\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, false);\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, true);\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, false);\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, true);\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, false);\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":["f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, true);\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, false);\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, true);\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, words, false);\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f714d3d16beb7d9cc74e7ae85c110a7976c62938","date":1296412234,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":["384e84fe86b09273dea9bb358ff47fc7781f3f17","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"aaa BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","bugFix":["384e84fe86b09273dea9bb358ff47fc7781f3f17","f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(input));\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestKeepWordFilter#testStopAndGo().mjava","sourceNew":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","sourceOld":"  public void testStopAndGo() throws Exception \n  {  \n    Set<String> words = new HashSet<String>();\n    words.add( \"aaa\" );\n    words.add( \"bbb\" );\n    \n    String input = \"xxx yyy aaa zzz BBB ccc ddd EEE\";\n    \n    // Test Stopwords\n    TokenStream stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 3, 2 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(true, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 3 });\n    \n    // Test Stopwords\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT, words, true));\n    assertTokenStreamContents(stream, new String[] { \"aaa\", \"BBB\" }, new int[] { 1, 1 });\n       \n    // Now force case\n    stream = new MockTokenizer(new StringReader(input), MockTokenizer.WHITESPACE, false);\n    stream = new KeepWordFilter(false, stream, new CharArraySet(TEST_VERSION_CURRENT,words, false));\n    assertTokenStreamContents(stream, new String[] { \"aaa\" }, new int[] { 1 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f714d3d16beb7d9cc74e7ae85c110a7976c62938":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["29ef99d61cda9641b6250bf9567329a6e65f901d","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f714d3d16beb7d9cc74e7ae85c110a7976c62938","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["3bb13258feba31ab676502787ab2e1779f129b7a","f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f714d3d16beb7d9cc74e7ae85c110a7976c62938"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"f714d3d16beb7d9cc74e7ae85c110a7976c62938":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["f714d3d16beb7d9cc74e7ae85c110a7976c62938","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}