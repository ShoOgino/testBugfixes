{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a","date":1536291831,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef2d9523abb6906938bf5685963ce2d30d541cd7","date":1544417732,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59e7c978684f636dd0fb7c48aab722e85c1fb14d","date":1544528719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(20000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"914270355efc1f9583010cb165bb031a1e698f84","date":1546908784,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '10s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b336749840ccc5e7c88aa0a787fc6e3730d6e7","date":1546960615,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n // @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\")\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  // commented 4-Sep-2018 @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") //2018-03-10\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3904abfa513b750aabc2b2fba5336ba86ed32490","date":1547515000,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n // @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-13072\")\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215b6316d63375fce4dfbf1f55967c739795a2f9","date":1551465498,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    if (!actionInitCalled.await(10000 / SPEED, TimeUnit.MILLISECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    boolean await = triggerFiredLatch.await(90000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    await = triggerFiredLatch.await(60000 / SPEED, TimeUnit.MILLISECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimTriggerIntegration#testEventFromRestoredState().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testEventFromRestoredState() throws Exception {\n    SolrClient solrClient = cluster.simGetSolrClient();\n    assertAutoScalingRequest\n      (\"{\" +\n       \"'set-trigger' : {\" +\n       \"'name' : 'node_added_trigger',\" +\n       \"'event' : 'nodeAdded',\" +\n       \"'waitFor' : '10s',\" +\n       \"'enabled' : true,\" +\n       \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n       \"}}\");\n\n    assertAutoscalingUpdateComplete();\n\n    assertTrue(\"Trigger was not init()ed even after await()ing an excessive amount of time\",\n               actionInitCalled.await(60, TimeUnit.SECONDS));\n\n    events.clear();\n\n    String newNode = cluster.simAddNode();\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n    // reset\n    triggerFired.set(false);\n    triggerFiredLatch = new CountDownLatch(1);\n    TriggerEvent nodeAddedEvent = events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    @SuppressWarnings({\"unchecked\"})\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode));\n    // add a second node - state of the trigger will change but it won't fire for waitFor sec.\n    String newNode2 = cluster.simAddNode();\n    cluster.getTimeSource().sleep(10000);\n    // kill overseer\n    cluster.simRestartOverseer(null);\n    assertTrue(\"trigger did not fire event after await()ing an excessive amount of time\",\n               triggerFiredLatch.await(60, TimeUnit.SECONDS));\n    assertTrue(triggerFired.get());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef2d9523abb6906938bf5685963ce2d30d541cd7":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3f504512a03d978990cbff30db0522b354e846db":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["914270355efc1f9583010cb165bb031a1e698f84"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"59e7c978684f636dd0fb7c48aab722e85c1fb14d":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"914270355efc1f9583010cb165bb031a1e698f84":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["59e7c978684f636dd0fb7c48aab722e85c1fb14d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a"],"ef2d9523abb6906938bf5685963ce2d30d541cd7":["59e7c978684f636dd0fb7c48aab722e85c1fb14d"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ef2d9523abb6906938bf5685963ce2d30d541cd7"],"35b336749840ccc5e7c88aa0a787fc6e3730d6e7":["3904abfa513b750aabc2b2fba5336ba86ed32490"],"59e7c978684f636dd0fb7c48aab722e85c1fb14d":["89948af0461fead48f44ba8fb7866f107ce83f22"],"215b6316d63375fce4dfbf1f55967c739795a2f9":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["3f504512a03d978990cbff30db0522b354e846db"],"914270355efc1f9583010cb165bb031a1e698f84":["35b336749840ccc5e7c88aa0a787fc6e3730d6e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"f7ba5de6e78dd9b7518e92274a8a4cf8823a9c4a":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"89948af0461fead48f44ba8fb7866f107ce83f22":["914270355efc1f9583010cb165bb031a1e698f84"],"3904abfa513b750aabc2b2fba5336ba86ed32490":["215b6316d63375fce4dfbf1f55967c739795a2f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}