{"path":"lucene/core/src/test/org/apache/lucene/store/TestSimpleFSDirectory#testCreateOutputWithPendingDeletes().mjava","commits":[{"id":"29de260cd3b302f71077d76bf52667dcbbb475da","date":1526547755,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestSimpleFSDirectory#testCreateOutputWithPendingDeletes().mjava","pathOld":"/dev/null","sourceNew":"  public void testCreateOutputWithPendingDeletes() throws IOException {\n    Path path = createTempDir();\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    Directory directory = getDirectory(root);\n    IndexOutput output = directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    output.writeInt(1);\n    output.close();\n    IndexInput input = directory.openInput(\"file.txt\", IOContext.DEFAULT);\n    directory.deleteFile(\"file.txt\");\n    expectThrows(IOException.class, () -> {\n      directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    });\n    assertTrue(directory.getPendingDeletions().isEmpty());\n    assertEquals(1, input.readInt());\n    IOUtils.close(input, directory);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79621cd0f464185407234785ffec684314776205","date":1526665091,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestSimpleFSDirectory#testCreateOutputWithPendingDeletes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestSimpleFSDirectory#testCreateOutputWithPendingDeletes().mjava","sourceNew":"  public void testCreateOutputWithPendingDeletes() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    Directory directory = getDirectory(root);\n    IndexOutput output = directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    output.writeInt(1);\n    output.close();\n    IndexInput input = directory.openInput(\"file.txt\", IOContext.DEFAULT);\n    directory.deleteFile(\"file.txt\");\n    expectThrows(IOException.class, () -> {\n      directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    });\n    assertTrue(directory.getPendingDeletions().isEmpty());\n    assertEquals(1, input.readInt());\n    IOUtils.close(input, directory);\n  }\n\n","sourceOld":"  public void testCreateOutputWithPendingDeletes() throws IOException {\n    Path path = createTempDir();\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    Directory directory = getDirectory(root);\n    IndexOutput output = directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    output.writeInt(1);\n    output.close();\n    IndexInput input = directory.openInput(\"file.txt\", IOContext.DEFAULT);\n    directory.deleteFile(\"file.txt\");\n    expectThrows(IOException.class, () -> {\n      directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    });\n    assertTrue(directory.getPendingDeletions().isEmpty());\n    assertEquals(1, input.readInt());\n    IOUtils.close(input, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ae13d58e10d8dc818c75db483ed8b53c725f1d","date":1583449465,"type":4,"author":"Yannick Welsch","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestSimpleFSDirectory#testCreateOutputWithPendingDeletes().mjava","sourceNew":null,"sourceOld":"  public void testCreateOutputWithPendingDeletes() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    Directory directory = getDirectory(root);\n    IndexOutput output = directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    output.writeInt(1);\n    output.close();\n    IndexInput input = directory.openInput(\"file.txt\", IOContext.DEFAULT);\n    directory.deleteFile(\"file.txt\");\n    expectThrows(IOException.class, () -> {\n      directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    });\n    assertTrue(directory.getPendingDeletions().isEmpty());\n    assertEquals(1, input.readInt());\n    IOUtils.close(input, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ca2a57dbb0665332572cf1a0dffa67234089615","date":1583491342,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestSimpleFSDirectory#testCreateOutputWithPendingDeletes().mjava","sourceNew":null,"sourceOld":"  public void testCreateOutputWithPendingDeletes() throws IOException {\n    // irony: currently we don't emulate windows well enough to work on windows!\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path path = createTempDir();\n    // Use WindowsFS to prevent open files from being deleted:\n    FileSystem fs = new WindowsFS(path.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path root = new FilterPath(path, fs);\n    Directory directory = getDirectory(root);\n    IndexOutput output = directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    output.writeInt(1);\n    output.close();\n    IndexInput input = directory.openInput(\"file.txt\", IOContext.DEFAULT);\n    directory.deleteFile(\"file.txt\");\n    expectThrows(IOException.class, () -> {\n      directory.createOutput(\"file.txt\", IOContext.DEFAULT);\n    });\n    assertTrue(directory.getPendingDeletions().isEmpty());\n    assertEquals(1, input.readInt());\n    IOUtils.close(input, directory);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["79621cd0f464185407234785ffec684314776205","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"79621cd0f464185407234785ffec684314776205":["29de260cd3b302f71077d76bf52667dcbbb475da"],"29de260cd3b302f71077d76bf52667dcbbb475da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["79621cd0f464185407234785ffec684314776205"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ca2a57dbb0665332572cf1a0dffa67234089615"]},"commit2Childs":{"9ca2a57dbb0665332572cf1a0dffa67234089615":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"79621cd0f464185407234785ffec684314776205":["9ca2a57dbb0665332572cf1a0dffa67234089615","09ae13d58e10d8dc818c75db483ed8b53c725f1d"],"09ae13d58e10d8dc818c75db483ed8b53c725f1d":["9ca2a57dbb0665332572cf1a0dffa67234089615"],"29de260cd3b302f71077d76bf52667dcbbb475da":["79621cd0f464185407234785ffec684314776205"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29de260cd3b302f71077d76bf52667dcbbb475da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}