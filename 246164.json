{"path":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","commits":[{"id":"bb3390124f6c070b73005f7d1d06e28733988224","date":1555579478,"type":0,"author":"Zhao Yang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","pathOld":"/dev/null","sourceNew":"  public void testTotalPointCountValidation() throws IOException {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[] pointValue = new byte[numBytesPerDim];\n    random().nextBytes(pointValue);\n\n    MutablePointValues reader = new MutablePointValues() {\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for(int i=0;i<numPointsAdded;i++) {\n          visitor.visit(0, pointValue);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDataDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        // do nothing\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return 0;\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    BKDWriter w = new BKDWriter(numValues, dir, \"_temp\", 1, 1, numBytesPerDim, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    expectThrows(IllegalStateException.class, () -> {\n      try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n        w.writeField(out, \"test_field_name\", reader);\n      } finally {\n        w.close();\n        dir.close();\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","sourceNew":"  public void testTotalPointCountValidation() throws IOException {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[] pointValue = new byte[numBytesPerDim];\n    random().nextBytes(pointValue);\n\n    MutablePointValues reader = new MutablePointValues() {\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for(int i=0;i<numPointsAdded;i++) {\n          visitor.visit(0, pointValue);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        // do nothing\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return 0;\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    BKDWriter w = new BKDWriter(numValues, dir, \"_temp\", 1, 1, numBytesPerDim, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    expectThrows(IllegalStateException.class, () -> {\n      try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n        w.writeField(out, \"test_field_name\", reader);\n      } finally {\n        w.close();\n        dir.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void testTotalPointCountValidation() throws IOException {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[] pointValue = new byte[numBytesPerDim];\n    random().nextBytes(pointValue);\n\n    MutablePointValues reader = new MutablePointValues() {\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for(int i=0;i<numPointsAdded;i++) {\n          visitor.visit(0, pointValue);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDataDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        // do nothing\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return 0;\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    BKDWriter w = new BKDWriter(numValues, dir, \"_temp\", 1, 1, numBytesPerDim, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    expectThrows(IllegalStateException.class, () -> {\n      try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n        w.writeField(out, \"test_field_name\", reader);\n      } finally {\n        w.close();\n        dir.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","sourceNew":"  public void testTotalPointCountValidation() throws IOException {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[] pointValue = new byte[numBytesPerDim];\n    random().nextBytes(pointValue);\n\n    MutablePointValues reader = new MutablePointValues() {\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for(int i=0;i<numPointsAdded;i++) {\n          visitor.visit(0, pointValue);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        // do nothing\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return 0;\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    BKDWriter w = new BKDWriter(numValues, dir, \"_temp\", 1, 1, numBytesPerDim, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    expectThrows(IllegalStateException.class, () -> {\n      try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n        w.writeField(out, out, out, \"test_field_name\", reader);\n      } finally {\n        w.close();\n        dir.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void testTotalPointCountValidation() throws IOException {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[] pointValue = new byte[numBytesPerDim];\n    random().nextBytes(pointValue);\n\n    MutablePointValues reader = new MutablePointValues() {\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for(int i=0;i<numPointsAdded;i++) {\n          visitor.visit(0, pointValue);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        // do nothing\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return 0;\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    BKDWriter w = new BKDWriter(numValues, dir, \"_temp\", 1, 1, numBytesPerDim, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    expectThrows(IllegalStateException.class, () -> {\n      try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n        w.writeField(out, \"test_field_name\", reader);\n      } finally {\n        w.close();\n        dir.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/bkd/TestBKD#testTotalPointCountValidation().mjava","sourceNew":"  public void testTotalPointCountValidation() throws IOException {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[] pointValue = new byte[numBytesPerDim];\n    random().nextBytes(pointValue);\n\n    MutablePointValues reader = new MutablePointValues() {\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for(int i=0;i<numPointsAdded;i++) {\n          visitor.visit(0, pointValue);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        // do nothing\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return 0;\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    BKDWriter w = new BKDWriter(numValues, dir, \"_temp\", new BKDConfig(1, 1, numBytesPerDim, BKDConfig.DEFAULT_MAX_POINTS_IN_LEAF_NODE),\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    expectThrows(IllegalStateException.class, () -> {\n      try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n        w.writeField(out, out, out, \"test_field_name\", reader);\n      } finally {\n        w.close();\n        dir.close();\n      }\n    });\n  }\n\n","sourceOld":"  public void testTotalPointCountValidation() throws IOException {\n    Directory dir = newDirectory();\n    final int numValues = 10;\n    final int numPointsAdded = 50; // exceeds totalPointCount\n    final int numBytesPerDim = TestUtil.nextInt(random(), 1, 4);\n    final byte[] pointValue = new byte[numBytesPerDim];\n    random().nextBytes(pointValue);\n\n    MutablePointValues reader = new MutablePointValues() {\n\n      @Override\n      public void intersect(IntersectVisitor visitor) throws IOException {\n        for(int i=0;i<numPointsAdded;i++) {\n          visitor.visit(0, pointValue);\n        }\n      }\n\n      @Override\n      public long estimatePointCount(IntersectVisitor visitor) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMinPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public byte[] getMaxPackedValue() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getNumIndexDimensions() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public int getBytesPerDimension() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public long size() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public int getDocCount() {\n        return numPointsAdded;\n      }\n\n      @Override\n      public void swap(int i, int j) {\n        // do nothing\n      }\n\n      @Override\n      public int getDocID(int i) {\n        return 0;\n      }\n\n      @Override\n      public void getValue(int i, BytesRef packedValue) {\n        packedValue.bytes = pointValue;\n      }\n\n      @Override\n      public byte getByteAt(int i, int k) {\n        throw new UnsupportedOperationException();\n      }\n    };\n\n    BKDWriter w = new BKDWriter(numValues, dir, \"_temp\", 1, 1, numBytesPerDim, BKDWriter.DEFAULT_MAX_POINTS_IN_LEAF_NODE,\n        BKDWriter.DEFAULT_MAX_MB_SORT_IN_HEAP, numValues);\n    expectThrows(IllegalStateException.class, () -> {\n      try (IndexOutput out = dir.createOutput(\"bkd\", IOContext.DEFAULT)) {\n        w.writeField(out, out, out, \"test_field_name\", reader);\n      } finally {\n        w.close();\n        dir.close();\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb3390124f6c070b73005f7d1d06e28733988224":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["bb3390124f6c070b73005f7d1d06e28733988224"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"bb3390124f6c070b73005f7d1d06e28733988224":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb3390124f6c070b73005f7d1d06e28733988224"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}