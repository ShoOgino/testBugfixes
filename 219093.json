{"path":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","commits":[{"id":"cb0130363fa13c53e4e78317c35b3b45a3089276","date":1523267438,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numDeletes = reader.numDeletedDocs() + PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDocs = reader.maxDoc() - numDeletes;\n      return new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d58e44159788900f4a2113b84463dc3fbbf80f20","date":1523319203,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","pathOld":"/dev/null","sourceNew":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numDeletes = reader.numDeletedDocs() + PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDocs = reader.maxDoc() - numDeletes;\n      return new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f2203cb8ae87188877cfbf6ad170c5738a0aad5","date":1528117512,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","sourceNew":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numSoftDeletes = PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDeletes = reader.numDeletedDocs() + numSoftDeletes;\n      int numDocs = reader.maxDoc() - numDeletes;\n      assert assertDocCounts(numDocs, numSoftDeletes, reader);\n      return reader instanceof CodecReader ? new SoftDeletesFilterCodecReader((CodecReader) reader, bits, numDocs)\n          : new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","sourceOld":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numDeletes = reader.numDeletedDocs() + PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDocs = reader.maxDoc() - numDeletes;\n      return new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","sourceNew":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numSoftDeletes = PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDeletes = reader.numDeletedDocs() + numSoftDeletes;\n      int numDocs = reader.maxDoc() - numDeletes;\n      assert assertDocCounts(numDocs, numSoftDeletes, reader);\n      return reader instanceof CodecReader ? new SoftDeletesFilterCodecReader((CodecReader) reader, bits, numDocs)\n          : new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","sourceOld":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numDeletes = reader.numDeletedDocs() + PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDocs = reader.maxDoc() - numDeletes;\n      return new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","sourceNew":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numSoftDeletes = PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDeletes = reader.numDeletedDocs() + numSoftDeletes;\n      int numDocs = reader.maxDoc() - numDeletes;\n      assert assertDocCounts(numDocs, numSoftDeletes, reader);\n      return reader instanceof CodecReader ? new SoftDeletesFilterCodecReader((CodecReader) reader, bits, numDocs)\n          : new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","sourceOld":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numDeletes = reader.numDeletedDocs() + PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDocs = reader.maxDoc() - numDeletes;\n      return new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f6c6c7e96b58779768d63037428c4164f48c8f7","date":1532682688,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SoftDeletesDirectoryReaderWrapper#wrap(LeafReader,String).mjava","sourceNew":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = FixedBitSet.copyOf(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numSoftDeletes = PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDeletes = reader.numDeletedDocs() + numSoftDeletes;\n      int numDocs = reader.maxDoc() - numDeletes;\n      assert assertDocCounts(numDocs, numSoftDeletes, reader);\n      return reader instanceof CodecReader ? new SoftDeletesFilterCodecReader((CodecReader) reader, bits, numDocs)\n          : new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","sourceOld":"  static LeafReader wrap(LeafReader reader, String field) throws IOException {\n      DocIdSetIterator iterator = DocValuesFieldExistsQuery.getDocValuesDocIdSetIterator(field, reader);\n      if (iterator == null) {\n        return reader;\n      }\n      Bits liveDocs = reader.getLiveDocs();\n      final FixedBitSet bits;\n      if (liveDocs != null) {\n        bits = SoftDeletesRetentionMergePolicy.cloneLiveDocs(liveDocs);\n      } else {\n        bits = new FixedBitSet(reader.maxDoc());\n        bits.set(0, reader.maxDoc());\n      }\n      int numSoftDeletes = PendingSoftDeletes.applySoftDeletes(iterator, bits);\n      int numDeletes = reader.numDeletedDocs() + numSoftDeletes;\n      int numDocs = reader.maxDoc() - numDeletes;\n      assert assertDocCounts(numDocs, numSoftDeletes, reader);\n      return reader instanceof CodecReader ? new SoftDeletesFilterCodecReader((CodecReader) reader, bits, numDocs)\n          : new SoftDeletesFilterLeafReader(reader, bits, numDocs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cb0130363fa13c53e4e78317c35b3b45a3089276"],"4f6c6c7e96b58779768d63037428c4164f48c8f7":["8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb0130363fa13c53e4e78317c35b3b45a3089276":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b70042a8a492f7054d480ccdd2be9796510d4327":["d58e44159788900f4a2113b84463dc3fbbf80f20","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"f592209545c71895260367152601e9200399776d":["d58e44159788900f4a2113b84463dc3fbbf80f20","8f2203cb8ae87188877cfbf6ad170c5738a0aad5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f6c6c7e96b58779768d63037428c4164f48c8f7"]},"commit2Childs":{"d58e44159788900f4a2113b84463dc3fbbf80f20":["b70042a8a492f7054d480ccdd2be9796510d4327","8f2203cb8ae87188877cfbf6ad170c5738a0aad5","f592209545c71895260367152601e9200399776d"],"4f6c6c7e96b58779768d63037428c4164f48c8f7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d58e44159788900f4a2113b84463dc3fbbf80f20","cb0130363fa13c53e4e78317c35b3b45a3089276"],"cb0130363fa13c53e4e78317c35b3b45a3089276":["d58e44159788900f4a2113b84463dc3fbbf80f20"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"8f2203cb8ae87188877cfbf6ad170c5738a0aad5":["4f6c6c7e96b58779768d63037428c4164f48c8f7","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}