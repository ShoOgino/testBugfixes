{"path":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","commits":[{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","pathOld":"modules/spatial-TEMP/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","sourceNew":"  private void recursiveGetNodes(Node node, Point point, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (inclParents) {\n      result.add(node);\n    }\n    final Node pCell = node.getSubCell(point);\n    if (node.getLevel() == detailLevel - 1) {\n      pCell.setLeaf();\n      result.add(pCell);\n    } else {\n      recursiveGetNodes(pCell, point, detailLevel, inclParents, result);//tail call\n    }\n  }\n\n","sourceOld":"  private void recursiveGetNodes(Node node, Point point, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (inclParents) {\n      result.add(node);\n    }\n    final Node pCell = node.getSubCell(point);\n    if (node.getLevel() == detailLevel - 1) {\n      pCell.setLeaf();\n      result.add(pCell);\n    } else {\n      recursiveGetNodes(pCell, point, detailLevel, inclParents, result);//tail call\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/prefix/SpatialPrefixTree#recursiveGetNodes(Node,Point,int,boolean,Collection[Node]).mjava","sourceNew":"  private void recursiveGetNodes(Node node, Point point, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (inclParents) {\n      result.add(node);\n    }\n    final Node pCell = node.getSubCell(point);\n    if (node.getLevel() == detailLevel - 1) {\n      pCell.setLeaf();\n      result.add(pCell);\n    } else {\n      recursiveGetNodes(pCell, point, detailLevel, inclParents, result);//tail call\n    }\n  }\n\n","sourceOld":"  private void recursiveGetNodes(Node node, Point point, int detailLevel, boolean inclParents,\n                                 Collection<Node> result) {\n    if (inclParents) {\n      result.add(node);\n    }\n    final Node pCell = node.getSubCell(point);\n    if (node.getLevel() == detailLevel - 1) {\n      pCell.setLeaf();\n      result.add(pCell);\n    } else {\n      recursiveGetNodes(pCell, point, detailLevel, inclParents, result);//tail call\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}