{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeSegmentHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeSegmentHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.getDocCount(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","sourceNew":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.getDocCount(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeSegmentHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeSegmentHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeSegmentHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.getDocCount(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","pathOld":"/dev/null","sourceNew":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.getDocCount(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0267c69e2456a3477a1ad785723f2135da3117e","date":1425317087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","sourceNew":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.maxDoc(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.getDocCount(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b06445ae1731e049327712db0454e5643ca9b7fe","date":1425329139,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","sourceNew":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.maxDoc(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.getDocCount(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","sourceNew":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.maxDoc(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.getDocCount(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a0cc86697753659ac5e7f55243ccdcbf44d8a36","date":1574100512,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50PostingsWriter#Lucene50PostingsWriter(SegmentWriteState).mjava","sourceNew":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.maxDoc(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","sourceOld":"  /** Creates a postings writer */\n  public Lucene50PostingsWriter(SegmentWriteState state) throws IOException {\n    final float acceptableOverheadRatio = PackedInts.COMPACT;\n\n    String docFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.DOC_EXTENSION);\n    docOut = state.directory.createOutput(docFileName, state.context);\n    IndexOutput posOut = null;\n    IndexOutput payOut = null;\n    boolean success = false;\n    try {\n      CodecUtil.writeIndexHeader(docOut, DOC_CODEC, VERSION_CURRENT, \n                                   state.segmentInfo.getId(), state.segmentSuffix);\n      forUtil = new ForUtil(acceptableOverheadRatio, docOut);\n      if (state.fieldInfos.hasProx()) {\n        posDeltaBuffer = new int[MAX_DATA_SIZE];\n        String posFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.POS_EXTENSION);\n        posOut = state.directory.createOutput(posFileName, state.context);\n        CodecUtil.writeIndexHeader(posOut, POS_CODEC, VERSION_CURRENT,\n                                     state.segmentInfo.getId(), state.segmentSuffix);\n\n        if (state.fieldInfos.hasPayloads()) {\n          payloadBytes = new byte[128];\n          payloadLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          payloadBytes = null;\n          payloadLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasOffsets()) {\n          offsetStartDeltaBuffer = new int[MAX_DATA_SIZE];\n          offsetLengthBuffer = new int[MAX_DATA_SIZE];\n        } else {\n          offsetStartDeltaBuffer = null;\n          offsetLengthBuffer = null;\n        }\n\n        if (state.fieldInfos.hasPayloads() || state.fieldInfos.hasOffsets()) {\n          String payFileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Lucene50PostingsFormat.PAY_EXTENSION);\n          payOut = state.directory.createOutput(payFileName, state.context);\n          CodecUtil.writeIndexHeader(payOut, PAY_CODEC, VERSION_CURRENT,\n                                       state.segmentInfo.getId(), state.segmentSuffix);\n        }\n      } else {\n        posDeltaBuffer = null;\n        payloadLengthBuffer = null;\n        offsetStartDeltaBuffer = null;\n        offsetLengthBuffer = null;\n        payloadBytes = null;\n      }\n      this.payOut = payOut;\n      this.posOut = posOut;\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(docOut, posOut, payOut);\n      }\n    }\n\n    docDeltaBuffer = new int[MAX_DATA_SIZE];\n    freqBuffer = new int[MAX_DATA_SIZE];\n\n    // TODO: should we try skipping every 2/4 blocks...?\n    skipWriter = new Lucene50SkipWriter(MAX_SKIP_LEVELS,\n                                        BLOCK_SIZE, \n                                        state.segmentInfo.maxDoc(),\n                                        docOut,\n                                        posOut,\n                                        payOut);\n\n    encoded = new byte[MAX_ENCODED_SIZE];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["b0267c69e2456a3477a1ad785723f2135da3117e"],"b06445ae1731e049327712db0454e5643ca9b7fe":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238","b0267c69e2456a3477a1ad785723f2135da3117e"],"b0267c69e2456a3477a1ad785723f2135da3117e":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3384e6013a93e4d11b7d75388693f8d0388602bf":["99eb4a732d1a908f4636ace52928876136bf1896"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3384e6013a93e4d11b7d75388693f8d0388602bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a0cc86697753659ac5e7f55243ccdcbf44d8a36"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"99eb4a732d1a908f4636ace52928876136bf1896":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"9a0cc86697753659ac5e7f55243ccdcbf44d8a36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b06445ae1731e049327712db0454e5643ca9b7fe":[],"b0267c69e2456a3477a1ad785723f2135da3117e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9a0cc86697753659ac5e7f55243ccdcbf44d8a36","b06445ae1731e049327712db0454e5643ca9b7fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","b0267c69e2456a3477a1ad785723f2135da3117e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b06445ae1731e049327712db0454e5643ca9b7fe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}