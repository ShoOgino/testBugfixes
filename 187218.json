{"path":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testSKGSweepMultiAcc().mjava","commits":[{"id":"2f9e4bd10604489b5817ee29e35ac96a3148cbec","date":1594345357,"type":0,"author":"Michael Gibney","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/TestJsonFacets#testSKGSweepMultiAcc().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSKGSweepMultiAcc() throws Exception {\n    Client client = Client.localClient();\n    indexSimple(client);\n    \n    // simple single level facet w/skg & trivial non-sweeping stat using various sorts & (re)sorting\n    for (String sort : Arrays.asList(\"sort:'index asc'\",\n                                     \"sort:'y desc'\",\n                                     \"sort:'z desc'\",\n                                     \"sort:'skg desc'\",\n                                     \"prelim_sort:'count desc', sort:'index asc'\",\n                                     \"prelim_sort:'count desc', sort:'y desc'\",\n                                     \"prelim_sort:'count desc', sort:'z desc'\",\n                                     \"prelim_sort:'count desc', sort:'skg desc'\")) {\n      // the relatedness score of each of our cat_s values is (conviniently) also alphabetical order,\n      // (and the same order as 'sum(num_i) desc' & 'min(num_i) desc')\n      //\n      // So all of these re/sort options should produce identical output\n      // - Testing \"index\" sort allows the randomized use of \"stream\" processor as default to be tested.\n      // - Testing (re)sorts on other stats sanity checks code paths where relatedness() is a \"defered\" Agg\n\n      for (String sweep : Arrays.asList(\"true\", \"false\")) {\n        //  results should be the same even if we disable sweeping...\n        assertJQ(req(\"q\", \"cat_s:[* TO *]\", \"rows\", \"0\",\n                     \"fore\", \"where_s:NY\", \"back\", \"*:*\",\n                     \"json.facet\", \"\"\n                     + \"{x: { type: terms, field: 'cat_s', \"+sort+\", limit:-1, \"\n                     + \"      facet: { skg: { type: 'func', func:'relatedness($fore,$back)', \"\n                     +\"                       \"+RelatednessAgg.SWEEP_COLLECTION+\": \"+sweep+\" },\"\n                     + \"               y:'sum(num_i)', \"\n                     +\"                z:'min(num_i)' } } }\")\n                 , \"facets=={count:5, x:{ buckets:[\"\n                 + \"   { val:'A', count:2, y:5.0, z:2, \"\n                 + \"     skg : { relatedness: 0.00554, \"\n                 + \"             foreground_popularity: 0.16667,\"\n                 + \"             background_popularity: 0.33333, },\"\n                 + \"   }, \"\n                 + \"   { val:'B', count:3, y:-3.0, z:-5, \"\n                 + \"     skg : { relatedness: 0.0, \" // perfectly average and uncorrolated\n                 + \"             foreground_popularity: 0.16667,\"\n                 + \"             background_popularity: 0.5 },\"\n                 + \"   } ] } } \"\n                 );\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"]},"commit2Childs":{"2f9e4bd10604489b5817ee29e35ac96a3148cbec":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2f9e4bd10604489b5817ee29e35ac96a3148cbec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}