{"path":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testIntervalWithMincount().mjava","commits":[{"id":"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45","date":1569046571,"type":0,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testIntervalWithMincount().mjava","pathOld":"/dev/null","sourceNew":"  public void testIntervalWithMincount() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n\n      long mincount_to_use = -1;\n      Object expected_mincount_bucket_val = null;\n\n      // without mincount\n      SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n          \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:3},{from:3, to:5}]\" +\n              subFacet + \" } }\"\n      );\n\n      QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n        assertEquals(\"num buckets\", 2, buckets.size());\n\n        // upper is not included\n        assertBucket(\"bucket#0\", \"[1,3)\", modelVals(1,2), subFacetLimit, buckets.get(0));\n        assertBucket(\"bucket#1\", \"[3,5)\", modelVals(3,4), subFacetLimit, buckets.get(1));\n\n        // if we've made it this far, then our buckets match the model\n        // now use our buckets to pick a mincount to use based on the MIN(+1) count seen\n        long count0 = ((Number)buckets.get(0).get(\"count\")).longValue();\n        long count1 = ((Number)buckets.get(1).get(\"count\")).longValue();\n\n        mincount_to_use = 1 + Math.min(count0, count1);\n        if (count0 > count1) {\n          expected_mincount_bucket_val = buckets.get(0).get(\"val\");\n        } else if (count1 > count0) {\n          expected_mincount_bucket_val = buckets.get(1).get(\"val\");\n        }\n\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n\n      // with mincount\n      solrQuery = new SolrQuery(\n          \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n          \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:3},{from:3, to:5}]\" +\n              \",mincount:\" + mincount_to_use + subFacet + \" } }\"\n      );\n\n      rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n        if (null == expected_mincount_bucket_val) {\n          assertEquals(\"num buckets\", 0, buckets.size());\n        } else {\n          assertEquals(\"num buckets\", 1, buckets.size());\n          final Object actualBucket = buckets.get(0);\n          if (expected_mincount_bucket_val.equals(\"[1,3)\")) {\n            assertBucket(\"bucket#0(0)\", \"[1,3)\", modelVals(1,2), subFacetLimit, actualBucket);\n          } else {\n            assertBucket(\"bucket#0(1)\", \"[3,5)\", modelVals(3,4), subFacetLimit, actualBucket);\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testIntervalWithMincount().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/facet/RangeFacetCloudTest#testIntervalWithMincount().mjava","sourceNew":"  public void testIntervalWithMincount() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n\n      long mincount_to_use = -1;\n      Object expected_mincount_bucket_val = null;\n\n      // without mincount\n      SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n          \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:3},{from:3, to:5}]\" +\n              subFacet + \" } }\"\n      );\n\n      QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        @SuppressWarnings({\"unchecked\"})\n        final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n        assertEquals(\"num buckets\", 2, buckets.size());\n\n        // upper is not included\n        assertBucket(\"bucket#0\", \"[1,3)\", modelVals(1,2), subFacetLimit, buckets.get(0));\n        assertBucket(\"bucket#1\", \"[3,5)\", modelVals(3,4), subFacetLimit, buckets.get(1));\n\n        // if we've made it this far, then our buckets match the model\n        // now use our buckets to pick a mincount to use based on the MIN(+1) count seen\n        long count0 = ((Number)buckets.get(0).get(\"count\")).longValue();\n        long count1 = ((Number)buckets.get(1).get(\"count\")).longValue();\n\n        mincount_to_use = 1 + Math.min(count0, count1);\n        if (count0 > count1) {\n          expected_mincount_bucket_val = buckets.get(0).get(\"val\");\n        } else if (count1 > count0) {\n          expected_mincount_bucket_val = buckets.get(1).get(\"val\");\n        }\n\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n\n      // with mincount\n      solrQuery = new SolrQuery(\n          \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n          \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:3},{from:3, to:5}]\" +\n              \",mincount:\" + mincount_to_use + subFacet + \" } }\"\n      );\n\n      rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        @SuppressWarnings({\"unchecked\"})\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        @SuppressWarnings({\"unchecked\"})\n        final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n        if (null == expected_mincount_bucket_val) {\n          assertEquals(\"num buckets\", 0, buckets.size());\n        } else {\n          assertEquals(\"num buckets\", 1, buckets.size());\n          final Object actualBucket = buckets.get(0);\n          if (expected_mincount_bucket_val.equals(\"[1,3)\")) {\n            assertBucket(\"bucket#0(0)\", \"[1,3)\", modelVals(1,2), subFacetLimit, actualBucket);\n          } else {\n            assertBucket(\"bucket#0(1)\", \"[3,5)\", modelVals(3,4), subFacetLimit, actualBucket);\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","sourceOld":"  public void testIntervalWithMincount() throws Exception {\n    for (boolean doSubFacet : Arrays.asList(false, true)) {\n      final Integer subFacetLimit = pickSubFacetLimit(doSubFacet);\n      final CharSequence subFacet = makeSubFacet(subFacetLimit);\n\n      long mincount_to_use = -1;\n      Object expected_mincount_bucket_val = null;\n\n      // without mincount\n      SolrQuery solrQuery = new SolrQuery(\n          \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n          \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:3},{from:3, to:5}]\" +\n              subFacet + \" } }\"\n      );\n\n      QueryResponse rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n        assertEquals(\"num buckets\", 2, buckets.size());\n\n        // upper is not included\n        assertBucket(\"bucket#0\", \"[1,3)\", modelVals(1,2), subFacetLimit, buckets.get(0));\n        assertBucket(\"bucket#1\", \"[3,5)\", modelVals(3,4), subFacetLimit, buckets.get(1));\n\n        // if we've made it this far, then our buckets match the model\n        // now use our buckets to pick a mincount to use based on the MIN(+1) count seen\n        long count0 = ((Number)buckets.get(0).get(\"count\")).longValue();\n        long count1 = ((Number)buckets.get(1).get(\"count\")).longValue();\n\n        mincount_to_use = 1 + Math.min(count0, count1);\n        if (count0 > count1) {\n          expected_mincount_bucket_val = buckets.get(0).get(\"val\");\n        } else if (count1 > count0) {\n          expected_mincount_bucket_val = buckets.get(1).get(\"val\");\n        }\n\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n\n      // with mincount\n      solrQuery = new SolrQuery(\n          \"q\", \"*:*\", \"rows\", \"0\", \"json.facet\",\n          \"{ foo:{ type:range, field:\" + INT_FIELD + \" ranges:[{from:1, to:3},{from:3, to:5}]\" +\n              \",mincount:\" + mincount_to_use + subFacet + \" } }\"\n      );\n\n      rsp = cluster.getSolrClient().query(solrQuery);\n      try {\n        final NamedList<Object> foo = ((NamedList<NamedList<Object>>)rsp.getResponse().get(\"facets\")).get(\"foo\");\n        final List<NamedList<Object>> buckets = (List<NamedList<Object>>) foo.get(\"buckets\");\n\n        if (null == expected_mincount_bucket_val) {\n          assertEquals(\"num buckets\", 0, buckets.size());\n        } else {\n          assertEquals(\"num buckets\", 1, buckets.size());\n          final Object actualBucket = buckets.get(0);\n          if (expected_mincount_bucket_val.equals(\"[1,3)\")) {\n            assertBucket(\"bucket#0(0)\", \"[1,3)\", modelVals(1,2), subFacetLimit, actualBucket);\n          } else {\n            assertBucket(\"bucket#0(1)\", \"[3,5)\", modelVals(3,4), subFacetLimit, actualBucket);\n          }\n        }\n      } catch (AssertionError|RuntimeException ae) {\n        throw new AssertionError(solrQuery.toString() + \" -> \" + rsp.toString() + \" ===> \" + ae.getMessage(), ae);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45"],"a1b7f1cd68896fbbc518d7cc9ce49cb9cda9ab45":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}