{"path":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#isFunctionallyIdentical(Plane).mjava","commits":[{"id":"bc5a9298580a352dd8deee6537b9a544a4af8bae","date":1522510952,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#isFunctionallyIdentical(Plane).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns true if this plane and the other plane are functionally identical within the margin of error.\n   * Functionally identical means that the planes are so close to parallel that many aspects of planar math,\n   * like intersections, no longer have answers to within the required precision.\n   * @param p is the plane to compare against.\n   * @return true if the planes are functionally identical.\n   */\n  public boolean isFunctionallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  That's basically finding\n    // out if the magnitude of the cross-product is \"zero\".\n    final double cross1 = this.y * p.z - this.z * p.y;\n    final double cross2 = this.z * p.x - this.x * p.z;\n    final double cross3 = this.x * p.y - this.y * p.x;\n    //System.out.println(\"cross product magnitude = \"+(cross1 * cross1 + cross2 * cross2 + cross3 * cross3));\n    // Should be MINIMUM_RESOLUTION_SQUARED, but that gives us planes that are *almost* parallel, and those are problematic too,\n    // so we have a tighter constraint on parallelism in this method.\n    if (cross1 * cross1 + cross2 * cross2 + cross3 * cross3 >= MINIMUM_RESOLUTION) {\n      return false;\n    }\n    \n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9bb74de4f42dc63eb721e88c6475fd3368888df9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9bb74de4f42dc63eb721e88c6475fd3368888df9","date":1533540851,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#isFunctionallyIdentical(Plane).mjava","pathOld":"lucene/spatial3d/src/java/org/apache/lucene/spatial3d/geom/Plane#isFunctionallyIdentical(Plane).mjava","sourceNew":"  /**\n   * Returns true if this plane and the other plane are functionally identical within the margin of error.\n   * Functionally identical means that the planes are so close to parallel that many aspects of planar math,\n   * like intersections, no longer have answers to within the required precision.\n   * @param p is the plane to compare against.\n   * @return true if the planes are functionally identical.\n   */\n  public boolean isFunctionallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  That's basically finding\n    // out if the magnitude of the cross-product is \"zero\".\n    final double cross1 = this.y * p.z - this.z * p.y;\n    final double cross2 = this.z * p.x - this.x * p.z;\n    final double cross3 = this.x * p.y - this.y * p.x;\n    //System.out.println(\"cross product magnitude = \"+(cross1 * cross1 + cross2 * cross2 + cross3 * cross3));\n    // Should be MINIMUM_RESOLUTION_SQUARED, but that gives us planes that are *almost* parallel, and those are problematic too,\n    // so we have a tighter constraint on parallelism in this method.\n    if (cross1 * cross1 + cross2 * cross2 + cross3 * cross3 >= 5 * MINIMUM_RESOLUTION) {\n      return false;\n    }\n    \n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","sourceOld":"  /**\n   * Returns true if this plane and the other plane are functionally identical within the margin of error.\n   * Functionally identical means that the planes are so close to parallel that many aspects of planar math,\n   * like intersections, no longer have answers to within the required precision.\n   * @param p is the plane to compare against.\n   * @return true if the planes are functionally identical.\n   */\n  public boolean isFunctionallyIdentical(final Plane p) {\n    // We can get the correlation by just doing a parallel plane check.  That's basically finding\n    // out if the magnitude of the cross-product is \"zero\".\n    final double cross1 = this.y * p.z - this.z * p.y;\n    final double cross2 = this.z * p.x - this.x * p.z;\n    final double cross3 = this.x * p.y - this.y * p.x;\n    //System.out.println(\"cross product magnitude = \"+(cross1 * cross1 + cross2 * cross2 + cross3 * cross3));\n    // Should be MINIMUM_RESOLUTION_SQUARED, but that gives us planes that are *almost* parallel, and those are problematic too,\n    // so we have a tighter constraint on parallelism in this method.\n    if (cross1 * cross1 + cross2 * cross2 + cross3 * cross3 >= MINIMUM_RESOLUTION) {\n      return false;\n    }\n    \n    // Now, see whether the parallel planes are in fact on top of one another.\n    // The math:\n    // We need a single point that fulfills:\n    // Ax + By + Cz + D = 0\n    // Pick:\n    // x0 = -(A * D) / (A^2 + B^2 + C^2)\n    // y0 = -(B * D) / (A^2 + B^2 + C^2)\n    // z0 = -(C * D) / (A^2 + B^2 + C^2)\n    // Check:\n    // A (x0) + B (y0) + C (z0) + D =? 0\n    // A (-(A * D) / (A^2 + B^2 + C^2)) + B (-(B * D) / (A^2 + B^2 + C^2)) + C (-(C * D) / (A^2 + B^2 + C^2)) + D ?= 0\n    // -D [ A^2 / (A^2 + B^2 + C^2) + B^2 / (A^2 + B^2 + C^2) + C^2 / (A^2 + B^2 + C^2)] + D ?= 0\n    // Yes.\n    final double denom = 1.0 / (p.x * p.x + p.y * p.y + p.z * p.z);\n    return evaluateIsZero(-p.x * p.D * denom, -p.y * p.D * denom, -p.z * p.D * denom);\n  }\n\n","bugFix":["bc5a9298580a352dd8deee6537b9a544a4af8bae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc5a9298580a352dd8deee6537b9a544a4af8bae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb74de4f42dc63eb721e88c6475fd3368888df9":["bc5a9298580a352dd8deee6537b9a544a4af8bae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb74de4f42dc63eb721e88c6475fd3368888df9"]},"commit2Childs":{"bc5a9298580a352dd8deee6537b9a544a4af8bae":["9bb74de4f42dc63eb721e88c6475fd3368888df9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc5a9298580a352dd8deee6537b9a544a4af8bae"],"9bb74de4f42dc63eb721e88c6475fd3368888df9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}