{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","commits":[{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    \n    lock.lockInterruptibly();\n    try {\n      final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n        (nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n      synchronized (replicas) {\n        for (int i = 0; i < replicas.size(); i++) {\n          if (coreNodeName.equals(replicas.get(i).getName())) {\n            ReplicaInfo ri = replicas.remove(i);\n            colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n            collectionsStatesRef.set(null);\n\n            opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n            // update the number of cores in node values, if node is live\n            if (liveNodes.contains(nodeId)) {\n              Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n              if (cores == null || cores == 0) {\n                throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n              Number disk = (Number)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n              if (disk == null || disk.doubleValue() == 0.0) {\n                throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n              }\n              if (ri.getVariable(Type.CORE_IDX.metricsAttribute) == null) {\n                throw new RuntimeException(\"Missing replica size: \" + ri);\n              }\n              long replicaSize = ((Number)ri.getVariable(Type.CORE_IDX.metricsAttribute)).longValue();\n              Number replicaSizeGB = (Number)Type.CORE_IDX.convertVal(replicaSize);\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk.doubleValue() + replicaSizeGB.doubleValue());\n            }\n            log.trace(\"-- simRemoveReplica {}\", ri);\n            simRunLeaderElection(ri.getCollection(), ri.getShard(), true);\n                                 \n            return;\n          }\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    \n    lock.lockInterruptibly();\n    try {\n      final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n        (nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n      synchronized (replicas) {\n        for (int i = 0; i < replicas.size(); i++) {\n          if (coreNodeName.equals(replicas.get(i).getName())) {\n            ReplicaInfo ri = replicas.remove(i);\n            colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n            collectionsStatesRef.set(null);\n\n            opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n            // update the number of cores in node values, if node is live\n            if (liveNodes.contains(nodeId)) {\n              Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n              if (cores == null || cores == 0) {\n                throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n              Integer disk = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n              if (disk == null || disk == 0) {\n                throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk + 1);\n            }\n            log.trace(\"-- simRemoveReplica {}\", ri);\n            simRunLeaderElection(ri.getCollection(), ri.getShard(), true);\n                                 \n            return;\n          }\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simRemoveReplica(String,String).mjava","sourceNew":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String collection, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    \n    lock.lockInterruptibly();\n    try {\n      final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n        (nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n      synchronized (replicas) {\n        for (int i = 0; i < replicas.size(); i++) {\n          if (collection.equals(replicas.get(i).getCollection()) && coreNodeName.equals(replicas.get(i).getName())) {\n            ReplicaInfo ri = replicas.remove(i);\n            colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n            collectionsStatesRef.set(null);\n\n            opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n            // update the number of cores in node values, if node is live\n            if (liveNodes.contains(nodeId)) {\n              Number cores = (Number)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n              if (cores == null || cores.intValue() == 0) {\n                throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores.intValue() - 1);\n              Number disk = (Number)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n              if (disk == null || disk.doubleValue() == 0.0) {\n                throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n              }\n              if (ri.getVariable(Type.CORE_IDX.metricsAttribute) == null) {\n                throw new RuntimeException(\"Missing replica size: \" + ri);\n              }\n              long replicaSize = ((Number)ri.getVariable(Type.CORE_IDX.metricsAttribute)).longValue();\n              Number replicaSizeGB = (Number)Type.CORE_IDX.convertVal(replicaSize);\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk.doubleValue() + replicaSizeGB.doubleValue());\n            }\n            log.trace(\"-- simRemoveReplica {}\", ri);\n            simRunLeaderElection(ri.getCollection(), ri.getShard(), true);\n                                 \n            return;\n          }\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Remove replica.\n   * @param nodeId node id\n   * @param coreNodeName coreNodeName\n   */\n  public void simRemoveReplica(String nodeId, String coreNodeName) throws Exception {\n    ensureNotClosed();\n    \n    lock.lockInterruptibly();\n    try {\n      final List<ReplicaInfo> replicas = nodeReplicaMap.computeIfAbsent\n        (nodeId, Utils.NEW_SYNCHRONIZED_ARRAYLIST_FUN);\n      synchronized (replicas) {\n        for (int i = 0; i < replicas.size(); i++) {\n          if (coreNodeName.equals(replicas.get(i).getName())) {\n            ReplicaInfo ri = replicas.remove(i);\n            colShardReplicaMap.computeIfAbsent(ri.getCollection(), c -> new ConcurrentHashMap<>())\n              .computeIfAbsent(ri.getShard(), s -> new ArrayList<>())\n              .remove(ri);\n            collectionsStatesRef.set(null);\n\n            opDelay(ri.getCollection(), CollectionParams.CollectionAction.DELETEREPLICA.name());\n\n            // update the number of cores in node values, if node is live\n            if (liveNodes.contains(nodeId)) {\n              Integer cores = (Integer)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.CORES);\n              if (cores == null || cores == 0) {\n                throw new Exception(\"Unexpected value of 'cores' (\" + cores + \") on node: \" + nodeId);\n              }\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.CORES, cores - 1);\n              Number disk = (Number)cloudManager.getSimNodeStateProvider().simGetNodeValue(nodeId, ImplicitSnitch.DISK);\n              if (disk == null || disk.doubleValue() == 0.0) {\n                throw new Exception(\"Unexpected value of 'freedisk' (\" + disk + \") on node: \" + nodeId);\n              }\n              if (ri.getVariable(Type.CORE_IDX.metricsAttribute) == null) {\n                throw new RuntimeException(\"Missing replica size: \" + ri);\n              }\n              long replicaSize = ((Number)ri.getVariable(Type.CORE_IDX.metricsAttribute)).longValue();\n              Number replicaSizeGB = (Number)Type.CORE_IDX.convertVal(replicaSize);\n              cloudManager.getSimNodeStateProvider().simSetNodeValue(nodeId, ImplicitSnitch.DISK, disk.doubleValue() + replicaSizeGB.doubleValue());\n            }\n            log.trace(\"-- simRemoveReplica {}\", ri);\n            simRunLeaderElection(ri.getCollection(), ri.getShard(), true);\n                                 \n            return;\n          }\n        }\n      }\n      throw new Exception(\"Replica \" + coreNodeName + \" not found on node \" + nodeId);\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["edf5b262a72d10530eb2f01dc8f19060355b213e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}