{"path":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","commits":[{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 2)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // stop a couple nodes\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    // wait for leaders to settle out\n    waitForState(\"Timed out waiting for leader elections\", \"halfdeletedcollection2\", (n, c) -> {\n      for (Slice slice : c) {\n        if (slice.getLeader() == null)\n          return false;\n        if (slice.getLeader().isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67adda3a238cbbd74833e13edb113850343a8331","date":1477661397,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","sourceNew":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 3)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // stop a couple nodes\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    // wait for leaders to settle out\n    waitForState(\"Timed out waiting for leader elections\", \"halfdeletedcollection2\", (n, c) -> {\n      for (Slice slice : c) {\n        if (slice.getLeader() == null)\n          return false;\n        if (slice.getLeader().isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 2)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // stop a couple nodes\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    // wait for leaders to settle out\n    waitForState(\"Timed out waiting for leader elections\", \"halfdeletedcollection2\", (n, c) -> {\n      for (Slice slice : c) {\n        if (slice.getLeader() == null)\n          return false;\n        if (slice.getLeader().isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 3)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // stop a couple nodes\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    // wait for leaders to settle out\n    waitForState(\"Timed out waiting for leader elections\", \"halfdeletedcollection2\", (n, c) -> {\n      for (Slice slice : c) {\n        if (slice.getLeader() == null)\n          return false;\n        if (slice.getLeader().isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","sourceNew":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 3)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"halfdeletedcollection2\", 60, TimeUnit.SECONDS, 4, 12);\n    \n    // stop a couple nodes\n    JettySolrRunner j1 = cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    JettySolrRunner j2 = cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    cluster.waitForJettyToStop(j1);\n    cluster.waitForJettyToStop(j2);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 3)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    // stop a couple nodes\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    // wait for leaders to settle out\n    waitForState(\"Timed out waiting for leader elections\", \"halfdeletedcollection2\", (n, c) -> {\n      for (Slice slice : c) {\n        if (slice.getLeader() == null)\n          return false;\n        if (slice.getLeader().isActive(n) == false)\n          return false;\n      }\n      return true;\n    });\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestDeleteCollectionOnDownNodes#deleteCollectionWithDownNodes().mjava","sourceNew":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 3)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"halfdeletedcollection2\", 60, TimeUnit.SECONDS, 4, 12);\n    \n    // stop a couple nodes\n    JettySolrRunner j1 = cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    JettySolrRunner j2 = cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    cluster.waitForJettyToStop(j1);\n    cluster.waitForJettyToStop(j2);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void deleteCollectionWithDownNodes() throws Exception {\n\n    CollectionAdminRequest.createCollection(\"halfdeletedcollection2\", \"conf\", 4, 3)\n        .setMaxShardsPerNode(3)\n        .process(cluster.getSolrClient());\n\n    cluster.waitForActiveCollection(\"halfdeletedcollection2\", 60, TimeUnit.SECONDS, 4, 12);\n    \n    // stop a couple nodes\n    JettySolrRunner j1 = cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n    JettySolrRunner j2 = cluster.stopJettySolrRunner(cluster.getRandomJetty(random()));\n\n    cluster.waitForJettyToStop(j1);\n    cluster.waitForJettyToStop(j2);\n\n    // delete the collection\n    CollectionAdminRequest.deleteCollection(\"halfdeletedcollection2\").process(cluster.getSolrClient());\n    waitForState(\"Timed out waiting for collection to be deleted\", \"halfdeletedcollection2\", (n, c) -> c == null);\n\n    assertFalse(\"Still found collection that should be gone\",\n        cluster.getSolrClient().getZkStateReader().getClusterState().hasCollection(\"halfdeletedcollection2\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","67adda3a238cbbd74833e13edb113850343a8331"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["67adda3a238cbbd74833e13edb113850343a8331"],"67adda3a238cbbd74833e13edb113850343a8331":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["67adda3a238cbbd74833e13edb113850343a8331"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"67adda3a238cbbd74833e13edb113850343a8331":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4efd3fffdd7acd625bb88e455c8097e17f75735","59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}