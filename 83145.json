{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldInfosEquals(String,IndexReader,IndexReader).mjava","commits":[{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldInfosEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldInfos(IndexReader,IndexReader).mjava","sourceNew":"  public void assertFieldInfosEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<String>();\n    TreeSet<String> right = new TreeSet<String>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","sourceOld":"  public void assertFieldInfos(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<String>();\n    TreeSet<String> right = new TreeSet<String>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldInfosEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldInfosEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertFieldInfosEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<>();\n    TreeSet<String> right = new TreeSet<>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","sourceOld":"  public void assertFieldInfosEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<String>();\n    TreeSet<String> right = new TreeSet<String>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldInfosEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldInfosEquals(String,IndexReader,IndexReader).mjava","sourceNew":"  public void assertFieldInfosEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos leftInfos = FieldInfos.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = FieldInfos.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<>();\n    TreeSet<String> right = new TreeSet<>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","sourceOld":"  public void assertFieldInfosEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<>();\n    TreeSet<String> right = new TreeSet<>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["51c8450b3b616b6777f722ff4083c0bf946381a2"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}