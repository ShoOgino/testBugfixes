{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testFieldSpecificHighlighting().mjava","sourceNew":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery.Builder query = new BooleanQuery.Builder();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query.build(), FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query.build(), \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query.build(), null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query.build());\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","sourceOld":"  public void testFieldSpecificHighlighting() throws Exception {\n    TestHighlightRunner helper = new TestHighlightRunner() {\n\n      @Override\n      public void run() throws Exception {\n        String docMainText = \"fred is one of the people\";\n\n        BooleanQuery query = new BooleanQuery();\n        query.add(new TermQuery(new Term(FIELD_NAME, \"fred\")), Occur.SHOULD);\n        query.add(new TermQuery(new Term(\"category\", \"people\")), Occur.SHOULD);\n\n        // highlighting respects fieldnames used in query\n\n        Scorer fieldSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldSpecificScorer = new QueryScorer(query, FIELD_NAME);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldSpecificScorer = new QueryTermScorer(query, \"contents\");\n        }\n        Highlighter fieldSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldSpecificScorer);\n        fieldSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        String result = fieldSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the people\");\n\n        // highlighting does not respect fieldnames used in query\n        Scorer fieldInSpecificScorer = null;\n        if (mode == TestHighlightRunner.QUERY) {\n          fieldInSpecificScorer = new QueryScorer(query, null);\n        } else if (mode == TestHighlightRunner.QUERY_TERM) {\n          fieldInSpecificScorer = new QueryTermScorer(query);\n        }\n\n        Highlighter fieldInSpecificHighlighter = new Highlighter(new SimpleHTMLFormatter(),\n            fieldInSpecificScorer);\n        fieldInSpecificHighlighter.setTextFragmenter(new NullFragmenter());\n        result = fieldInSpecificHighlighter.getBestFragment(analyzer, FIELD_NAME, docMainText);\n        assertEquals(\"Should match\", result, \"<B>fred</B> is one of the <B>people</B>\");\n\n        reader.close();\n      }\n    };\n\n    helper.start();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}