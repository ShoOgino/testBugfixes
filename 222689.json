{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","commits":[{"id":"e1f693ce507c40f77e3a92acd16c6b79cdd730e4","date":1323036169,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  // nocommit: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  // nocommit: remove deletions from SR\n  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6c554455db6752562dfe09614cdf3fd06062c3","date":1323301343,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  // nocommit: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges(Map[String,String]).mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","sourceOld":"  private synchronized void commitChanges(Map<String,String> commitUserData) throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    if (normsDirty) {               // re-write norms\n      si.initNormGen();\n      for (final SegmentNorms norm : norms.values()) {\n        if (norm.dirty) {\n          norm.reWrite(si);\n        }\n      }\n    }\n    liveDocsDirty = false;\n    normsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781537683b56c6c5aad3b1046f00daf1c7ea93ae","date":1323968781,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    si.advanceDelGen();\n\n    assert liveDocs.length() == si.docCount;\n\n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    final String delFileName = si.getDelFileName();\n    boolean success = false;\n    try {\n      liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          directory().deleteFile(delFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    si.setDelCount(si.getDelCount()+pendingDeleteCount);\n    pendingDeleteCount = 0;\n    assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    hasChanges = false;\n  }\n\n","sourceOld":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    if (liveDocsDirty) {               // re-write deleted\n      si.advanceDelGen();\n\n      assert liveDocs.length() == si.docCount;\n\n      // We can write directly to the actual name (vs to a\n      // .tmp & renaming it) because the file is not live\n      // until segments file is written:\n      final String delFileName = si.getDelFileName();\n      boolean success = false;\n      try {\n        liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n        success = true;\n      } finally {\n        if (!success) {\n          try {\n            directory().deleteFile(delFileName);\n          } catch (Throwable t) {\n            // suppress this so we keep throwing the\n            // original exception\n          }\n        }\n      }\n      si.setDelCount(si.getDelCount()+pendingDeleteCount);\n      pendingDeleteCount = 0;\n      assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    } else {\n      assert pendingDeleteCount == 0;\n    }\n\n    liveDocsDirty = false;\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#commitChanges().mjava","sourceNew":null,"sourceOld":"  // TODO: remove deletions from SR\n  private synchronized void commitChanges() throws IOException {\n    si.advanceDelGen();\n\n    assert liveDocs.length() == si.docCount;\n\n    // We can write directly to the actual name (vs to a\n    // .tmp & renaming it) because the file is not live\n    // until segments file is written:\n    final String delFileName = si.getDelFileName();\n    boolean success = false;\n    try {\n      liveDocs.write(directory(), delFileName, IOContext.DEFAULT);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          directory().deleteFile(delFileName);\n        } catch (Throwable t) {\n          // suppress this so we keep throwing the\n          // original exception\n        }\n      }\n    }\n    si.setDelCount(si.getDelCount()+pendingDeleteCount);\n    pendingDeleteCount = 0;\n    assert (maxDoc()-liveDocs.count()) == si.getDelCount(): \"delete count mismatch during commit: info=\" + si.getDelCount() + \" vs BitVector=\" + (maxDoc()-liveDocs.count());\n    hasChanges = false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7d6c554455db6752562dfe09614cdf3fd06062c3"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"]},"commit2Childs":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"e1f693ce507c40f77e3a92acd16c6b79cdd730e4":["7d6c554455db6752562dfe09614cdf3fd06062c3"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e1f693ce507c40f77e3a92acd16c6b79cdd730e4","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["781537683b56c6c5aad3b1046f00daf1c7ea93ae","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}