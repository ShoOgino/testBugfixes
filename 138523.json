{"path":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = new RAMDirectory();\n    Directory taxoDir = new RAMDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new LuceneTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new LuceneTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = new RAMDirectory();\n    Directory taxoDir = new RAMDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new LuceneTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new LuceneTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new LuceneTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new LuceneTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/params/MultiIteratorsPerCLParamsTest#doTestCLParamMultiIteratorsByRequest(boolean).mjava","sourceNew":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","sourceOld":"  private void doTestCLParamMultiIteratorsByRequest(boolean cacheCLI) throws Exception,\n      CorruptIndexException, IOException {\n    // Create a CLP which generates different CLIs according to the\n    // FacetRequest's dimension\n    CategoryListParams clp = new CategoryListParams();\n    FacetIndexingParams iParams = new DefaultFacetIndexingParams(clp);\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    populateIndex(iParams, indexDir, taxoDir);\n\n    TaxonomyReader taxo = new DirectoryTaxonomyReader(taxoDir);\n    IndexReader reader = IndexReader.open(indexDir);\n\n    CategoryListCache clCache = null;\n    if (cacheCLI) {\n      // caching the iteratorr, so:\n      // 1: create the cached iterator, using original params\n      clCache = new CategoryListCache();\n      clCache.loadAndRegister(clp, reader, taxo, iParams);\n    }\n    \n    ScoredDocIDs allDocs = ScoredDocIdsUtils\n        .createAllDocsScoredDocIDs(reader);\n\n    // Search index with 'author' should filter ONLY ordinals whose parent\n    // is 'author'\n    countForbiddenDimension = \"date\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"author\", 5, 5);\n\n    // Search index with 'date' should filter ONLY ordinals whose parent is\n    // 'date'\n    countForbiddenDimension = \"author\";\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, \"date\", 5, 2);\n\n    // Search index with both 'date' and 'author'\n    countForbiddenDimension = null;\n    validateFacetedSearch(iParams, taxo, reader, clCache, allDocs, new String[] {\n            \"author\", \"date\" }, new int[] { 5, 5 }, new int[] { 5, 2 });\n    taxo.close();\n    reader.close();\n    indexDir.close();\n    taxoDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}