{"path":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","commits":[{"id":"071ff465fbf5c9c916ccaaf73bb8f2112a26de61","date":1092348577,"type":0,"author":"Mark Harwood","isMerge":false,"pathNew":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testGetTextFragments() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString stringResults[] = highlighter.getBestFragments(tokenStream,text,10);\n\n\t\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tTextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream,text,true,10);\n\n\t\t\tassertTrue(\"Failed to find correct number of text Fragments: \" + \n\t\t\t\tfragmentResults.length + \" vs \"+ stringResults.length, fragmentResults.length==stringResults.length);\n\t\t\tfor (int j = 0; j < stringResults.length; j++) \n\t\t\t{\n\t\t\t\tSystem.out.println(fragmentResults[j]);\n\t\t\t\tassertTrue(\"Failed to find same text Fragments: \" + \n\t\t\t\t\tfragmentResults[j] + \" found\", fragmentResults[j].toString().equals(stringResults[j]));\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","pathOld":"sandbox/contributions/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testGetTextFragments().mjava","sourceNew":"\tpublic void testGetTextFragments() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString stringResults[] = highlighter.getBestFragments(tokenStream,text,10);\n\n\t\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tTextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream,text,true,10);\n\n\t\t\tassertTrue(\"Failed to find correct number of text Fragments: \" + \n\t\t\t\tfragmentResults.length + \" vs \"+ stringResults.length, fragmentResults.length==stringResults.length);\n\t\t\tfor (int j = 0; j < stringResults.length; j++) \n\t\t\t{\n\t\t\t\tSystem.out.println(fragmentResults[j]);\n\t\t\t\tassertTrue(\"Failed to find same text Fragments: \" + \n\t\t\t\t\tfragmentResults[j] + \" found\", fragmentResults[j].toString().equals(stringResults[j]));\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n","sourceOld":"\tpublic void testGetTextFragments() throws Exception\n\t{\n\t\tdoSearching(\"Kennedy\");\n\t\tHighlighter highlighter =\n\t\t\tnew Highlighter(this,new QueryScorer(query));\n\t\thighlighter.setTextFragmenter(new SimpleFragmenter(20));\n\n\t\tfor (int i = 0; i < hits.length(); i++)\n\t\t{\n\t\t\tString text = hits.doc(i).get(FIELD_NAME);\n\t\t\tTokenStream tokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\n\t\t\tString stringResults[] = highlighter.getBestFragments(tokenStream,text,10);\n\n\t\t\ttokenStream=analyzer.tokenStream(FIELD_NAME,new StringReader(text));\n\t\t\tTextFragment fragmentResults[] = highlighter.getBestTextFragments(tokenStream,text,true,10);\n\n\t\t\tassertTrue(\"Failed to find correct number of text Fragments: \" + \n\t\t\t\tfragmentResults.length + \" vs \"+ stringResults.length, fragmentResults.length==stringResults.length);\n\t\t\tfor (int j = 0; j < stringResults.length; j++) \n\t\t\t{\n\t\t\t\tSystem.out.println(fragmentResults[j]);\n\t\t\t\tassertTrue(\"Failed to find same text Fragments: \" + \n\t\t\t\t\tfragmentResults[j] + \" found\", fragmentResults[j].toString().equals(stringResults[j]));\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["071ff465fbf5c9c916ccaaf73bb8f2112a26de61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"071ff465fbf5c9c916ccaaf73bb8f2112a26de61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["071ff465fbf5c9c916ccaaf73bb8f2112a26de61"],"071ff465fbf5c9c916ccaaf73bb8f2112a26de61":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}