{"path":"lucene/core/src/java/org/apache/lucene/search/LeafCollector#collect(int).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LeafCollector#collect(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Collector#collect(int).mjava","sourceNew":"  /**\n   * Called once for every document matching a query, with the unbased document\n   * number.\n   * <p>Note: The collection of the current segment can be terminated by throwing\n   * a {@link CollectionTerminatedException}. In this case, the last docs of the\n   * current {@link AtomicReaderContext} will be skipped and {@link IndexSearcher}\n   * will swallow the exception and continue collection with the next leaf.\n   * <p>\n   * Note: This is called in an inner search loop. For good search performance,\n   * implementations of this method should not call {@link IndexSearcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every hit.\n   * Doing so can slow searches by an order of magnitude or more.\n   */\n  void collect(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Called once for every document matching a query, with the unbased document\n   * number.\n   * <p>Note: The collection of the current segment can be terminated by throwing\n   * a {@link CollectionTerminatedException}. In this case, the last docs of the\n   * current {@link AtomicReaderContext} will be skipped and {@link IndexSearcher}\n   * will swallow the exception and continue collection with the next leaf.\n   * <p>\n   * Note: This is called in an inner search loop. For good search performance,\n   * implementations of this method should not call {@link IndexSearcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every hit.\n   * Doing so can slow searches by an order of magnitude or more.\n   */\n  public abstract void collect(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LeafCollector#collect(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/Collector#collect(int).mjava","sourceNew":"  /**\n   * Called once for every document matching a query, with the unbased document\n   * number.\n   * <p>Note: The collection of the current segment can be terminated by throwing\n   * a {@link CollectionTerminatedException}. In this case, the last docs of the\n   * current {@link AtomicReaderContext} will be skipped and {@link IndexSearcher}\n   * will swallow the exception and continue collection with the next leaf.\n   * <p>\n   * Note: This is called in an inner search loop. For good search performance,\n   * implementations of this method should not call {@link IndexSearcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every hit.\n   * Doing so can slow searches by an order of magnitude or more.\n   */\n  void collect(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Called once for every document matching a query, with the unbased document\n   * number.\n   * <p>Note: The collection of the current segment can be terminated by throwing\n   * a {@link CollectionTerminatedException}. In this case, the last docs of the\n   * current {@link AtomicReaderContext} will be skipped and {@link IndexSearcher}\n   * will swallow the exception and continue collection with the next leaf.\n   * <p>\n   * Note: This is called in an inner search loop. For good search performance,\n   * implementations of this method should not call {@link IndexSearcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every hit.\n   * Doing so can slow searches by an order of magnitude or more.\n   */\n  public abstract void collect(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/LeafCollector#collect(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/LeafCollector#collect(int).mjava","sourceNew":"  /**\n   * Called once for every document matching a query, with the unbased document\n   * number.\n   * <p>Note: The collection of the current segment can be terminated by throwing\n   * a {@link CollectionTerminatedException}. In this case, the last docs of the\n   * current {@link org.apache.lucene.index.LeafReaderContext} will be skipped and {@link IndexSearcher}\n   * will swallow the exception and continue collection with the next leaf.\n   * <p>\n   * Note: This is called in an inner search loop. For good search performance,\n   * implementations of this method should not call {@link IndexSearcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every hit.\n   * Doing so can slow searches by an order of magnitude or more.\n   */\n  void collect(int doc) throws IOException;\n\n","sourceOld":"  /**\n   * Called once for every document matching a query, with the unbased document\n   * number.\n   * <p>Note: The collection of the current segment can be terminated by throwing\n   * a {@link CollectionTerminatedException}. In this case, the last docs of the\n   * current {@link AtomicReaderContext} will be skipped and {@link IndexSearcher}\n   * will swallow the exception and continue collection with the next leaf.\n   * <p>\n   * Note: This is called in an inner search loop. For good search performance,\n   * implementations of this method should not call {@link IndexSearcher#doc(int)} or\n   * {@link org.apache.lucene.index.IndexReader#document(int)} on every hit.\n   * Doing so can slow searches by an order of magnitude or more.\n   */\n  void collect(int doc) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["ae73da626f97850c922c42736f808d0378e165f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}