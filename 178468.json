{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","commits":[{"id":"4f8633b56150a205774ee3e2adf1452a81b0d904","date":1376926002,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void decodeTerm(long[] empty, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n    assert empty.length == 0;\n    termState.absolute = termState.absolute || absolute;\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    // term dict have no chance to init this\n    // nocommit: nuke this?\n    if (termState.termBlockOrd == 0) {  \n      termState.wrappedTermState.termBlockOrd = 0;\n    }\n    if (count <= maxPositions) {\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = in.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      in.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n      termState.absolute = absolute ? true : termState.absolute;\n    } else {\n      //System.out.println(\"  not inlined\");\n      final int longsSize = fields.get(fieldInfo.number);\n      if (termState.longs == null) {\n        termState.longs = new long[longsSize];\n      } else {\n        assert termState.longs.length == longsSize;\n      }\n      for (int i = 0; i < longsSize; i++) {\n        termState.longs[i] = in.readVLong();\n      }\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.decodeTerm(termState.longs, in, fieldInfo, termState.wrappedTermState, termState.absolute);\n      termState.wrappedTermState.termBlockOrd++;\n      termState.absolute = false;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d2e085a44254f51e49d03f212aff0ad5a99052a","date":1376969443,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":"  @Override\n  public void decodeTerm(long[] empty, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n    assert empty.length == 0;\n    termState.absolute = termState.absolute || absolute;\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = in.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      in.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n      termState.absolute = termState.absolute || absolute;\n    } else {\n      //System.out.println(\"  not inlined\");\n      final int longsSize = fields == null ? 0 : fields.get(fieldInfo.number);\n      if (termState.longs == null) {\n        termState.longs = new long[longsSize];\n      }\n      for (int i = 0; i < longsSize; i++) {\n        termState.longs[i] = in.readVLong();\n      }\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.decodeTerm(termState.longs, in, fieldInfo, termState.wrappedTermState, termState.absolute);\n      termState.absolute = false;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decodeTerm(long[] empty, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n    assert empty.length == 0;\n    termState.absolute = termState.absolute || absolute;\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    // term dict have no chance to init this\n    // nocommit: nuke this?\n    if (termState.termBlockOrd == 0) {  \n      termState.wrappedTermState.termBlockOrd = 0;\n    }\n    if (count <= maxPositions) {\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = in.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      in.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n      termState.absolute = absolute ? true : termState.absolute;\n    } else {\n      //System.out.println(\"  not inlined\");\n      final int longsSize = fields.get(fieldInfo.number);\n      if (termState.longs == null) {\n        termState.longs = new long[longsSize];\n      } else {\n        assert termState.longs.length == longsSize;\n      }\n      for (int i = 0; i < longsSize; i++) {\n        termState.longs[i] = in.readVLong();\n      }\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.decodeTerm(termState.longs, in, fieldInfo, termState.wrappedTermState, termState.absolute);\n      termState.wrappedTermState.termBlockOrd++;\n      termState.absolute = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6904bcc97d8afa27bd72ee29ac01e525e327ad4","date":1377958787,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempPulsingPostingsReader#decodeTerm(long[],DataInput,FieldInfo,BlockTermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void decodeTerm(long[] empty, DataInput in, FieldInfo fieldInfo, BlockTermState _termState, boolean absolute) throws IOException {\n    //System.out.println(\"PR nextTerm\");\n    PulsingTermState termState = (PulsingTermState) _termState;\n    assert empty.length == 0;\n    termState.absolute = termState.absolute || absolute;\n    // if we have positions, its total TF, otherwise its computed based on docFreq.\n    long count = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) >= 0 ? termState.totalTermFreq : termState.docFreq;\n    //System.out.println(\"  count=\" + count + \" threshold=\" + maxPositions);\n\n    if (count <= maxPositions) {\n      // Inlined into terms dict -- just read the byte[] blob in,\n      // but don't decode it now (we only decode when a DocsEnum\n      // or D&PEnum is pulled):\n      termState.postingsSize = in.readVInt();\n      if (termState.postings == null || termState.postings.length < termState.postingsSize) {\n        termState.postings = new byte[ArrayUtil.oversize(termState.postingsSize, 1)];\n      }\n      // TODO: sort of silly to copy from one big byte[]\n      // (the blob holding all inlined terms' blobs for\n      // current term block) into another byte[] (just the\n      // blob for this term)...\n      in.readBytes(termState.postings, 0, termState.postingsSize);\n      //System.out.println(\"  inlined bytes=\" + termState.postingsSize);\n      termState.absolute = termState.absolute || absolute;\n    } else {\n      //System.out.println(\"  not inlined\");\n      final int longsSize = fields == null ? 0 : fields.get(fieldInfo.number);\n      if (termState.longs == null) {\n        termState.longs = new long[longsSize];\n      }\n      for (int i = 0; i < longsSize; i++) {\n        termState.longs[i] = in.readVLong();\n      }\n      termState.postingsSize = -1;\n      termState.wrappedTermState.docFreq = termState.docFreq;\n      termState.wrappedTermState.totalTermFreq = termState.totalTermFreq;\n      wrappedPostingsReader.decodeTerm(termState.longs, in, fieldInfo, termState.wrappedTermState, termState.absolute);\n      termState.absolute = false;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d2e085a44254f51e49d03f212aff0ad5a99052a":["4f8633b56150a205774ee3e2adf1452a81b0d904"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":["1d2e085a44254f51e49d03f212aff0ad5a99052a"],"4f8633b56150a205774ee3e2adf1452a81b0d904":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1d2e085a44254f51e49d03f212aff0ad5a99052a":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f8633b56150a205774ee3e2adf1452a81b0d904","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e6904bcc97d8afa27bd72ee29ac01e525e327ad4":[],"4f8633b56150a205774ee3e2adf1452a81b0d904":["1d2e085a44254f51e49d03f212aff0ad5a99052a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e6904bcc97d8afa27bd72ee29ac01e525e327ad4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}