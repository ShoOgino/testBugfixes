{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","sourceNew":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","sourceOld":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","sourceNew":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","sourceOld":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","sourceNew":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      @Override\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","sourceOld":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","sourceNew":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      @Override\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","sourceOld":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/FileListEntityProcessor#getFolderFiles(File,List[Map[String,Object]]).mjava","sourceNew":null,"sourceOld":"  private void getFolderFiles(File dir, final List<Map<String, Object>> fileDetails) {\n    // Fetch an array of file objects that pass the filter, however the\n    // returned array is never populated; accept() always returns false.\n    // Rather we make use of the fileDetails array which is populated as\n    // a side affect of the accept method.\n    dir.list(new FilenameFilter() {\n      @Override\n      public boolean accept(File dir, String name) {\n        File fileObj = new File(dir, name);\n        if (fileObj.isDirectory()) {\n          if (recursive) getFolderFiles(fileObj, fileDetails);\n        } else if (fileNamePattern == null) {\n          addDetails(fileDetails, dir, name);\n        } else if (fileNamePattern.matcher(name).find()) {\n          if (excludesPattern != null && excludesPattern.matcher(name).find())\n            return false;\n          addDetails(fileDetails, dir, name);\n        }\n        return false;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["c26f00b574427b55127e869b935845554afde1fa","7530de27b87b961b51f01bd1299b7004d46e8823"],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["7530de27b87b961b51f01bd1299b7004d46e8823"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}