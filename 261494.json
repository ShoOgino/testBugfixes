{"path":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","commits":[{"id":"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1","date":1064527311,"type":0,"author":"Dmitry Serebrennikov","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","pathOld":"/dev/null","sourceNew":"    public CompoundFileReader(Directory dir, String name) \n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n        \n        boolean success = false;\n        \n        try {\n            stream = dir.openFile(name);\n            \n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n    \n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n                \n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n            \n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n        \n            success = true;\n                \n        } finally {\n            if (! success) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a67f534c1db9eb255bc5a5137c7bf362ff90c276","date":1066054684,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","sourceNew":"    public CompoundFileReader(Directory dir, String name)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openFile(name);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","sourceOld":"    public CompoundFileReader(Directory dir, String name) \n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n        \n        boolean success = false;\n        \n        try {\n            stream = dir.openFile(name);\n            \n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n    \n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n                \n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n            \n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n        \n            success = true;\n                \n        } finally {\n            if (! success) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eadc5e721592298e00120bbf5d3a7e637b535c5a","date":1089642964,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","sourceNew":"    public CompoundFileReader(Directory dir, String name)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openFile(name);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","sourceOld":"    public CompoundFileReader(Directory dir, String name)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openFile(name);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e971ba25509e21a130fef61f0687be0446ca27a0","date":1095369217,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","sourceNew":"    public CompoundFileReader(Directory dir, String name)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","sourceOld":"    public CompoundFileReader(Directory dir, String name)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openFile(name);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6dba7919de4ff4ed6ff17f90619203772722f08","date":1180451647,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name) throws IOException {\n    this(dir, name, BufferedIndexInput.BUFFER_SIZE);\n  }\n\n","sourceOld":"    public CompoundFileReader(Directory dir, String name)\n    throws IOException\n    {\n        directory = dir;\n        fileName = name;\n\n        boolean success = false;\n\n        try {\n            stream = dir.openInput(name);\n\n            // read the directory and init files\n            int count = stream.readVInt();\n            FileEntry entry = null;\n            for (int i=0; i<count; i++) {\n                long offset = stream.readLong();\n                String id = stream.readString();\n\n                if (entry != null) {\n                    // set length of the previous entry\n                    entry.length = offset - entry.offset;\n                }\n\n                entry = new FileEntry();\n                entry.offset = offset;\n                entries.put(id, entry);\n            }\n\n            // set the length of the final entry\n            if (entry != null) {\n                entry.length = stream.length() - entry.offset;\n            }\n\n            success = true;\n\n        } finally {\n            if (! success && (stream != null)) {\n                try {\n                    stream.close();\n                } catch (IOException e) { }\n            }\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","pathOld":"src/java/org/apache/lucene/index/CompoundFileReader#CompoundFileReader(Directory,String).mjava","sourceNew":"  public CompoundFileReader(Directory dir, String name) throws IOException {\n    this(dir, name, BufferedIndexInput.BUFFER_SIZE);\n  }\n\n","sourceOld":"  public CompoundFileReader(Directory dir, String name) throws IOException {\n    this(dir, name, BufferedIndexInput.BUFFER_SIZE);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e971ba25509e21a130fef61f0687be0446ca27a0":["eadc5e721592298e00120bbf5d3a7e637b535c5a"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eadc5e721592298e00120bbf5d3a7e637b535c5a":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"]},"commit2Childs":{"e971ba25509e21a130fef61f0687be0446ca27a0":["f6dba7919de4ff4ed6ff17f90619203772722f08"],"f6dba7919de4ff4ed6ff17f90619203772722f08":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1"],"8fb95844e4ba5160067c64c5eb1cd8a09f7a94f1":["a67f534c1db9eb255bc5a5137c7bf362ff90c276"],"eadc5e721592298e00120bbf5d3a7e637b535c5a":["e971ba25509e21a130fef61f0687be0446ca27a0"],"a67f534c1db9eb255bc5a5137c7bf362ff90c276":["eadc5e721592298e00120bbf5d3a7e637b535c5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}