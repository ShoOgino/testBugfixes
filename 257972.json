{"path":"solr/core/src/test/org/apache/solr/util/tracing/TestDistributedTracing#test().mjava","commits":[{"id":"cbaf96cfda5422c42955ce34344f0e01839894ea","date":1559675051,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/tracing/TestDistributedTracing#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws IOException, SolrServerException, TimeoutException, InterruptedException {\n    CloudSolrClient cloudClient = cluster.getSolrClient();\n    List<MockSpan> allSpans = getFinishedSpans();\n\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"1\"));\n    List<MockSpan> finishedSpans = getRecentSpans(allSpans);\n    finishedSpans.removeIf(x ->\n        !x.tags().get(\"http.url\").toString().endsWith(\"/update\"));\n    assertEquals(2, finishedSpans.size());\n    assertOneSpanIsChildOfAnother(finishedSpans);\n\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"2\"));\n    finishedSpans = getRecentSpans(allSpans);\n    finishedSpans.removeIf(x ->\n        !x.tags().get(\"http.url\").toString().endsWith(\"/update\"));\n    assertEquals(2, finishedSpans.size());\n    assertOneSpanIsChildOfAnother(finishedSpans);\n\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"3\"));\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"4\"));\n    cloudClient.commit(COLLECTION);\n\n    getRecentSpans(allSpans);\n    cloudClient.query(COLLECTION, new SolrQuery(\"*:*\"));\n    finishedSpans = getRecentSpans(allSpans);\n    finishedSpans.removeIf(x ->\n        !x.tags().get(\"http.url\").toString().endsWith(\"/select\"));\n    // one from client to server, 2 for execute query, 2 for fetching documents\n    assertEquals(5, finishedSpans.size());\n    assertEquals(1, finishedSpans.stream().filter(s -> s.parentId() == 0).count());\n    long parentId = finishedSpans.stream()\n        .filter(s -> s.parentId() == 0)\n        .collect(Collectors.toList())\n        .get(0).context().spanId();\n    for (MockSpan span: finishedSpans) {\n      if (span.parentId() != 0 && parentId != span.parentId()) {\n        fail(\"All spans must belong to single span, but:\"+finishedSpans);\n      }\n    }\n\n    CollectionAdminRequest.setClusterProperty(ZkStateReader.SAMPLE_PERCENTAGE, \"0.0\")\n        .process(cluster.getSolrClient());\n    waitForSampleRateUpdated(0);\n\n    getRecentSpans(allSpans);\n    cloudClient.add(COLLECTION, sdoc(\"id\", \"5\"));\n    finishedSpans = getRecentSpans(allSpans);\n    assertEquals(0, finishedSpans.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cbaf96cfda5422c42955ce34344f0e01839894ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cbaf96cfda5422c42955ce34344f0e01839894ea"]},"commit2Childs":{"cbaf96cfda5422c42955ce34344f0e01839894ea":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cbaf96cfda5422c42955ce34344f0e01839894ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}