{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","commits":[{"id":"04c507acd0ef1ea7a7f2fcc76b99e987627a17ab","date":1444921426,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f740a4cb7f5949ddb40a1647671c4a997223312","date":1569677340,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","sourceNew":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return doCache(weight, policy, null);\n      }\n\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","sourceOld":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","sourceNew":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return doCache(weight, policy, null);\n      }\n\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","sourceOld":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"906d4da7e00f8453a5a024fe1ee92d6b14c0627f","date":1570006475,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","sourceNew":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","sourceOld":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return doCache(weight, policy, null);\n      }\n\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","sourceNew":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","sourceOld":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return doCache(weight, policy, null);\n      }\n\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1fbdd90cd58912788fecb1044df8f566a4420e59","date":1574749923,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","sourceNew":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","sourceOld":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bbc355b3e849ee4a34763155bb78e638d625419","date":1574952532,"type":3,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#testGetQueryCache().mjava","sourceNew":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","sourceOld":"  public void testGetQueryCache() throws IOException {\n    IndexSearcher searcher = new IndexSearcher(new MultiReader());\n    assertEquals(IndexSearcher.getDefaultQueryCache(), searcher.getQueryCache());\n    QueryCache dummyCache = new QueryCache() {\n      @Override\n      public Weight doCache(Weight weight, QueryCachingPolicy policy, Executor executor) {\n        return weight;\n      }\n    };\n    searcher.setQueryCache(dummyCache);\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(dummyCache);\n    searcher = new IndexSearcher(new MultiReader());\n    assertEquals(dummyCache, searcher.getQueryCache());\n\n    searcher.setQueryCache(null);\n    assertNull(searcher.getQueryCache());\n\n    IndexSearcher.setDefaultQueryCache(null);\n    searcher = new IndexSearcher(new MultiReader());\n    assertNull(searcher.getQueryCache());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["6f740a4cb7f5949ddb40a1647671c4a997223312"],"04c507acd0ef1ea7a7f2fcc76b99e987627a17ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f740a4cb7f5949ddb40a1647671c4a997223312":["04c507acd0ef1ea7a7f2fcc76b99e987627a17ab"],"9bbc355b3e849ee4a34763155bb78e638d625419":["1fbdd90cd58912788fecb1044df8f566a4420e59"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["04c507acd0ef1ea7a7f2fcc76b99e987627a17ab","6f740a4cb7f5949ddb40a1647671c4a997223312"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bbc355b3e849ee4a34763155bb78e638d625419"],"b0b597c65628ca9e73913a07e81691f8229bae35":["4b9f74021389e2b32ee750fa5a24281c87951ec3","906d4da7e00f8453a5a024fe1ee92d6b14c0627f"]},"commit2Childs":{"1fbdd90cd58912788fecb1044df8f566a4420e59":["9bbc355b3e849ee4a34763155bb78e638d625419"],"906d4da7e00f8453a5a024fe1ee92d6b14c0627f":["1fbdd90cd58912788fecb1044df8f566a4420e59","b0b597c65628ca9e73913a07e81691f8229bae35"],"04c507acd0ef1ea7a7f2fcc76b99e987627a17ab":["6f740a4cb7f5949ddb40a1647671c4a997223312","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04c507acd0ef1ea7a7f2fcc76b99e987627a17ab"],"6f740a4cb7f5949ddb40a1647671c4a997223312":["906d4da7e00f8453a5a024fe1ee92d6b14c0627f","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"9bbc355b3e849ee4a34763155bb78e638d625419":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}