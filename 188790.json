{"path":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#MMapDirectory(Path,LockFactory,int).mjava","commits":[{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#MMapDirectory(Path,LockFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#MMapDirectory(File,LockFactory,int).mjava","sourceNew":"  /**\n   * Create a new MMapDirectory for the named location, specifying the \n   * maximum chunk size used for memory mapping.\n   * \n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @param maxChunkSize maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * <p>\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped. Using a lower chunk size makes \n   * the directory implementation a little bit slower (as the correct chunk \n   * may be resolved on lots of seeks) but the chance is higher that mmap \n   * does not fail. On 64 bit Java platforms, this parameter should always \n   * be {@code 1 << 30}, as the address space is big enough.\n   * <p>\n   * <b>Please note:</b> The chunk size is always rounded down to a power of 2.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public MMapDirectory(Path path, LockFactory lockFactory, int maxChunkSize) throws IOException {\n    super(path, lockFactory);\n    if (maxChunkSize <= 0) {\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    }\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n  }\n\n","sourceOld":"  /**\n   * Create a new MMapDirectory for the named location, specifying the \n   * maximum chunk size used for memory mapping.\n   * \n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @param maxChunkSize maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * <p>\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped. Using a lower chunk size makes \n   * the directory implementation a little bit slower (as the correct chunk \n   * may be resolved on lots of seeks) but the chance is higher that mmap \n   * does not fail. On 64 bit Java platforms, this parameter should always \n   * be {@code 1 << 30}, as the address space is big enough.\n   * <p>\n   * <b>Please note:</b> The chunk size is always rounded down to a power of 2.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public MMapDirectory(File path, LockFactory lockFactory, int maxChunkSize) throws IOException {\n    super(path, lockFactory);\n    if (maxChunkSize <= 0) {\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    }\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c47239343a3c69fe033db153d3152f318abc5d6","date":1423088431,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#MMapDirectory(Path,LockFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#MMapDirectory(Path,LockFactory,int).mjava","sourceNew":"  /**\n   * Create a new MMapDirectory for the named location, specifying the \n   * maximum chunk size used for memory mapping.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @param maxChunkSize maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * <p>\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped. Using a lower chunk size makes \n   * the directory implementation a little bit slower (as the correct chunk \n   * may be resolved on lots of seeks) but the chance is higher that mmap \n   * does not fail. On 64 bit Java platforms, this parameter should always \n   * be {@code 1 << 30}, as the address space is big enough.\n   * <p>\n   * <b>Please note:</b> The chunk size is always rounded down to a power of 2.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public MMapDirectory(Path path, LockFactory lockFactory, int maxChunkSize) throws IOException {\n    super(path, lockFactory);\n    if (maxChunkSize <= 0) {\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    }\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n  }\n\n","sourceOld":"  /**\n   * Create a new MMapDirectory for the named location, specifying the \n   * maximum chunk size used for memory mapping.\n   * \n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @param maxChunkSize maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * <p>\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped. Using a lower chunk size makes \n   * the directory implementation a little bit slower (as the correct chunk \n   * may be resolved on lots of seeks) but the chance is higher that mmap \n   * does not fail. On 64 bit Java platforms, this parameter should always \n   * be {@code 1 << 30}, as the address space is big enough.\n   * <p>\n   * <b>Please note:</b> The chunk size is always rounded down to a power of 2.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public MMapDirectory(Path path, LockFactory lockFactory, int maxChunkSize) throws IOException {\n    super(path, lockFactory);\n    if (maxChunkSize <= 0) {\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    }\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7aa165418ba5bc2b7ce31a080a36d56953cc4a13","date":1455577726,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#MMapDirectory(Path,LockFactory,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/MMapDirectory#MMapDirectory(Path,LockFactory,int).mjava","sourceNew":"  /**\n   * Create a new MMapDirectory for the named location, specifying the \n   * maximum chunk size used for memory mapping.\n   *  The directory is created at the named location if it does not yet exist.\n   * <p>\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped. Using a lower chunk size makes \n   * the directory implementation a little bit slower (as the correct chunk \n   * may be resolved on lots of seeks) but the chance is higher that mmap \n   * does not fail. On 64 bit Java platforms, this parameter should always \n   * be {@code 1 << 30}, as the address space is big enough.\n   * <p>\n   * <b>Please note:</b> The chunk size is always rounded down to a power of 2.\n   * \n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @param maxChunkSize maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public MMapDirectory(Path path, LockFactory lockFactory, int maxChunkSize) throws IOException {\n    super(path, lockFactory);\n    if (maxChunkSize <= 0) {\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    }\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n  }\n\n","sourceOld":"  /**\n   * Create a new MMapDirectory for the named location, specifying the \n   * maximum chunk size used for memory mapping.\n   *  The directory is created at the named location if it does not yet exist.\n   * \n   * @param path the path of the directory\n   * @param lockFactory the lock factory to use, or null for the default\n   * ({@link NativeFSLockFactory});\n   * @param maxChunkSize maximum chunk size (default is 1 GiBytes for\n   * 64 bit JVMs and 256 MiBytes for 32 bit JVMs) used for memory mapping.\n   * <p>\n   * Especially on 32 bit platform, the address space can be very fragmented,\n   * so large index files cannot be mapped. Using a lower chunk size makes \n   * the directory implementation a little bit slower (as the correct chunk \n   * may be resolved on lots of seeks) but the chance is higher that mmap \n   * does not fail. On 64 bit Java platforms, this parameter should always \n   * be {@code 1 << 30}, as the address space is big enough.\n   * <p>\n   * <b>Please note:</b> The chunk size is always rounded down to a power of 2.\n   * @throws IOException if there is a low-level I/O error\n   */\n  public MMapDirectory(Path path, LockFactory lockFactory, int maxChunkSize) throws IOException {\n    super(path, lockFactory);\n    if (maxChunkSize <= 0) {\n      throw new IllegalArgumentException(\"Maximum chunk size for mmap must be >0\");\n    }\n    this.chunkSizePower = 31 - Integer.numberOfLeadingZeros(maxChunkSize);\n    assert this.chunkSizePower >= 0 && this.chunkSizePower <= 30;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c47239343a3c69fe033db153d3152f318abc5d6":["f4abec28b874149a7223e32cc7a01704c27790de"],"7aa165418ba5bc2b7ce31a080a36d56953cc4a13":["4c47239343a3c69fe033db153d3152f318abc5d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f4abec28b874149a7223e32cc7a01704c27790de":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7aa165418ba5bc2b7ce31a080a36d56953cc4a13"]},"commit2Childs":{"4c47239343a3c69fe033db153d3152f318abc5d6":["7aa165418ba5bc2b7ce31a080a36d56953cc4a13"],"7aa165418ba5bc2b7ce31a080a36d56953cc4a13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["4c47239343a3c69fe033db153d3152f318abc5d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}