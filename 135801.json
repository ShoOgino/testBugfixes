{"path":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#setExternalDependencyXmlProperties().mjava","commits":[{"id":"71b83dcf02fe2854488bc83d70dee29c5baa7e5c","date":1383232808,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#setExternalDependencyXmlProperties().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For each module, sets a compile-scope and a test-scope property\n   * with values that contain the appropriate &lt;dependency&gt;\n   * snippets.\n   */\n  private void setExternalDependencyXmlProperties() {\n    for (String module : internalCompileScopeDependencies.keySet()) { // get full module list\n      StringBuilder compileScopeBuilder = new StringBuilder();\n      StringBuilder testScopeBuilder = new StringBuilder();\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(module);\n      if (null != extDeps) {\n        for (ExternalDependency dep : extDeps) {\n          StringBuilder builder = dep.isTestDependency ? testScopeBuilder : compileScopeBuilder;\n          appendDependencyXml(builder, dep.groupId, dep.artifactId, \"    \", null, \n                              dep.isTestDependency, dep.isOptional, dep.classifier, null);\n          // Test POMs for solrj, solr-core, lucene-codecs and lucene-core modules\n          // need to include all compile-scope dependencies as test-scope dependencies\n          // since we've turned off transitive dependency resolution.\n          if ( ! dep.isTestDependency && modulesWithSeparateCompileAndTestPOMs.contains(module)) {\n            appendDependencyXml(testScopeBuilder, dep.groupId, dep.artifactId, \"    \", null,\n                                true, dep.isOptional, dep.classifier, null);\n          }\n        }\n      }\n      if (compileScopeBuilder.length() > 0) {\n        compileScopeBuilder.setLength(compileScopeBuilder.length() - 1); // drop trailing newline\n      }\n      if (testScopeBuilder.length() > 0) {\n        testScopeBuilder.setLength(testScopeBuilder.length() - 1); // drop trailing newline\n      }\n      allProperties.setProperty(module + \".external.dependencies\", compileScopeBuilder.toString());\n      allProperties.setProperty(module + \".external.test.dependencies\", testScopeBuilder.toString());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e025cf1c07150c8db28879d785db17eb3a66ca9f","date":1598788864,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/tools/src/java/org/apache/lucene/dependencies/GetMavenDependenciesTask#setExternalDependencyXmlProperties().mjava","sourceNew":null,"sourceOld":"  /**\n   * For each module, sets a compile-scope and a test-scope property\n   * with values that contain the appropriate &lt;dependency&gt;\n   * snippets.\n   */\n  private void setExternalDependencyXmlProperties() {\n    for (String module : internalCompileScopeDependencies.keySet()) { // get full module list\n      StringBuilder compileScopeBuilder = new StringBuilder();\n      StringBuilder testScopeBuilder = new StringBuilder();\n      SortedSet<ExternalDependency> extDeps = allExternalDependencies.get(module);\n      if (null != extDeps) {\n        for (ExternalDependency dep : extDeps) {\n          StringBuilder builder = dep.isTestDependency ? testScopeBuilder : compileScopeBuilder;\n          appendDependencyXml(builder, dep.groupId, dep.artifactId, \"    \", null, \n                              dep.isTestDependency, dep.isOptional, dep.classifier, null);\n          // Test POMs for solrj, solr-core, lucene-codecs and lucene-core modules\n          // need to include all compile-scope dependencies as test-scope dependencies\n          // since we've turned off transitive dependency resolution.\n          if ( ! dep.isTestDependency && modulesWithSeparateCompileAndTestPOMs.contains(module)) {\n            appendDependencyXml(testScopeBuilder, dep.groupId, dep.artifactId, \"    \", null,\n                                true, dep.isOptional, dep.classifier, null);\n          }\n        }\n      }\n      if (compileScopeBuilder.length() > 0) {\n        compileScopeBuilder.setLength(compileScopeBuilder.length() - 1); // drop trailing newline\n      }\n      if (testScopeBuilder.length() > 0) {\n        testScopeBuilder.setLength(testScopeBuilder.length() - 1); // drop trailing newline\n      }\n      allProperties.setProperty(module + \".external.dependencies\", compileScopeBuilder.toString());\n      allProperties.setProperty(module + \".external.test.dependencies\", testScopeBuilder.toString());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e025cf1c07150c8db28879d785db17eb3a66ca9f"]},"commit2Childs":{"e025cf1c07150c8db28879d785db17eb3a66ca9f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"71b83dcf02fe2854488bc83d70dee29c5baa7e5c":["e025cf1c07150c8db28879d785db17eb3a66ca9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["71b83dcf02fe2854488bc83d70dee29c5baa7e5c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}