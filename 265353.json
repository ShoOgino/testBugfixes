{"path":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_01_correctWords().mjava","commits":[{"id":"071bae97f774d86dca206e837de23a56b71c8b29","date":1194291554,"type":0,"author":"Mike Klaas","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_01_correctWords().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_01_correctWords() {\n    \n    buildSpellCheckIndex();\n    \n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    \n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.put(\"sp.query.accuracy\",\".4\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            ,\"//arr/str[.='cot']\"\n            ,\"//arr/str[.='cart']\"\n//            ,\"//arr/str[1][.='cot']\"\n//            ,\"//arr/str[2][.='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.accuracy\",\".0\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            ,\"//arr/str[.='cart']\"\n            ,\"//arr/str[.='cot']\"\n            ,\"//arr/str[.='carp']\"\n            ,\"//arr/str[.='cod']\"\n            ,\"//arr/str[.='corn']\"\n            );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_01_correctWords().mjava","pathOld":"src/test/org/apache/solr/handler/SpellCheckerRequestHandlerTest#testSpellCheck_01_correctWords().mjava","sourceNew":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_01_correctWords() {\n    \n    buildSpellCheckIndex();\n    \n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    \n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.put(\"sp.query.accuracy\",\".4\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            ,\"//arr/str[.='cot']\"\n            ,\"//arr/str[.='cart']\"\n//            ,\"//arr/str[1][.='cot']\"\n//            ,\"//arr/str[2][.='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.accuracy\",\".0\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            ,\"//arr/str[.='cart']\"\n            ,\"//arr/str[.='cot']\"\n            ,\"//arr/str[.='carp']\"\n            ,\"//arr/str[.='cod']\"\n            ,\"//arr/str[.='corn']\"\n            );\n  }\n\n","sourceOld":"  /**\n   * Test for correct spelling of a single word at various accuracy levels\n   * to see how the suggestions vary.\n   */\n  public void testSpellCheck_01_correctWords() {\n    \n    buildSpellCheckIndex();\n    \n    lrf = h.getRequestFactory(\"spellchecker\", 0, 20 );\n    lrf.args.put(\"version\",\"2.0\");\n    \n    lrf.args.put(\"sp.query.accuracy\",\".9\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            );\n\n    lrf.args.put(\"sp.query.accuracy\",\".4\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            ,\"//arr/str[.='cot']\"\n            ,\"//arr/str[.='cart']\"\n//            ,\"//arr/str[1][.='cot']\"\n//            ,\"//arr/str[2][.='cart']\"\n            );\n\n    lrf.args.put(\"sp.query.accuracy\",\".0\");\n    assertQ(\"Failed to spell check\",\n            req(\"cat\")\n            ,\"//str[@name='words'][.='cat']\"\n            ,\"//str[@name='exist'][.='true']\"\n            ,\"//arr/str[.='cart']\"\n            ,\"//arr/str[.='cot']\"\n            ,\"//arr/str[.='carp']\"\n            ,\"//arr/str[.='cod']\"\n            ,\"//arr/str[.='corn']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"071bae97f774d86dca206e837de23a56b71c8b29":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["071bae97f774d86dca206e837de23a56b71c8b29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"071bae97f774d86dca206e837de23a56b71c8b29":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["071bae97f774d86dca206e837de23a56b71c8b29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}