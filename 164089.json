{"path":"lucene/core/src/test/org/apache/lucene/store/TestRateLimiter#testPause().mjava","commits":[{"id":"287e9d40cdd01ccdb61d409156951f5f39aa6446","date":1363387551,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRateLimiter#testPause().mjava","pathOld":"/dev/null","sourceNew":"  public void testPause() {\n    SimpleRateLimiter limiter = new SimpleRateLimiter(10); // 10 MB / Sec\n    limiter.pause(2);//init\n    long pause = 0;\n    for (int i = 0; i < 3; i++) {\n      pause += limiter.pause(4 * 1024 * 1024); // fire up 3 * 4 MB \n    }\n    final long convert = TimeUnit.MILLISECONDS.convert(pause, TimeUnit.NANOSECONDS);\n    assertTrue(\"we should sleep less than 2 seconds but did: \" + convert + \" millis\", convert < 2000l); \n    assertTrue(\"we should sleep at least 1 second but did only: \" + convert + \" millis\", convert > 1000l); \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["879f3935a07c964c0627d0f7487bafbf94dbdceb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"879f3935a07c964c0627d0f7487bafbf94dbdceb","date":1411293078,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestRateLimiter#testPause().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRateLimiter#testPause().mjava","sourceNew":"  public void testPause() {\n    SimpleRateLimiter limiter = new SimpleRateLimiter(10); // 10 MB / Sec\n    long pause = 0;\n    for (int i = 0; i < 3; i++) {\n      pause += limiter.pause(4 * 1024 * 1024); // fire up 3 * 4 MB \n    }\n    final long convert = TimeUnit.MILLISECONDS.convert(pause, TimeUnit.NANOSECONDS);\n    assertTrue(\"we should sleep less than 2 seconds but did: \" + convert + \" millis\", convert < 2000l); \n    assertTrue(\"we should sleep at least 1 second but did only: \" + convert + \" millis\", convert > 1000l); \n  }\n\n","sourceOld":"  public void testPause() {\n    SimpleRateLimiter limiter = new SimpleRateLimiter(10); // 10 MB / Sec\n    limiter.pause(2);//init\n    long pause = 0;\n    for (int i = 0; i < 3; i++) {\n      pause += limiter.pause(4 * 1024 * 1024); // fire up 3 * 4 MB \n    }\n    final long convert = TimeUnit.MILLISECONDS.convert(pause, TimeUnit.NANOSECONDS);\n    assertTrue(\"we should sleep less than 2 seconds but did: \" + convert + \" millis\", convert < 2000l); \n    assertTrue(\"we should sleep at least 1 second but did only: \" + convert + \" millis\", convert > 1000l); \n  }\n\n","bugFix":["287e9d40cdd01ccdb61d409156951f5f39aa6446"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da9e8e1ed552d000ca7aae9108f4d9aa54da1b74","date":1435863614,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestRateLimiter#testPause().mjava","sourceNew":null,"sourceOld":"  public void testPause() {\n    SimpleRateLimiter limiter = new SimpleRateLimiter(10); // 10 MB / Sec\n    long pause = 0;\n    for (int i = 0; i < 3; i++) {\n      pause += limiter.pause(4 * 1024 * 1024); // fire up 3 * 4 MB \n    }\n    final long convert = TimeUnit.MILLISECONDS.convert(pause, TimeUnit.NANOSECONDS);\n    assertTrue(\"we should sleep less than 2 seconds but did: \" + convert + \" millis\", convert < 2000l); \n    assertTrue(\"we should sleep at least 1 second but did only: \" + convert + \" millis\", convert > 1000l); \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da9e8e1ed552d000ca7aae9108f4d9aa54da1b74":["879f3935a07c964c0627d0f7487bafbf94dbdceb"],"879f3935a07c964c0627d0f7487bafbf94dbdceb":["287e9d40cdd01ccdb61d409156951f5f39aa6446"],"287e9d40cdd01ccdb61d409156951f5f39aa6446":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["da9e8e1ed552d000ca7aae9108f4d9aa54da1b74"]},"commit2Childs":{"da9e8e1ed552d000ca7aae9108f4d9aa54da1b74":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"879f3935a07c964c0627d0f7487bafbf94dbdceb":["da9e8e1ed552d000ca7aae9108f4d9aa54da1b74"],"287e9d40cdd01ccdb61d409156951f5f39aa6446":["879f3935a07c964c0627d0f7487bafbf94dbdceb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["287e9d40cdd01ccdb61d409156951f5f39aa6446"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}