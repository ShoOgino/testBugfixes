{"path":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PackedIntsDecompress#decode24(IntBuffer,int[]).mjava","commits":[{"id":"824ab25acd22f2eca198755bafab3cb8b7878493","date":1341276186,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PackedIntsDecompress#decode24(IntBuffer,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/ForDecompressImpl#decode24(IntBuffer,int[]).mjava","sourceNew":"  // NOTE: hardwired to blockSize == 128\n  public static void decode24(final IntBuffer compressedBuffer, final int[] output) {\n    final int numFrameBits = 24;\n    final int mask = (int) ((1L<<numFrameBits) - 1);\n    int outputOffset = 0;\n    for(int step=0;step<4;step++) {\n      int intValue0 = compressedBuffer.get();\n      int intValue1 = compressedBuffer.get();\n      int intValue2 = compressedBuffer.get();\n      int intValue3 = compressedBuffer.get();\n      int intValue4 = compressedBuffer.get();\n      int intValue5 = compressedBuffer.get();\n      int intValue6 = compressedBuffer.get();\n      int intValue7 = compressedBuffer.get();\n      int intValue8 = compressedBuffer.get();\n      int intValue9 = compressedBuffer.get();\n      int intValue10 = compressedBuffer.get();\n      int intValue11 = compressedBuffer.get();\n      int intValue12 = compressedBuffer.get();\n      int intValue13 = compressedBuffer.get();\n      int intValue14 = compressedBuffer.get();\n      int intValue15 = compressedBuffer.get();\n      int intValue16 = compressedBuffer.get();\n      int intValue17 = compressedBuffer.get();\n      int intValue18 = compressedBuffer.get();\n      int intValue19 = compressedBuffer.get();\n      int intValue20 = compressedBuffer.get();\n      int intValue21 = compressedBuffer.get();\n      int intValue22 = compressedBuffer.get();\n      int intValue23 = compressedBuffer.get();\n      output[0 + outputOffset] = intValue0 & mask;\n      output[1 + outputOffset] = ((intValue0 >>> 24) | (intValue1 << 8)) & mask;\n      output[2 + outputOffset] = ((intValue1 >>> 16) | (intValue2 << 16)) & mask;\n      output[3 + outputOffset] = intValue2 >>> 8;\n      output[4 + outputOffset] = intValue3 & mask;\n      output[5 + outputOffset] = ((intValue3 >>> 24) | (intValue4 << 8)) & mask;\n      output[6 + outputOffset] = ((intValue4 >>> 16) | (intValue5 << 16)) & mask;\n      output[7 + outputOffset] = intValue5 >>> 8;\n      output[8 + outputOffset] = intValue6 & mask;\n      output[9 + outputOffset] = ((intValue6 >>> 24) | (intValue7 << 8)) & mask;\n      output[10 + outputOffset] = ((intValue7 >>> 16) | (intValue8 << 16)) & mask;\n      output[11 + outputOffset] = intValue8 >>> 8;\n      output[12 + outputOffset] = intValue9 & mask;\n      output[13 + outputOffset] = ((intValue9 >>> 24) | (intValue10 << 8)) & mask;\n      output[14 + outputOffset] = ((intValue10 >>> 16) | (intValue11 << 16)) & mask;\n      output[15 + outputOffset] = intValue11 >>> 8;\n      output[16 + outputOffset] = intValue12 & mask;\n      output[17 + outputOffset] = ((intValue12 >>> 24) | (intValue13 << 8)) & mask;\n      output[18 + outputOffset] = ((intValue13 >>> 16) | (intValue14 << 16)) & mask;\n      output[19 + outputOffset] = intValue14 >>> 8;\n      output[20 + outputOffset] = intValue15 & mask;\n      output[21 + outputOffset] = ((intValue15 >>> 24) | (intValue16 << 8)) & mask;\n      output[22 + outputOffset] = ((intValue16 >>> 16) | (intValue17 << 16)) & mask;\n      output[23 + outputOffset] = intValue17 >>> 8;\n      output[24 + outputOffset] = intValue18 & mask;\n      output[25 + outputOffset] = ((intValue18 >>> 24) | (intValue19 << 8)) & mask;\n      output[26 + outputOffset] = ((intValue19 >>> 16) | (intValue20 << 16)) & mask;\n      output[27 + outputOffset] = intValue20 >>> 8;\n      output[28 + outputOffset] = intValue21 & mask;\n      output[29 + outputOffset] = ((intValue21 >>> 24) | (intValue22 << 8)) & mask;\n      output[30 + outputOffset] = ((intValue22 >>> 16) | (intValue23 << 16)) & mask;\n      output[31 + outputOffset] = intValue23 >>> 8;\n      outputOffset += 32;\n    }\n  }\n\n","sourceOld":"  // NOTE: hardwired to blockSize == 128\n  public static void decode24(final IntBuffer compressedBuffer, final int[] output) {\n    final int numFrameBits = 24;\n    final int mask = (int) ((1L<<numFrameBits) - 1);\n    int outputOffset = 0;\n    for(int step=0;step<4;step++) {\n      int intValue0 = compressedBuffer.get();\n      int intValue1 = compressedBuffer.get();\n      int intValue2 = compressedBuffer.get();\n      int intValue3 = compressedBuffer.get();\n      int intValue4 = compressedBuffer.get();\n      int intValue5 = compressedBuffer.get();\n      int intValue6 = compressedBuffer.get();\n      int intValue7 = compressedBuffer.get();\n      int intValue8 = compressedBuffer.get();\n      int intValue9 = compressedBuffer.get();\n      int intValue10 = compressedBuffer.get();\n      int intValue11 = compressedBuffer.get();\n      int intValue12 = compressedBuffer.get();\n      int intValue13 = compressedBuffer.get();\n      int intValue14 = compressedBuffer.get();\n      int intValue15 = compressedBuffer.get();\n      int intValue16 = compressedBuffer.get();\n      int intValue17 = compressedBuffer.get();\n      int intValue18 = compressedBuffer.get();\n      int intValue19 = compressedBuffer.get();\n      int intValue20 = compressedBuffer.get();\n      int intValue21 = compressedBuffer.get();\n      int intValue22 = compressedBuffer.get();\n      int intValue23 = compressedBuffer.get();\n      output[0 + outputOffset] = intValue0 & mask;\n      output[1 + outputOffset] = ((intValue0 >>> 24) | (intValue1 << 8)) & mask;\n      output[2 + outputOffset] = ((intValue1 >>> 16) | (intValue2 << 16)) & mask;\n      output[3 + outputOffset] = intValue2 >>> 8;\n      output[4 + outputOffset] = intValue3 & mask;\n      output[5 + outputOffset] = ((intValue3 >>> 24) | (intValue4 << 8)) & mask;\n      output[6 + outputOffset] = ((intValue4 >>> 16) | (intValue5 << 16)) & mask;\n      output[7 + outputOffset] = intValue5 >>> 8;\n      output[8 + outputOffset] = intValue6 & mask;\n      output[9 + outputOffset] = ((intValue6 >>> 24) | (intValue7 << 8)) & mask;\n      output[10 + outputOffset] = ((intValue7 >>> 16) | (intValue8 << 16)) & mask;\n      output[11 + outputOffset] = intValue8 >>> 8;\n      output[12 + outputOffset] = intValue9 & mask;\n      output[13 + outputOffset] = ((intValue9 >>> 24) | (intValue10 << 8)) & mask;\n      output[14 + outputOffset] = ((intValue10 >>> 16) | (intValue11 << 16)) & mask;\n      output[15 + outputOffset] = intValue11 >>> 8;\n      output[16 + outputOffset] = intValue12 & mask;\n      output[17 + outputOffset] = ((intValue12 >>> 24) | (intValue13 << 8)) & mask;\n      output[18 + outputOffset] = ((intValue13 >>> 16) | (intValue14 << 16)) & mask;\n      output[19 + outputOffset] = intValue14 >>> 8;\n      output[20 + outputOffset] = intValue15 & mask;\n      output[21 + outputOffset] = ((intValue15 >>> 24) | (intValue16 << 8)) & mask;\n      output[22 + outputOffset] = ((intValue16 >>> 16) | (intValue17 << 16)) & mask;\n      output[23 + outputOffset] = intValue17 >>> 8;\n      output[24 + outputOffset] = intValue18 & mask;\n      output[25 + outputOffset] = ((intValue18 >>> 24) | (intValue19 << 8)) & mask;\n      output[26 + outputOffset] = ((intValue19 >>> 16) | (intValue20 << 16)) & mask;\n      output[27 + outputOffset] = intValue20 >>> 8;\n      output[28 + outputOffset] = intValue21 & mask;\n      output[29 + outputOffset] = ((intValue21 >>> 24) | (intValue22 << 8)) & mask;\n      output[30 + outputOffset] = ((intValue22 >>> 16) | (intValue23 << 16)) & mask;\n      output[31 + outputOffset] = intValue23 >>> 8;\n      outputOffset += 32;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5373bc7574123da55ae25e216b6d768ccb1dcd91","date":1342013351,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PackedIntsDecompress#decode24(IntBuffer,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PackedIntsDecompress#decode24(IntBuffer,int[]).mjava","sourceNew":"  public static void decode24(final IntBuffer compressedBuffer, final int[] output) {\n    final int numFrameBits = 24;\n    final int mask = (int) ((1L<<numFrameBits) - 1);\n    int outputOffset = 0;\n    for(int step=0;step<4;step++) {\n      int intValue0 = compressedBuffer.get();\n      int intValue1 = compressedBuffer.get();\n      int intValue2 = compressedBuffer.get();\n      int intValue3 = compressedBuffer.get();\n      int intValue4 = compressedBuffer.get();\n      int intValue5 = compressedBuffer.get();\n      int intValue6 = compressedBuffer.get();\n      int intValue7 = compressedBuffer.get();\n      int intValue8 = compressedBuffer.get();\n      int intValue9 = compressedBuffer.get();\n      int intValue10 = compressedBuffer.get();\n      int intValue11 = compressedBuffer.get();\n      int intValue12 = compressedBuffer.get();\n      int intValue13 = compressedBuffer.get();\n      int intValue14 = compressedBuffer.get();\n      int intValue15 = compressedBuffer.get();\n      int intValue16 = compressedBuffer.get();\n      int intValue17 = compressedBuffer.get();\n      int intValue18 = compressedBuffer.get();\n      int intValue19 = compressedBuffer.get();\n      int intValue20 = compressedBuffer.get();\n      int intValue21 = compressedBuffer.get();\n      int intValue22 = compressedBuffer.get();\n      int intValue23 = compressedBuffer.get();\n      output[0 + outputOffset] = intValue0 & mask;\n      output[1 + outputOffset] = ((intValue0 >>> 24) | (intValue1 << 8)) & mask;\n      output[2 + outputOffset] = ((intValue1 >>> 16) | (intValue2 << 16)) & mask;\n      output[3 + outputOffset] = intValue2 >>> 8;\n      output[4 + outputOffset] = intValue3 & mask;\n      output[5 + outputOffset] = ((intValue3 >>> 24) | (intValue4 << 8)) & mask;\n      output[6 + outputOffset] = ((intValue4 >>> 16) | (intValue5 << 16)) & mask;\n      output[7 + outputOffset] = intValue5 >>> 8;\n      output[8 + outputOffset] = intValue6 & mask;\n      output[9 + outputOffset] = ((intValue6 >>> 24) | (intValue7 << 8)) & mask;\n      output[10 + outputOffset] = ((intValue7 >>> 16) | (intValue8 << 16)) & mask;\n      output[11 + outputOffset] = intValue8 >>> 8;\n      output[12 + outputOffset] = intValue9 & mask;\n      output[13 + outputOffset] = ((intValue9 >>> 24) | (intValue10 << 8)) & mask;\n      output[14 + outputOffset] = ((intValue10 >>> 16) | (intValue11 << 16)) & mask;\n      output[15 + outputOffset] = intValue11 >>> 8;\n      output[16 + outputOffset] = intValue12 & mask;\n      output[17 + outputOffset] = ((intValue12 >>> 24) | (intValue13 << 8)) & mask;\n      output[18 + outputOffset] = ((intValue13 >>> 16) | (intValue14 << 16)) & mask;\n      output[19 + outputOffset] = intValue14 >>> 8;\n      output[20 + outputOffset] = intValue15 & mask;\n      output[21 + outputOffset] = ((intValue15 >>> 24) | (intValue16 << 8)) & mask;\n      output[22 + outputOffset] = ((intValue16 >>> 16) | (intValue17 << 16)) & mask;\n      output[23 + outputOffset] = intValue17 >>> 8;\n      output[24 + outputOffset] = intValue18 & mask;\n      output[25 + outputOffset] = ((intValue18 >>> 24) | (intValue19 << 8)) & mask;\n      output[26 + outputOffset] = ((intValue19 >>> 16) | (intValue20 << 16)) & mask;\n      output[27 + outputOffset] = intValue20 >>> 8;\n      output[28 + outputOffset] = intValue21 & mask;\n      output[29 + outputOffset] = ((intValue21 >>> 24) | (intValue22 << 8)) & mask;\n      output[30 + outputOffset] = ((intValue22 >>> 16) | (intValue23 << 16)) & mask;\n      output[31 + outputOffset] = intValue23 >>> 8;\n      outputOffset += 32;\n    }\n  }\n\n","sourceOld":"  // NOTE: hardwired to blockSize == 128\n  public static void decode24(final IntBuffer compressedBuffer, final int[] output) {\n    final int numFrameBits = 24;\n    final int mask = (int) ((1L<<numFrameBits) - 1);\n    int outputOffset = 0;\n    for(int step=0;step<4;step++) {\n      int intValue0 = compressedBuffer.get();\n      int intValue1 = compressedBuffer.get();\n      int intValue2 = compressedBuffer.get();\n      int intValue3 = compressedBuffer.get();\n      int intValue4 = compressedBuffer.get();\n      int intValue5 = compressedBuffer.get();\n      int intValue6 = compressedBuffer.get();\n      int intValue7 = compressedBuffer.get();\n      int intValue8 = compressedBuffer.get();\n      int intValue9 = compressedBuffer.get();\n      int intValue10 = compressedBuffer.get();\n      int intValue11 = compressedBuffer.get();\n      int intValue12 = compressedBuffer.get();\n      int intValue13 = compressedBuffer.get();\n      int intValue14 = compressedBuffer.get();\n      int intValue15 = compressedBuffer.get();\n      int intValue16 = compressedBuffer.get();\n      int intValue17 = compressedBuffer.get();\n      int intValue18 = compressedBuffer.get();\n      int intValue19 = compressedBuffer.get();\n      int intValue20 = compressedBuffer.get();\n      int intValue21 = compressedBuffer.get();\n      int intValue22 = compressedBuffer.get();\n      int intValue23 = compressedBuffer.get();\n      output[0 + outputOffset] = intValue0 & mask;\n      output[1 + outputOffset] = ((intValue0 >>> 24) | (intValue1 << 8)) & mask;\n      output[2 + outputOffset] = ((intValue1 >>> 16) | (intValue2 << 16)) & mask;\n      output[3 + outputOffset] = intValue2 >>> 8;\n      output[4 + outputOffset] = intValue3 & mask;\n      output[5 + outputOffset] = ((intValue3 >>> 24) | (intValue4 << 8)) & mask;\n      output[6 + outputOffset] = ((intValue4 >>> 16) | (intValue5 << 16)) & mask;\n      output[7 + outputOffset] = intValue5 >>> 8;\n      output[8 + outputOffset] = intValue6 & mask;\n      output[9 + outputOffset] = ((intValue6 >>> 24) | (intValue7 << 8)) & mask;\n      output[10 + outputOffset] = ((intValue7 >>> 16) | (intValue8 << 16)) & mask;\n      output[11 + outputOffset] = intValue8 >>> 8;\n      output[12 + outputOffset] = intValue9 & mask;\n      output[13 + outputOffset] = ((intValue9 >>> 24) | (intValue10 << 8)) & mask;\n      output[14 + outputOffset] = ((intValue10 >>> 16) | (intValue11 << 16)) & mask;\n      output[15 + outputOffset] = intValue11 >>> 8;\n      output[16 + outputOffset] = intValue12 & mask;\n      output[17 + outputOffset] = ((intValue12 >>> 24) | (intValue13 << 8)) & mask;\n      output[18 + outputOffset] = ((intValue13 >>> 16) | (intValue14 << 16)) & mask;\n      output[19 + outputOffset] = intValue14 >>> 8;\n      output[20 + outputOffset] = intValue15 & mask;\n      output[21 + outputOffset] = ((intValue15 >>> 24) | (intValue16 << 8)) & mask;\n      output[22 + outputOffset] = ((intValue16 >>> 16) | (intValue17 << 16)) & mask;\n      output[23 + outputOffset] = intValue17 >>> 8;\n      output[24 + outputOffset] = intValue18 & mask;\n      output[25 + outputOffset] = ((intValue18 >>> 24) | (intValue19 << 8)) & mask;\n      output[26 + outputOffset] = ((intValue19 >>> 16) | (intValue20 << 16)) & mask;\n      output[27 + outputOffset] = intValue20 >>> 8;\n      output[28 + outputOffset] = intValue21 & mask;\n      output[29 + outputOffset] = ((intValue21 >>> 24) | (intValue22 << 8)) & mask;\n      output[30 + outputOffset] = ((intValue22 >>> 16) | (intValue23 << 16)) & mask;\n      output[31 + outputOffset] = intValue23 >>> 8;\n      outputOffset += 32;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/block/PackedIntsDecompress#decode24(IntBuffer,int[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pfor/PackedIntsDecompress#decode24(IntBuffer,int[]).mjava","sourceNew":"  public static void decode24(final IntBuffer compressedBuffer, final int[] output) {\n    final int numFrameBits = 24;\n    final int mask = (int) ((1L<<numFrameBits) - 1);\n    int outputOffset = 0;\n    for(int step=0;step<4;step++) {\n      int intValue0 = compressedBuffer.get();\n      int intValue1 = compressedBuffer.get();\n      int intValue2 = compressedBuffer.get();\n      int intValue3 = compressedBuffer.get();\n      int intValue4 = compressedBuffer.get();\n      int intValue5 = compressedBuffer.get();\n      int intValue6 = compressedBuffer.get();\n      int intValue7 = compressedBuffer.get();\n      int intValue8 = compressedBuffer.get();\n      int intValue9 = compressedBuffer.get();\n      int intValue10 = compressedBuffer.get();\n      int intValue11 = compressedBuffer.get();\n      int intValue12 = compressedBuffer.get();\n      int intValue13 = compressedBuffer.get();\n      int intValue14 = compressedBuffer.get();\n      int intValue15 = compressedBuffer.get();\n      int intValue16 = compressedBuffer.get();\n      int intValue17 = compressedBuffer.get();\n      int intValue18 = compressedBuffer.get();\n      int intValue19 = compressedBuffer.get();\n      int intValue20 = compressedBuffer.get();\n      int intValue21 = compressedBuffer.get();\n      int intValue22 = compressedBuffer.get();\n      int intValue23 = compressedBuffer.get();\n      output[0 + outputOffset] = intValue0 & mask;\n      output[1 + outputOffset] = ((intValue0 >>> 24) | (intValue1 << 8)) & mask;\n      output[2 + outputOffset] = ((intValue1 >>> 16) | (intValue2 << 16)) & mask;\n      output[3 + outputOffset] = intValue2 >>> 8;\n      output[4 + outputOffset] = intValue3 & mask;\n      output[5 + outputOffset] = ((intValue3 >>> 24) | (intValue4 << 8)) & mask;\n      output[6 + outputOffset] = ((intValue4 >>> 16) | (intValue5 << 16)) & mask;\n      output[7 + outputOffset] = intValue5 >>> 8;\n      output[8 + outputOffset] = intValue6 & mask;\n      output[9 + outputOffset] = ((intValue6 >>> 24) | (intValue7 << 8)) & mask;\n      output[10 + outputOffset] = ((intValue7 >>> 16) | (intValue8 << 16)) & mask;\n      output[11 + outputOffset] = intValue8 >>> 8;\n      output[12 + outputOffset] = intValue9 & mask;\n      output[13 + outputOffset] = ((intValue9 >>> 24) | (intValue10 << 8)) & mask;\n      output[14 + outputOffset] = ((intValue10 >>> 16) | (intValue11 << 16)) & mask;\n      output[15 + outputOffset] = intValue11 >>> 8;\n      output[16 + outputOffset] = intValue12 & mask;\n      output[17 + outputOffset] = ((intValue12 >>> 24) | (intValue13 << 8)) & mask;\n      output[18 + outputOffset] = ((intValue13 >>> 16) | (intValue14 << 16)) & mask;\n      output[19 + outputOffset] = intValue14 >>> 8;\n      output[20 + outputOffset] = intValue15 & mask;\n      output[21 + outputOffset] = ((intValue15 >>> 24) | (intValue16 << 8)) & mask;\n      output[22 + outputOffset] = ((intValue16 >>> 16) | (intValue17 << 16)) & mask;\n      output[23 + outputOffset] = intValue17 >>> 8;\n      output[24 + outputOffset] = intValue18 & mask;\n      output[25 + outputOffset] = ((intValue18 >>> 24) | (intValue19 << 8)) & mask;\n      output[26 + outputOffset] = ((intValue19 >>> 16) | (intValue20 << 16)) & mask;\n      output[27 + outputOffset] = intValue20 >>> 8;\n      output[28 + outputOffset] = intValue21 & mask;\n      output[29 + outputOffset] = ((intValue21 >>> 24) | (intValue22 << 8)) & mask;\n      output[30 + outputOffset] = ((intValue22 >>> 16) | (intValue23 << 16)) & mask;\n      output[31 + outputOffset] = intValue23 >>> 8;\n      outputOffset += 32;\n    }\n  }\n\n","sourceOld":"  public static void decode24(final IntBuffer compressedBuffer, final int[] output) {\n    final int numFrameBits = 24;\n    final int mask = (int) ((1L<<numFrameBits) - 1);\n    int outputOffset = 0;\n    for(int step=0;step<4;step++) {\n      int intValue0 = compressedBuffer.get();\n      int intValue1 = compressedBuffer.get();\n      int intValue2 = compressedBuffer.get();\n      int intValue3 = compressedBuffer.get();\n      int intValue4 = compressedBuffer.get();\n      int intValue5 = compressedBuffer.get();\n      int intValue6 = compressedBuffer.get();\n      int intValue7 = compressedBuffer.get();\n      int intValue8 = compressedBuffer.get();\n      int intValue9 = compressedBuffer.get();\n      int intValue10 = compressedBuffer.get();\n      int intValue11 = compressedBuffer.get();\n      int intValue12 = compressedBuffer.get();\n      int intValue13 = compressedBuffer.get();\n      int intValue14 = compressedBuffer.get();\n      int intValue15 = compressedBuffer.get();\n      int intValue16 = compressedBuffer.get();\n      int intValue17 = compressedBuffer.get();\n      int intValue18 = compressedBuffer.get();\n      int intValue19 = compressedBuffer.get();\n      int intValue20 = compressedBuffer.get();\n      int intValue21 = compressedBuffer.get();\n      int intValue22 = compressedBuffer.get();\n      int intValue23 = compressedBuffer.get();\n      output[0 + outputOffset] = intValue0 & mask;\n      output[1 + outputOffset] = ((intValue0 >>> 24) | (intValue1 << 8)) & mask;\n      output[2 + outputOffset] = ((intValue1 >>> 16) | (intValue2 << 16)) & mask;\n      output[3 + outputOffset] = intValue2 >>> 8;\n      output[4 + outputOffset] = intValue3 & mask;\n      output[5 + outputOffset] = ((intValue3 >>> 24) | (intValue4 << 8)) & mask;\n      output[6 + outputOffset] = ((intValue4 >>> 16) | (intValue5 << 16)) & mask;\n      output[7 + outputOffset] = intValue5 >>> 8;\n      output[8 + outputOffset] = intValue6 & mask;\n      output[9 + outputOffset] = ((intValue6 >>> 24) | (intValue7 << 8)) & mask;\n      output[10 + outputOffset] = ((intValue7 >>> 16) | (intValue8 << 16)) & mask;\n      output[11 + outputOffset] = intValue8 >>> 8;\n      output[12 + outputOffset] = intValue9 & mask;\n      output[13 + outputOffset] = ((intValue9 >>> 24) | (intValue10 << 8)) & mask;\n      output[14 + outputOffset] = ((intValue10 >>> 16) | (intValue11 << 16)) & mask;\n      output[15 + outputOffset] = intValue11 >>> 8;\n      output[16 + outputOffset] = intValue12 & mask;\n      output[17 + outputOffset] = ((intValue12 >>> 24) | (intValue13 << 8)) & mask;\n      output[18 + outputOffset] = ((intValue13 >>> 16) | (intValue14 << 16)) & mask;\n      output[19 + outputOffset] = intValue14 >>> 8;\n      output[20 + outputOffset] = intValue15 & mask;\n      output[21 + outputOffset] = ((intValue15 >>> 24) | (intValue16 << 8)) & mask;\n      output[22 + outputOffset] = ((intValue16 >>> 16) | (intValue17 << 16)) & mask;\n      output[23 + outputOffset] = intValue17 >>> 8;\n      output[24 + outputOffset] = intValue18 & mask;\n      output[25 + outputOffset] = ((intValue18 >>> 24) | (intValue19 << 8)) & mask;\n      output[26 + outputOffset] = ((intValue19 >>> 16) | (intValue20 << 16)) & mask;\n      output[27 + outputOffset] = intValue20 >>> 8;\n      output[28 + outputOffset] = intValue21 & mask;\n      output[29 + outputOffset] = ((intValue21 >>> 24) | (intValue22 << 8)) & mask;\n      output[30 + outputOffset] = ((intValue22 >>> 16) | (intValue23 << 16)) & mask;\n      output[31 + outputOffset] = intValue23 >>> 8;\n      outputOffset += 32;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"824ab25acd22f2eca198755bafab3cb8b7878493":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["824ab25acd22f2eca198755bafab3cb8b7878493"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"824ab25acd22f2eca198755bafab3cb8b7878493":["5373bc7574123da55ae25e216b6d768ccb1dcd91"],"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":[],"5373bc7574123da55ae25e216b6d768ccb1dcd91":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["824ab25acd22f2eca198755bafab3cb8b7878493","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}