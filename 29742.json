{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","commits":[{"id":"0eff89b16ebd0046c839c5d02ee44500be5c7886","date":1355766557,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/BasicDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d750082a4223c20902ef11ff6a9831d55738ea4","date":1382309916,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr = CoreAdminRequest.getStatus(\n              coreProps.getCoreName(),\n              new HttpSolrServer(coreProps.getBaseUrl()));\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc8313ba7bdaaa48ff54059d0eabff4436ab175","date":1386102048,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    Map<String,DocCollection> collections = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState().getCollectionStates();\n    if (collections.containsKey(collectionName)) {\n      Map<String,Slice> slices = collections.get(collectionName).getSlicesMap();\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + collections.keySet());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3a46663789411cdf016145a96a40cf861798ae3","date":1395119088,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"963b0a9b072593721af39e1d9b815fba17e88e7f","date":1395120846,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrClient server = new HttpSolrClient(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrServer().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrServer server = new HttpSolrServer(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = new HttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          HttpSolrClient server = new HttpSolrClient(coreProps.getBaseUrl());\n          CoreAdminResponse mcr;\n          try {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          } finally {\n            server.shutdown();\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = new HttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = new HttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9974f61802aea1d15849a1053f88f5e89fc32b4","date":1462405923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollectionsMap());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollectionsMap());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dc08f02757dd10637b16a5c65eaaef839a91a9a","date":1462455462,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollectionsMap());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollectionsMap());\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollections());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4efd3fffdd7acd625bb88e455c8097e17f75735","date":1477647201,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollectionsMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59e916a9fff110a528d9bbc0300a4c79347f59d7","date":1477664273,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreStatus coreStatus;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            coreStatus = CoreAdminRequest.getCoreStatus(coreProps.getCoreName(), false, server);\n          }\n          long before = coreStatus.getCoreStartTime().getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59dce44d6a0b58c171de1d47ad8c0a75831f94fd","date":1477668573,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreStatus coreStatus;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            coreStatus = CoreAdminRequest.getCoreStatus(coreProps.getCoreName(), false, server);\n          }\n          long before = coreStatus.getCoreStartTime().getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName,\n      Map<String,Long> urlToTime) throws SolrServerException, IOException {\n    ClusterState clusterState = getCommonCloudSolrClient().getZkStateReader()\n        .getClusterState();\n//    Map<String,DocCollection> collections = clusterState.getCollectionStates();\n    if (clusterState.hasCollection(collectionName)) {\n      Map<String,Slice> slices = clusterState.getSlicesMap(collectionName);\n\n      Iterator<Entry<String,Slice>> it = slices.entrySet().iterator();\n      while (it.hasNext()) {\n        Entry<String,Slice> sliceEntry = it.next();\n        Map<String,Replica> sliceShards = sliceEntry.getValue().getReplicasMap();\n        Iterator<Entry<String,Replica>> shardIt = sliceShards.entrySet()\n            .iterator();\n        while (shardIt.hasNext()) {\n          Entry<String,Replica> shardEntry = shardIt.next();\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(shardEntry.getValue());\n          CoreAdminResponse mcr;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            mcr = CoreAdminRequest.getStatus(coreProps.getCoreName(), server);\n          }\n          long before = mcr.getStartTime(coreProps.getCoreName()).getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection in :\"\n          + clusterState.getCollectionsMap());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreStatus coreStatus;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            coreStatus = CoreAdminRequest.getCoreStatus(coreProps.getCoreName(), false, server);\n          }\n          long before = coreStatus.getCoreStartTime().getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreStatus coreStatus;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            coreStatus = CoreAdminRequest.getCoreStatus(coreProps.getCoreName(), false, server);\n          }\n          long before = coreStatus.getCoreStartTime().getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPIDistributedZkTest#collectStartTimes(String,Map[String,Long]).mjava","sourceNew":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreStatus coreStatus;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            coreStatus = CoreAdminRequest.getCoreStatus(coreProps.getCoreName(), false, server);\n          }\n          long before = coreStatus.getCoreStartTime().getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","sourceOld":"  private void collectStartTimes(String collectionName, Map<String,Long> urlToTime)\n      throws SolrServerException, IOException {\n\n    DocCollection collectionState = getCollectionState(collectionName);\n    if (collectionState != null) {\n      for (Slice shard : collectionState) {\n        for (Replica replica : shard) {\n          ZkCoreNodeProps coreProps = new ZkCoreNodeProps(replica);\n          CoreStatus coreStatus;\n          try (HttpSolrClient server = getHttpSolrClient(coreProps.getBaseUrl())) {\n            coreStatus = CoreAdminRequest.getCoreStatus(coreProps.getCoreName(), false, server);\n          }\n          long before = coreStatus.getCoreStartTime().getTime();\n          urlToTime.put(coreProps.getCoreUrl(), before);\n        }\n      }\n    } else {\n      throw new IllegalArgumentException(\"Could not find collection \" + collectionName);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["73450c0955930295d34703e7ddbfc6973b7a121a"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"b94236357aaa22b76c10629851fe4e376e0cea82":["59e916a9fff110a528d9bbc0300a4c79347f59d7","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":["7dc08f02757dd10637b16a5c65eaaef839a91a9a","59e916a9fff110a528d9bbc0300a4c79347f59d7"],"d3a46663789411cdf016145a96a40cf861798ae3":["cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"73450c0955930295d34703e7ddbfc6973b7a121a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","73450c0955930295d34703e7ddbfc6973b7a121a"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["59e916a9fff110a528d9bbc0300a4c79347f59d7"],"bafca15d8e408346a67f4282ad1143b88023893b":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"59e916a9fff110a528d9bbc0300a4c79347f59d7":["a4efd3fffdd7acd625bb88e455c8097e17f75735"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["d3a46663789411cdf016145a96a40cf861798ae3"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","73450c0955930295d34703e7ddbfc6973b7a121a"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d750082a4223c20902ef11ff6a9831d55738ea4":["0eff89b16ebd0046c839c5d02ee44500be5c7886"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2d750082a4223c20902ef11ff6a9831d55738ea4","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["2d750082a4223c20902ef11ff6a9831d55738ea4"]},"commit2Childs":{"a4efd3fffdd7acd625bb88e455c8097e17f75735":["59e916a9fff110a528d9bbc0300a4c79347f59d7"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59dce44d6a0b58c171de1d47ad8c0a75831f94fd":[],"d3a46663789411cdf016145a96a40cf861798ae3":["963b0a9b072593721af39e1d9b815fba17e88e7f"],"73450c0955930295d34703e7ddbfc6973b7a121a":["a4efd3fffdd7acd625bb88e455c8097e17f75735","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"7dc08f02757dd10637b16a5c65eaaef839a91a9a":["59dce44d6a0b58c171de1d47ad8c0a75831f94fd"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"59e916a9fff110a528d9bbc0300a4c79347f59d7":["b94236357aaa22b76c10629851fe4e376e0cea82","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"963b0a9b072593721af39e1d9b815fba17e88e7f":["bafca15d8e408346a67f4282ad1143b88023893b"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0eff89b16ebd0046c839c5d02ee44500be5c7886"],"0eff89b16ebd0046c839c5d02ee44500be5c7886":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","2d750082a4223c20902ef11ff6a9831d55738ea4"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["73450c0955930295d34703e7ddbfc6973b7a121a","7dc08f02757dd10637b16a5c65eaaef839a91a9a","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","e9974f61802aea1d15849a1053f88f5e89fc32b4"],"2d750082a4223c20902ef11ff6a9831d55738ea4":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cdc8313ba7bdaaa48ff54059d0eabff4436ab175"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e9974f61802aea1d15849a1053f88f5e89fc32b4":["73450c0955930295d34703e7ddbfc6973b7a121a"],"cdc8313ba7bdaaa48ff54059d0eabff4436ab175":["d3a46663789411cdf016145a96a40cf861798ae3","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","59dce44d6a0b58c171de1d47ad8c0a75831f94fd","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}