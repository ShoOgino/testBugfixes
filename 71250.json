{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest#filterTest(TokenStream,String[],int[]).mjava","commits":[{"id":"02d45bf28f25d8506953133d6cd797a7eabe1c36","date":1249181850,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest#filterTest(TokenStream,String[],int[]).mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest#filterTest(TokenStream,Token[],int[]).mjava","sourceNew":"  protected TokenStream filterTest(final TokenStream filter,\n                                   final String[] tokensToCompare,\n                                   final int[] positionIncrements)\n      throws IOException {\n\n    int i = 0;\n    final Token reusableToken = new Token();\n\n    for (Token nextToken = filter.next(reusableToken)\n        ; i < tokensToCompare.length\n        ; nextToken = filter.next(reusableToken)) {\n\n      if (null != nextToken) {\n        final String termText = nextToken.term();\n        final String goldText = tokensToCompare[i];\n\n        assertEquals(\"Wrong termText\", goldText, termText);\n        assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n                     positionIncrements[i], nextToken.getPositionIncrement());\n      }else{\n        assertNull(tokensToCompare[i]);\n      }\n      i++;\n    }\n    return filter;\n  }\n\n","sourceOld":"  protected TokenStream filterTest(final TokenStream filter,\n                                   final Token[] tokensToCompare,\n                                   final int[] positionIncrements)\n      throws IOException {\n\n    int i = 0;\n    final Token reusableToken = new Token();\n\n    for (Token nextToken = filter.next(reusableToken)\n        ; i < tokensToCompare.length\n        ; nextToken = filter.next(reusableToken)) {\n\n      if (null != nextToken) {\n        final String termText = nextToken.term();\n        final String goldText = tokensToCompare[i].term();\n\n        assertEquals(\"Wrong termText\", goldText, termText);\n        assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n                     positionIncrements[i], nextToken.getPositionIncrement());\n      }else{\n        assertNull(tokensToCompare[i]);\n      }\n      i++;\n    }\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc","date":1251117853,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/position/PositionFilterTest#filterTest(TokenStream,String[],int[]).mjava","sourceNew":null,"sourceOld":"  protected TokenStream filterTest(final TokenStream filter,\n                                   final String[] tokensToCompare,\n                                   final int[] positionIncrements)\n      throws IOException {\n\n    int i = 0;\n    final Token reusableToken = new Token();\n\n    for (Token nextToken = filter.next(reusableToken)\n        ; i < tokensToCompare.length\n        ; nextToken = filter.next(reusableToken)) {\n\n      if (null != nextToken) {\n        final String termText = nextToken.term();\n        final String goldText = tokensToCompare[i];\n\n        assertEquals(\"Wrong termText\", goldText, termText);\n        assertEquals(\"Wrong positionIncrement for token \\\"\" + termText + \"\\\"\",\n                     positionIncrements[i], nextToken.getPositionIncrement());\n      }else{\n        assertNull(tokensToCompare[i]);\n      }\n      i++;\n    }\n    return filter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["02d45bf28f25d8506953133d6cd797a7eabe1c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"02d45bf28f25d8506953133d6cd797a7eabe1c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["02d45bf28f25d8506953133d6cd797a7eabe1c36"],"9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"02d45bf28f25d8506953133d6cd797a7eabe1c36":["9fa6d7a7e7208b52f1b0c4c87005d34ab0dd37dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}