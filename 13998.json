{"path":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","commits":[{"id":"eecdad1988b0b00f74f945528b689ef1eebf763d","date":1247586785,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"/dev/null","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560eb5b313b37946d4f94aa72f3303de59147c88","date":1253017871,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","pathOld":"contrib/extraction/src/main/java/org/apache/solr/handler/extraction/SolrContentHandler#addField(String,String,String[]).mjava","sourceNew":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","sourceOld":"  // Naming rules:\n  // 1) optionally map names to nicenames (lowercase+underscores)\n  // 2) execute \"map\" commands\n  // 3) if resulting field is unknown, map it to a common prefix\n  private void addField(String fname, String fval, String[] vals) {\n    if (lowerNames) {\n      StringBuilder sb = new StringBuilder();\n      for (int i=0; i<fname.length(); i++) {\n        char ch = fname.charAt(i);\n        if (!Character.isLetterOrDigit(ch)) ch='_';\n        else ch=Character.toLowerCase(ch);\n        sb.append(ch);\n      }\n      fname = sb.toString();\n    }    \n\n    String name = findMappedName(fname);\n    SchemaField sf = schema.getFieldOrNull(name);\n    if (sf==null && unknownFieldPrefix.length() > 0) {\n      name = unknownFieldPrefix + name;\n      sf = schema.getFieldOrNull(name);\n    } else if (sf == null && defaultField.length() > 0 && name.equals(Metadata.RESOURCE_NAME_KEY) == false /*let the fall through below handle this*/){\n      name = defaultField;\n      sf = schema.getFieldOrNull(name);\n    }\n\n    // Arguably we should handle this as a special case. Why? Because unlike basically\n    // all the other fields in metadata, this one was probably set not by Tika by in\n    // ExtractingDocumentLoader.load(). You shouldn't have to define a mapping for this\n    // field just because you specified a resource.name parameter to the handler, should\n    // you?\n    if (sf == null && unknownFieldPrefix.length()==0 && name == Metadata.RESOURCE_NAME_KEY) {\n      return;\n    }\n\n    // normalize val params so vals.length>1\n    if (vals != null && vals.length==1) {\n      fval = vals[0];\n      vals = null;\n    }\n\n    // single valued field with multiple values... catenate them.\n    if (sf != null && !sf.multiValued() && vals != null) {\n      StringBuilder builder = new StringBuilder();\n      boolean first=true;\n      for (String val : vals) {\n        if (first) {\n          first=false;\n        } else {\n          builder.append(' ');\n        }\n        builder.append(val);\n      }\n      fval = builder.toString();\n      vals=null;\n    }\n\n    float boost = getBoost(name);\n\n    if (fval != null) {\n      document.addField(name, transformValue(fval, sf), boost);\n    }\n\n    if (vals != null) {\n      for (String val : vals) {\n        document.addField(name, transformValue(val, sf), boost);\n      }\n    }\n\n    // no value set - throw exception for debugging\n    // if (vals==null && fval==null) throw new RuntimeException(name + \" has no non-null value \");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eecdad1988b0b00f74f945528b689ef1eebf763d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["560eb5b313b37946d4f94aa72f3303de59147c88"],"560eb5b313b37946d4f94aa72f3303de59147c88":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"eecdad1988b0b00f74f945528b689ef1eebf763d":["560eb5b313b37946d4f94aa72f3303de59147c88"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"560eb5b313b37946d4f94aa72f3303de59147c88":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}