{"path":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","commits":[{"id":"ff266254aa2c0b84006f8f3088ee25337661554d","date":1318269918,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        ref.copy(values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          ref.copy(random.nextInt());\n          values[i] = ref.asInt();\n        } else {\n          ref.copy(random.nextLong());\n          values[i] = ref.asLong();\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1a65994c1e63cc607f3176b95dba35bb4e58b69f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a65994c1e63cc607f3176b95dba35bb4e58b69f","date":1322143796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        ref.copy(values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          ref.copy(random.nextInt());\n          values[i] = asInt(ref);\n        } else {\n          ref.copy(random.nextLong());\n          values[i] = asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        ref.copy(values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          ref.copy(random.nextInt());\n          values[i] = ref.asInt();\n        } else {\n          ref.copy(random.nextLong());\n          values[i] = ref.asLong();\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":["ff266254aa2c0b84006f8f3088ee25337661554d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58cba71fe71c7bebfe9f29b09586d479060c26b9","date":1322144683,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        ref.copyLong(values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          ref.copyInt(random.nextInt());\n          values[i] = asInt(ref);\n        } else {\n          ref.copyLong(random.nextLong());\n          values[i] = asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        ref.copy(values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          ref.copy(random.nextInt());\n          values[i] = asInt(ref);\n        } else {\n          ref.copy(random.nextLong());\n          values[i] = asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e8fdd836dbd4f01a00be6ffbe2c2df8d74898b","date":1322155235,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        ref.copyLong(values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          ref.copyInt(random.nextInt());\n          values[i] = asInt(ref);\n        } else {\n          ref.copyLong(random.nextLong());\n          values[i] = asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,DocValuesField,Type,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer, DocValuesField valField,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,DocValuesField,Type,long[],int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/values/TestTypePromotion#index(IndexWriter,IndexDocValuesField,ValueType,long[],int,int).mjava","sourceNew":"  public void index(IndexWriter writer, DocValuesField valField,\n      Type valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","sourceOld":"  public void index(IndexWriter writer, IndexDocValuesField valField,\n      ValueType valueType, long[] values, int offset, int num)\n      throws CorruptIndexException, IOException {\n    BytesRef ref = new BytesRef(new byte[] { 1, 2, 3, 4 });\n    for (int i = offset; i < offset + num; i++) {\n      Document doc = new Document();\n      doc.add(new Field(\"id\", i + \"\", TextField.TYPE_STORED));\n      switch (valueType) {\n      case VAR_INTS:\n        values[i] = random.nextInt();\n        valField.setInt(values[i]);\n        break;\n      case FIXED_INTS_16:\n        values[i] = random.nextInt(Short.MAX_VALUE);\n        valField.setInt((short) values[i], true);\n        break;\n      case FIXED_INTS_32:\n        values[i] = random.nextInt();\n        valField.setInt((int) values[i], true);\n        break;\n      case FIXED_INTS_64:\n        values[i] = random.nextLong();\n        valField.setInt(values[i], true);\n        break;\n      case FLOAT_64:\n        double nextDouble = random.nextDouble();\n        values[i] = Double.doubleToRawLongBits(nextDouble);\n        valField.setFloat(nextDouble);\n        break;\n      case FLOAT_32:\n        final float nextFloat = random.nextFloat();\n        values[i] = Double.doubleToRawLongBits(nextFloat);\n        valField.setFloat(nextFloat);\n        break;\n      case FIXED_INTS_8:\n         values[i] = (byte) i;\n        valField.setInt((byte)values[i], true);\n        break;\n      case BYTES_FIXED_DEREF:\n      case BYTES_FIXED_SORTED:\n      case BYTES_FIXED_STRAIGHT:\n        values[i] = random.nextLong();\n        BytesRefUtils.copyLong(ref, values[i]);\n        valField.setBytes(ref, valueType);\n        break;\n      case BYTES_VAR_DEREF:\n      case BYTES_VAR_SORTED:\n      case BYTES_VAR_STRAIGHT:\n        if (random.nextBoolean()) {\n          BytesRefUtils.copyInt(ref, random.nextInt());\n          values[i] = BytesRefUtils.asInt(ref);\n        } else {\n          BytesRefUtils.copyLong(ref, random.nextLong());\n          values[i] = BytesRefUtils.asLong(ref);\n        }\n        valField.setBytes(ref, valueType);\n        break;\n\n      default:\n        fail(\"unexpected value \" + valueType);\n\n      }\n      doc.add(valField);\n      writer.addDocument(doc);\n      if (random.nextInt(10) == 0) {\n        writer.commit();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff266254aa2c0b84006f8f3088ee25337661554d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a65994c1e63cc607f3176b95dba35bb4e58b69f":["ff266254aa2c0b84006f8f3088ee25337661554d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"58cba71fe71c7bebfe9f29b09586d479060c26b9":["1a65994c1e63cc607f3176b95dba35bb4e58b69f"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["94e8fdd836dbd4f01a00be6ffbe2c2df8d74898b"],"94e8fdd836dbd4f01a00be6ffbe2c2df8d74898b":["58cba71fe71c7bebfe9f29b09586d479060c26b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["94e8fdd836dbd4f01a00be6ffbe2c2df8d74898b","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"ff266254aa2c0b84006f8f3088ee25337661554d":["1a65994c1e63cc607f3176b95dba35bb4e58b69f"],"1a65994c1e63cc607f3176b95dba35bb4e58b69f":["58cba71fe71c7bebfe9f29b09586d479060c26b9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff266254aa2c0b84006f8f3088ee25337661554d"],"58cba71fe71c7bebfe9f29b09586d479060c26b9":["94e8fdd836dbd4f01a00be6ffbe2c2df8d74898b"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"94e8fdd836dbd4f01a00be6ffbe2c2df8d74898b":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}