{"path":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","commits":[{"id":"ff113a9993e8c54238f321fd07b74e8b28913b85","date":1531207054,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisablesSetMinScore() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n\n    Scorer scorer = new Scorer(null) {\n      @Override\n      public int docID() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public DocIdSetIterator iterator() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void setMinCompetitiveScore(float minScore) {\n        throw new AssertionError();\n      }\n    };\n\n    Collector collector = new SimpleCollector() {\n      private Scorer scorer;\n      float minScore = 0;\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.TOP_SCORES;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        minScore = Math.nextUp(minScore);\n        scorer.setMinCompetitiveScore(minScore);\n      }\n    };\n    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());\n    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    leafCollector.collect(0); // no exception\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisablesSetMinScore() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n\n    Scorer scorer = new Scorer(null) {\n      @Override\n      public int docID() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public DocIdSetIterator iterator() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void setMinCompetitiveScore(float minScore) {\n        throw new AssertionError();\n      }\n    };\n\n    Collector collector = new SimpleCollector() {\n      private Scorer scorer;\n      float minScore = 0;\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.TOP_SCORES;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        minScore = Math.nextUp(minScore);\n        scorer.setMinCompetitiveScore(minScore);\n      }\n    };\n    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());\n    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    leafCollector.collect(0); // no exception\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testDisablesSetMinScore() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n\n    Scorer scorer = new Scorer(null) {\n      @Override\n      public int docID() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public DocIdSetIterator iterator() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void setMinCompetitiveScore(float minScore) {\n        throw new AssertionError();\n      }\n    };\n\n    Collector collector = new SimpleCollector() {\n      private Scorer scorer;\n      float minScore = 0;\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.TOP_SCORES;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        minScore = Math.nextUp(minScore);\n        scorer.setMinCompetitiveScore(minScore);\n      }\n    };\n    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());\n    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    leafCollector.collect(0); // no exception\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","sourceNew":"  public void testDisablesSetMinScore() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n\n    Scorer scorer = new Scorer(null) {\n      @Override\n      public int docID() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public DocIdSetIterator iterator() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void setMinCompetitiveScore(float minScore) {\n        throw new AssertionError();\n      }\n    };\n\n    Collector collector = new SimpleCollector() {\n      private Scorable scorer;\n      float minScore = 0;\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.TOP_SCORES;\n      }\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        minScore = Math.nextUp(minScore);\n        scorer.setMinCompetitiveScore(minScore);\n      }\n    };\n    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());\n    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    leafCollector.collect(0); // no exception\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDisablesSetMinScore() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n\n    Scorer scorer = new Scorer(null) {\n      @Override\n      public int docID() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public DocIdSetIterator iterator() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void setMinCompetitiveScore(float minScore) {\n        throw new AssertionError();\n      }\n    };\n\n    Collector collector = new SimpleCollector() {\n      private Scorer scorer;\n      float minScore = 0;\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.TOP_SCORES;\n      }\n\n      @Override\n      public void setScorer(Scorer scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        minScore = Math.nextUp(minScore);\n        scorer.setMinCompetitiveScore(minScore);\n      }\n    };\n    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());\n    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    leafCollector.collect(0); // no exception\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3","date":1536316907,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMultiCollector#testDisablesSetMinScore().mjava","sourceNew":"  public void testDisablesSetMinScore() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n\n    Scorable scorer = new Scorable() {\n      @Override\n      public int docID() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float score() {\n        return 0;\n      }\n\n      @Override\n      public void setMinCompetitiveScore(float minScore) {\n        throw new AssertionError();\n      }\n    };\n\n    Collector collector = new SimpleCollector() {\n      private Scorable scorer;\n      float minScore = 0;\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.TOP_SCORES;\n      }\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        minScore = Math.nextUp(minScore);\n        scorer.setMinCompetitiveScore(minScore);\n      }\n    };\n    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());\n    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    leafCollector.collect(0); // no exception\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testDisablesSetMinScore() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    w.addDocument(new Document());\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n\n    Scorer scorer = new Scorer(null) {\n      @Override\n      public int docID() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float score() throws IOException {\n        return 0;\n      }\n\n      @Override\n      public DocIdSetIterator iterator() {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public float getMaxScore(int upTo) throws IOException {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public void setMinCompetitiveScore(float minScore) {\n        throw new AssertionError();\n      }\n    };\n\n    Collector collector = new SimpleCollector() {\n      private Scorable scorer;\n      float minScore = 0;\n\n      @Override\n      public ScoreMode scoreMode() {\n        return ScoreMode.TOP_SCORES;\n      }\n\n      @Override\n      public void setScorer(Scorable scorer) throws IOException {\n        this.scorer = scorer;\n      }\n\n      @Override\n      public void collect(int doc) throws IOException {\n        minScore = Math.nextUp(minScore);\n        scorer.setMinCompetitiveScore(minScore);\n      }\n    };\n    Collector multiCollector = MultiCollector.wrap(collector, new TotalHitCountCollector());\n    LeafCollector leafCollector = multiCollector.getLeafCollector(reader.leaves().get(0));\n    leafCollector.setScorer(scorer);\n    leafCollector.collect(0); // no exception\n\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff113a9993e8c54238f321fd07b74e8b28913b85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["ff113a9993e8c54238f321fd07b74e8b28913b85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"ff113a9993e8c54238f321fd07b74e8b28913b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff113a9993e8c54238f321fd07b74e8b28913b85"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"285244982ce6aa163d1e60a707f0e6e121736ce5":["6dbd758f2776b0129f6b3641b6490ddc68d7b0f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ff113a9993e8c54238f321fd07b74e8b28913b85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"6dbd758f2776b0129f6b3641b6490ddc68d7b0f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff113a9993e8c54238f321fd07b74e8b28913b85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","285244982ce6aa163d1e60a707f0e6e121736ce5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}