{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Postings).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Bits,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(SpanNearQuery.this, subSpans)\n          : new NearSpansOrdered(SpanNearQuery.this, subSpans);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Bits acceptDocs, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, acceptDocs, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(SpanNearQuery.this, subSpans)\n          : new NearSpansOrdered(SpanNearQuery.this, subSpans);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"557b118fdfb9d28b6cfe38fac273af58c4d51135","date":1445505363,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(this, slop, subSpans, getSimScorer(context))\n          : new NearSpansOrdered(this, slop, subSpans, getSimScorer(context));\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(SpanNearQuery.this, subSpans)\n          : new NearSpansOrdered(SpanNearQuery.this, subSpans);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Postings).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.SpanNearWeight#getSpans(LeafReaderContext,Postings).mjava","sourceNew":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(slop, subSpans)\n          : new NearSpansOrdered(slop, subSpans);\n    }\n\n","sourceOld":"    @Override\n    public Spans getSpans(final LeafReaderContext context, Postings requiredPostings) throws IOException {\n\n      Terms terms = context.reader().terms(field);\n      if (terms == null) {\n        return null; // field does not exist\n      }\n\n      ArrayList<Spans> subSpans = new ArrayList<>(clauses.size());\n      for (SpanWeight w : subWeights) {\n        Spans subSpan = w.getSpans(context, requiredPostings);\n        if (subSpan != null) {\n          subSpans.add(subSpan);\n        } else {\n          return null; // all required\n        }\n      }\n\n      // all NearSpans require at least two subSpans\n      return (!inOrder) ? new NearSpansUnordered(this, slop, subSpans, getSimScorer(context))\n          : new NearSpansOrdered(this, slop, subSpans, getSimScorer(context));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7dd748bb245633a8195281556bb0e68a6ea97d18"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["557b118fdfb9d28b6cfe38fac273af58c4d51135"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"557b118fdfb9d28b6cfe38fac273af58c4d51135":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}