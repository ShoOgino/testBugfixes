{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","commits":[{"id":"2d4e985daefcb892b529223b478c47985fc3c483","date":1395658491,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(SolrResourceLoader,SolrCore).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    \n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(SolrResourceLoader resourceLoader, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    SolrConfig config = new SolrConfig(resourceLoader, getSolrConfig().getName(), null);\n    \n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(getLatestSchema().getResourceName(), config);\n    \n    solrCoreState.increfSolrCoreState();\n    \n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), config,\n        schema, coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab20a04a303d3d2a5078076f4633e0482d643cc0","date":1398201811,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange || !coreConfig.getSolrConfig().nrtMode) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    \n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":["2d4e985daefcb892b529223b478c47985fc3c483"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange || !coreConfig.getSolrConfig().nrtMode) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    \n    if (!getNewIndexDir().equals(getIndexDir())) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1","date":1417011337,"type":5,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#reload(ConfigSet,SolrCore).mjava","sourceNew":"  public SolrCore reload(ConfigSet coreConfig) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    SolrCore currentCore;\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange || !coreConfig.getSolrConfig().nrtMode) {\n      // the directory is changing, don't pass on state\n      currentCore = null;\n    } else {\n      currentCore = this;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, currentCore);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","sourceOld":"  public SolrCore reload(ConfigSet coreConfig, SolrCore prev) throws IOException,\n      ParserConfigurationException, SAXException {\n    \n    solrCoreState.increfSolrCoreState();\n    boolean indexDirChange = !getNewIndexDir().equals(getIndexDir());\n    if (indexDirChange || !coreConfig.getSolrConfig().nrtMode) {\n      // the directory is changing, don't pass on state\n      prev = null;\n    }\n    \n    SolrCore core = new SolrCore(getName(), getDataDir(), coreConfig.getSolrConfig(),\n        coreConfig.getIndexSchema(), coreDescriptor, updateHandler, this.solrDelPolicy, prev);\n    core.solrDelPolicy = this.solrDelPolicy;\n    \n\n    // we open a new indexwriter to pick up the latest config\n    core.getUpdateHandler().getSolrCoreState().newIndexWriter(core, false);\n    \n    core.getSearcher(true, false, null, true);\n    \n    return core;\n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["2d4e985daefcb892b529223b478c47985fc3c483","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["2d4e985daefcb892b529223b478c47985fc3c483"],"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1":["ab20a04a303d3d2a5078076f4633e0482d643cc0"],"2d4e985daefcb892b529223b478c47985fc3c483":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d4e985daefcb892b529223b478c47985fc3c483"],"ab20a04a303d3d2a5078076f4633e0482d643cc0":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1"],"2d4e985daefcb892b529223b478c47985fc3c483":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","ab20a04a303d3d2a5078076f4633e0482d643cc0"],"9ea4e4b34672fd15dc900deeb7085bfc1e2d4eb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}