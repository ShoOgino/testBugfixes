{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public InvertedFields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public InvertedFields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  /** Return a term frequency vector for the specified document and field. The\n   *  vector returned contains term numbers and frequencies for all terms in\n   *  the specified field of this document, if the field had storeTermVector\n   *  flag set.  If the flag was not set, the method returns null.\n   * @throws IOException\n   */\n  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d0ee734a67ae20fd4c683458847aebde606bb02","date":1352490740,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    checkBounds(docID);\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    checkBounds(docID);\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"505bff044e47a553f461b6f4484d1d08faf4ac85","date":1420728783,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CodecReader#getTermVectors(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#getTermVectors(int).mjava","sourceNew":"  @Override\n  public final Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    checkBounds(docID);\n    return termVectorsReader.get(docID);\n  }\n\n","sourceOld":"  @Override\n  public Fields getTermVectors(int docID) throws IOException {\n    TermVectorsReader termVectorsReader = getTermVectorsReader();\n    if (termVectorsReader == null) {\n      return null;\n    }\n    checkBounds(docID);\n    return termVectorsReader.get(docID);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","4d0ee734a67ae20fd4c683458847aebde606bb02"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"4d0ee734a67ae20fd4c683458847aebde606bb02":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["4d0ee734a67ae20fd4c683458847aebde606bb02"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["505bff044e47a553f461b6f4484d1d08faf4ac85"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["407687e67faf6e1f02a211ca078d8e3eed631027","4d0ee734a67ae20fd4c683458847aebde606bb02"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"4d0ee734a67ae20fd4c683458847aebde606bb02":["407687e67faf6e1f02a211ca078d8e3eed631027","505bff044e47a553f461b6f4484d1d08faf4ac85"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"505bff044e47a553f461b6f4484d1d08faf4ac85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}