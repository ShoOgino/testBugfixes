{"path":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runTool(CommandLine).mjava","commits":[{"id":"547b9bdc942b65ebcd943738bb12c2a222fcf566","date":1432317527,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      System.out.println(\"\\nPOSTing request to Config API: \"+solrUrl+updatePath);\n      System.out.println(jsonBody);\n      System.out.println();\n\n      int exitStatus = 0;\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            System.out.println(\"Successfully \"+action+\" \"+property+\" to \"+value);\n          } else {\n            System.out.println(\"Successfully \"+action+\" \"+property);\n          }\n        } else {\n          String errMsg = \"Failed to \"+action+\" property due to:\\n\"+result;\n          System.err.println(\"\\nERROR: \"+errMsg+\"\\n\");\n          exitStatus = 1;\n        }\n      }\n      return exitStatus;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf","date":1432317730,"type":4,"author":"Timothy Potter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runTool(CommandLine).mjava","sourceNew":null,"sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      System.out.println(\"\\nPOSTing request to Config API: \"+solrUrl+updatePath);\n      System.out.println(jsonBody);\n      System.out.println();\n\n      int exitStatus = 0;\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            System.out.println(\"Successfully \"+action+\" \"+property+\" to \"+value);\n          } else {\n            System.out.println(\"Successfully \"+action+\" \"+property);\n          }\n        } else {\n          String errMsg = \"Failed to \"+action+\" property due to:\\n\"+result;\n          System.err.println(\"\\nERROR: \"+errMsg+\"\\n\");\n          exitStatus = 1;\n        }\n      }\n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"919a9ff0212f46eb240b8716a6d189b06659d3f2","date":1432317985,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runTool(CommandLine).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      System.out.println(\"\\nPOSTing request to Config API: \"+solrUrl+updatePath);\n      System.out.println(jsonBody);\n      System.out.println();\n\n      int exitStatus = 0;\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            System.out.println(\"Successfully \"+action+\" \"+property+\" to \"+value);\n          } else {\n            System.out.println(\"Successfully \"+action+\" \"+property);\n          }\n        } else {\n          String errMsg = \"Failed to \"+action+\" property due to:\\n\"+result;\n          System.err.println(\"\\nERROR: \"+errMsg+\"\\n\");\n          exitStatus = 1;\n        }\n      }\n      return exitStatus;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca20be81c9284c840498143264e583ccbb8525a","date":1438705932,"type":5,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runImpl(CommandLine).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SolrCLI.ConfigTool#runTool(CommandLine).mjava","sourceNew":"    protected void runImpl(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      echo(\"\\nPOSTing request to Config API: \" + solrUrl + updatePath);\n      echo(jsonBody);\n\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            echo(\"Successfully \" + action + \" \" + property + \" to \" + value);\n          } else {\n            echo(\"Successfully \" + action + \" \" + property);\n          }\n        } else {\n          throw new Exception(\"Failed to \"+action+\" property due to:\\n\"+result);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public int runTool(CommandLine cli) throws Exception {\n      String solrUrl = resolveSolrUrl(cli);\n      String action = cli.getOptionValue(\"action\", \"set-property\");\n      String collection = cli.getOptionValue(\"collection\", \"gettingstarted\");\n      String property = cli.getOptionValue(\"property\");\n      String value = cli.getOptionValue(\"value\");\n\n      Map<String,Object> jsonObj = new HashMap<>();\n      if (value != null) {\n        Map<String,String> setMap = new HashMap<>();\n        setMap.put(property, value);\n        jsonObj.put(action, setMap);\n      } else {\n        jsonObj.put(action, property);\n      }\n\n      CharArr arr = new CharArr();\n      (new JSONWriter(arr, 0)).write(jsonObj);\n      String jsonBody = arr.toString();\n\n      String updatePath = \"/\"+collection+\"/config\";\n\n      System.out.println(\"\\nPOSTing request to Config API: \"+solrUrl+updatePath);\n      System.out.println(jsonBody);\n      System.out.println();\n\n      int exitStatus = 0;\n      try (SolrClient solrClient = new HttpSolrClient(solrUrl)) {\n        NamedList<Object> result = postJsonToSolr(solrClient, updatePath, jsonBody);\n        Integer statusCode = (Integer)((NamedList)result.get(\"responseHeader\")).get(\"status\");\n        if (statusCode == 0) {\n          if (value != null) {\n            System.out.println(\"Successfully \"+action+\" \"+property+\" to \"+value);\n          } else {\n            System.out.println(\"Successfully \"+action+\" \"+property);\n          }\n        } else {\n          String errMsg = \"Failed to \"+action+\" property due to:\\n\"+result;\n          System.err.println(\"\\nERROR: \"+errMsg+\"\\n\");\n          exitStatus = 1;\n        }\n      }\n      return exitStatus;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ca20be81c9284c840498143264e583ccbb8525a":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ca20be81c9284c840498143264e583ccbb8525a"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["547b9bdc942b65ebcd943738bb12c2a222fcf566"]},"commit2Childs":{"4ca20be81c9284c840498143264e583ccbb8525a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"547b9bdc942b65ebcd943738bb12c2a222fcf566":["b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["547b9bdc942b65ebcd943738bb12c2a222fcf566"],"919a9ff0212f46eb240b8716a6d189b06659d3f2":["4ca20be81c9284c840498143264e583ccbb8525a"],"b3e2df0ef4d31d965ccc4afc2ec6349c06c3cccf":["919a9ff0212f46eb240b8716a6d189b06659d3f2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}