{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0 && \n            (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0 && \n            (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0 && \n            (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0 && \n            (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54c40f2a4f8741ec845d55de05ea762e631b5c90","date":1294602494,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e679b9c5f68f1f331de920ae8366af75b44060","date":1295555804,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  protected boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer();\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd86d8c5713fc65e119372f12a3c5fdc47987b56","date":1318525216,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // TODO: can we remove this?  \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & prohibitedMask) == 0) {\n\n            // TODO: re-enable this if BQ ever sends us required\n            // clauses\n            //&& (current.bits & requiredMask) == requiredMask) {\n          \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#score(Collector,int,int).mjava","sourceNew":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // TODO: can we remove this?  \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","sourceOld":"  // firstDocID is ignored since nextDoc() initializes 'current'\n  @Override\n  public boolean score(Collector collector, int max, int firstDocID) throws IOException {\n    // Make sure it's only BooleanScorer that calls us:\n    assert firstDocID == -1;\n    boolean more;\n    Bucket tmp;\n    BucketScorer bs = new BucketScorer(weight);\n\n    // The internal loop will set the score and doc before calling collect.\n    collector.setScorer(bs);\n    do {\n      bucketTable.first = null;\n      \n      while (current != null) {         // more queued \n\n        // check prohibited & required\n        if ((current.bits & PROHIBITED_MASK) == 0) {\n\n          // TODO: re-enable this if BQ ever sends us required\n          // clauses\n          //&& (current.bits & requiredMask) == requiredMask) {\n          \n          // TODO: can we remove this?  \n          if (current.doc >= max){\n            tmp = current;\n            current = current.next;\n            tmp.next = bucketTable.first;\n            bucketTable.first = tmp;\n            continue;\n          }\n          \n          if (current.coord >= minNrShouldMatch) {\n            bs.score = current.score * coordFactors[current.coord];\n            bs.doc = current.doc;\n            bs.freq = current.coord;\n            collector.collect(current.doc);\n          }\n        }\n        \n        current = current.next;         // pop the queue\n      }\n      \n      if (bucketTable.first != null){\n        current = bucketTable.first;\n        bucketTable.first = current.next;\n        return true;\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n      current = bucketTable.first;\n      \n    } while (current != null || more);\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54c40f2a4f8741ec845d55de05ea762e631b5c90":["e4946500259641951dbd7f8a61956bf14bef3f60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["e5e679b9c5f68f1f331de920ae8366af75b44060"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["e4946500259641951dbd7f8a61956bf14bef3f60","e5e679b9c5f68f1f331de920ae8366af75b44060"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","e4946500259641951dbd7f8a61956bf14bef3f60"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["54c40f2a4f8741ec845d55de05ea762e631b5c90"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","54c40f2a4f8741ec845d55de05ea762e631b5c90"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["868da859b43505d9d2a023bfeae6dd0c795f5295","e5e679b9c5f68f1f331de920ae8366af75b44060"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e4946500259641951dbd7f8a61956bf14bef3f60":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"54c40f2a4f8741ec845d55de05ea762e631b5c90":["e5e679b9c5f68f1f331de920ae8366af75b44060","868da859b43505d9d2a023bfeae6dd0c795f5295"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"e5e679b9c5f68f1f331de920ae8366af75b44060":["dd86d8c5713fc65e119372f12a3c5fdc47987b56","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["e79a6d080bdd5b2a8f56342cf571b5476de04180"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"e4946500259641951dbd7f8a61956bf14bef3f60":["54c40f2a4f8741ec845d55de05ea762e631b5c90","29ef99d61cda9641b6250bf9567329a6e65f901d","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e4946500259641951dbd7f8a61956bf14bef3f60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}