{"path":"src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","commits":[{"id":"c0d9871701755df956b8bb5e417776dacc7dc1f2","date":1237846124,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","pathOld":"/dev/null","sourceNew":"  public void testRangeQueries() throws Exception {\n    // ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields\n    // that aren't tested in testRandomRangeQueries()\n\n    int i=2000000000;\n    long l=500000000000000000L;\n    double d=0.3333333333333333;\n\n    // first 3 values will be indexed, the last two won't be\n    String[] ints = {\"\"+(i-1), \"\"+(i), \"\"+(i+1),   \"\"+(i-2), \"\"+(i+2)};\n    String[] longs = {\"\"+(l-1), \"\"+(l), \"\"+(l+1),  \"\"+(l-2), \"\"+(l+2)};\n    String[] doubles = {\"\"+(d-1e-16), \"\"+(d), \"\"+(d+1e-16),   \"\"+(d-2e-16), \"\"+(d+2e-16)};\n    String[] strings = {\"aaa\",\"bbb\",\"ccc\",  \"aa\",\"cccc\" };\n    String[] dates = {\"1999-12-31T23:59:59.999Z\",\"2000-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.001Z\",  \"1999-12-31T23:59:59.998Z\",\"2000-01-01T00:00:00.002Z\" };\n\n    // fields that normal range queries should work on\n    Map<String,String[]> norm_fields = new HashMap<String,String[]>();\n    norm_fields.put(\"foo_i\", ints);\n    norm_fields.put(\"foo_l\", longs);\n    norm_fields.put(\"foo_d\", doubles);\n\n    norm_fields.put(\"foo_ti\", ints);\n    norm_fields.put(\"foo_tl\", longs);\n    norm_fields.put(\"foo_td\", doubles);\n\n    norm_fields.put(\"foo_s\", strings);\n    norm_fields.put(\"foo_dt\", dates);\n\n\n    // fields that frange queries should work on\n    Map<String,String[]> frange_fields = new HashMap<String,String[]>();\n    frange_fields.put(\"foo_i\", ints);\n    frange_fields.put(\"foo_l\", longs);\n    frange_fields.put(\"foo_d\", doubles);\n\n    frange_fields.put(\"foo_pi\", ints);\n    frange_fields.put(\"foo_pl\", longs);\n    frange_fields.put(\"foo_pd\", doubles);\n\n    frange_fields.put(\"foo_s\", strings);\n    frange_fields.put(\"foo_dt\", dates);\n\n    Map<String,String[]> all_fields = new HashMap<String,String[]>();\n    all_fields.putAll(norm_fields);\n    all_fields.putAll(frange_fields);\n\n    for (int j=0; j<ints.length-2; j++) {\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\");\n      fields.add(\"\"+j);\n      for (Map.Entry<String,String[]> entry : all_fields.entrySet()) {\n        fields.add(entry.getKey());\n        fields.add(entry.getValue()[j]);\n      }\n      assertU(adoc(fields.toArray(new String[fields.size()])));\n    }\n\n    assertU(commit());\n\n    // simple test of a function rather than just the field\n    assertQ(req(\"{!frange l=0 u=2}id\"), \"*[count(//doc)=3]\");\n    assertQ(req(\"{!frange l=0 u=2}product(id,2)\"), \"*[count(//doc)=2]\");\n    assertQ(req(\"{!frange l=100 u=102}sum(id,100)\"), \"*[count(//doc)=3]\");\n\n\n    for (Map.Entry<String,String[]> entry : norm_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(f + \":[* TO *]\" ), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[0]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[2]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[3]+\" TO \"+v[3]+\"]\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":[\"+v[4]+\" TO \"+v[4]+\"]\"), \"*[count(//doc)=0]\");\n\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":{\"+v[1]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[1]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[3]+\" TO \"+v[4]+\"}\"), \"*[count(//doc)=3]\");\n    }\n\n    for (Map.Entry<String,String[]> entry : frange_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(\"{!frange}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=true incu=true\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[3] +\" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c6cc193624a0030cfb24ef3abf67e7866db5ee5","date":1247783274,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","pathOld":"src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","sourceNew":"  public void testRangeQueries() throws Exception {\n    // ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields\n    // that aren't tested in testRandomRangeQueries()\n\n    int i=2000000000;\n    long l=500000000000000000L;\n    double d=0.3333333333333333;\n\n    // first 3 values will be indexed, the last two won't be\n    String[] ints = {\"\"+(i-1), \"\"+(i), \"\"+(i+1),   \"\"+(i-2), \"\"+(i+2)};\n    String[] longs = {\"\"+(l-1), \"\"+(l), \"\"+(l+1),  \"\"+(l-2), \"\"+(l+2)};\n    String[] doubles = {\"\"+(d-1e-16), \"\"+(d), \"\"+(d+1e-16),   \"\"+(d-2e-16), \"\"+(d+2e-16)};\n    String[] strings = {\"aaa\",\"bbb\",\"ccc\",  \"aa\",\"cccc\" };\n    String[] dates = {\"1999-12-31T23:59:59.999Z\",\"2000-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.001Z\",  \"1999-12-31T23:59:59.998Z\",\"2000-01-01T00:00:00.002Z\" };\n\n    // fields that normal range queries should work on\n    Map<String,String[]> norm_fields = new HashMap<String,String[]>();\n    norm_fields.put(\"foo_i\", ints);\n    norm_fields.put(\"foo_l\", longs);\n    norm_fields.put(\"foo_d\", doubles);\n\n    norm_fields.put(\"foo_ti\", ints);\n    norm_fields.put(\"foo_tl\", longs);\n    norm_fields.put(\"foo_td\", doubles);\n\n    norm_fields.put(\"foo_s\", strings);\n    norm_fields.put(\"foo_dt\", dates);\n\n\n    // fields that frange queries should work on\n    Map<String,String[]> frange_fields = new HashMap<String,String[]>();\n    frange_fields.put(\"foo_i\", ints);\n    frange_fields.put(\"foo_l\", longs);\n    frange_fields.put(\"foo_d\", doubles);\n\n    frange_fields.put(\"foo_ti\", ints);\n    frange_fields.put(\"foo_tl\", longs);\n    frange_fields.put(\"foo_td\", doubles);\n\n    frange_fields.put(\"foo_pi\", ints);\n    frange_fields.put(\"foo_pl\", longs);\n    frange_fields.put(\"foo_pd\", doubles);\n\n    frange_fields.put(\"foo_s\", strings);\n    frange_fields.put(\"foo_dt\", dates);\n\n    Map<String,String[]> all_fields = new HashMap<String,String[]>();\n    all_fields.putAll(norm_fields);\n    all_fields.putAll(frange_fields);\n\n    for (int j=0; j<ints.length-2; j++) {\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\");\n      fields.add(\"\"+j);\n      for (Map.Entry<String,String[]> entry : all_fields.entrySet()) {\n        fields.add(entry.getKey());\n        fields.add(entry.getValue()[j]);\n      }\n      assertU(adoc(fields.toArray(new String[fields.size()])));\n    }\n\n    assertU(commit());\n\n    // simple test of a function rather than just the field\n    assertQ(req(\"{!frange l=0 u=2}id\"), \"*[count(//doc)=3]\");\n    assertQ(req(\"{!frange l=0 u=2}product(id,2)\"), \"*[count(//doc)=2]\");\n    assertQ(req(\"{!frange l=100 u=102}sum(id,100)\"), \"*[count(//doc)=3]\");\n\n\n    for (Map.Entry<String,String[]> entry : norm_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(f + \":[* TO *]\" ), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[0]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[2]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[3]+\" TO \"+v[3]+\"]\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":[\"+v[4]+\" TO \"+v[4]+\"]\"), \"*[count(//doc)=0]\");\n\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":{\"+v[1]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[1]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[3]+\" TO \"+v[4]+\"}\"), \"*[count(//doc)=3]\");\n    }\n\n    for (Map.Entry<String,String[]> entry : frange_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(\"{!frange}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=true incu=true\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[3] +\" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n    }\n\n  }\n\n","sourceOld":"  public void testRangeQueries() throws Exception {\n    // ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields\n    // that aren't tested in testRandomRangeQueries()\n\n    int i=2000000000;\n    long l=500000000000000000L;\n    double d=0.3333333333333333;\n\n    // first 3 values will be indexed, the last two won't be\n    String[] ints = {\"\"+(i-1), \"\"+(i), \"\"+(i+1),   \"\"+(i-2), \"\"+(i+2)};\n    String[] longs = {\"\"+(l-1), \"\"+(l), \"\"+(l+1),  \"\"+(l-2), \"\"+(l+2)};\n    String[] doubles = {\"\"+(d-1e-16), \"\"+(d), \"\"+(d+1e-16),   \"\"+(d-2e-16), \"\"+(d+2e-16)};\n    String[] strings = {\"aaa\",\"bbb\",\"ccc\",  \"aa\",\"cccc\" };\n    String[] dates = {\"1999-12-31T23:59:59.999Z\",\"2000-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.001Z\",  \"1999-12-31T23:59:59.998Z\",\"2000-01-01T00:00:00.002Z\" };\n\n    // fields that normal range queries should work on\n    Map<String,String[]> norm_fields = new HashMap<String,String[]>();\n    norm_fields.put(\"foo_i\", ints);\n    norm_fields.put(\"foo_l\", longs);\n    norm_fields.put(\"foo_d\", doubles);\n\n    norm_fields.put(\"foo_ti\", ints);\n    norm_fields.put(\"foo_tl\", longs);\n    norm_fields.put(\"foo_td\", doubles);\n\n    norm_fields.put(\"foo_s\", strings);\n    norm_fields.put(\"foo_dt\", dates);\n\n\n    // fields that frange queries should work on\n    Map<String,String[]> frange_fields = new HashMap<String,String[]>();\n    frange_fields.put(\"foo_i\", ints);\n    frange_fields.put(\"foo_l\", longs);\n    frange_fields.put(\"foo_d\", doubles);\n\n    frange_fields.put(\"foo_pi\", ints);\n    frange_fields.put(\"foo_pl\", longs);\n    frange_fields.put(\"foo_pd\", doubles);\n\n    frange_fields.put(\"foo_s\", strings);\n    frange_fields.put(\"foo_dt\", dates);\n\n    Map<String,String[]> all_fields = new HashMap<String,String[]>();\n    all_fields.putAll(norm_fields);\n    all_fields.putAll(frange_fields);\n\n    for (int j=0; j<ints.length-2; j++) {\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\");\n      fields.add(\"\"+j);\n      for (Map.Entry<String,String[]> entry : all_fields.entrySet()) {\n        fields.add(entry.getKey());\n        fields.add(entry.getValue()[j]);\n      }\n      assertU(adoc(fields.toArray(new String[fields.size()])));\n    }\n\n    assertU(commit());\n\n    // simple test of a function rather than just the field\n    assertQ(req(\"{!frange l=0 u=2}id\"), \"*[count(//doc)=3]\");\n    assertQ(req(\"{!frange l=0 u=2}product(id,2)\"), \"*[count(//doc)=2]\");\n    assertQ(req(\"{!frange l=100 u=102}sum(id,100)\"), \"*[count(//doc)=3]\");\n\n\n    for (Map.Entry<String,String[]> entry : norm_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(f + \":[* TO *]\" ), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[0]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[2]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[3]+\" TO \"+v[3]+\"]\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":[\"+v[4]+\" TO \"+v[4]+\"]\"), \"*[count(//doc)=0]\");\n\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":{\"+v[1]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[1]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[3]+\" TO \"+v[4]+\"}\"), \"*[count(//doc)=3]\");\n    }\n\n    for (Map.Entry<String,String[]> entry : frange_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(\"{!frange}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=true incu=true\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[3] +\" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c","date":1249333745,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","pathOld":"src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","sourceNew":"  public void testRangeQueries() throws Exception {\n    // ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields\n    // that aren't tested in testRandomRangeQueries()\n\n    int i=2000000000;\n    long l=500000000000000000L;\n    double d=0.3333333333333333;\n\n    // first 3 values will be indexed, the last two won't be\n    String[] ints = {\"\"+(i-1), \"\"+(i), \"\"+(i+1),   \"\"+(i-2), \"\"+(i+2)};\n    String[] longs = {\"\"+(l-1), \"\"+(l), \"\"+(l+1),  \"\"+(l-2), \"\"+(l+2)};\n    String[] doubles = {\"\"+(d-1e-16), \"\"+(d), \"\"+(d+1e-16),   \"\"+(d-2e-16), \"\"+(d+2e-16)};\n    String[] strings = {\"aaa\",\"bbb\",\"ccc\",  \"aa\",\"cccc\" };\n    String[] dates = {\"1999-12-31T23:59:59.999Z\",\"2000-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.001Z\",  \"1999-12-31T23:59:59.998Z\",\"2000-01-01T00:00:00.002Z\" };\n\n    // fields that normal range queries should work on\n    Map<String,String[]> norm_fields = new HashMap<String,String[]>();\n    norm_fields.put(\"foo_i\", ints);\n    norm_fields.put(\"foo_l\", longs);\n    norm_fields.put(\"foo_d\", doubles);\n\n    norm_fields.put(\"foo_ti\", ints);\n    norm_fields.put(\"foo_tl\", longs);\n    norm_fields.put(\"foo_td\", doubles);\n    norm_fields.put(\"foo_tdt\", dates);\n\n    norm_fields.put(\"foo_s\", strings);\n    norm_fields.put(\"foo_dt\", dates);\n\n\n    // fields that frange queries should work on\n    Map<String,String[]> frange_fields = new HashMap<String,String[]>();\n    frange_fields.put(\"foo_i\", ints);\n    frange_fields.put(\"foo_l\", longs);\n    frange_fields.put(\"foo_d\", doubles);\n\n    frange_fields.put(\"foo_ti\", ints);\n    frange_fields.put(\"foo_tl\", longs);\n    frange_fields.put(\"foo_td\", doubles);\n    frange_fields.put(\"foo_tdt\", dates);\n\n    frange_fields.put(\"foo_pi\", ints);\n    frange_fields.put(\"foo_pl\", longs);\n    frange_fields.put(\"foo_pd\", doubles);\n\n    frange_fields.put(\"foo_s\", strings);\n    frange_fields.put(\"foo_dt\", dates);\n\n    Map<String,String[]> all_fields = new HashMap<String,String[]>();\n    all_fields.putAll(norm_fields);\n    all_fields.putAll(frange_fields);\n\n    for (int j=0; j<ints.length-2; j++) {\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\");\n      fields.add(\"\"+j);\n      for (Map.Entry<String,String[]> entry : all_fields.entrySet()) {\n        fields.add(entry.getKey());\n        fields.add(entry.getValue()[j]);\n      }\n      assertU(adoc(fields.toArray(new String[fields.size()])));\n    }\n\n    assertU(commit());\n\n    // simple test of a function rather than just the field\n    assertQ(req(\"{!frange l=0 u=2}id\"), \"*[count(//doc)=3]\");\n    assertQ(req(\"{!frange l=0 u=2}product(id,2)\"), \"*[count(//doc)=2]\");\n    assertQ(req(\"{!frange l=100 u=102}sum(id,100)\"), \"*[count(//doc)=3]\");\n\n\n    for (Map.Entry<String,String[]> entry : norm_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(f + \":[* TO *]\" ), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[0]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[2]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[3]+\" TO \"+v[3]+\"]\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":[\"+v[4]+\" TO \"+v[4]+\"]\"), \"*[count(//doc)=0]\");\n\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":{\"+v[1]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[1]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[3]+\" TO \"+v[4]+\"}\"), \"*[count(//doc)=3]\");\n    }\n\n    for (Map.Entry<String,String[]> entry : frange_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(\"{!frange}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=true incu=true\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[3] +\" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n    }\n\n  }\n\n","sourceOld":"  public void testRangeQueries() throws Exception {\n    // ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields\n    // that aren't tested in testRandomRangeQueries()\n\n    int i=2000000000;\n    long l=500000000000000000L;\n    double d=0.3333333333333333;\n\n    // first 3 values will be indexed, the last two won't be\n    String[] ints = {\"\"+(i-1), \"\"+(i), \"\"+(i+1),   \"\"+(i-2), \"\"+(i+2)};\n    String[] longs = {\"\"+(l-1), \"\"+(l), \"\"+(l+1),  \"\"+(l-2), \"\"+(l+2)};\n    String[] doubles = {\"\"+(d-1e-16), \"\"+(d), \"\"+(d+1e-16),   \"\"+(d-2e-16), \"\"+(d+2e-16)};\n    String[] strings = {\"aaa\",\"bbb\",\"ccc\",  \"aa\",\"cccc\" };\n    String[] dates = {\"1999-12-31T23:59:59.999Z\",\"2000-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.001Z\",  \"1999-12-31T23:59:59.998Z\",\"2000-01-01T00:00:00.002Z\" };\n\n    // fields that normal range queries should work on\n    Map<String,String[]> norm_fields = new HashMap<String,String[]>();\n    norm_fields.put(\"foo_i\", ints);\n    norm_fields.put(\"foo_l\", longs);\n    norm_fields.put(\"foo_d\", doubles);\n\n    norm_fields.put(\"foo_ti\", ints);\n    norm_fields.put(\"foo_tl\", longs);\n    norm_fields.put(\"foo_td\", doubles);\n\n    norm_fields.put(\"foo_s\", strings);\n    norm_fields.put(\"foo_dt\", dates);\n\n\n    // fields that frange queries should work on\n    Map<String,String[]> frange_fields = new HashMap<String,String[]>();\n    frange_fields.put(\"foo_i\", ints);\n    frange_fields.put(\"foo_l\", longs);\n    frange_fields.put(\"foo_d\", doubles);\n\n    frange_fields.put(\"foo_ti\", ints);\n    frange_fields.put(\"foo_tl\", longs);\n    frange_fields.put(\"foo_td\", doubles);\n\n    frange_fields.put(\"foo_pi\", ints);\n    frange_fields.put(\"foo_pl\", longs);\n    frange_fields.put(\"foo_pd\", doubles);\n\n    frange_fields.put(\"foo_s\", strings);\n    frange_fields.put(\"foo_dt\", dates);\n\n    Map<String,String[]> all_fields = new HashMap<String,String[]>();\n    all_fields.putAll(norm_fields);\n    all_fields.putAll(frange_fields);\n\n    for (int j=0; j<ints.length-2; j++) {\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\");\n      fields.add(\"\"+j);\n      for (Map.Entry<String,String[]> entry : all_fields.entrySet()) {\n        fields.add(entry.getKey());\n        fields.add(entry.getValue()[j]);\n      }\n      assertU(adoc(fields.toArray(new String[fields.size()])));\n    }\n\n    assertU(commit());\n\n    // simple test of a function rather than just the field\n    assertQ(req(\"{!frange l=0 u=2}id\"), \"*[count(//doc)=3]\");\n    assertQ(req(\"{!frange l=0 u=2}product(id,2)\"), \"*[count(//doc)=2]\");\n    assertQ(req(\"{!frange l=100 u=102}sum(id,100)\"), \"*[count(//doc)=3]\");\n\n\n    for (Map.Entry<String,String[]> entry : norm_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(f + \":[* TO *]\" ), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[0]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[2]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[3]+\" TO \"+v[3]+\"]\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":[\"+v[4]+\" TO \"+v[4]+\"]\"), \"*[count(//doc)=0]\");\n\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":{\"+v[1]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[1]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[3]+\" TO \"+v[4]+\"}\"), \"*[count(//doc)=3]\");\n    }\n\n    for (Map.Entry<String,String[]> entry : frange_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(\"{!frange}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=true incu=true\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[3] +\" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","pathOld":"src/test/org/apache/solr/search/TestRangeQuery#testRangeQueries().mjava","sourceNew":"  public void testRangeQueries() throws Exception {\n    // ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields\n    // that aren't tested in testRandomRangeQueries()\n\n    int i=2000000000;\n    long l=500000000000000000L;\n    double d=0.3333333333333333;\n\n    // first 3 values will be indexed, the last two won't be\n    String[] ints = {\"\"+(i-1), \"\"+(i), \"\"+(i+1),   \"\"+(i-2), \"\"+(i+2)};\n    String[] longs = {\"\"+(l-1), \"\"+(l), \"\"+(l+1),  \"\"+(l-2), \"\"+(l+2)};\n    String[] doubles = {\"\"+(d-1e-16), \"\"+(d), \"\"+(d+1e-16),   \"\"+(d-2e-16), \"\"+(d+2e-16)};\n    String[] strings = {\"aaa\",\"bbb\",\"ccc\",  \"aa\",\"cccc\" };\n    String[] dates = {\"1999-12-31T23:59:59.999Z\",\"2000-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.001Z\",  \"1999-12-31T23:59:59.998Z\",\"2000-01-01T00:00:00.002Z\" };\n\n    // fields that normal range queries should work on\n    Map<String,String[]> norm_fields = new HashMap<String,String[]>();\n    norm_fields.put(\"foo_i\", ints);\n    norm_fields.put(\"foo_l\", longs);\n    norm_fields.put(\"foo_d\", doubles);\n\n    norm_fields.put(\"foo_ti\", ints);\n    norm_fields.put(\"foo_tl\", longs);\n    norm_fields.put(\"foo_td\", doubles);\n    norm_fields.put(\"foo_tdt\", dates);\n\n    norm_fields.put(\"foo_s\", strings);\n    norm_fields.put(\"foo_dt\", dates);\n\n\n    // fields that frange queries should work on\n    Map<String,String[]> frange_fields = new HashMap<String,String[]>();\n    frange_fields.put(\"foo_i\", ints);\n    frange_fields.put(\"foo_l\", longs);\n    frange_fields.put(\"foo_d\", doubles);\n\n    frange_fields.put(\"foo_ti\", ints);\n    frange_fields.put(\"foo_tl\", longs);\n    frange_fields.put(\"foo_td\", doubles);\n    frange_fields.put(\"foo_tdt\", dates);\n\n    frange_fields.put(\"foo_pi\", ints);\n    frange_fields.put(\"foo_pl\", longs);\n    frange_fields.put(\"foo_pd\", doubles);\n\n    frange_fields.put(\"foo_s\", strings);\n    frange_fields.put(\"foo_dt\", dates);\n\n    Map<String,String[]> all_fields = new HashMap<String,String[]>();\n    all_fields.putAll(norm_fields);\n    all_fields.putAll(frange_fields);\n\n    for (int j=0; j<ints.length-2; j++) {\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\");\n      fields.add(\"\"+j);\n      for (Map.Entry<String,String[]> entry : all_fields.entrySet()) {\n        fields.add(entry.getKey());\n        fields.add(entry.getValue()[j]);\n      }\n      assertU(adoc(fields.toArray(new String[fields.size()])));\n    }\n\n    assertU(commit());\n\n    // simple test of a function rather than just the field\n    assertQ(req(\"{!frange l=0 u=2}id\"), \"*[count(//doc)=3]\");\n    assertQ(req(\"{!frange l=0 u=2}product(id,2)\"), \"*[count(//doc)=2]\");\n    assertQ(req(\"{!frange l=100 u=102}sum(id,100)\"), \"*[count(//doc)=3]\");\n\n\n    for (Map.Entry<String,String[]> entry : norm_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(f + \":[* TO *]\" ), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[0]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[2]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[3]+\" TO \"+v[3]+\"]\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":[\"+v[4]+\" TO \"+v[4]+\"]\"), \"*[count(//doc)=0]\");\n\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":{\"+v[1]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[1]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[3]+\" TO \"+v[4]+\"}\"), \"*[count(//doc)=3]\");\n    }\n\n    for (Map.Entry<String,String[]> entry : frange_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(\"{!frange}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=true incu=true\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[3] +\" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n    }\n\n  }\n\n","sourceOld":"  public void testRangeQueries() throws Exception {\n    // ensure that we aren't losing precision on any fields in addition to testing other non-numeric fields\n    // that aren't tested in testRandomRangeQueries()\n\n    int i=2000000000;\n    long l=500000000000000000L;\n    double d=0.3333333333333333;\n\n    // first 3 values will be indexed, the last two won't be\n    String[] ints = {\"\"+(i-1), \"\"+(i), \"\"+(i+1),   \"\"+(i-2), \"\"+(i+2)};\n    String[] longs = {\"\"+(l-1), \"\"+(l), \"\"+(l+1),  \"\"+(l-2), \"\"+(l+2)};\n    String[] doubles = {\"\"+(d-1e-16), \"\"+(d), \"\"+(d+1e-16),   \"\"+(d-2e-16), \"\"+(d+2e-16)};\n    String[] strings = {\"aaa\",\"bbb\",\"ccc\",  \"aa\",\"cccc\" };\n    String[] dates = {\"1999-12-31T23:59:59.999Z\",\"2000-01-01T00:00:00.000Z\",\"2000-01-01T00:00:00.001Z\",  \"1999-12-31T23:59:59.998Z\",\"2000-01-01T00:00:00.002Z\" };\n\n    // fields that normal range queries should work on\n    Map<String,String[]> norm_fields = new HashMap<String,String[]>();\n    norm_fields.put(\"foo_i\", ints);\n    norm_fields.put(\"foo_l\", longs);\n    norm_fields.put(\"foo_d\", doubles);\n\n    norm_fields.put(\"foo_ti\", ints);\n    norm_fields.put(\"foo_tl\", longs);\n    norm_fields.put(\"foo_td\", doubles);\n    norm_fields.put(\"foo_tdt\", dates);\n\n    norm_fields.put(\"foo_s\", strings);\n    norm_fields.put(\"foo_dt\", dates);\n\n\n    // fields that frange queries should work on\n    Map<String,String[]> frange_fields = new HashMap<String,String[]>();\n    frange_fields.put(\"foo_i\", ints);\n    frange_fields.put(\"foo_l\", longs);\n    frange_fields.put(\"foo_d\", doubles);\n\n    frange_fields.put(\"foo_ti\", ints);\n    frange_fields.put(\"foo_tl\", longs);\n    frange_fields.put(\"foo_td\", doubles);\n    frange_fields.put(\"foo_tdt\", dates);\n\n    frange_fields.put(\"foo_pi\", ints);\n    frange_fields.put(\"foo_pl\", longs);\n    frange_fields.put(\"foo_pd\", doubles);\n\n    frange_fields.put(\"foo_s\", strings);\n    frange_fields.put(\"foo_dt\", dates);\n\n    Map<String,String[]> all_fields = new HashMap<String,String[]>();\n    all_fields.putAll(norm_fields);\n    all_fields.putAll(frange_fields);\n\n    for (int j=0; j<ints.length-2; j++) {\n      List<String> fields = new ArrayList<String>();\n      fields.add(\"id\");\n      fields.add(\"\"+j);\n      for (Map.Entry<String,String[]> entry : all_fields.entrySet()) {\n        fields.add(entry.getKey());\n        fields.add(entry.getValue()[j]);\n      }\n      assertU(adoc(fields.toArray(new String[fields.size()])));\n    }\n\n    assertU(commit());\n\n    // simple test of a function rather than just the field\n    assertQ(req(\"{!frange l=0 u=2}id\"), \"*[count(//doc)=3]\");\n    assertQ(req(\"{!frange l=0 u=2}product(id,2)\"), \"*[count(//doc)=2]\");\n    assertQ(req(\"{!frange l=100 u=102}sum(id,100)\"), \"*[count(//doc)=3]\");\n\n\n    for (Map.Entry<String,String[]> entry : norm_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(f + \":[* TO *]\" ), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=3]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=2]\");\n      assertQ(req(f + \":[\"+v[0]+\" TO \"+v[0]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[1]+\" TO \"+v[1]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[2]+\" TO \"+v[2]+\"]\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":[\"+v[3]+\" TO \"+v[3]+\"]\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":[\"+v[4]+\" TO \"+v[4]+\"]\"), \"*[count(//doc)=0]\");\n\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=1]\");\n      assertQ(req(f + \":{\"+v[1]+\" TO \"+v[2]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[0]+\" TO \"+v[1]+\"}\"), \"*[count(//doc)=0]\");\n      assertQ(req(f + \":{\"+v[3]+\" TO \"+v[4]+\"}\"), \"*[count(//doc)=3]\");\n    }\n\n    for (Map.Entry<String,String[]> entry : frange_fields.entrySet()) {\n      String f = entry.getKey();\n      String[] v = entry.getValue();\n\n      assertQ(req(\"{!frange}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[0]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[2]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[3]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false\" + \" l=\"+v[4]+\"}\"+f ), \"*[count(//doc)=0]\");\n\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[0]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[1]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=2]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[3]+\"}\"+f ), \"*[count(//doc)=0]\");\n      assertQ(req(\"{!frange incu=false\" + \" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n\n      assertQ(req(\"{!frange incl=true incu=true\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=3]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[0] +\" u=\"+v[2]+\"}\"+f ), \"*[count(//doc)=1]\");\n      assertQ(req(\"{!frange incl=false incu=false\" + \" l=\" +v[3] +\" u=\"+v[4]+\"}\"+f ), \"*[count(//doc)=3]\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["0c6cc193624a0030cfb24ef3abf67e7866db5ee5"],"0c6cc193624a0030cfb24ef3abf67e7866db5ee5":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"ad94625fb8d088209f46650c8097196fec67f00c":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["c0d9871701755df956b8bb5e417776dacc7dc1f2"],"dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c":["ad94625fb8d088209f46650c8097196fec67f00c"],"0c6cc193624a0030cfb24ef3abf67e7866db5ee5":["dbc0ca7104fa6f1d7cc24b05ed50b39ddb7cfa8c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c0d9871701755df956b8bb5e417776dacc7dc1f2":["0c6cc193624a0030cfb24ef3abf67e7866db5ee5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}