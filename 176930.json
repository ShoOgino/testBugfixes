{"path":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getTopReaderContext(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    assertTrue(searcher.getTopReaderContext().isAtomic);\n    Scorer s = w.scorer((AtomicReaderContext) searcher.getTopReaderContext(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getTopReaderContext(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc63f17f42c64d6ccc8c361cfcdf074f115f770c","date":1294930751,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    assertTrue(searcher.getTopReaderContext().isAtomic);\n    Scorer s = w.scorer((AtomicReaderContext) searcher.getTopReaderContext(), ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    assertTrue(searcher.getTopReaderContext().isAtomic);\n    Scorer s = w.scorer((AtomicReaderContext) searcher.getTopReaderContext(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    assertTrue(searcher.getTopReaderContext().isAtomic);\n    Scorer s = w.scorer((AtomicReaderContext) searcher.getTopReaderContext(), ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    assertTrue(searcher.getTopReaderContext().isAtomic);\n    Scorer s = w.scorer((AtomicReaderContext) searcher.getTopReaderContext(), ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    assertTrue(searcher.getTopReaderContext().isAtomic);\n    Scorer s = w.scorer((AtomicReaderContext) searcher.getTopReaderContext(), ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    Scorer s = w.scorer(searcher.getIndexReader(), true, false);\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = q.weight(searcher);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader.getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], ScorerContext.def());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2ec9a9068164200de82395f0e8537a9d9302f3f","date":1327856476,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader().getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader.getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8493985e6883b3fa8231d172694d2aa3a85cb182","date":1327920390,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader().getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader().getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader().getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    ReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader.getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestNearSpansOrdered#testSpanNearScorerSkipTo1().mjava","sourceNew":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader().getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","sourceOld":"  /**\n   * not a direct test of NearSpans, but a demonstration of how/when\n   * this causes problems\n   */\n  public void testSpanNearScorerSkipTo1() throws Exception {\n    SpanNearQuery q = makeQuery();\n    Weight w = searcher.createNormalizedWeight(q);\n    IndexReaderContext topReaderContext = searcher.getTopReaderContext();\n    AtomicReaderContext[] leaves = ReaderUtil.leaves(topReaderContext);\n    Scorer s = w.scorer(leaves[0], true, false, leaves[0].reader().getLiveDocs());\n    assertEquals(1, s.advance(1));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["a2ec9a9068164200de82395f0e8537a9d9302f3f"],"c8323d210478d76a02372693d254b69aac614689":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["6f7fee42303a18cc146043c96f66491311b345d9"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","8493985e6883b3fa8231d172694d2aa3a85cb182"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["868da859b43505d9d2a023bfeae6dd0c795f5295","c8323d210478d76a02372693d254b69aac614689"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["c8323d210478d76a02372693d254b69aac614689","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["c8323d210478d76a02372693d254b69aac614689"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8493985e6883b3fa8231d172694d2aa3a85cb182":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c8323d210478d76a02372693d254b69aac614689":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9","29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["5cab9a86bd67202d20b6adc463008c8e982b070a","a2ec9a9068164200de82395f0e8537a9d9302f3f"],"dc63f17f42c64d6ccc8c361cfcdf074f115f770c":["c8323d210478d76a02372693d254b69aac614689","868da859b43505d9d2a023bfeae6dd0c795f5295"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"6f7fee42303a18cc146043c96f66491311b345d9":["3fc1f3f78b299e125f7e60f43b5d457392bea23f","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"a2ec9a9068164200de82395f0e8537a9d9302f3f":["8493985e6883b3fa8231d172694d2aa3a85cb182"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["dc63f17f42c64d6ccc8c361cfcdf074f115f770c"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bb9b72f7c3d7827c64dd4ec580ded81778da361d","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}