{"path":"src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","commits":[{"id":"0c3e228bf650e96f3002a8fb73dd0c13d55af077","date":1138253849,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","pathOld":"/dev/null","sourceNew":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","pathOld":"src/java/org/apache/solr/util/BCDUtils#base10toBase100(char[],int,int,char[],int).mjava","sourceNew":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","sourceOld":"  // WARNING: assumption is that this is a legal int...\n// no validation is done.  [+-]?digit*\n//\n// Normalization of zeros *is* done...\n//  0004, 004, 04, 4 will all end up being equal\n//  0,-0 are normalized to '' (zero length)\n//\n// The value is written to the output buffer\n// from the end to the start.  The return value\n// is the start of the Base100 int in the output buffer.\n//\n// As the output will be smaller than the input, arr and\n// out may refer to the same array if desired.\n//\n  public static int base10toBase100(char[] arr, int start, int end,\n                                    char[] out, int outend\n                                    )\n  {\n    int wpos=outend;  // write position\n    boolean neg=false;\n\n    while (--end >= start) {\n      int val = arr[end];\n      if (val=='+') { break; }\n      else if (val=='-') { neg=!neg; break; }\n      else {\n        val = val - '0';\n        if (end > start) {\n          int val2 = arr[end-1];\n          if (val2=='+') { out[--wpos]=(char)val; break; }\n          if (val2=='-') { out[--wpos]=(char)val; neg=!neg; break; }\n          end--;\n          val = val + (val2 - '0')*10;\n        }\n        out[--wpos] = (char)val;\n      }\n    }\n\n    // remove leading base100 zeros\n    while (wpos<outend && out[wpos]==0) wpos++;\n\n    // check for a zero value\n    if (wpos==outend) {\n      // if zero, don't add negative sign\n    } else if (neg) {\n      out[--wpos]=NEG_CHAR;\n    }\n\n    return wpos;  // the start of the base100 int\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0c3e228bf650e96f3002a8fb73dd0c13d55af077":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}