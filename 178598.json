{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricsContext,String).mjava","commits":[{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricManager,String,String,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    bufferedOpsGauge = () -> {\n      if (state == State.BUFFERING) {\n        if (bufferTlog == null) return  0;\n        // numRecords counts header as a record\n        return bufferTlog.numRecords() - 1;\n      }\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else {\n        return 0;\n      }\n    };\n\n    solrMetricsContext.gauge(null, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    solrMetricsContext.gauge(null, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    solrMetricsContext.gauge(null, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = solrMetricsContext.meter(null, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = solrMetricsContext.meter(null, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = solrMetricsContext.meter(null, \"ops\", scope, \"copyOverOldUpdates\");\n    solrMetricsContext.gauge(null, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricManager manager, String registry, String tag, String scope) {\n    this.metricManager = manager;\n    this.registryName = registry;\n    bufferedOpsGauge = () -> {\n      if (state == State.BUFFERING) {\n        if (bufferTlog == null) return  0;\n        // numRecords counts header as a record\n        return bufferTlog.numRecords() - 1;\n      }\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else {\n        return 0;\n      }\n    };\n\n    manager.registerGauge(null, registry, bufferedOpsGauge, tag, true, \"ops\", scope, \"buffered\");\n    manager.registerGauge(null, registry, () -> logs.size(), tag, true, \"logs\", scope, \"replay\", \"remaining\");\n    manager.registerGauge(null, registry, () -> getTotalLogsSize(), tag, true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = manager.meter(null, registry, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = manager.meter(null, registry, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = manager.meter(null, registry, \"ops\", scope, \"copyOverOldUpdates\");\n    manager.registerGauge(null, registry, () -> state.getValue(), tag, true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricsContext,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#initializeMetrics(SolrMetricsContext,String).mjava","sourceNew":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    bufferedOpsGauge = () -> {\n      if (state == State.BUFFERING) {\n        if (bufferTlog == null) return  0;\n        // numRecords counts header as a record\n        return bufferTlog.numRecords() - 1;\n      }\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else {\n        return 0;\n      }\n    };\n\n    solrMetricsContext.gauge(bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    solrMetricsContext.gauge(() -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    solrMetricsContext.gauge(() -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = solrMetricsContext.meter(\"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = solrMetricsContext.meter(\"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = solrMetricsContext.meter(\"ops\", scope, \"copyOverOldUpdates\");\n    solrMetricsContext.gauge(() -> state.getValue(), true, \"state\", scope);\n  }\n\n","sourceOld":"  @Override\n  public void initializeMetrics(SolrMetricsContext parentContext, String scope) {\n    solrMetricsContext = parentContext.getChildContext(this);\n    bufferedOpsGauge = () -> {\n      if (state == State.BUFFERING) {\n        if (bufferTlog == null) return  0;\n        // numRecords counts header as a record\n        return bufferTlog.numRecords() - 1;\n      }\n      if (tlog == null) {\n        return 0;\n      } else if (state == State.APPLYING_BUFFERED) {\n        // numRecords counts header as a record\n        return tlog.numRecords() - 1 - recoveryInfo.adds - recoveryInfo.deleteByQuery - recoveryInfo.deletes - recoveryInfo.errors;\n      } else {\n        return 0;\n      }\n    };\n\n    solrMetricsContext.gauge(null, bufferedOpsGauge, true, \"ops\", scope, \"buffered\");\n    solrMetricsContext.gauge(null, () -> logs.size(), true, \"logs\", scope, \"replay\", \"remaining\");\n    solrMetricsContext.gauge(null, () -> getTotalLogsSize(), true, \"bytes\", scope, \"replay\", \"remaining\");\n    applyingBufferedOpsMeter = solrMetricsContext.meter(null, \"ops\", scope, \"applyingBuffered\");\n    replayOpsMeter = solrMetricsContext.meter(null, \"ops\", scope, \"replay\");\n    copyOverOldUpdatesMeter = solrMetricsContext.meter(null, \"ops\", scope, \"copyOverOldUpdates\");\n    solrMetricsContext.gauge(null, () -> state.getValue(), true, \"state\", scope);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"]},"commit2Childs":{"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}