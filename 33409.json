{"path":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","commits":[{"id":"31c728e729d0fd8e22e11a6b3adea3635206ef89","date":1396689858,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getTempDirBase().mjava","sourceNew":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static File getBaseTempDirForTestClass() {\n    synchronized (LuceneTestCase.class) {\n      if (tempDirBase == null) {\n        File directory = new File(System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\")));\n        assert directory.exists() && \n               directory.isDirectory() && \n               directory.canWrite();\n\n        RandomizedContext ctx = RandomizedContext.current();\n        Class<?> clazz = ctx.getTargetClass();\n        String prefix = clazz.getName();\n        prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n        prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n        int attempt = 0;\n        File f;\n        do {\n          if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n            throw new RuntimeException(\n                \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                  + directory.getAbsolutePath());            \n          }\n          f = new File(directory, prefix + \"-\" + ctx.getRunnerSeedAsString() \n                + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        } while (!f.mkdirs());\n\n        tempDirBase = f;\n        registerToRemoveAfterSuite(tempDirBase);\n      }\n    }\n    return tempDirBase;\n  }\n\n","sourceOld":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static File getTempDirBase() {\n    synchronized (LuceneTestCase.class) {\n      if (tempDirBase == null) {\n        File directory = new File(System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\")));\n        assert directory.exists() && \n               directory.isDirectory() && \n               directory.canWrite();\n\n        RandomizedContext ctx = RandomizedContext.current();\n        Class<?> clazz = ctx.getTargetClass();\n        String prefix = clazz.getName();\n        prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n        prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n        int attempt = 0;\n        File f;\n        do {\n          if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n            throw new RuntimeException(\n                \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                  + directory.getAbsolutePath());            \n          }\n          f = new File(directory, prefix + \"-\" + ctx.getRunnerSeedAsString() \n                + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        } while (!f.mkdirs());\n\n        tempDirBase = f;\n        registerToRemoveAfterSuite(tempDirBase);\n      }\n    }\n    return tempDirBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19","date":1400739326,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","sourceNew":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static File getBaseTempDirForTestClass() {\n    return tempFilesCleanupRule.getPerTestClassTempDir();\n  }\n\n","sourceOld":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static File getBaseTempDirForTestClass() {\n    synchronized (LuceneTestCase.class) {\n      if (tempDirBase == null) {\n        File directory = new File(System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\")));\n        assert directory.exists() && \n               directory.isDirectory() && \n               directory.canWrite();\n\n        RandomizedContext ctx = RandomizedContext.current();\n        Class<?> clazz = ctx.getTargetClass();\n        String prefix = clazz.getName();\n        prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n        prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n        int attempt = 0;\n        File f;\n        do {\n          if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n            throw new RuntimeException(\n                \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                  + directory.getAbsolutePath());            \n          }\n          f = new File(directory, prefix + \"-\" + ctx.getRunnerSeedAsString() \n                + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        } while (!f.mkdirs());\n\n        tempDirBase = f;\n        registerToRemoveAfterSuite(tempDirBase);\n      }\n    }\n    return tempDirBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","sourceNew":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static File getBaseTempDirForTestClass() {\n    return tempFilesCleanupRule.getPerTestClassTempDir();\n  }\n\n","sourceOld":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static File getBaseTempDirForTestClass() {\n    synchronized (LuceneTestCase.class) {\n      if (tempDirBase == null) {\n        File directory = new File(System.getProperty(\"tempDir\", System.getProperty(\"java.io.tmpdir\")));\n        assert directory.exists() && \n               directory.isDirectory() && \n               directory.canWrite();\n\n        RandomizedContext ctx = RandomizedContext.current();\n        Class<?> clazz = ctx.getTargetClass();\n        String prefix = clazz.getName();\n        prefix = prefix.replaceFirst(\"^org.apache.lucene.\", \"lucene.\");\n        prefix = prefix.replaceFirst(\"^org.apache.solr.\", \"solr.\");\n\n        int attempt = 0;\n        File f;\n        do {\n          if (attempt++ >= TEMP_NAME_RETRY_THRESHOLD) {\n            throw new RuntimeException(\n                \"Failed to get a temporary name too many times, check your temp directory and consider manually cleaning it: \"\n                  + directory.getAbsolutePath());            \n          }\n          f = new File(directory, prefix + \"-\" + ctx.getRunnerSeedAsString() \n                + \"-\" + String.format(Locale.ENGLISH, \"%03d\", attempt));\n        } while (!f.mkdirs());\n\n        tempDirBase = f;\n        registerToRemoveAfterSuite(tempDirBase);\n      }\n    }\n    return tempDirBase;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#getBaseTempDirForTestClass().mjava","sourceNew":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static Path getBaseTempDirForTestClass() {\n    return tempFilesCleanupRule.getPerTestClassTempDir();\n  }\n\n","sourceOld":"  /**\n   * This method is deprecated for a reason. Do not use it. Call {@link #createTempDir()}\n   * or {@link #createTempDir(String)} or {@link #createTempFile(String, String)}.\n   */\n  @Deprecated\n  public static File getBaseTempDirForTestClass() {\n    return tempFilesCleanupRule.getPerTestClassTempDir();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"31c728e729d0fd8e22e11a6b3adea3635206ef89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["31c728e729d0fd8e22e11a6b3adea3635206ef89","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"f4abec28b874149a7223e32cc7a01704c27790de":["4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4abec28b874149a7223e32cc7a01704c27790de"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["31c728e729d0fd8e22e11a6b3adea3635206ef89"]},"commit2Childs":{"31c728e729d0fd8e22e11a6b3adea3635206ef89":["b7605579001505896d48b07160075a5c8b8e128e","4a9c941a7004ea2e95b10aa67dafa319ff8d8c19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["31c728e729d0fd8e22e11a6b3adea3635206ef89"],"b7605579001505896d48b07160075a5c8b8e128e":[],"f4abec28b874149a7223e32cc7a01704c27790de":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a9c941a7004ea2e95b10aa67dafa319ff8d8c19":["b7605579001505896d48b07160075a5c8b8e128e","f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}