{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactoryTest[TestCommonGramsQueryFilterFactory]#testDefaults().mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactoryTest[TestCommonGramsQueryFilterFactory]#testDefaults().mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/CommonGramsQueryFilterFactoryTest#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"280bf88d9ed3d9923e393961b594d9553970e4fd","date":1343099563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/TestCommonGramsQueryFilterFactory#testDefaults().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilterFactoryTest[TestCommonGramsQueryFilterFactory]#testDefaults().mjava","sourceNew":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","sourceOld":"  /**\n   * If no words are provided, then a set of english default stopwords is used.\n   */\n  public void testDefaults() throws Exception {\n    ResourceLoader loader = new SolrResourceLoader(\"solr/collection1\");\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    CommonGramsQueryFilterFactory factory = new CommonGramsQueryFilterFactory();\n    factory.setLuceneMatchVersion(TEST_VERSION_CURRENT);\n    Map<String, String> args = Collections.emptyMap();\n    factory.init(args);\n    factory.inform(loader);\n    CharArraySet words = factory.getCommonWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(words.contains(\"the\"));\n    Tokenizer tokenizer = new MockTokenizer(new StringReader(\"testing the factory\"), MockTokenizer.WHITESPACE, false);\n    TokenStream stream = factory.create(tokenizer);\n    assertTokenStreamContents(stream, \n        new String[] { \"testing_the\", \"the_factory\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"280bf88d9ed3d9923e393961b594d9553970e4fd":["3241e06e642196396b80bb293acd9c0814d079e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"280bf88d9ed3d9923e393961b594d9553970e4fd":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3241e06e642196396b80bb293acd9c0814d079e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3241e06e642196396b80bb293acd9c0814d079e0":["280bf88d9ed3d9923e393961b594d9553970e4fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["280bf88d9ed3d9923e393961b594d9553970e4fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}