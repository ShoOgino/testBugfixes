{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb378f8bdee16a26810e086303a4a86b4930ea12","date":1296410797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = IndexReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = r.reopen();\n      if (r != newReader) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34ca474b88b90218279fc4b893727bcefbb1f725","date":1327855341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = IndexReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    IndexReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final IndexReader newReader = IndexReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NearRealtimeReaderTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws Exception {\n\n    final PerfRunData runData = getRunData();\n\n    // Get initial reader\n    IndexWriter w = runData.getIndexWriter();\n    if (w == null) {\n      throw new RuntimeException(\"please open the writer before invoking NearRealtimeReader\");\n    }\n\n    if (runData.getIndexReader() != null) {\n      throw new RuntimeException(\"please close the existing reader before invoking NearRealtimeReader\");\n    }\n    \n    long t = System.currentTimeMillis();\n    DirectoryReader r = IndexReader.open(w, true);\n    runData.setIndexReader(r);\n    // Transfer our reference to runData\n    r.decRef();\n\n    // TODO: gather basic metrics for reporting -- eg mean,\n    // stddev, min/max reopen latencies\n\n    // Parent sequence sets stopNow\n    reopenCount = 0;\n    while(!stopNow) {\n      long waitForMsec = (pauseMSec - (System.currentTimeMillis() - t));\n      if (waitForMsec > 0) {\n        Thread.sleep(waitForMsec);\n        //System.out.println(\"NRT wait: \" + waitForMsec + \" msec\");\n      }\n\n      t = System.currentTimeMillis();\n      final DirectoryReader newReader = DirectoryReader.openIfChanged(r);\n      if (newReader != null) {\n        final int delay = (int) (System.currentTimeMillis()-t);\n        if (reopenTimes.length == reopenCount) {\n          reopenTimes = ArrayUtil.grow(reopenTimes, 1+reopenCount);\n        }\n        reopenTimes[reopenCount++] = delay;\n        // TODO: somehow we need to enable warming, here\n        runData.setIndexReader(newReader);\n        // Transfer our reference to runData\n        newReader.decRef();\n        r = newReader;\n      }\n    }\n    stopNow = false;\n\n    return reopenCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["eb378f8bdee16a26810e086303a4a86b4930ea12"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","eb378f8bdee16a26810e086303a4a86b4930ea12"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eb378f8bdee16a26810e086303a4a86b4930ea12":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"34ca474b88b90218279fc4b893727bcefbb1f725":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["8a8259c922a83abc544609227a60d48e5ee93e7e","34ca474b88b90218279fc4b893727bcefbb1f725"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","eb378f8bdee16a26810e086303a4a86b4930ea12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["34ca474b88b90218279fc4b893727bcefbb1f725","5cab9a86bd67202d20b6adc463008c8e982b070a"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","eb378f8bdee16a26810e086303a4a86b4930ea12","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"eb378f8bdee16a26810e086303a4a86b4930ea12":["8a8259c922a83abc544609227a60d48e5ee93e7e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"34ca474b88b90218279fc4b893727bcefbb1f725":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}