{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#readFields(Map[Integer,NumericEntry],Map[Integer,NumericEntry],Map[Integer,BinaryEntry],IndexInput,FieldInfos).mjava","commits":[{"id":"be442aa722f1c08c70ec5d9938c9f80a8138e627","date":1357613095,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#readFields(Map[Integer,NumericEntry],Map[Integer,NumericEntry],Map[Integer,BinaryEntry],IndexInput,FieldInfos).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#readFields(Map[Integer,NumericEntry],Map[Integer,BinaryEntry],IndexInput,FieldInfos).mjava","sourceNew":"    static void readFields(Map<Integer,NumericEntry> numerics, Map<Integer,NumericEntry> ords, Map<Integer,BinaryEntry> binaries, IndexInput meta, FieldInfos infos) throws IOException {\n      int fieldNumber = meta.readVInt();\n      while (fieldNumber != -1) {\n        DocValues.Type type = infos.fieldInfo(fieldNumber).getDocValuesType();\n        if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n          numerics.put(fieldNumber, readNumericField(meta));\n        } else if (DocValues.isBytes(type)) {\n          BinaryEntry b = readBinaryField(meta);\n          binaries.put(fieldNumber, b);\n          if (b.minLength != b.maxLength) {\n            fieldNumber = meta.readVInt(); // waste\n            // variable length byte[]: read addresses as a numeric dv field\n            numerics.put(fieldNumber, readNumericField(meta));\n          }\n        } else if (DocValues.isSortedBytes(type)) {\n          BinaryEntry b = readBinaryField(meta);\n          binaries.put(fieldNumber, b);\n          if (b.minLength != b.maxLength) {\n            fieldNumber = meta.readVInt(); // waste\n            // variable length byte[]: read addresses as a numeric dv field\n            numerics.put(fieldNumber, readNumericField(meta));\n          }\n          // sorted byte[]: read ords as a numeric dv field\n          fieldNumber = meta.readVInt(); // waste\n          ords.put(fieldNumber, readNumericField(meta));\n        }\n        fieldNumber = meta.readVInt();\n      }\n    }\n\n","sourceOld":"    static void readFields(Map<Integer,NumericEntry> numerics, Map<Integer,BinaryEntry> binaries, IndexInput meta, FieldInfos infos) throws IOException {\n      int fieldNumber = meta.readVInt();\n      while (fieldNumber != -1) {\n        DocValues.Type type = infos.fieldInfo(fieldNumber).getDocValuesType();\n        if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n          numerics.put(fieldNumber, readNumericField(meta));\n        } else if (DocValues.isBytes(type)) {\n          BinaryEntry b = readBinaryField(meta);\n          binaries.put(fieldNumber, b);\n          if (b.minLength != b.maxLength) {\n            fieldNumber = meta.readVInt(); // waste\n            // variable length byte[]: read addresses as a numeric dv field\n            numerics.put(fieldNumber, readNumericField(meta));\n          }\n        }\n        fieldNumber = meta.readVInt();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68acf69be1b41192ae2278afc452bb66f6349cba","date":1357657311,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.Lucene41SimpleDocValuesProducer#readFields(Map[Integer,NumericEntry],Map[Integer,NumericEntry],Map[Integer,BinaryEntry],IndexInput,FieldInfos).mjava","sourceNew":null,"sourceOld":"    static void readFields(Map<Integer,NumericEntry> numerics, Map<Integer,NumericEntry> ords, Map<Integer,BinaryEntry> binaries, IndexInput meta, FieldInfos infos) throws IOException {\n      int fieldNumber = meta.readVInt();\n      while (fieldNumber != -1) {\n        DocValues.Type type = infos.fieldInfo(fieldNumber).getDocValuesType();\n        if (DocValues.isNumber(type) || DocValues.isFloat(type)) {\n          numerics.put(fieldNumber, readNumericField(meta));\n        } else if (DocValues.isBytes(type)) {\n          BinaryEntry b = readBinaryField(meta);\n          binaries.put(fieldNumber, b);\n          if (b.minLength != b.maxLength) {\n            fieldNumber = meta.readVInt(); // waste\n            // variable length byte[]: read addresses as a numeric dv field\n            numerics.put(fieldNumber, readNumericField(meta));\n          }\n        } else if (DocValues.isSortedBytes(type)) {\n          BinaryEntry b = readBinaryField(meta);\n          binaries.put(fieldNumber, b);\n          if (b.minLength != b.maxLength) {\n            fieldNumber = meta.readVInt(); // waste\n            // variable length byte[]: read addresses as a numeric dv field\n            numerics.put(fieldNumber, readNumericField(meta));\n          }\n          // sorted byte[]: read ords as a numeric dv field\n          fieldNumber = meta.readVInt(); // waste\n          ords.put(fieldNumber, readNumericField(meta));\n        }\n        fieldNumber = meta.readVInt();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"68acf69be1b41192ae2278afc452bb66f6349cba":["be442aa722f1c08c70ec5d9938c9f80a8138e627"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be442aa722f1c08c70ec5d9938c9f80a8138e627":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"68acf69be1b41192ae2278afc452bb66f6349cba":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be442aa722f1c08c70ec5d9938c9f80a8138e627","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"be442aa722f1c08c70ec5d9938c9f80a8138e627":["68acf69be1b41192ae2278afc452bb66f6349cba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["68acf69be1b41192ae2278afc452bb66f6349cba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}