{"path":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#encodeNext(long).mjava","commits":[{"id":"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c","date":1373406544,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#encodeNext(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Call at most <code>numValues</code> times to encode a non decreasing sequence of non negative numbers.\n   * @param x The next number to be encoded.\n   * @throws IllegalArgumentException when:\n   *         <ul>\n   *         <li>called more than <code>numValues</code> times, or\n   *         <li><code>x</code> is smaller than an earlier encoded value, or\n   *         <li><code>x</code> is larger than <code>upperBound</code>.\n   *         </ul>\n   */\n  public void encodeNext(long x) {\n    if (numEncoded >= numValues) {\n      throw new IllegalStateException(\"encodeNext called more than \" + numValues + \" times.\");\n    }\n    if (lastEncoded > x) {\n      throw new IllegalArgumentException(x + \" smaller than previous \" + lastEncoded);\n    }\n    if (x > upperBound) {\n      throw new IllegalArgumentException(x + \" larger than upperBound \" + upperBound);\n    }\n    encodeUpperBits(x >>> numLowBits);\n    encodeLowerBits(x & lowerBitsMask);\n    numEncoded++;\n    lastEncoded = x;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#encodeNext(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Call at most <code>numValues</code> times to encode a non decreasing sequence of non negative numbers.\n   * @param x The next number to be encoded.\n   * @throws IllegalArgumentException when:\n   *         <ul>\n   *         <li>called more than <code>numValues</code> times, or\n   *         <li><code>x</code> is smaller than an earlier encoded value, or\n   *         <li><code>x</code> is larger than <code>upperBound</code>.\n   *         </ul>\n   */\n  public void encodeNext(long x) {\n    if (numEncoded >= numValues) {\n      throw new IllegalStateException(\"encodeNext called more than \" + numValues + \" times.\");\n    }\n    if (lastEncoded > x) {\n      throw new IllegalArgumentException(x + \" smaller than previous \" + lastEncoded);\n    }\n    if (x > upperBound) {\n      throw new IllegalArgumentException(x + \" larger than upperBound \" + upperBound);\n    }\n    encodeUpperBits(x >>> numLowBits);\n    encodeLowerBits(x & lowerBitsMask);\n    numEncoded++;\n    lastEncoded = x;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"423470dff9e19aa0db92590e282e2ca12e34d65a","date":1381851051,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#encodeNext(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#encodeNext(long).mjava","sourceNew":"  /** Call at most <code>numValues</code> times to encode a non decreasing sequence of non negative numbers.\n   * @param x The next number to be encoded.\n   * @throws IllegalStateException when called more than <code>numValues</code> times.\n   * @throws IllegalArgumentException when:\n   *         <ul>\n   *         <li><code>x</code> is smaller than an earlier encoded value, or\n   *         <li><code>x</code> is larger than <code>upperBound</code>.\n   *         </ul>\n   */\n  public void encodeNext(long x) {\n    if (numEncoded >= numValues) {\n      throw new IllegalStateException(\"encodeNext called more than \" + numValues + \" times.\");\n    }\n    if (lastEncoded > x) {\n      throw new IllegalArgumentException(x + \" smaller than previous \" + lastEncoded);\n    }\n    if (x > upperBound) {\n      throw new IllegalArgumentException(x + \" larger than upperBound \" + upperBound);\n    }\n    long highValue = x >>> numLowBits;\n    encodeUpperBits(highValue);\n    encodeLowerBits(x & lowerBitsMask);\n    lastEncoded = x;\n    // Add index entries:\n    long indexValue = (currentEntryIndex + 1) * indexInterval;\n    while (indexValue <= highValue) { \n      long afterZeroBitPosition = indexValue + numEncoded;\n      packValue(afterZeroBitPosition, upperZeroBitPositionIndex, nIndexEntryBits, currentEntryIndex);\n      currentEntryIndex += 1;\n      indexValue += indexInterval;\n    }\n    numEncoded++;\n  }\n\n","sourceOld":"  /** Call at most <code>numValues</code> times to encode a non decreasing sequence of non negative numbers.\n   * @param x The next number to be encoded.\n   * @throws IllegalArgumentException when:\n   *         <ul>\n   *         <li>called more than <code>numValues</code> times, or\n   *         <li><code>x</code> is smaller than an earlier encoded value, or\n   *         <li><code>x</code> is larger than <code>upperBound</code>.\n   *         </ul>\n   */\n  public void encodeNext(long x) {\n    if (numEncoded >= numValues) {\n      throw new IllegalStateException(\"encodeNext called more than \" + numValues + \" times.\");\n    }\n    if (lastEncoded > x) {\n      throw new IllegalArgumentException(x + \" smaller than previous \" + lastEncoded);\n    }\n    if (x > upperBound) {\n      throw new IllegalArgumentException(x + \" larger than upperBound \" + upperBound);\n    }\n    encodeUpperBits(x >>> numLowBits);\n    encodeLowerBits(x & lowerBitsMask);\n    numEncoded++;\n    lastEncoded = x;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"556259cdb46d4f7fb27f4688c4efcb3eaee4a550","date":1432028057,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/EliasFanoEncoder#encodeNext(long).mjava","sourceNew":null,"sourceOld":"  /** Call at most <code>numValues</code> times to encode a non decreasing sequence of non negative numbers.\n   * @param x The next number to be encoded.\n   * @throws IllegalStateException when called more than <code>numValues</code> times.\n   * @throws IllegalArgumentException when:\n   *         <ul>\n   *         <li><code>x</code> is smaller than an earlier encoded value, or\n   *         <li><code>x</code> is larger than <code>upperBound</code>.\n   *         </ul>\n   */\n  public void encodeNext(long x) {\n    if (numEncoded >= numValues) {\n      throw new IllegalStateException(\"encodeNext called more than \" + numValues + \" times.\");\n    }\n    if (lastEncoded > x) {\n      throw new IllegalArgumentException(x + \" smaller than previous \" + lastEncoded);\n    }\n    if (x > upperBound) {\n      throw new IllegalArgumentException(x + \" larger than upperBound \" + upperBound);\n    }\n    long highValue = x >>> numLowBits;\n    encodeUpperBits(highValue);\n    encodeLowerBits(x & lowerBitsMask);\n    lastEncoded = x;\n    // Add index entries:\n    long indexValue = (currentEntryIndex + 1) * indexInterval;\n    while (indexValue <= highValue) { \n      long afterZeroBitPosition = indexValue + numEncoded;\n      packValue(afterZeroBitPosition, upperZeroBitPositionIndex, nIndexEntryBits, currentEntryIndex);\n      currentEntryIndex += 1;\n      indexValue += indexInterval;\n    }\n    numEncoded++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["423470dff9e19aa0db92590e282e2ca12e34d65a"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"]},"commit2Childs":{"556259cdb46d4f7fb27f4688c4efcb3eaee4a550":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c":["37a0f60745e53927c4c876cfe5b5a58170f0646c","423470dff9e19aa0db92590e282e2ca12e34d65a"],"423470dff9e19aa0db92590e282e2ca12e34d65a":["556259cdb46d4f7fb27f4688c4efcb3eaee4a550"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","21d517f3b4989fcd30eda0cad105d5fdcaeb5d7c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}