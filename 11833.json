{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(AtomicReader,PrintStream).mjava","commits":[{"id":"e99275efa2c9c9ae3bdba986218af82f2bf3dc30","date":1354658499,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(AtomicReader,PrintStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(SegmentInfoPerCommit,SegmentReader,NumberFormat).mjava","sourceNew":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(AtomicReader reader, PrintStream infoStream) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" total field count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields for a segment.\n   */\n  private Status.StoredFieldStatus testStoredFields(SegmentInfoPerCommit info, SegmentReader reader, NumberFormat format) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < info.info.getDocCount(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(\"OK [\" + status.totFields + \" total field count; avg \" + \n          format.format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(\"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(AtomicReader,PrintStream).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(AtomicReader reader, PrintStream infoStream) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" total field count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(AtomicReader,PrintStream,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testStoredFields(AtomicReader,PrintStream).mjava","sourceNew":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(AtomicReader reader, PrintStream infoStream, boolean failFast) throws IOException {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" total field count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test stored fields.\n   * @lucene.experimental\n   */\n  public static Status.StoredFieldStatus testStoredFields(AtomicReader reader, PrintStream infoStream) {\n    final Status.StoredFieldStatus status = new Status.StoredFieldStatus();\n\n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: stored fields.......\");\n      }\n\n      // Scan stored fields for all documents\n      final Bits liveDocs = reader.getLiveDocs();\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull even deleted documents to\n        // make sure they too are not corrupt:\n        StoredDocument doc = reader.document(j);\n        if (liveDocs == null || liveDocs.get(j)) {\n          status.docCount++;\n          status.totFields += doc.getFields().size();\n        }\n      }      \n\n      // Validate docCount\n      if (status.docCount != reader.numDocs()) {\n        throw new RuntimeException(\"docCount=\" + status.docCount + \" but saw \" + status.docCount + \" undeleted docs\");\n      }\n\n      msg(infoStream, \"OK [\" + status.totFields + \" total field count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format((((float) status.totFields)/status.docCount)) + \" fields per doc]\");      \n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n\n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","e99275efa2c9c9ae3bdba986218af82f2bf3dc30"],"e99275efa2c9c9ae3bdba986218af82f2bf3dc30":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}