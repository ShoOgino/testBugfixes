{"path":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevatedIds().mjava","commits":[{"id":"e6046c615b67e878b7c0ab9257d01dd759493f06","date":1564997027,"type":0,"author":"Bruno Roustant","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevatedIds().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElevatedIds() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"text\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      assertEquals(toIdSet(\"1\"), elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\"), elevationProvider.getElevationForQuery(\"bb DD CC vv\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"13\"), elevationProvider.getElevationForQuery(\"BB Cc\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"14\"), elevationProvider.getElevationForQuery(\"aa bb dd cc aa\").elevatedIds);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":0,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevatedIds().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testElevatedIds() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"text\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      assertEquals(toIdSet(\"1\"), elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\"), elevationProvider.getElevationForQuery(\"bb DD CC vv\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"13\"), elevationProvider.getElevationForQuery(\"BB Cc\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"14\"), elevationProvider.getElevationForQuery(\"aa bb dd cc aa\").elevatedIds);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevatedIds().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testElevatedIds().mjava","sourceNew":"  @Test\n  public void testElevatedIds() throws Exception {\n    try (QueryElevationComponent comp = new QueryElevationComponent()) {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"text\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      assertEquals(toIdSet(\"1\"), elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\"), elevationProvider.getElevationForQuery(\"bb DD CC vv\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"13\"), elevationProvider.getElevationForQuery(\"BB Cc\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"14\"), elevationProvider.getElevationForQuery(\"aa bb dd cc aa\").elevatedIds);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testElevatedIds() throws Exception {\n    try {\n      init(\"schema12.xml\");\n      SolrCore core = h.getCore();\n\n      NamedList<String> args = new NamedList<>();\n      args.add(QueryElevationComponent.FIELD_TYPE, \"text\");\n      args.add(QueryElevationComponent.CONFIG_FILE, \"elevate.xml\");\n\n      QueryElevationComponent comp = new QueryElevationComponent();\n      comp.init(args);\n      comp.inform(core);\n\n      SolrQueryRequest req = req();\n      IndexReader reader = req.getSearcher().getIndexReader();\n      QueryElevationComponent.ElevationProvider elevationProvider = comp.getElevationProvider(reader, core);\n      req.close();\n\n      assertEquals(toIdSet(\"1\"), elevationProvider.getElevationForQuery(\"xxxx\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\"), elevationProvider.getElevationForQuery(\"bb DD CC vv\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"13\"), elevationProvider.getElevationForQuery(\"BB Cc\").elevatedIds);\n      assertEquals(toIdSet(\"10\", \"11\", \"12\", \"14\"), elevationProvider.getElevationForQuery(\"aa bb dd cc aa\").elevatedIds);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ba055e19afc289adcb5bedaf68513793a7254012":["e6046c615b67e878b7c0ab9257d01dd759493f06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e6046c615b67e878b7c0ab9257d01dd759493f06":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6046c615b67e878b7c0ab9257d01dd759493f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba055e19afc289adcb5bedaf68513793a7254012"]},"commit2Childs":{"ba055e19afc289adcb5bedaf68513793a7254012":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6046c615b67e878b7c0ab9257d01dd759493f06","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"e6046c615b67e878b7c0ab9257d01dd759493f06":["ba055e19afc289adcb5bedaf68513793a7254012","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}