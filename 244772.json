{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.NumFlagParsingStrategy#parseFlags(String).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.NumFlagParsingStrategy#parseFlags(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n\n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        flags[i] = (char) Integer.parseInt(rawFlagParts[i].replaceAll(\"[^0-9]\", \"\"));\n      }\n\n      return flags;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.NumFlagParsingStrategy#parseFlags(String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary.NumFlagParsingStrategy#parseFlags(String).mjava","sourceNew":"    /**\n     * {@inheritDoc}\n     */\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n\n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        flags[i] = (char) Integer.parseInt(rawFlagParts[i].replaceAll(\"[^0-9]\", \"\"));\n      }\n\n      return flags;\n    }\n\n","sourceOld":"    /**\n     * {@inheritDoc}\n     */\n    public char[] parseFlags(String rawFlags) {\n      String[] rawFlagParts = rawFlags.trim().split(\",\");\n      char[] flags = new char[rawFlagParts.length];\n\n      for (int i = 0; i < rawFlagParts.length; i++) {\n        // note, removing the trailing X/leading I for nepali... what is the rule here?! \n        flags[i] = (char) Integer.parseInt(rawFlagParts[i].replaceAll(\"[^0-9]\", \"\"));\n      }\n\n      return flags;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}