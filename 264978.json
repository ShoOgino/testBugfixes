{"path":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#runSliceExecutorTest(ThreadPoolExecutor,boolean).mjava","commits":[{"id":"868410ef958ba78b7677a417f1fbfe03c47c034c","date":1585753946,"type":0,"author":"Atri Sharma","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestIndexSearcher#runSliceExecutorTest(ThreadPoolExecutor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void runSliceExecutorTest(ThreadPoolExecutor service, boolean useRandomSliceExecutor) throws Exception {\n    SliceExecutor sliceExecutor = useRandomSliceExecutor == true ? new RandomBlockingSliceExecutor(service) :\n                                                              new QueueSizeBasedExecutor(service);\n\n    IndexSearcher searcher = new IndexSearcher(reader.getContext(), service, sliceExecutor);\n\n    Query queries[] = new Query[] {\n        new MatchAllDocsQuery(),\n        new TermQuery(new Term(\"field\", \"1\"))\n    };\n    Sort sorts[] = new Sort[] {\n        null,\n        new Sort(new SortField(\"field2\", SortField.Type.STRING))\n    };\n    ScoreDoc afters[] = new ScoreDoc[] {\n        null,\n        new FieldDoc(0, 0f, new Object[] { new BytesRef(\"boo!\") })\n    };\n\n    for (ScoreDoc after : afters) {\n      for (Query query : queries) {\n        for (Sort sort : sorts) {\n          searcher.search(query, Integer.MAX_VALUE);\n          searcher.searchAfter(after, query, Integer.MAX_VALUE);\n          if (sort != null) {\n            TopDocs topDocs = searcher.search(query, Integer.MAX_VALUE, sort);\n            assertTrue(topDocs.totalHits.value > 0);\n\n            topDocs = searcher.search(query, Integer.MAX_VALUE, sort, true);\n            assertTrue(topDocs.totalHits.value > 0);\n\n            topDocs = searcher.search(query, Integer.MAX_VALUE, sort, false);\n            assertTrue(topDocs.totalHits.value > 0);\n\n            topDocs = searcher.searchAfter(after, query, Integer.MAX_VALUE, sort);\n            assertTrue(topDocs.totalHits.value > 0);\n\n            topDocs = searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, true);\n            assertTrue(topDocs.totalHits.value > 0);\n\n            topDocs = searcher.searchAfter(after, query, Integer.MAX_VALUE, sort, false);\n            assertTrue(topDocs.totalHits.value > 0);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868410ef958ba78b7677a417f1fbfe03c47c034c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["868410ef958ba78b7677a417f1fbfe03c47c034c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["868410ef958ba78b7677a417f1fbfe03c47c034c"],"868410ef958ba78b7677a417f1fbfe03c47c034c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}