{"path":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","commits":[{"id":"85397dd93927c17347c6bf89800cd0fc566c2d03","date":1544610812,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) {\n    List<Map<String, Metric>> metrics = new ArrayList<>();\n    cluster.getJettySolrRunners().forEach(r -> {\n      MetricRegistry registry = r.getCoreContainer().getMetricManager().registry(\"solr.node\");\n      assertNotNull(registry);\n      metrics.add(registry.getMetrics());\n    });\n\n    Map<String,Long> counts = new HashMap<>();\n    AUTH_METRICS_KEYS.forEach(k -> {\n      counts.put(k, sumCount(prefix, k, metrics));\n    });\n    \n    // check each counter\n    assertExpectedMetrics(requests, \"requests\", counts);\n    assertExpectedMetrics(authenticated, \"authenticated\", counts);\n    assertExpectedMetrics(passThrough, \"passThrough\", counts);\n    assertExpectedMetrics(failWrongCredentials, \"failWrongCredentials\", counts);\n    assertExpectedMetrics(failMissingCredentials, \"failMissingCredentials\", counts);\n    assertExpectedMetrics(errors, \"errors\", counts);\n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","sourceNew":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) {\n    Map<String, Long> counts = countAuthMetrics(prefix);\n    \n    // check each counter\n    boolean success = isMetricEuqalOrLarger(requests, \"requests\", counts)\n        & isMetricEuqalOrLarger(authenticated, \"authenticated\", counts)\n        & isMetricEuqalOrLarger(passThrough, \"passThrough\", counts)\n        & isMetricEuqalOrLarger(failWrongCredentials, \"failWrongCredentials\", counts)\n        & isMetricEuqalOrLarger(failMissingCredentials, \"failMissingCredentials\", counts)\n        & isMetricEuqalOrLarger(errors, \"errors\", counts);\n    \n    Map<String, Long> expectedCounts = new HashMap<>();\n    expectedCounts.put(\"requests\", (long) requests);\n    expectedCounts.put(\"authenticated\", (long) authenticated);\n    expectedCounts.put(\"passThrough\", (long) passThrough);\n    expectedCounts.put(\"failWrongCredentials\", (long) failWrongCredentials);\n    expectedCounts.put(\"failMissingCredentials\", (long) failMissingCredentials);\n    expectedCounts.put(\"errors\", (long) errors);\n    assertTrue(\"Expected metric minimums for prefix \" + prefix + \": \" + expectedCounts + \", but got: \" + counts, success);\n    \n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) {\n    List<Map<String, Metric>> metrics = new ArrayList<>();\n    cluster.getJettySolrRunners().forEach(r -> {\n      MetricRegistry registry = r.getCoreContainer().getMetricManager().registry(\"solr.node\");\n      assertNotNull(registry);\n      metrics.add(registry.getMetrics());\n    });\n\n    Map<String,Long> counts = new HashMap<>();\n    AUTH_METRICS_KEYS.forEach(k -> {\n      counts.put(k, sumCount(prefix, k, metrics));\n    });\n    \n    // check each counter\n    assertExpectedMetrics(requests, \"requests\", counts);\n    assertExpectedMetrics(authenticated, \"authenticated\", counts);\n    assertExpectedMetrics(passThrough, \"passThrough\", counts);\n    assertExpectedMetrics(failWrongCredentials, \"failWrongCredentials\", counts);\n    assertExpectedMetrics(failMissingCredentials, \"failMissingCredentials\", counts);\n    assertExpectedMetrics(errors, \"errors\", counts);\n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85091c28b30918e3b853626fb144d3de27b1cda8","date":1548330207,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","sourceNew":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) throws InterruptedException {\n    Map<String, Long> expectedCounts = new HashMap<>();\n    expectedCounts.put(\"requests\", (long) requests);\n    expectedCounts.put(\"authenticated\", (long) authenticated);\n    expectedCounts.put(\"passThrough\", (long) passThrough);\n    expectedCounts.put(\"failWrongCredentials\", (long) failWrongCredentials);\n    expectedCounts.put(\"failMissingCredentials\", (long) failMissingCredentials);\n    expectedCounts.put(\"errors\", (long) errors);\n\n    Map<String, Long> counts = countAuthMetrics(prefix);\n    boolean success = isMetricsEqualOrLarger(expectedCounts, counts);\n    if (!success) {\n      log.info(\"First metrics count assert failed, pausing 2s before re-attempt\");\n      Thread.sleep(2000);\n      counts = countAuthMetrics(prefix);\n      success = isMetricsEqualOrLarger(expectedCounts, counts);\n    }\n    \n    assertTrue(\"Expected metric minimums for prefix \" + prefix + \": \" + expectedCounts + \", but got: \" + counts, success);\n    \n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) {\n    Map<String, Long> counts = countAuthMetrics(prefix);\n    \n    // check each counter\n    boolean success = isMetricEuqalOrLarger(requests, \"requests\", counts)\n        & isMetricEuqalOrLarger(authenticated, \"authenticated\", counts)\n        & isMetricEuqalOrLarger(passThrough, \"passThrough\", counts)\n        & isMetricEuqalOrLarger(failWrongCredentials, \"failWrongCredentials\", counts)\n        & isMetricEuqalOrLarger(failMissingCredentials, \"failMissingCredentials\", counts)\n        & isMetricEuqalOrLarger(errors, \"errors\", counts);\n    \n    Map<String, Long> expectedCounts = new HashMap<>();\n    expectedCounts.put(\"requests\", (long) requests);\n    expectedCounts.put(\"authenticated\", (long) authenticated);\n    expectedCounts.put(\"passThrough\", (long) passThrough);\n    expectedCounts.put(\"failWrongCredentials\", (long) failWrongCredentials);\n    expectedCounts.put(\"failMissingCredentials\", (long) failMissingCredentials);\n    expectedCounts.put(\"errors\", (long) errors);\n    assertTrue(\"Expected metric minimums for prefix \" + prefix + \": \" + expectedCounts + \", but got: \" + counts, success);\n    \n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12ddd922ea96c1d0ea68a68506b6984a246cfb22","date":1554385731,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","sourceNew":"  /**\n   * Common test method to be able to check auth metrics from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) throws InterruptedException {\n    Map<String, Long> expectedCounts = new HashMap<>();\n    expectedCounts.put(\"requests\", (long) requests);\n    expectedCounts.put(\"authenticated\", (long) authenticated);\n    expectedCounts.put(\"passThrough\", (long) passThrough);\n    expectedCounts.put(\"failWrongCredentials\", (long) failWrongCredentials);\n    expectedCounts.put(\"failMissingCredentials\", (long) failMissingCredentials);\n    expectedCounts.put(\"errors\", (long) errors);\n\n    Map<String, Long> counts = countSecurityMetrics(cluster, prefix, AUTH_METRICS_KEYS);\n    boolean success = isMetricsEqualOrLarger(AUTH_METRICS_TO_COMPARE, expectedCounts, counts);\n    if (!success) {\n      log.info(\"First metrics count assert failed, pausing 2s before re-attempt\");\n      Thread.sleep(2000);\n      counts = countSecurityMetrics(cluster, prefix, AUTH_METRICS_KEYS);\n      success = isMetricsEqualOrLarger(AUTH_METRICS_TO_COMPARE, expectedCounts, counts);\n    }\n    \n    assertTrue(\"Expected metric minimums for prefix \" + prefix + \": \" + expectedCounts + \", but got: \" + counts, success);\n    \n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Common test method to be able to check security from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) throws InterruptedException {\n    Map<String, Long> expectedCounts = new HashMap<>();\n    expectedCounts.put(\"requests\", (long) requests);\n    expectedCounts.put(\"authenticated\", (long) authenticated);\n    expectedCounts.put(\"passThrough\", (long) passThrough);\n    expectedCounts.put(\"failWrongCredentials\", (long) failWrongCredentials);\n    expectedCounts.put(\"failMissingCredentials\", (long) failMissingCredentials);\n    expectedCounts.put(\"errors\", (long) errors);\n\n    Map<String, Long> counts = countAuthMetrics(prefix);\n    boolean success = isMetricsEqualOrLarger(expectedCounts, counts);\n    if (!success) {\n      log.info(\"First metrics count assert failed, pausing 2s before re-attempt\");\n      Thread.sleep(2000);\n      counts = countAuthMetrics(prefix);\n      success = isMetricsEqualOrLarger(expectedCounts, counts);\n    }\n    \n    assertTrue(\"Expected metric minimums for prefix \" + prefix + \": \" + expectedCounts + \", but got: \" + counts, success);\n    \n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63","date":1566156051,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/SolrCloudAuthTestCase#assertAuthMetricsMinimums(String,int,int,int,int,int,int).mjava","sourceNew":"  /**\n   * Common test method to be able to check auth metrics from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) throws InterruptedException {\n    Map<String, Long> expectedCounts = new HashMap<>();\n    expectedCounts.put(\"requests\", (long) requests);\n    expectedCounts.put(\"authenticated\", (long) authenticated);\n    expectedCounts.put(\"passThrough\", (long) passThrough);\n    expectedCounts.put(\"failWrongCredentials\", (long) failWrongCredentials);\n    expectedCounts.put(\"failMissingCredentials\", (long) failMissingCredentials);\n    expectedCounts.put(\"errors\", (long) errors);\n\n    final Map<String, Long> counts = countSecurityMetrics(cluster, prefix, AUTH_METRICS_KEYS);\n    final boolean success = isMetricsEqualOrLarger(AUTH_METRICS_TO_COMPARE, expectedCounts, counts);\n    \n    assertTrue(\"Expected metric minimums for prefix \" + prefix + \": \" + expectedCounts +\n               \", but got: \" + counts + \"(Possible cause is delay in loading modified \" +\n               \"security.json; see SOLR-13464 for test work around)\",\n               success);\n    \n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","sourceOld":"  /**\n   * Common test method to be able to check auth metrics from any authentication plugin\n   * @param prefix the metrics key prefix, currently \"SECURITY./authentication.\" for basic auth and \"SECURITY./authentication/pki.\" for PKI \n   */\n  private void assertAuthMetricsMinimums(String prefix, int requests, int authenticated, int passThrough, int failWrongCredentials, int failMissingCredentials, int errors) throws InterruptedException {\n    Map<String, Long> expectedCounts = new HashMap<>();\n    expectedCounts.put(\"requests\", (long) requests);\n    expectedCounts.put(\"authenticated\", (long) authenticated);\n    expectedCounts.put(\"passThrough\", (long) passThrough);\n    expectedCounts.put(\"failWrongCredentials\", (long) failWrongCredentials);\n    expectedCounts.put(\"failMissingCredentials\", (long) failMissingCredentials);\n    expectedCounts.put(\"errors\", (long) errors);\n\n    Map<String, Long> counts = countSecurityMetrics(cluster, prefix, AUTH_METRICS_KEYS);\n    boolean success = isMetricsEqualOrLarger(AUTH_METRICS_TO_COMPARE, expectedCounts, counts);\n    if (!success) {\n      log.info(\"First metrics count assert failed, pausing 2s before re-attempt\");\n      Thread.sleep(2000);\n      counts = countSecurityMetrics(cluster, prefix, AUTH_METRICS_KEYS);\n      success = isMetricsEqualOrLarger(AUTH_METRICS_TO_COMPARE, expectedCounts, counts);\n    }\n    \n    assertTrue(\"Expected metric minimums for prefix \" + prefix + \": \" + expectedCounts + \", but got: \" + counts, success);\n    \n    if (counts.get(\"requests\") > 0) {\n      assertTrue(\"requestTimes count not > 1\", counts.get(\"requestTimes\") > 1);\n      assertTrue(\"totalTime not > 0\", counts.get(\"totalTime\") > 0);\n    }\n  }\n\n","bugFix":["12ddd922ea96c1d0ea68a68506b6984a246cfb22","4bb519c79b76e52145e37b6681a7012525ed5f4b","85091c28b30918e3b853626fb144d3de27b1cda8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["85091c28b30918e3b853626fb144d3de27b1cda8"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85091c28b30918e3b853626fb144d3de27b1cda8":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["85091c28b30918e3b853626fb144d3de27b1cda8"],"1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"85397dd93927c17347c6bf89800cd0fc566c2d03":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"12ddd922ea96c1d0ea68a68506b6984a246cfb22":["1c9ebcf78baa972856cb0e3b45cf41a92b4a3d63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85397dd93927c17347c6bf89800cd0fc566c2d03"],"85091c28b30918e3b853626fb144d3de27b1cda8":["12ddd922ea96c1d0ea68a68506b6984a246cfb22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}