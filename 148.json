{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/TaxonomyReader#getChildrenArrays().mjava","sourceNew":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","sourceOld":"  /**\n   * getChildrenArrays() returns a {@link ChildrenArrays} object which can\n   * be used together to efficiently enumerate the children of any category. \n   * <P>\n   * The caller can hold on to the object it got indefinitely - it is\n   * guaranteed that no-one else will modify it. The other side of the\n   * same coin is that the caller must treat the object which it got (and\n   * the arrays it contains) as read-only and <B>not modify it</B>, because\n   * other callers might have gotten the same object too.\n   * <P>\n   * Implementations should have O(getSize()) time for the first call or\n   * after a refresh(), but O(1) time for further calls. In neither case\n   * there should be a need to read new data from disk. These guarantees\n   * are most likely achieved by calculating this object (based on the\n   * getParentArray()) when first needed, and later (if the taxonomy was not\n   * refreshed) returning the same object (without any allocation or copying)\n   * when requested.\n   * <P>\n   * The reason we have one method returning one object, rather than two\n   * methods returning two arrays, is to avoid race conditions in a multi-\n   * threaded application: We want to avoid the possibility of returning one\n   * new array and one old array, as those could not be used together.\n   */\n  public ChildrenArrays getChildrenArrays();\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}