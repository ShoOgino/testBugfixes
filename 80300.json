{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizer#normalize(char[],int).mjava","commits":[{"id":"5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf","date":1265287316,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizer#normalize(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Normalize an input buffer of Hindi text\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   */\n  public int normalize(char s[], int len) {\n\n    for (int i = 0; i < len; i++) {\n      switch (s[i]) {\n        // dead n -> bindu\n      case '\\u0928':\n        if (i + 1 < len && s[i + 1] == '\\u094D') {\n          s[i] = '\\u0902';\n          len = delete(s, i + 1, len);\n        }\n        break;\n      // candrabindu -> bindu\n      case '\\u0901':\n        s[i] = '\\u0902';\n        break;\n      // nukta deletions\n      case '\\u093C':\n        len = delete(s, i, len);\n        i--;\n        break;      \n      case '\\u0929':\n        s[i] = '\\u0928';\n        break;\n      case '\\u0931':\n        s[i] = '\\u0930';\n        break;\n      case '\\u0934':\n        s[i] = '\\u0933';\n        break;\n      case '\\u0958':\n        s[i] = '\\u0915';\n        break;\n      case '\\u0959':\n        s[i] = '\\u0916';\n        break;\n      case '\\u095A':\n        s[i] = '\\u0917';\n        break;\n      case '\\u095B':\n        s[i] = '\\u091C';\n        break;\n      case '\\u095C':\n        s[i] = '\\u0921';\n        break;\n      case '\\u095D':\n        s[i] = '\\u0922';\n        break;\n      case '\\u095E':\n        s[i] = '\\u092B';\n        break;\n      case '\\u095F':\n        s[i] = '\\u092F';\n        break;\n        // zwj/zwnj -> delete\n      case '\\u200D':\n      case '\\u200C':\n        len = delete(s, i, len);\n        i--;\n        break;\n        // virama -> delete\n      case '\\u094D':\n        len = delete(s, i, len);\n        i--;\n        break;\n        // chandra/short -> replace\n      case '\\u0945':\n      case '\\u0946':\n        s[i] = '\\u0947';\n        break;\n      case '\\u0949':\n      case '\\u094A':\n        s[i] = '\\u094B';\n        break;\n      case '\\u090D':\n      case '\\u090E':\n        s[i] = '\\u090F';\n        break;\n      case '\\u0911':\n      case '\\u0912':\n        s[i] = '\\u0913';\n        break;\n      case '\\u0972':\n        s[i] = '\\u0905';\n        break;\n        // long -> short ind. vowels\n      case '\\u0906':\n        s[i] = '\\u0905';\n        break;\n      case '\\u0908':\n        s[i] = '\\u0907';\n        break;\n      case '\\u090A':\n        s[i] = '\\u0909';\n        break;\n      case '\\u0960':\n        s[i] = '\\u090B';\n        break;\n      case '\\u0961':\n        s[i] = '\\u090C';\n        break;\n      case '\\u0910':\n        s[i] = '\\u090F';\n        break;\n      case '\\u0914':\n        s[i] = '\\u0913';\n        break;\n        // long -> short dep. vowels\n      case '\\u0940':\n        s[i] = '\\u093F';\n        break;\n      case '\\u0942':\n        s[i] = '\\u0941';\n        break;\n      case '\\u0944':\n        s[i] = '\\u0943';\n        break;\n      case '\\u0963':\n        s[i] = '\\u0962';\n        break;\n      case '\\u0948':\n        s[i] = '\\u0947';\n        break;\n      case '\\u094C':\n        s[i] = '\\u094B';\n        break;\n      default:\n        break;\n      }\n    }\n\n    return len;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizer#normalize(char[],int).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/hi/HindiNormalizer#normalize(char[],int).mjava","sourceNew":"  /**\n   * Normalize an input buffer of Hindi text\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   */\n  public int normalize(char s[], int len) {\n\n    for (int i = 0; i < len; i++) {\n      switch (s[i]) {\n        // dead n -> bindu\n      case '\\u0928':\n        if (i + 1 < len && s[i + 1] == '\\u094D') {\n          s[i] = '\\u0902';\n          len = delete(s, i + 1, len);\n        }\n        break;\n      // candrabindu -> bindu\n      case '\\u0901':\n        s[i] = '\\u0902';\n        break;\n      // nukta deletions\n      case '\\u093C':\n        len = delete(s, i, len);\n        i--;\n        break;      \n      case '\\u0929':\n        s[i] = '\\u0928';\n        break;\n      case '\\u0931':\n        s[i] = '\\u0930';\n        break;\n      case '\\u0934':\n        s[i] = '\\u0933';\n        break;\n      case '\\u0958':\n        s[i] = '\\u0915';\n        break;\n      case '\\u0959':\n        s[i] = '\\u0916';\n        break;\n      case '\\u095A':\n        s[i] = '\\u0917';\n        break;\n      case '\\u095B':\n        s[i] = '\\u091C';\n        break;\n      case '\\u095C':\n        s[i] = '\\u0921';\n        break;\n      case '\\u095D':\n        s[i] = '\\u0922';\n        break;\n      case '\\u095E':\n        s[i] = '\\u092B';\n        break;\n      case '\\u095F':\n        s[i] = '\\u092F';\n        break;\n        // zwj/zwnj -> delete\n      case '\\u200D':\n      case '\\u200C':\n        len = delete(s, i, len);\n        i--;\n        break;\n        // virama -> delete\n      case '\\u094D':\n        len = delete(s, i, len);\n        i--;\n        break;\n        // chandra/short -> replace\n      case '\\u0945':\n      case '\\u0946':\n        s[i] = '\\u0947';\n        break;\n      case '\\u0949':\n      case '\\u094A':\n        s[i] = '\\u094B';\n        break;\n      case '\\u090D':\n      case '\\u090E':\n        s[i] = '\\u090F';\n        break;\n      case '\\u0911':\n      case '\\u0912':\n        s[i] = '\\u0913';\n        break;\n      case '\\u0972':\n        s[i] = '\\u0905';\n        break;\n        // long -> short ind. vowels\n      case '\\u0906':\n        s[i] = '\\u0905';\n        break;\n      case '\\u0908':\n        s[i] = '\\u0907';\n        break;\n      case '\\u090A':\n        s[i] = '\\u0909';\n        break;\n      case '\\u0960':\n        s[i] = '\\u090B';\n        break;\n      case '\\u0961':\n        s[i] = '\\u090C';\n        break;\n      case '\\u0910':\n        s[i] = '\\u090F';\n        break;\n      case '\\u0914':\n        s[i] = '\\u0913';\n        break;\n        // long -> short dep. vowels\n      case '\\u0940':\n        s[i] = '\\u093F';\n        break;\n      case '\\u0942':\n        s[i] = '\\u0941';\n        break;\n      case '\\u0944':\n        s[i] = '\\u0943';\n        break;\n      case '\\u0963':\n        s[i] = '\\u0962';\n        break;\n      case '\\u0948':\n        s[i] = '\\u0947';\n        break;\n      case '\\u094C':\n        s[i] = '\\u094B';\n        break;\n      default:\n        break;\n      }\n    }\n\n    return len;\n  }\n\n","sourceOld":"  /**\n   * Normalize an input buffer of Hindi text\n   * \n   * @param s input buffer\n   * @param len length of input buffer\n   * @return length of input buffer after normalization\n   */\n  public int normalize(char s[], int len) {\n\n    for (int i = 0; i < len; i++) {\n      switch (s[i]) {\n        // dead n -> bindu\n      case '\\u0928':\n        if (i + 1 < len && s[i + 1] == '\\u094D') {\n          s[i] = '\\u0902';\n          len = delete(s, i + 1, len);\n        }\n        break;\n      // candrabindu -> bindu\n      case '\\u0901':\n        s[i] = '\\u0902';\n        break;\n      // nukta deletions\n      case '\\u093C':\n        len = delete(s, i, len);\n        i--;\n        break;      \n      case '\\u0929':\n        s[i] = '\\u0928';\n        break;\n      case '\\u0931':\n        s[i] = '\\u0930';\n        break;\n      case '\\u0934':\n        s[i] = '\\u0933';\n        break;\n      case '\\u0958':\n        s[i] = '\\u0915';\n        break;\n      case '\\u0959':\n        s[i] = '\\u0916';\n        break;\n      case '\\u095A':\n        s[i] = '\\u0917';\n        break;\n      case '\\u095B':\n        s[i] = '\\u091C';\n        break;\n      case '\\u095C':\n        s[i] = '\\u0921';\n        break;\n      case '\\u095D':\n        s[i] = '\\u0922';\n        break;\n      case '\\u095E':\n        s[i] = '\\u092B';\n        break;\n      case '\\u095F':\n        s[i] = '\\u092F';\n        break;\n        // zwj/zwnj -> delete\n      case '\\u200D':\n      case '\\u200C':\n        len = delete(s, i, len);\n        i--;\n        break;\n        // virama -> delete\n      case '\\u094D':\n        len = delete(s, i, len);\n        i--;\n        break;\n        // chandra/short -> replace\n      case '\\u0945':\n      case '\\u0946':\n        s[i] = '\\u0947';\n        break;\n      case '\\u0949':\n      case '\\u094A':\n        s[i] = '\\u094B';\n        break;\n      case '\\u090D':\n      case '\\u090E':\n        s[i] = '\\u090F';\n        break;\n      case '\\u0911':\n      case '\\u0912':\n        s[i] = '\\u0913';\n        break;\n      case '\\u0972':\n        s[i] = '\\u0905';\n        break;\n        // long -> short ind. vowels\n      case '\\u0906':\n        s[i] = '\\u0905';\n        break;\n      case '\\u0908':\n        s[i] = '\\u0907';\n        break;\n      case '\\u090A':\n        s[i] = '\\u0909';\n        break;\n      case '\\u0960':\n        s[i] = '\\u090B';\n        break;\n      case '\\u0961':\n        s[i] = '\\u090C';\n        break;\n      case '\\u0910':\n        s[i] = '\\u090F';\n        break;\n      case '\\u0914':\n        s[i] = '\\u0913';\n        break;\n        // long -> short dep. vowels\n      case '\\u0940':\n        s[i] = '\\u093F';\n        break;\n      case '\\u0942':\n        s[i] = '\\u0941';\n        break;\n      case '\\u0944':\n        s[i] = '\\u0943';\n        break;\n      case '\\u0963':\n        s[i] = '\\u0962';\n        break;\n      case '\\u0948':\n        s[i] = '\\u0947';\n        break;\n      case '\\u094C':\n        s[i] = '\\u094B';\n        break;\n      default:\n        break;\n      }\n    }\n\n    return len;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf"]},"commit2Childs":{"5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5e5f9e7cd8a21e5b99d91107d6f400de933f8ecf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}