{"path":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = new RAMDirectory();\n    Directory tDir = new RAMDirectory();\n    \n    IndexWriter w = new IndexWriter(iDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    LuceneTaxonomyWriter taxoW = new LuceneTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    w.close();\n    \n    IndexReader reader = IndexReader.open(iDir);\n    LuceneTaxonomyReader taxo = new LuceneTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random, iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    LuceneTaxonomyWriter taxoW = new LuceneTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    LuceneTaxonomyReader taxo = new LuceneTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = new RAMDirectory();\n    Directory tDir = new RAMDirectory();\n    \n    IndexWriter w = new IndexWriter(iDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new KeywordAnalyzer()));\n    LuceneTaxonomyWriter taxoW = new LuceneTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    w.close();\n    \n    IndexReader reader = IndexReader.open(iDir);\n    LuceneTaxonomyReader taxo = new LuceneTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random, iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    LuceneTaxonomyWriter taxoW = new LuceneTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    LuceneTaxonomyReader taxo = new LuceneTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random, iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    LuceneTaxonomyWriter taxoW = new LuceneTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    LuceneTaxonomyReader taxo = new LuceneTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random, iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random, iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    LuceneTaxonomyWriter taxoW = new LuceneTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    LuceneTaxonomyReader taxo = new LuceneTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random, iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random, MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/enhancements/association/CustomAssociationPropertyTest#testCustomProperty().mjava","sourceNew":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomProperty() throws Exception {\n    class CustomProperty extends AssociationIntProperty {\n      public CustomProperty(int value) {\n        super(value);\n      }\n      @Override\n      public void merge(CategoryProperty other) {\n        throw new UnsupportedOperationException();\n      }\n    }\n\n    final int NUM_CATEGORIES = 10;\n    EnhancementsIndexingParams iParams = new DefaultEnhancementsIndexingParams(\n        new AssociationEnhancement());\n\n    Directory iDir = newDirectory();\n    Directory tDir = newDirectory();\n    \n    RandomIndexWriter w = new RandomIndexWriter(random(), iDir, \n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random(), MockTokenizer.KEYWORD, false)));\n    DirectoryTaxonomyWriter taxoW = new DirectoryTaxonomyWriter(tDir);\n    \n    CategoryContainer cc = new CategoryContainer();\n    EnhancementsDocumentBuilder builder = new EnhancementsDocumentBuilder(taxoW, iParams);\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      CategoryAttributeImpl ca = new CategoryAttributeImpl(new CategoryPath(Integer.toString(i)));\n      ca.addProperty(new CustomProperty(i));\n      \n      cc.addCategory(ca);\n    }\n    builder.setCategories(cc);\n    w.addDocument(builder.build(new Document()));\n    taxoW.close();\n    IndexReader reader = w.getReader();\n    w.close();\n    \n    DirectoryTaxonomyReader taxo = new DirectoryTaxonomyReader(tDir);\n    String field = iParams.getCategoryListParams(new CategoryPath(\"0\")).getTerm().field();\n    AssociationsPayloadIterator api = new AssociationsPayloadIterator(reader, field);\n\n    api.setNextDoc(0);\n\n    boolean flag = false;\n    for (int i = 1; i <= NUM_CATEGORIES; i++) {\n      int ordinal = taxo.getOrdinal(new CategoryPath(Integer.toString(i)));\n      flag = true;\n      long association = api.getAssociation(ordinal);\n      assertTrue(\"Association expected for ordinal \"+ordinal+\" but none was found\",\n          association <= Integer.MAX_VALUE);\n      \n      assertEquals(\"Wrong association value for category '\"+ i+\"'\", i, (int)association);\n    }\n    \n    assertTrue(\"No categories found for doc #0\", flag);\n    \n    reader.close();\n    taxo.close();\n    iDir.close();\n    tDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}