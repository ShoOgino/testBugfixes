{"path":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32e7c2a80dad193a76a03ec46b878969d469ff6c","date":1323722006,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      DocValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b1605dda5afabdc06fd136fa0dd14ad326e3001","date":1326751633,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e, false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d207426bd26fa5c1014e26d21d87603aea68b7","date":1327944562,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      IndexReader.AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      AtomicReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      AtomicReaderContext rcontext = readerContexts[idx];\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      AtomicReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78e76f8752318fdc3638972fb6d2291624f6b72a","date":1426886080,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      Object val = values.objectVal(localId);\n      if (val != null) {\n        doc.setField( name, val );\n      }\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fcontext, rcontext);\n      }\n\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320eec6599df6f97f2461a5d1ad49cd93b324a14","date":1503502574,"type":1,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182384b20c064aa16998ddebe9f36e649279c5a6","date":1503596494,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int,float).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid, float score) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/transform/ValueSourceAugmenter#transform(SolrDocument,int).mjava","sourceNew":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      @SuppressWarnings({\"unchecked\"})\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void transform(SolrDocument doc, int docid) {\n    // This is only good for random-access functions\n\n    try {\n\n      // TODO: calculate this stuff just once across diff functions\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      LeafReaderContext rcontext = readerContexts.get(idx);\n      FunctionValues values = valueSource.getValues(fcontext, rcontext);\n      int localId = docid - rcontext.docBase;\n      setValue(doc,values.objectVal(localId));\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"exception at docid \" + docid + \" for valuesource \" + valueSource, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"78e76f8752318fdc3638972fb6d2291624f6b72a":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["78e76f8752318fdc3638972fb6d2291624f6b72a"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["7b1605dda5afabdc06fd136fa0dd14ad326e3001","96d207426bd26fa5c1014e26d21d87603aea68b7"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["c26f00b574427b55127e869b935845554afde1fa","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["c9fb5f46e264daf5ba3860defe623a89d202dd87","78e76f8752318fdc3638972fb6d2291624f6b72a"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","182384b20c064aa16998ddebe9f36e649279c5a6"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"182384b20c064aa16998ddebe9f36e649279c5a6":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","320eec6599df6f97f2461a5d1ad49cd93b324a14"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["c26f00b574427b55127e869b935845554afde1fa"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["182384b20c064aa16998ddebe9f36e649279c5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c26f00b574427b55127e869b935845554afde1fa":["d638301ad1cfcae567b681b893bc8781f0ee48a5","32e7c2a80dad193a76a03ec46b878969d469ff6c"],"320eec6599df6f97f2461a5d1ad49cd93b324a14":["182384b20c064aa16998ddebe9f36e649279c5a6"],"96d207426bd26fa5c1014e26d21d87603aea68b7":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"78e76f8752318fdc3638972fb6d2291624f6b72a":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["320eec6599df6f97f2461a5d1ad49cd93b324a14","3a7809d1d753b67f48b1a706e17034bf8b624ea3","182384b20c064aa16998ddebe9f36e649279c5a6"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["78e76f8752318fdc3638972fb6d2291624f6b72a","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["7b1605dda5afabdc06fd136fa0dd14ad326e3001"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"182384b20c064aa16998ddebe9f36e649279c5a6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b1605dda5afabdc06fd136fa0dd14ad326e3001":["96d207426bd26fa5c1014e26d21d87603aea68b7","5cab9a86bd67202d20b6adc463008c8e982b070a"],"32e7c2a80dad193a76a03ec46b878969d469ff6c":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3a7809d1d753b67f48b1a706e17034bf8b624ea3","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}