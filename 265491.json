{"path":"solr/core/src/java/org/apache/solr/search/join/HashRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":0,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/HashRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext context) {\n        return DocValues.isCacheable(context, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedDocValues docValues = context.reader().getSortedDocValues(field);\n        int[] cache = getCache(context);\n\n        TwoPhaseIterator iterator = new TwoPhaseIterator(docValues) {\n          @Override\n          public boolean matches() throws IOException {\n            int hash = cache != null ? cache[docValues.docID()] : hash(docValues);\n            return hash >= lower && hash <= upper;\n          }\n\n          @Override\n          public float matchCost() {\n            return cache != null ? 2 : 100;\n          }\n        };\n\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      private int[] getCache(LeafReaderContext context) throws IOException {\n        IndexReader.CacheHelper cacheHelper = context.reader().getReaderCacheHelper();\n        if (cacheHelper == null) {\n          return null;\n        }\n        @SuppressWarnings(\"unchecked\")\n        final SolrCache<IndexReader.CacheKey, int[]> cache =\n                ((SolrIndexSearcher) searcher).getCache(CACHE_KEY_PREFIX + field);\n        if (cache == null) {\n          return null;\n        }\n\n        IndexReader.CacheKey cacheKey = cacheHelper.getKey();\n        synchronized (cacheKey) {\n          int[] hashes = cache.get(cacheKey);\n          if (hashes == null) {\n            hashes = new int[context.reader().maxDoc()];\n            SortedDocValues docValues = context.reader().getSortedDocValues(field);\n            int doc;\n            while ((doc = docValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              hashes[doc] = hash(docValues);\n            }\n            cache.put(cacheKey, hashes);\n          }\n          return hashes;\n        }\n      }\n\n      private int hash(SortedDocValues docValues) throws IOException {\n        BytesRef bytesRef = docValues.binaryValue();\n        return Hash.murmurhash3_x86_32(bytesRef.bytes, bytesRef.offset, bytesRef.length, 0);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/HashRangeQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext context) {\n        return DocValues.isCacheable(context, field);\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        SortedDocValues docValues = context.reader().getSortedDocValues(field);\n        int[] cache = getCache(context);\n\n        TwoPhaseIterator iterator = new TwoPhaseIterator(docValues) {\n          @Override\n          public boolean matches() throws IOException {\n            int hash = cache != null ? cache[docValues.docID()] : hash(docValues);\n            return hash >= lower && hash <= upper;\n          }\n\n          @Override\n          public float matchCost() {\n            return cache != null ? 2 : 100;\n          }\n        };\n\n        return new ConstantScoreScorer(this, boost, scoreMode, iterator);\n      }\n\n      private int[] getCache(LeafReaderContext context) throws IOException {\n        IndexReader.CacheHelper cacheHelper = context.reader().getReaderCacheHelper();\n        if (cacheHelper == null) {\n          return null;\n        }\n        @SuppressWarnings(\"unchecked\")\n        final SolrCache<IndexReader.CacheKey, int[]> cache =\n                ((SolrIndexSearcher) searcher).getCache(CACHE_KEY_PREFIX + field);\n        if (cache == null) {\n          return null;\n        }\n\n        IndexReader.CacheKey cacheKey = cacheHelper.getKey();\n        synchronized (cacheKey) {\n          int[] hashes = cache.get(cacheKey);\n          if (hashes == null) {\n            hashes = new int[context.reader().maxDoc()];\n            SortedDocValues docValues = context.reader().getSortedDocValues(field);\n            int doc;\n            while ((doc = docValues.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n              hashes[doc] = hash(docValues);\n            }\n            cache.put(cacheKey, hashes);\n          }\n          return hashes;\n        }\n      }\n\n      private int hash(SortedDocValues docValues) throws IOException {\n        BytesRef bytesRef = docValues.binaryValue();\n        return Hash.murmurhash3_x86_32(bytesRef.bytes, bytesRef.offset, bytesRef.length, 0);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}