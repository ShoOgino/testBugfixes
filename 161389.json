{"path":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","commits":[{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return in.asTwoPhaseIterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0613e0740833ec755a71c81b0046b97df797e9ce","fdd572df21b78bb2212d045bf26a2773a48b58e9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return in.asTwoPhaseIterator();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0613e0740833ec755a71c81b0046b97df797e9ce","date":1428263071,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator inner = in.asTwoPhaseIterator();\n    if (inner != null) {\n      // wrapped instance has an approximation\n      return new TwoPhaseIterator(inner.approximation()) {\n        @Override\n        public boolean matches() throws IOException {\n          return inner.matches() && twoPhaseCurrentDocMatches();\n        }\n      };\n    } else {\n      // wrapped instance has no approximation, but \n      // we can still defer matching until absolutely needed.\n      return new TwoPhaseIterator(in) {\n        @Override\n        public boolean matches() throws IOException {\n          return twoPhaseCurrentDocMatches();\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    return in.asTwoPhaseIterator();\n  }\n\n","bugFix":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fdd572df21b78bb2212d045bf26a2773a48b58e9","date":1428851244,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public final TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator inner = in.asTwoPhaseIterator();\n    if (inner != null) {\n      // wrapped instance has an approximation\n      return new TwoPhaseIterator(inner.approximation()) {\n        @Override\n        public boolean matches() throws IOException {\n          return inner.matches() && twoPhaseCurrentDocMatches();\n        }\n      };\n    } else {\n      // wrapped instance has no approximation, but \n      // we can still defer matching until absolutely needed.\n      return new TwoPhaseIterator(in) {\n        @Override\n        public boolean matches() throws IOException {\n          return twoPhaseCurrentDocMatches();\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator inner = in.asTwoPhaseIterator();\n    if (inner != null) {\n      // wrapped instance has an approximation\n      return new TwoPhaseIterator(inner.approximation()) {\n        @Override\n        public boolean matches() throws IOException {\n          return inner.matches() && twoPhaseCurrentDocMatches();\n        }\n      };\n    } else {\n      // wrapped instance has no approximation, but \n      // we can still defer matching until absolutely needed.\n      return new TwoPhaseIterator(in) {\n        @Override\n        public boolean matches() throws IOException {\n          return twoPhaseCurrentDocMatches();\n        }\n      };\n    }\n  }\n\n","bugFix":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d277693481ea6007c1d83cd503d0859bb3b64d20","date":1447445281,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/FilterSpans#asTwoPhaseIterator().mjava","sourceNew":"  @Override\n  public final TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator inner = in.asTwoPhaseIterator();\n    if (inner != null) {\n      // wrapped instance has an approximation\n      return new TwoPhaseIterator(inner.approximation()) {\n        @Override\n        public boolean matches() throws IOException {\n          return inner.matches() && twoPhaseCurrentDocMatches();\n        }\n\n        @Override\n        public float matchCost() {\n          return inner.matchCost(); // underestimate\n        }\n\n        @Override\n        public String toString() {\n          return \"FilterSpans@asTwoPhaseIterator(inner=\" + inner + \", in=\" + in + \")\";\n        }\n      };\n    } else {\n      // wrapped instance has no approximation, but \n      // we can still defer matching until absolutely needed.\n      return new TwoPhaseIterator(in) {\n        @Override\n        public boolean matches() throws IOException {\n          return twoPhaseCurrentDocMatches();\n        }\n\n        @Override\n        public float matchCost() {\n          return in.positionsCost(); // overestimate\n        }\n\n        @Override\n        public String toString() {\n          return \"FilterSpans@asTwoPhaseIterator(in=\" + in + \")\";\n        }\n      };\n    }\n  }\n\n","sourceOld":"  @Override\n  public final TwoPhaseIterator asTwoPhaseIterator() {\n    TwoPhaseIterator inner = in.asTwoPhaseIterator();\n    if (inner != null) {\n      // wrapped instance has an approximation\n      return new TwoPhaseIterator(inner.approximation()) {\n        @Override\n        public boolean matches() throws IOException {\n          return inner.matches() && twoPhaseCurrentDocMatches();\n        }\n      };\n    } else {\n      // wrapped instance has no approximation, but \n      // we can still defer matching until absolutely needed.\n      return new TwoPhaseIterator(in) {\n        @Override\n        public boolean matches() throws IOException {\n          return twoPhaseCurrentDocMatches();\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["fdd572df21b78bb2212d045bf26a2773a48b58e9"],"0613e0740833ec755a71c81b0046b97df797e9ce":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"fdd572df21b78bb2212d045bf26a2773a48b58e9":["0613e0740833ec755a71c81b0046b97df797e9ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fab172655716b96f7e42376116235017a922de3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d277693481ea6007c1d83cd503d0859bb3b64d20"]},"commit2Childs":{"d277693481ea6007c1d83cd503d0859bb3b64d20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0613e0740833ec755a71c81b0046b97df797e9ce":["fdd572df21b78bb2212d045bf26a2773a48b58e9"],"fdd572df21b78bb2212d045bf26a2773a48b58e9":["d277693481ea6007c1d83cd503d0859bb3b64d20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["0613e0740833ec755a71c81b0046b97df797e9ce","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}