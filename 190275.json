{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = newDirectory(random);\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory(random);\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9","d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd4c4b2a55a46d2c45e3de4514f08e33215caa21","date":1288902330,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterExceptions#testExceptionDuringSync().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockDirectoryWrapper dir = newDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergeScheduler(new ConcurrentMergeScheduler()));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testExceptionDuringSync().mjava","sourceNew":null,"sourceOld":"  // LUCENE-1044: test exception during sync\n  public void testExceptionDuringSync() throws IOException {\n    MockRAMDirectory dir = new MockRAMDirectory();\n    FailOnlyInSync failure = new FailOnlyInSync();\n    dir.failOn(failure);\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(2));\n    failure.setDoFail();\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(5);\n\n    for (int i = 0; i < 23; i++) {\n      addDoc(writer);\n      if ((i-1)%2 == 0) {\n        try {\n          writer.commit();\n        } catch (IOException ioe) {\n          // expected\n        }\n      }\n    }\n\n    ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n    assertTrue(failure.didFail);\n    failure.clearDoFail();\n    writer.close();\n\n    IndexReader reader = IndexReader.open(dir, true);\n    assertEquals(23, reader.numDocs());\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["1f653cfcf159baeaafe5d01682a911e95bba4012","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["85a883878c0af761245ab048babc63d099f835f3","fd4c4b2a55a46d2c45e3de4514f08e33215caa21"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85a883878c0af761245ab048babc63d099f835f3":[],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"fd4c4b2a55a46d2c45e3de4514f08e33215caa21":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}