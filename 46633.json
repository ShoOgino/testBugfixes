{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrRules.SolrFilterRule#isNotFilterByExpr(List[RexNode],List[String]).mjava","commits":[{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrRules.SolrFilterRule#isNotFilterByExpr(List[RexNode],List[String]).mjava","pathOld":"/dev/null","sourceNew":"    private static boolean isNotFilterByExpr(List<RexNode> rexNodes, List<String> fieldNames) {\n      // We dont have a way to filter by result of aggregator now\n      boolean result = true;\n      for (RexNode rexNode : rexNodes) {\n        if (rexNode instanceof RexCall) {\n          result = result && isNotFilterByExpr(((RexCall) rexNode).getOperands(), fieldNames);\n        } else if (rexNode instanceof RexInputRef) {\n          result = result && !fieldNames.get(((RexInputRef) rexNode).getIndex()).startsWith(\"EXPR$\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrRules.SolrFilterRule#isNotFilterByExpr(List[RexNode],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrRules.SolrFilterRule#isNotFilterByExpr(List[RexNode],List[String]).mjava","sourceNew":"    private static boolean isNotFilterByExpr(List<RexNode> rexNodes, List<String> fieldNames) {\n\n      // We dont have a way to filter by result of aggregator now\n      boolean result = true;\n\n      for (RexNode rexNode : rexNodes) {\n        if (rexNode instanceof RexCall) {\n          result = result && isNotFilterByExpr(((RexCall) rexNode).getOperands(), fieldNames);\n        } else if (rexNode instanceof RexInputRef) {\n          result = result && !fieldNames.get(((RexInputRef) rexNode).getIndex()).startsWith(\"EXPR$\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":"    private static boolean isNotFilterByExpr(List<RexNode> rexNodes, List<String> fieldNames) {\n      // We dont have a way to filter by result of aggregator now\n      boolean result = true;\n      for (RexNode rexNode : rexNodes) {\n        if (rexNode instanceof RexCall) {\n          result = result && isNotFilterByExpr(((RexCall) rexNode).getOperands(), fieldNames);\n        } else if (rexNode instanceof RexInputRef) {\n          result = result && !fieldNames.get(((RexInputRef) rexNode).getIndex()).startsWith(\"EXPR$\");\n        }\n      }\n      return result;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrRules.SolrFilterRule#isNotFilterByExpr(List[RexNode],List[String]).mjava","pathOld":"/dev/null","sourceNew":"    private static boolean isNotFilterByExpr(List<RexNode> rexNodes, List<String> fieldNames) {\n\n      // We dont have a way to filter by result of aggregator now\n      boolean result = true;\n\n      for (RexNode rexNode : rexNodes) {\n        if (rexNode instanceof RexCall) {\n          result = result && isNotFilterByExpr(((RexCall) rexNode).getOperands(), fieldNames);\n        } else if (rexNode instanceof RexInputRef) {\n          result = result && !fieldNames.get(((RexInputRef) rexNode).getIndex()).startsWith(\"EXPR$\");\n        }\n      }\n      return result;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"612da0a0a2d5f4409da55729b9833e799f905ac5":["d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["612da0a0a2d5f4409da55729b9833e799f905ac5","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}