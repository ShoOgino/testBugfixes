{"path":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","commits":[{"id":"aca9a18be9d7251531953284ee8d8012b022cbc7","date":1519116407,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      File configFile = new File(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrClient solrClient = createClient(connStr);\n\n      SolrExporter solrExporter = new SolrExporter(port, solrClient, configFile, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (MalformedObjectNameException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6edfc2dfac665ac59cb5f5335512bea5456d1dc3","date":1519140363,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      File configFile = new File(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrClient solrClient = createClient(connStr);\n\n      SolrExporter solrExporter = new SolrExporter(port, solrClient, configFile, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (MalformedObjectNameException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"873efcdf87d1e2a7c3014c56779fec9967a3ec9f","date":1519279726,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      File configFile = new File(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrClient solrClient = createClient(connStr);\n\n      SolrExporter solrExporter = new SolrExporter(port, solrClient, configFile, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (MalformedObjectNameException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0b857dd3d30acf3541d2bf24a619d81effc9c11d","date":1519436286,"type":4,"author":"koji","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      File configFile = new File(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrClient solrClient = createClient(connStr);\n\n      SolrExporter solrExporter = new SolrExporter(port, solrClient, configFile, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (MalformedObjectNameException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1a927b2bca4e3939de1ef05d142c13cee9c1245","date":1520231792,"type":0,"author":"koji","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f18e0fcd4f3356dffc51840f1d11607f930a1b86","date":1530193458,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      log.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      log.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      log.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      log.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      log.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      log.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      logger.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      logger.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cd8a9425419baa85ef4a56ed411ffb4c57964d3","date":1551677567,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    ArgumentParser parser = ArgumentParsers.newFor(SolrExporter.class.getSimpleName()).build()\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_SCRAPE_INTERVAL_FLAGS)\n        .metavar(ARG_SCRAPE_INTERVAL_METAVAR).dest(ARG_SCRAPE_INTERVAL_DEST).type(Integer.class)\n        .setDefault(ARG_SCRAPE_INTERVAL_DEFAULT).help(ARG_SCRAPE_INTERVAL_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      SolrScrapeConfiguration scrapeConfiguration = null;\n\n      if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.solrCloud(res.getString(ARG_ZK_HOST_DEST));\n      } else if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.standalone(res.getString(ARG_BASE_URL_DEST));\n      }\n\n      if (scrapeConfiguration == null) {\n        log.error(\"Must provide either %s or %s\", ARG_BASE_URL_FLAGS, ARG_ZK_HOST_FLAGS);\n      }\n\n      SolrExporter solrExporter = new SolrExporter(\n          res.getInt(ARG_PORT_DEST),\n          res.getInt(ARG_NUM_THREADS_DEST),\n          res.getInt(ARG_SCRAPE_INTERVAL_DEST),\n          scrapeConfiguration,\n          loadMetricsConfiguration(Paths.get(res.getString(ARG_CONFIG_DEST))));\n\n      log.info(\"Starting Solr Prometheus Exporting\");\n      solrExporter.start();\n      log.info(\"Solr Prometheus Exporter is running\");\n    } catch (IOException e) {\n      log.error(\"Failed to start Solr Prometheus Exporter: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Entry point of SolrExporter.\n   */\n  public static void main( String[] args ) {\n    ArgumentParser parser = ArgumentParsers.newArgumentParser(SolrCollector.class.getSimpleName())\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      int port = res.getInt(ARG_PORT_DEST);\n\n      String connStr = \"http://localhost:8983/solr\";\n      if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_BASE_URL_DEST);\n      } else if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        connStr = res.getString(ARG_ZK_HOST_DEST);\n      }\n\n      Path configPath = Paths.get(res.getString(ARG_CONFIG_DEST));\n      int numThreads = res.getInt(ARG_NUM_THREADS_DEST);\n\n      SolrExporter solrExporter = new SolrExporter(port, connStr, configPath, numThreads);\n      solrExporter.start();\n      log.info(\"Start server\");\n    } catch (ParserConfigurationException | SAXException | IOException e) {\n      log.error(\"Start server failed: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6afb0ba86024b96e8b34cfc2e15562239dc36360","date":1579768208,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    ArgumentParser parser = ArgumentParsers.newFor(SolrExporter.class.getSimpleName()).build()\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_SCRAPE_INTERVAL_FLAGS)\n        .metavar(ARG_SCRAPE_INTERVAL_METAVAR).dest(ARG_SCRAPE_INTERVAL_DEST).type(Integer.class)\n        .setDefault(ARG_SCRAPE_INTERVAL_DEFAULT).help(ARG_SCRAPE_INTERVAL_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      SolrScrapeConfiguration scrapeConfiguration = null;\n\n      if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.solrCloud(res.getString(ARG_ZK_HOST_DEST));\n      } else if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.standalone(res.getString(ARG_BASE_URL_DEST));\n      }\n\n      if (scrapeConfiguration == null) {\n        log.error(\"Must provide either {} or {}\", ARG_BASE_URL_FLAGS, ARG_ZK_HOST_FLAGS);\n      }\n\n      SolrExporter solrExporter = new SolrExporter(\n          res.getInt(ARG_PORT_DEST),\n          res.getInt(ARG_NUM_THREADS_DEST),\n          res.getInt(ARG_SCRAPE_INTERVAL_DEST),\n          scrapeConfiguration,\n          loadMetricsConfiguration(Paths.get(res.getString(ARG_CONFIG_DEST))));\n\n      log.info(\"Starting Solr Prometheus Exporting\");\n      solrExporter.start();\n      log.info(\"Solr Prometheus Exporter is running\");\n    } catch (IOException e) {\n      log.error(\"Failed to start Solr Prometheus Exporter: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    ArgumentParser parser = ArgumentParsers.newFor(SolrExporter.class.getSimpleName()).build()\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_SCRAPE_INTERVAL_FLAGS)\n        .metavar(ARG_SCRAPE_INTERVAL_METAVAR).dest(ARG_SCRAPE_INTERVAL_DEST).type(Integer.class)\n        .setDefault(ARG_SCRAPE_INTERVAL_DEFAULT).help(ARG_SCRAPE_INTERVAL_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      SolrScrapeConfiguration scrapeConfiguration = null;\n\n      if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.solrCloud(res.getString(ARG_ZK_HOST_DEST));\n      } else if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.standalone(res.getString(ARG_BASE_URL_DEST));\n      }\n\n      if (scrapeConfiguration == null) {\n        log.error(\"Must provide either %s or %s\", ARG_BASE_URL_FLAGS, ARG_ZK_HOST_FLAGS);\n      }\n\n      SolrExporter solrExporter = new SolrExporter(\n          res.getInt(ARG_PORT_DEST),\n          res.getInt(ARG_NUM_THREADS_DEST),\n          res.getInt(ARG_SCRAPE_INTERVAL_DEST),\n          scrapeConfiguration,\n          loadMetricsConfiguration(Paths.get(res.getString(ARG_CONFIG_DEST))));\n\n      log.info(\"Starting Solr Prometheus Exporting\");\n      solrExporter.start();\n      log.info(\"Solr Prometheus Exporter is running\");\n    } catch (IOException e) {\n      log.error(\"Failed to start Solr Prometheus Exporter: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","pathOld":"solr/contrib/prometheus-exporter/src/java/org/apache/solr/prometheus/exporter/SolrExporter#main(String[]).mjava","sourceNew":"  public static void main(String[] args) {\n    ArgumentParser parser = ArgumentParsers.newFor(SolrExporter.class.getSimpleName()).build()\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_SCRAPE_INTERVAL_FLAGS)\n        .metavar(ARG_SCRAPE_INTERVAL_METAVAR).dest(ARG_SCRAPE_INTERVAL_DEST).type(Integer.class)\n        .setDefault(ARG_SCRAPE_INTERVAL_DEFAULT).help(ARG_SCRAPE_INTERVAL_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      SolrScrapeConfiguration scrapeConfiguration = null;\n\n      if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.solrCloud(res.getString(ARG_ZK_HOST_DEST));\n      } else if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.standalone(res.getString(ARG_BASE_URL_DEST));\n      }\n\n      if (scrapeConfiguration == null) {\n        log.error(\"Must provide either {} or {}\", ARG_BASE_URL_FLAGS, ARG_ZK_HOST_FLAGS);\n      }\n\n      SolrExporter solrExporter = new SolrExporter(\n          res.getInt(ARG_PORT_DEST),\n          res.getInt(ARG_NUM_THREADS_DEST),\n          res.getInt(ARG_SCRAPE_INTERVAL_DEST),\n          scrapeConfiguration,\n          loadMetricsConfiguration(Paths.get(res.getString(ARG_CONFIG_DEST))));\n\n      log.info(\"Starting Solr Prometheus Exporting\");\n      solrExporter.start();\n      log.info(\"Solr Prometheus Exporter is running\");\n    } catch (IOException e) {\n      log.error(\"Failed to start Solr Prometheus Exporter: \", e);\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","sourceOld":"  public static void main(String[] args) {\n    ArgumentParser parser = ArgumentParsers.newFor(SolrExporter.class.getSimpleName()).build()\n        .description(\"Prometheus exporter for Apache Solr.\");\n\n    parser.addArgument(ARG_PORT_FLAGS)\n        .metavar(ARG_PORT_METAVAR).dest(ARG_PORT_DEST).type(Integer.class)\n        .setDefault(ARG_PORT_DEFAULT).help(ARG_PORT_HELP);\n\n    parser.addArgument(ARG_BASE_URL_FLAGS)\n        .metavar(ARG_BASE_URL_METAVAR).dest(ARG_BASE_URL_DEST).type(String.class)\n        .setDefault(ARG_BASE_URL_DEFAULT).help(ARG_BASE_URL_HELP);\n\n    parser.addArgument(ARG_ZK_HOST_FLAGS)\n        .metavar(ARG_ZK_HOST_METAVAR).dest(ARG_ZK_HOST_DEST).type(String.class)\n        .setDefault(ARG_ZK_HOST_DEFAULT).help(ARG_ZK_HOST_HELP);\n\n    parser.addArgument(ARG_CONFIG_FLAGS)\n        .metavar(ARG_CONFIG_METAVAR).dest(ARG_CONFIG_DEST).type(String.class)\n        .setDefault(ARG_CONFIG_DEFAULT).help(ARG_CONFIG_HELP);\n\n    parser.addArgument(ARG_SCRAPE_INTERVAL_FLAGS)\n        .metavar(ARG_SCRAPE_INTERVAL_METAVAR).dest(ARG_SCRAPE_INTERVAL_DEST).type(Integer.class)\n        .setDefault(ARG_SCRAPE_INTERVAL_DEFAULT).help(ARG_SCRAPE_INTERVAL_HELP);\n\n    parser.addArgument(ARG_NUM_THREADS_FLAGS)\n        .metavar(ARG_NUM_THREADS_METAVAR).dest(ARG_NUM_THREADS_DEST).type(Integer.class)\n        .setDefault(ARG_NUM_THREADS_DEFAULT).help(ARG_NUM_THREADS_HELP);\n\n    try {\n      Namespace res = parser.parseArgs(args);\n\n      SolrScrapeConfiguration scrapeConfiguration = null;\n\n      if (!res.getString(ARG_ZK_HOST_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.solrCloud(res.getString(ARG_ZK_HOST_DEST));\n      } else if (!res.getString(ARG_BASE_URL_DEST).equals(\"\")) {\n        scrapeConfiguration = SolrScrapeConfiguration.standalone(res.getString(ARG_BASE_URL_DEST));\n      }\n\n      if (scrapeConfiguration == null) {\n        log.error(\"Must provide either {} or {}\", ARG_BASE_URL_FLAGS, ARG_ZK_HOST_FLAGS);\n      }\n\n      SolrExporter solrExporter = new SolrExporter(\n          res.getInt(ARG_PORT_DEST),\n          res.getInt(ARG_NUM_THREADS_DEST),\n          res.getInt(ARG_SCRAPE_INTERVAL_DEST),\n          scrapeConfiguration,\n          loadMetricsConfiguration(Paths.get(res.getString(ARG_CONFIG_DEST))));\n\n      log.info(\"Starting Solr Prometheus Exporting\");\n      solrExporter.start();\n      log.info(\"Solr Prometheus Exporter is running\");\n    } catch (IOException e) {\n      log.error(\"Failed to start Solr Prometheus Exporter: \" + e.toString());\n    } catch (ArgumentParserException e) {\n      parser.handleError(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"f18e0fcd4f3356dffc51840f1d11607f930a1b86":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["f18e0fcd4f3356dffc51840f1d11607f930a1b86"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f1a927b2bca4e3939de1ef05d142c13cee9c1245","f18e0fcd4f3356dffc51840f1d11607f930a1b86"],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3"],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f1a927b2bca4e3939de1ef05d142c13cee9c1245","f18e0fcd4f3356dffc51840f1d11607f930a1b86"]},"commit2Childs":{"873efcdf87d1e2a7c3014c56779fec9967a3ec9f":["0b857dd3d30acf3541d2bf24a619d81effc9c11d"],"f18e0fcd4f3356dffc51840f1d11607f930a1b86":["4cd8a9425419baa85ef4a56ed411ffb4c57964d3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0b857dd3d30acf3541d2bf24a619d81effc9c11d":["f1a927b2bca4e3939de1ef05d142c13cee9c1245"],"6edfc2dfac665ac59cb5f5335512bea5456d1dc3":["873efcdf87d1e2a7c3014c56779fec9967a3ec9f"],"aca9a18be9d7251531953284ee8d8012b022cbc7":["6edfc2dfac665ac59cb5f5335512bea5456d1dc3"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cd8a9425419baa85ef4a56ed411ffb4c57964d3":["6afb0ba86024b96e8b34cfc2e15562239dc36360"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"6afb0ba86024b96e8b34cfc2e15562239dc36360":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"f1a927b2bca4e3939de1ef05d142c13cee9c1245":["f18e0fcd4f3356dffc51840f1d11607f930a1b86","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aca9a18be9d7251531953284ee8d8012b022cbc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}