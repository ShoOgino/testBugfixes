{"path":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(ReaderContext).mjava","commits":[{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(ReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(IndexReader).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(IndexReader reader) throws IOException\n  {\n    OpenBitSetDISI res = null;\n  \n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, reader), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, reader), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, reader), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(reader);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, reader));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705","date":1294747166,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(AtomicReaderContext).mjava","pathOld":"lucene/contrib/queries/src/java/org/apache/lucene/search/BooleanFilter#getDocIdSet(ReaderContext).mjava","sourceNew":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","sourceOld":"  /**\n   * Returns the a DocIdSetIterator representing the Boolean composition\n   * of the filters that have been added.\n   */\n  @Override\n  public DocIdSet getDocIdSet(ReaderContext context) throws IOException\n  {\n    OpenBitSetDISI res = null;\n    final IndexReader reader = context.reader;\n    if (shouldFilters != null) {\n      for (int i = 0; i < shouldFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(shouldFilters, i, context), reader.maxDoc());\n        } else { \n          DocIdSet dis = shouldFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.or((OpenBitSet) dis);\n          } else {\n            res.inPlaceOr(getDISI(shouldFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (notFilters!=null) {\n      for (int i = 0; i < notFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(notFilters, i, context), reader.maxDoc());\n          res.flip(0, reader.maxDoc()); // NOTE: may set bits on deleted docs\n        } else {\n          DocIdSet dis = notFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.andNot((OpenBitSet) dis);\n          } else {\n            res.inPlaceNot(getDISI(notFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (mustFilters!=null) {\n      for (int i = 0; i < mustFilters.size(); i++) {\n        if (res == null) {\n          res = new OpenBitSetDISI(getDISI(mustFilters, i, context), reader.maxDoc());\n        } else {\n          DocIdSet dis = mustFilters.get(i).getDocIdSet(context);\n          if(dis instanceof OpenBitSet) {\n            // optimized case for OpenBitSets\n            res.and((OpenBitSet) dis);\n          } else {\n            res.inPlaceAnd(getDISI(mustFilters, i, context));\n          }\n        }\n      }\n    }\n    \n    if (res !=null)\n      return res;\n\n    return DocIdSet.EMPTY_DOCIDSET;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"]},"commit2Childs":{"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["a10b98ef1ef4bf9e38d2e07a9e425a916afa8705"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"a10b98ef1ef4bf9e38d2e07a9e425a916afa8705":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}