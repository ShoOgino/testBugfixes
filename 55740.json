{"path":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#reset().mjava","commits":[{"id":"fad01f81cc24b33263ccec7dbff3fb907702f91e","date":1535461373,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#reset().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This method resets this object to a clean (zero-size) state and\n   * publishes any currently allocated buffers for reuse to the reuse strategy\n   * provided in the constructor.\n   * \n   * Sharing byte buffers for reads and writes is dangerous and will very likely\n   * lead to hard-to-debug issues, use with great care.\n   */\n  public void reset() {\n    blocks.stream().forEach(blockReuse);\n    blocks.clear();\n    currentBlock = EMPTY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f60c8050b8b329ec119916158a9166e31fc51d8","date":1574764871,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#reset().mjava","sourceNew":"  /**\n   * This method resets this object to a clean (zero-size) state and\n   * publishes any currently allocated buffers for reuse to the reuse strategy\n   * provided in the constructor.\n   * \n   * Sharing byte buffers for reads and writes is dangerous and will very likely\n   * lead to hard-to-debug issues, use with great care.\n   */\n  public void reset() {\n    if (blockReuse != NO_REUSE) {\n      blocks.forEach(blockReuse);\n    }\n    blocks.clear();\n    currentBlock = EMPTY;\n  }\n\n","sourceOld":"  /**\n   * This method resets this object to a clean (zero-size) state and\n   * publishes any currently allocated buffers for reuse to the reuse strategy\n   * provided in the constructor.\n   * \n   * Sharing byte buffers for reads and writes is dangerous and will very likely\n   * lead to hard-to-debug issues, use with great care.\n   */\n  public void reset() {\n    blocks.stream().forEach(blockReuse);\n    blocks.clear();\n    currentBlock = EMPTY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"679def3e975e7c840728e0f1123a2785fc68b3f9","date":1601298488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#reset().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/ByteBuffersDataOutput#reset().mjava","sourceNew":"  /**\n   * This method resets this object to a clean (zero-size) state and\n   * publishes any currently allocated buffers for reuse to the reuse strategy\n   * provided in the constructor.\n   * \n   * Sharing byte buffers for reads and writes is dangerous and will very likely\n   * lead to hard-to-debug issues, use with great care.\n   */\n  public void reset() {\n    if (blockReuse != NO_REUSE) {\n      blocks.forEach(blockReuse);\n    }\n    blocks.clear();\n    ramBytesUsed = 0;\n    currentBlock = EMPTY;\n  }\n\n","sourceOld":"  /**\n   * This method resets this object to a clean (zero-size) state and\n   * publishes any currently allocated buffers for reuse to the reuse strategy\n   * provided in the constructor.\n   * \n   * Sharing byte buffers for reads and writes is dangerous and will very likely\n   * lead to hard-to-debug issues, use with great care.\n   */\n  public void reset() {\n    if (blockReuse != NO_REUSE) {\n      blocks.forEach(blockReuse);\n    }\n    blocks.clear();\n    currentBlock = EMPTY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"679def3e975e7c840728e0f1123a2785fc68b3f9":["0f60c8050b8b329ec119916158a9166e31fc51d8"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f60c8050b8b329ec119916158a9166e31fc51d8":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["679def3e975e7c840728e0f1123a2785fc68b3f9"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fad01f81cc24b33263ccec7dbff3fb907702f91e"],"679def3e975e7c840728e0f1123a2785fc68b3f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fad01f81cc24b33263ccec7dbff3fb907702f91e":["0f60c8050b8b329ec119916158a9166e31fc51d8"],"0f60c8050b8b329ec119916158a9166e31fc51d8":["679def3e975e7c840728e0f1123a2785fc68b3f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}