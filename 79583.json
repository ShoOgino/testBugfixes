{"path":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","commits":[{"id":"92e2bfad016eca1c24f7e954f537e40a60465a1a","date":1273279324,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","pathOld":"/dev/null","sourceNew":"  public void testBOMMarkers() throws Exception {\n    final String fileWithBom = \"stopwithbom.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n\n    // preliminary sanity check\n    InputStream bomStream = loader.openResource(fileWithBom);\n    try {\n      final byte[] bomExpected = new byte[] { -17, -69, -65 };\n      final byte[] firstBytes = new byte[3];\n      \n      assertEquals(\"Should have been able to read 3 bytes from bomStream\",\n                   3, bomStream.read(firstBytes));\n\n      assertTrue(\"This test only works if \" + fileWithBom + \n                 \" contains a BOM -- it appears someone removed it.\", \n                 Arrays.equals(bomExpected, firstBytes));\n    } finally {\n      try { bomStream.close(); } catch (Exception e) { /* IGNORE */ }\n    }\n\n    // now make sure getLines skips the BOM...\n    List<String> lines = loader.getLines(fileWithBom);\n    assertEquals(1, lines.size());\n    assertEquals(\"BOMsAreEvil\", lines.get(0));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","sourceNew":"  public void testBOMMarkers() throws Exception {\n    final String fileWithBom = \"stopwithbom.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n\n    // preliminary sanity check\n    InputStream bomStream = loader.openResource(fileWithBom);\n    try {\n      final byte[] bomExpected = new byte[] { -17, -69, -65 };\n      final byte[] firstBytes = new byte[3];\n      \n      assertEquals(\"Should have been able to read 3 bytes from bomStream\",\n                   3, bomStream.read(firstBytes));\n\n      assertTrue(\"This test only works if \" + fileWithBom + \n                 \" contains a BOM -- it appears someone removed it.\", \n                 Arrays.equals(bomExpected, firstBytes));\n    } finally {\n      try { bomStream.close(); } catch (Exception e) { /* IGNORE */ }\n    }\n\n    // now make sure getLines skips the BOM...\n    List<String> lines = loader.getLines(fileWithBom);\n    assertEquals(1, lines.size());\n    assertEquals(\"BOMsAreEvil\", lines.get(0));\n  }\n\n","sourceOld":"  public void testBOMMarkers() throws Exception {\n    final String fileWithBom = \"stopwithbom.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n\n    // preliminary sanity check\n    InputStream bomStream = loader.openResource(fileWithBom);\n    try {\n      final byte[] bomExpected = new byte[] { -17, -69, -65 };\n      final byte[] firstBytes = new byte[3];\n      \n      assertEquals(\"Should have been able to read 3 bytes from bomStream\",\n                   3, bomStream.read(firstBytes));\n\n      assertTrue(\"This test only works if \" + fileWithBom + \n                 \" contains a BOM -- it appears someone removed it.\", \n                 Arrays.equals(bomExpected, firstBytes));\n    } finally {\n      try { bomStream.close(); } catch (Exception e) { /* IGNORE */ }\n    }\n\n    // now make sure getLines skips the BOM...\n    List<String> lines = loader.getLines(fileWithBom);\n    assertEquals(1, lines.size());\n    assertEquals(\"BOMsAreEvil\", lines.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","sourceNew":"  public void testBOMMarkers() throws Exception {\n    final String fileWithBom = \"stopwithbom.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n\n    // preliminary sanity check\n    InputStream bomStream = loader.openResource(fileWithBom);\n    try {\n      final byte[] bomExpected = new byte[] { -17, -69, -65 };\n      final byte[] firstBytes = new byte[3];\n      \n      assertEquals(\"Should have been able to read 3 bytes from bomStream\",\n                   3, bomStream.read(firstBytes));\n\n      assertTrue(\"This test only works if \" + fileWithBom + \n                 \" contains a BOM -- it appears someone removed it.\", \n                 Arrays.equals(bomExpected, firstBytes));\n    } finally {\n      try { bomStream.close(); } catch (Exception e) { /* IGNORE */ }\n    }\n\n    // now make sure getLines skips the BOM...\n    List<String> lines = loader.getLines(fileWithBom);\n    assertEquals(1, lines.size());\n    assertEquals(\"BOMsAreEvil\", lines.get(0));\n  }\n\n","sourceOld":"  public void testBOMMarkers() throws Exception {\n    final String fileWithBom = \"stopwithbom.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n\n    // preliminary sanity check\n    InputStream bomStream = loader.openResource(fileWithBom);\n    try {\n      final byte[] bomExpected = new byte[] { -17, -69, -65 };\n      final byte[] firstBytes = new byte[3];\n      \n      assertEquals(\"Should have been able to read 3 bytes from bomStream\",\n                   3, bomStream.read(firstBytes));\n\n      assertTrue(\"This test only works if \" + fileWithBom + \n                 \" contains a BOM -- it appears someone removed it.\", \n                 Arrays.equals(bomExpected, firstBytes));\n    } finally {\n      try { bomStream.close(); } catch (Exception e) { /* IGNORE */ }\n    }\n\n    // now make sure getLines skips the BOM...\n    List<String> lines = loader.getLines(fileWithBom);\n    assertEquals(1, lines.size());\n    assertEquals(\"BOMsAreEvil\", lines.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testBOMMarkers().mjava","sourceNew":"  public void testBOMMarkers() throws Exception {\n    final String fileWithBom = \"stopwithbom.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n\n    // preliminary sanity check\n    InputStream bomStream = loader.openResource(fileWithBom);\n    try {\n      final byte[] bomExpected = new byte[] { -17, -69, -65 };\n      final byte[] firstBytes = new byte[3];\n      \n      assertEquals(\"Should have been able to read 3 bytes from bomStream\",\n                   3, bomStream.read(firstBytes));\n\n      assertTrue(\"This test only works if \" + fileWithBom + \n                 \" contains a BOM -- it appears someone removed it.\", \n                 Arrays.equals(bomExpected, firstBytes));\n    } finally {\n      try { bomStream.close(); } catch (Exception e) { /* IGNORE */ }\n    }\n\n    // now make sure getLines skips the BOM...\n    List<String> lines = loader.getLines(fileWithBom);\n    assertEquals(1, lines.size());\n    assertEquals(\"BOMsAreEvil\", lines.get(0));\n  }\n\n","sourceOld":"  public void testBOMMarkers() throws Exception {\n    final String fileWithBom = \"stopwithbom.txt\";\n    SolrResourceLoader loader = new SolrResourceLoader(null);\n\n    // preliminary sanity check\n    InputStream bomStream = loader.openResource(fileWithBom);\n    try {\n      final byte[] bomExpected = new byte[] { -17, -69, -65 };\n      final byte[] firstBytes = new byte[3];\n      \n      assertEquals(\"Should have been able to read 3 bytes from bomStream\",\n                   3, bomStream.read(firstBytes));\n\n      assertTrue(\"This test only works if \" + fileWithBom + \n                 \" contains a BOM -- it appears someone removed it.\", \n                 Arrays.equals(bomExpected, firstBytes));\n    } finally {\n      try { bomStream.close(); } catch (Exception e) { /* IGNORE */ }\n    }\n\n    // now make sure getLines skips the BOM...\n    List<String> lines = loader.getLines(fileWithBom);\n    assertEquals(1, lines.size());\n    assertEquals(\"BOMsAreEvil\", lines.get(0));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["92e2bfad016eca1c24f7e954f537e40a60465a1a"],"c26f00b574427b55127e869b935845554afde1fa":["92e2bfad016eca1c24f7e954f537e40a60465a1a","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"92e2bfad016eca1c24f7e954f537e40a60465a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["92e2bfad016eca1c24f7e954f537e40a60465a1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92e2bfad016eca1c24f7e954f537e40a60465a1a"],"92e2bfad016eca1c24f7e954f537e40a60465a1a":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}