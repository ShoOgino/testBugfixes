{"path":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,BytesRef,int,int).mjava","commits":[{"id":"2d84736c4614acce6720851cbd2c823d7cd516e4","date":1290551630,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,BytesRef,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,int,int).mjava","sourceNew":"    protected LookupResult binarySearch(BytesRef b, BytesRef bytesRef, int low,\n        int high) {\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        deref(mid, bytesRef);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          lookupResult.ord = mid + 1;\n          lookupResult.found = true;\n          return lookupResult;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      lookupResult.ord = low;\n      lookupResult.found = false;\n      return lookupResult;\n    }\n\n","sourceOld":"    protected LookupResult binarySearch(BytesRef b, int low, int high) {\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        deref(mid);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          lookupResult.ord = mid + 1;\n          lookupResult.found = true;\n          return lookupResult;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      lookupResult.ord = low;\n      lookupResult.found = false;\n      return lookupResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4034ca0f8f74fdf56e25be73822f2441fc1c1b46","date":1307111599,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,BytesRef,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,BytesRef,int,int).mjava","sourceNew":"    protected int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n        int high) {\n      int mid = 0;\n      while (low <= high) {\n        mid = (low + high) >>> 1;\n        deref(mid, bytesRef);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          return mid;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      return -(low + 1);\n    }\n\n","sourceOld":"    protected LookupResult binarySearch(BytesRef b, BytesRef bytesRef, int low,\n        int high) {\n      while (low <= high) {\n        int mid = (low + high) >>> 1;\n        deref(mid, bytesRef);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          lookupResult.ord = mid + 1;\n          lookupResult.found = true;\n          return lookupResult;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      lookupResult.ord = low;\n      lookupResult.found = false;\n      return lookupResult;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"    protected int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n        int high) {\n      int mid = 0;\n      while (low <= high) {\n        mid = (low + high) >>> 1;\n        deref(mid, bytesRef);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          return mid;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      return -(low + 1);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,BytesRef,int,int).mjava","pathOld":"/dev/null","sourceNew":"    protected int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n        int high) {\n      int mid = 0;\n      while (low <= high) {\n        mid = (low + high) >>> 1;\n        deref(mid, bytesRef);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          return mid;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      return -(low + 1);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85eb75e0c0203e44dcf686f35876cf6080f3a671","date":1317221550,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesSortedSourceBase#binarySearch(BytesRef,BytesRef,int,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/Bytes.BytesBaseSortedSource#binarySearch(BytesRef,BytesRef,int,int).mjava","sourceNew":"    protected int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n        int high) {\n      int mid = 0;\n      while (low <= high) {\n        mid = (low + high) >>> 1;\n        deref(mid, bytesRef);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          return mid;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      return -(low + 1);\n    }\n\n","sourceOld":"    protected int binarySearch(BytesRef b, BytesRef bytesRef, int low,\n        int high) {\n      int mid = 0;\n      while (low <= high) {\n        mid = (low + high) >>> 1;\n        deref(mid, bytesRef);\n        final int cmp = comp.compare(bytesRef, b);\n        if (cmp < 0) {\n          low = mid + 1;\n        } else if (cmp > 0) {\n          high = mid - 1;\n        } else {\n          return mid;\n        }\n      }\n      assert comp.compare(bytesRef, b) != 0;\n      return -(low + 1);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2d84736c4614acce6720851cbd2c823d7cd516e4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["2d84736c4614acce6720851cbd2c823d7cd516e4"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85eb75e0c0203e44dcf686f35876cf6080f3a671"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"2d84736c4614acce6720851cbd2c823d7cd516e4":["4034ca0f8f74fdf56e25be73822f2441fc1c1b46"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","85eb75e0c0203e44dcf686f35876cf6080f3a671"],"4034ca0f8f74fdf56e25be73822f2441fc1c1b46":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2d84736c4614acce6720851cbd2c823d7cd516e4","2e8d7ba2175f47e280231533f7d3016249cea88b"],"85eb75e0c0203e44dcf686f35876cf6080f3a671":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}