{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentCoreReaders,IOContext).mjava","sourceNew":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.docCount - si.getDelCount());\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core, si.getCodec().liveDocsFormat().readLiveDocs(si.dir, si, context), si.docCount - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","sourceNew":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.docCount - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfo,SegmentCoreReaders,IOContext).mjava","sourceNew":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfo si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core, si.getCodec().liveDocsFormat().readLiveDocs(si.dir, si, context), si.docCount - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3b4a63b6b0155323dde6b827e0dc22a43580753","date":1346168671,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","sourceOld":"  // Create new SegmentReader sharing core from a previous\n  // SegmentReader and loading new live docs from a new\n  // deletes file.  Used by openIfChanged.\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82ffd58510acfc0e2e788a90a10002e689ec9145","date":1379018753,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentReader#SegmentReader(SegmentInfoPerCommit,SegmentCoreReaders,IOContext).mjava","sourceNew":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, IOContext.READONCE),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","sourceOld":"  /** Create new SegmentReader sharing core from a previous\n   *  SegmentReader and loading new live docs from a new\n   *  deletes file.  Used by openIfChanged. */\n  SegmentReader(SegmentInfoPerCommit si, SegmentCoreReaders core, IOContext context) throws IOException {\n    this(si, core,\n         si.info.getCodec().liveDocsFormat().readLiveDocs(si.info.dir, si, context),\n         si.info.getDocCount() - si.getDelCount());\n  }\n\n","bugFix":null,"bugIntro":["f412711b73fe38b28bb793928ad02da8c829cff5"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","203d7d3cb7712e10ef33009a63247ae40c302d7a"],"82ffd58510acfc0e2e788a90a10002e689ec9145":["a3b4a63b6b0155323dde6b827e0dc22a43580753"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","a3b4a63b6b0155323dde6b827e0dc22a43580753"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["82ffd58510acfc0e2e788a90a10002e689ec9145"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a3b4a63b6b0155323dde6b827e0dc22a43580753","05a14b2611ead08655a2b2bdc61632eb31316e57"],"82ffd58510acfc0e2e788a90a10002e689ec9145":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["82ffd58510acfc0e2e788a90a10002e689ec9145","05a14b2611ead08655a2b2bdc61632eb31316e57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}