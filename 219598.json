{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence,char).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the given components to the end of the path. The components are given\n   * in a single string, separated by a given delimiter character. If the\n   * given string is empty, it is assumed to refer to the root (empty)\n   * category, and nothing is added to the path (rather than adding a single\n   * empty component).\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence pathString, char delimiter) {\n    int len = pathString.length();\n    if (len == 0) {\n      return; // assume root category meant, so add nothing.\n    }\n    short pos = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      char c = pathString.charAt(i);\n      if (c == delimiter) {\n        if (ncomponents >= ends.length) {\n          short[] newends = new short[(ends.length + 1) * 2];\n          System.arraycopy(ends, 0, newends, 0, ends.length);\n          ends = newends;\n        }\n        ends[ncomponents++] = pos;\n      } else {\n        if (pos >= chars.length) {\n          char[] newchars = new char[(chars.length + 1) * 2];\n          System.arraycopy(chars, 0, newchars, 0, chars.length);\n          chars = newchars;\n        }\n        chars[pos++] = c;\n      }\n    }\n\n    // Don't forget to count the last component!\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    ends[ncomponents++] = pos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the given components to the end of the path. The components are given\n   * in a single string, separated by a given delimiter character. If the\n   * given string is empty, it is assumed to refer to the root (empty)\n   * category, and nothing is added to the path (rather than adding a single\n   * empty component).\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence pathString, char delimiter) {\n    int len = pathString.length();\n    if (len == 0) {\n      return; // assume root category meant, so add nothing.\n    }\n    short pos = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      char c = pathString.charAt(i);\n      if (c == delimiter) {\n        if (ncomponents >= ends.length) {\n          short[] newends = new short[(ends.length + 1) * 2];\n          System.arraycopy(ends, 0, newends, 0, ends.length);\n          ends = newends;\n        }\n        ends[ncomponents++] = pos;\n      } else {\n        if (pos >= chars.length) {\n          char[] newchars = new char[(chars.length + 1) * 2];\n          System.arraycopy(chars, 0, newchars, 0, chars.length);\n          chars = newchars;\n        }\n        chars[pos++] = c;\n      }\n    }\n\n    // Don't forget to count the last component!\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    ends[ncomponents++] = pos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence,char).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add the given components to the end of the path. The components are given\n   * in a single string, separated by a given delimiter character. If the\n   * given string is empty, it is assumed to refer to the root (empty)\n   * category, and nothing is added to the path (rather than adding a single\n   * empty component).\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence pathString, char delimiter) {\n    int len = pathString.length();\n    if (len == 0) {\n      return; // assume root category meant, so add nothing.\n    }\n    short pos = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      char c = pathString.charAt(i);\n      if (c == delimiter) {\n        if (ncomponents >= ends.length) {\n          short[] newends = new short[(ends.length + 1) * 2];\n          System.arraycopy(ends, 0, newends, 0, ends.length);\n          ends = newends;\n        }\n        ends[ncomponents++] = pos;\n      } else {\n        if (pos >= chars.length) {\n          char[] newchars = new char[(chars.length + 1) * 2];\n          System.arraycopy(chars, 0, newchars, 0, chars.length);\n          chars = newchars;\n        }\n        chars[pos++] = c;\n      }\n    }\n\n    // Don't forget to count the last component!\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    ends[ncomponents++] = pos;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence,char).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/CategoryPath#add(CharSequence,char).mjava","sourceNew":"  /**\n   * Add the given components to the end of the path. The components are given\n   * in a single string, separated by a given delimiter character. If the\n   * given string is empty, it is assumed to refer to the root (empty)\n   * category, and nothing is added to the path (rather than adding a single\n   * empty component).\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence pathString, char delimiter) {\n    int len = pathString.length();\n    if (len == 0) {\n      return; // assume root category meant, so add nothing.\n    }\n    short pos = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      char c = pathString.charAt(i);\n      if (c == delimiter) {\n        if (ncomponents >= ends.length) {\n          short[] newends = new short[(ends.length + 1) * 2];\n          System.arraycopy(ends, 0, newends, 0, ends.length);\n          ends = newends;\n        }\n        ends[ncomponents++] = pos;\n      } else {\n        if (pos >= chars.length) {\n          char[] newchars = new char[(chars.length + 1) * 2];\n          System.arraycopy(chars, 0, newchars, 0, chars.length);\n          chars = newchars;\n        }\n        chars[pos++] = c;\n      }\n    }\n\n    // Don't forget to count the last component!\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    ends[ncomponents++] = pos;\n  }\n\n","sourceOld":"  /**\n   * Add the given components to the end of the path. The components are given\n   * in a single string, separated by a given delimiter character. If the\n   * given string is empty, it is assumed to refer to the root (empty)\n   * category, and nothing is added to the path (rather than adding a single\n   * empty component).\n   * <P>\n   * Note that when a String object is passed to this method, a reference to\n   * it is not saved (rather, its content is copied), which will lead to that\n   * String object being gc'ed. To reduce the number of garbage objects, you\n   * can pass a mutable CharBuffer instead of an immutable String to this\n   * method.\n   */\n  public void add(CharSequence pathString, char delimiter) {\n    int len = pathString.length();\n    if (len == 0) {\n      return; // assume root category meant, so add nothing.\n    }\n    short pos = (ncomponents == 0) ? 0 : ends[ncomponents - 1];\n    for (int i = 0; i < len; i++) {\n      char c = pathString.charAt(i);\n      if (c == delimiter) {\n        if (ncomponents >= ends.length) {\n          short[] newends = new short[(ends.length + 1) * 2];\n          System.arraycopy(ends, 0, newends, 0, ends.length);\n          ends = newends;\n        }\n        ends[ncomponents++] = pos;\n      } else {\n        if (pos >= chars.length) {\n          char[] newchars = new char[(chars.length + 1) * 2];\n          System.arraycopy(chars, 0, newchars, 0, chars.length);\n          chars = newchars;\n        }\n        chars[pos++] = c;\n      }\n    }\n\n    // Don't forget to count the last component!\n    if (ncomponents >= ends.length) {\n      short[] newends = new short[(ends.length + 1) * 2];\n      System.arraycopy(ends, 0, newends, 0, ends.length);\n      ends = newends;\n    }\n    ends[ncomponents++] = pos;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}