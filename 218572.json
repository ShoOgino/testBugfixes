{"path":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","commits":[{"id":"ae6d782d7975eb2a0e325e798a7325372a0bf336","date":1360689518,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","sourceNew":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","sourceNew":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","sourceNew":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","sourceOld":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84becf9f21f25fe1b9b54cf2a176015749af0283","date":1383417412,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42DocValuesProducer#Facet42DocValuesProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  Facet42DocValuesProducer(SegmentReadState state) throws IOException {\n    String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name, state.segmentSuffix, Facet42DocValuesFormat.EXTENSION);\n    IndexInput in = state.directory.openInput(fileName, state.context);\n    this.maxDoc = state.segmentInfo.getDocCount();\n    boolean success = false;\n    try {\n      CodecUtil.checkHeader(in, Facet42DocValuesFormat.CODEC, \n                            Facet42DocValuesFormat.VERSION_START,\n                            Facet42DocValuesFormat.VERSION_START);\n      int fieldNumber = in.readVInt();\n      while (fieldNumber != -1) {\n        fields.put(fieldNumber, new Facet42BinaryDocValues(in));\n        fieldNumber = in.readVInt();\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(in);\n      } else {\n        IOUtils.closeWhileHandlingException(in);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84becf9f21f25fe1b9b54cf2a176015749af0283":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["ae6d782d7975eb2a0e325e798a7325372a0bf336"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae6d782d7975eb2a0e325e798a7325372a0bf336"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["ae6d782d7975eb2a0e325e798a7325372a0bf336","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["ae6d782d7975eb2a0e325e798a7325372a0bf336","9faa42f41b6adb98daf009cf99a4ee239189e469"],"ae6d782d7975eb2a0e325e798a7325372a0bf336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["84becf9f21f25fe1b9b54cf2a176015749af0283"]},"commit2Childs":{"84becf9f21f25fe1b9b54cf2a176015749af0283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9faa42f41b6adb98daf009cf99a4ee239189e469":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","ae6d782d7975eb2a0e325e798a7325372a0bf336"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["84becf9f21f25fe1b9b54cf2a176015749af0283","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"ae6d782d7975eb2a0e325e798a7325372a0bf336":["9faa42f41b6adb98daf009cf99a4ee239189e469","6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}