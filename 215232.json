{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FilterFunctionTest#multiValueDateTest().mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FilterFunctionTest#multiValueDateTest().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void multiValueDateTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    Date date3 = Date.from(Instant.parse(\"2023-11-01T20:30:15Z\"));\n    \n    TestDateValueStream val = new TestDateValueStream();\n    TestBooleanValue filter = new TestBooleanValue();\n\n    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});\n    assertTrue(uncasted instanceof DateValueStream);\n    DateValueStream func = (DateValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1850-12-02T20:30:15Z\");\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    filter.setValue(true).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // One value\n    val.setValues(\"1810-12-02T10:30:15Z\");\n    \n    filter.setValue(true).setExists(true);\n    Iterator<Long> values1 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next().longValue(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    filter.setValue(true).setExists(true);\n    Iterator<Long> values2 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next().longValue(), value);\n    });\n    assertFalse(values2.hasNext());\n    \n    // Multiple values\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1931-03-16T18:15:45Z\", \"2023-11-01T20:30:15Z\");\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values3 = Arrays.asList(date1.getTime(), date2.getTime(), date3.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next().longValue(), value);\n    });\n    assertFalse(values3.hasNext());\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FilterFunctionTest#multiValueDateTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FilterFunctionTest#multiValueDateTest().mjava","sourceNew":"  @Test\n  public void multiValueDateTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    Date date3 = Date.from(Instant.parse(\"2023-11-01T20:30:15Z\"));\n\n    TestDateValueStream val = new TestDateValueStream();\n    TestBooleanValue filter = new TestBooleanValue();\n\n    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});\n    assertTrue(uncasted instanceof DateValueStream);\n    DateValueStream func = (DateValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1850-12-02T20:30:15Z\");\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    filter.setValue(true).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // One value\n    val.setValues(\"1810-12-02T10:30:15Z\");\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values1 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next().longValue(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values2 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next().longValue(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    // Multiple values\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1931-03-16T18:15:45Z\", \"2023-11-01T20:30:15Z\");\n\n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values3 = Arrays.asList(date1.getTime(), date2.getTime(), date3.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next().longValue(), value);\n    });\n    assertFalse(values3.hasNext());\n\n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void multiValueDateTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    Date date3 = Date.from(Instant.parse(\"2023-11-01T20:30:15Z\"));\n    \n    TestDateValueStream val = new TestDateValueStream();\n    TestBooleanValue filter = new TestBooleanValue();\n\n    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});\n    assertTrue(uncasted instanceof DateValueStream);\n    DateValueStream func = (DateValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1850-12-02T20:30:15Z\");\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    filter.setValue(true).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // One value\n    val.setValues(\"1810-12-02T10:30:15Z\");\n    \n    filter.setValue(true).setExists(true);\n    Iterator<Long> values1 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next().longValue(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    filter.setValue(true).setExists(true);\n    Iterator<Long> values2 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next().longValue(), value);\n    });\n    assertFalse(values2.hasNext());\n    \n    // Multiple values\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1931-03-16T18:15:45Z\", \"2023-11-01T20:30:15Z\");\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values3 = Arrays.asList(date1.getTime(), date2.getTime(), date3.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next().longValue(), value);\n    });\n    assertFalse(values3.hasNext());\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FilterFunctionTest#multiValueDateTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/function/mapping/FilterFunctionTest#multiValueDateTest().mjava","sourceNew":"  @Test\n  public void multiValueDateTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    Date date3 = Date.from(Instant.parse(\"2023-11-01T20:30:15Z\"));\n\n    TestDateValueStream val = new TestDateValueStream();\n    TestBooleanValue filter = new TestBooleanValue();\n\n    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});\n    assertTrue(uncasted instanceof DateValueStream);\n    DateValueStream func = (DateValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1850-12-02T20:30:15Z\");\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    filter.setValue(true).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    // One value\n    val.setValues(\"1810-12-02T10:30:15Z\");\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values1 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next().longValue(), value);\n    });\n    assertFalse(values1.hasNext());\n\n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values2 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next().longValue(), value);\n    });\n    assertFalse(values2.hasNext());\n\n    // Multiple values\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1931-03-16T18:15:45Z\", \"2023-11-01T20:30:15Z\");\n\n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values3 = Arrays.asList(date1.getTime(), date2.getTime(), date3.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next().longValue(), value);\n    });\n    assertFalse(values3.hasNext());\n\n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void multiValueDateTest() throws DateTimeParseException {\n    Date date1 = Date.from(Instant.parse(\"1810-12-02T10:30:15Z\"));\n    Date date2 = Date.from(Instant.parse(\"1931-03-16T18:15:45Z\"));\n    Date date3 = Date.from(Instant.parse(\"2023-11-01T20:30:15Z\"));\n    \n    TestDateValueStream val = new TestDateValueStream();\n    TestBooleanValue filter = new TestBooleanValue();\n\n    AnalyticsValueStream uncasted = FilterFunction.creatorFunction.apply(new AnalyticsValueStream[] {val, filter});\n    assertTrue(uncasted instanceof DateValueStream);\n    DateValueStream func = (DateValueStream) uncasted;\n\n    // No values\n    val.setValues();\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1850-12-02T20:30:15Z\");\n    filter.setExists(false);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    val.setValues();\n    filter.setValue(true).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    // One value\n    val.setValues(\"1810-12-02T10:30:15Z\");\n    \n    filter.setValue(true).setExists(true);\n    Iterator<Long> values1 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values1.hasNext());\n      assertEquals(values1.next().longValue(), value);\n    });\n    assertFalse(values1.hasNext());\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n    \n    filter.setValue(true).setExists(true);\n    Iterator<Long> values2 = Arrays.asList(date1.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values2.hasNext());\n      assertEquals(values2.next().longValue(), value);\n    });\n    assertFalse(values2.hasNext());\n    \n    // Multiple values\n    val.setValues(\"1810-12-02T10:30:15Z\", \"1931-03-16T18:15:45Z\", \"2023-11-01T20:30:15Z\");\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n\n    filter.setValue(true).setExists(true);\n    Iterator<Long> values3 = Arrays.asList(date1.getTime(), date2.getTime(), date3.getTime()).iterator();\n    func.streamLongs( value -> {\n      assertTrue(values3.hasNext());\n      assertEquals(values3.next().longValue(), value);\n    });\n    assertFalse(values3.hasNext());\n    \n    filter.setValue(false).setExists(true);\n    func.streamLongs( value -> {\n      assertTrue(\"There should be no values to stream\", false);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}