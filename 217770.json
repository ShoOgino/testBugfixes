{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#getNormValues(NormsEntry).mjava","commits":[{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#getNormValues(NormsEntry).mjava","pathOld":"/dev/null","sourceNew":"  private LongValues getNormValues(NormsEntry entry) throws IOException {\n    if (entry.bytesPerNorm == 0) {\n      return new LongValues() {\n        @Override\n        long get(int index) {\n          return entry.normsOffset;\n        }\n      };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        slice = data.randomAccessSlice(entry.normsOffset, entry.numDocsWithField * (long) entry.bytesPerNorm);\n      }\n      switch (entry.bytesPerNorm) {\n        case 1:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readByte(index);\n            }\n          };\n        case 2:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readShort(((long) index) << 1);\n            }\n          };\n        case 4:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readInt(((long) index) << 2);\n            }\n          };\n        case 8:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readLong(((long) index) << 3);\n            }\n          };\n        default:\n          // should not happen, we already validate bytesPerNorm in readFields\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e","date":1476167489,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#getNormValues(NormsEntry).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#getNormValues(NormsEntry).mjava","sourceNew":"  private LongValues getNormValues(NormsEntry entry) throws IOException {\n    if (entry.bytesPerNorm == 0) {\n      return new LongValues() {\n        @Override\n        long get(int index) {\n          return entry.normsOffset;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.normsOffset, entry.numDocsWithField * (long) entry.bytesPerNorm);\n      switch (entry.bytesPerNorm) {\n        case 1:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readByte(index);\n            }\n          };\n        case 2:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readShort(((long) index) << 1);\n            }\n          };\n        case 4:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readInt(((long) index) << 2);\n            }\n          };\n        case 8:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readLong(((long) index) << 3);\n            }\n          };\n        default:\n          // should not happen, we already validate bytesPerNorm in readFields\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":"  private LongValues getNormValues(NormsEntry entry) throws IOException {\n    if (entry.bytesPerNorm == 0) {\n      return new LongValues() {\n        @Override\n        long get(int index) {\n          return entry.normsOffset;\n        }\n      };\n    } else {\n      RandomAccessInput slice;\n      synchronized (data) {\n        slice = data.randomAccessSlice(entry.normsOffset, entry.numDocsWithField * (long) entry.bytesPerNorm);\n      }\n      switch (entry.bytesPerNorm) {\n        case 1:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readByte(index);\n            }\n          };\n        case 2:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readShort(((long) index) << 1);\n            }\n          };\n        case 4:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readInt(((long) index) << 2);\n            }\n          };\n        case 8:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readLong(((long) index) << 3);\n            }\n          };\n        default:\n          // should not happen, we already validate bytesPerNorm in readFields\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#getNormValues(NormsEntry).mjava","pathOld":"/dev/null","sourceNew":"  private LongValues getNormValues(NormsEntry entry) throws IOException {\n    if (entry.bytesPerNorm == 0) {\n      return new LongValues() {\n        @Override\n        long get(int index) {\n          return entry.normsOffset;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.normsOffset, entry.numDocsWithField * (long) entry.bytesPerNorm);\n      switch (entry.bytesPerNorm) {\n        case 1:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readByte(index);\n            }\n          };\n        case 2:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readShort(((long) index) << 1);\n            }\n          };\n        case 4:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readInt(((long) index) << 2);\n            }\n          };\n        case 8:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readLong(((long) index) << 3);\n            }\n          };\n        default:\n          // should not happen, we already validate bytesPerNorm in readFields\n          throw new AssertionError();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2e0630a8cce59f323518336cb9f7de8b6cf6f6c","date":1477471141,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#getNormValues(NormsEntry).mjava","sourceNew":null,"sourceOld":"  private LongValues getNormValues(NormsEntry entry) throws IOException {\n    if (entry.bytesPerNorm == 0) {\n      return new LongValues() {\n        @Override\n        long get(int index) {\n          return entry.normsOffset;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.normsOffset, entry.numDocsWithField * (long) entry.bytesPerNorm);\n      switch (entry.bytesPerNorm) {\n        case 1:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readByte(index);\n            }\n          };\n        case 2:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readShort(((long) index) << 1);\n            }\n          };\n        case 4:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readInt(((long) index) << 2);\n            }\n          };\n        case 8:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readLong(((long) index) << 3);\n            }\n          };\n        default:\n          // should not happen, we already validate bytesPerNorm in readFields\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70NormsProducer#getNormValues(NormsEntry).mjava","sourceNew":null,"sourceOld":"  private LongValues getNormValues(NormsEntry entry) throws IOException {\n    if (entry.bytesPerNorm == 0) {\n      return new LongValues() {\n        @Override\n        long get(int index) {\n          return entry.normsOffset;\n        }\n      };\n    } else {\n      final RandomAccessInput slice = data.randomAccessSlice(entry.normsOffset, entry.numDocsWithField * (long) entry.bytesPerNorm);\n      switch (entry.bytesPerNorm) {\n        case 1:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readByte(index);\n            }\n          };\n        case 2:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readShort(((long) index) << 1);\n            }\n          };\n        case 4:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readInt(((long) index) << 2);\n            }\n          };\n        case 8:\n          return new LongValues() {\n            @Override\n            long get(int index) throws IOException {\n              return slice.readLong(((long) index) << 3);\n            }\n          };\n        default:\n          // should not happen, we already validate bytesPerNorm in readFields\n          throw new AssertionError();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a2e0630a8cce59f323518336cb9f7de8b6cf6f6c":["7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e"],"7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a2e0630a8cce59f323518336cb9f7de8b6cf6f6c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a2e0630a8cce59f323518336cb9f7de8b6cf6f6c"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e"],"a2e0630a8cce59f323518336cb9f7de8b6cf6f6c":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ca1fe3f1f5edea2339f7e7a31f0754878a72b0e":["a2e0630a8cce59f323518336cb9f7de8b6cf6f6c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}