{"path":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","commits":[{"id":"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46","date":1508899684,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","pathOld":"/dev/null","sourceNew":"    private Explanation explainTF(int doc, Explanation freq) throws IOException {\n      List<Explanation> subs = new ArrayList<>();\n      subs.add(freq);\n      subs.add(Explanation.match(k1, \"k1, term saturation parameter\"));\n      if (norms == null) {\n        subs.add(Explanation.match(0, \"b, field omits length norms\"));\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) k1)),\n            \"tf, computed as freq / (freq + k1) from:\", subs);\n      } else {\n        byte norm;\n        if (norms.advanceExact(doc)) {\n          norm = (byte) norms.longValue();\n        } else {\n          norm = 0;\n        }\n        float doclen = lengthCache[norm & 0xff];\n        subs.add(Explanation.match(b, \"b, length normalization parameter\"));\n        if ((norm & 0xFF) > 39) {\n          subs.add(Explanation.match(doclen, \"dl, length of field (approximate)\"));\n        } else {\n          subs.add(Explanation.match(doclen, \"dl, length of field\"));\n        }\n        subs.add(Explanation.match(stats.avgdl, \"avgdl, average length of field\"));\n        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) normValue)),\n            \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", subs);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0f82a9bd302914a72572934ddb0a4ee15edfe4c6","date":1509493555,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","sourceNew":"    private Explanation explainTF(int doc, Explanation freq) throws IOException {\n      List<Explanation> subs = new ArrayList<>();\n      subs.add(freq);\n      subs.add(Explanation.match(k1, \"k1, term saturation parameter\"));\n      if (norms == null) {\n        subs.add(Explanation.match(0, \"b, field omits length norms\"));\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) k1)),\n            \"tf, computed as freq / (freq + k1) from:\", subs);\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        byte norm = (byte) norms.longValue();\n        float doclen = lengthCache[norm & 0xff];\n        subs.add(Explanation.match(b, \"b, length normalization parameter\"));\n        if ((norm & 0xFF) > 39) {\n          subs.add(Explanation.match(doclen, \"dl, length of field (approximate)\"));\n        } else {\n          subs.add(Explanation.match(doclen, \"dl, length of field\"));\n        }\n        subs.add(Explanation.match(stats.avgdl, \"avgdl, average length of field\"));\n        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) normValue)),\n            \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", subs);\n      }\n    }\n\n","sourceOld":"    private Explanation explainTF(int doc, Explanation freq) throws IOException {\n      List<Explanation> subs = new ArrayList<>();\n      subs.add(freq);\n      subs.add(Explanation.match(k1, \"k1, term saturation parameter\"));\n      if (norms == null) {\n        subs.add(Explanation.match(0, \"b, field omits length norms\"));\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) k1)),\n            \"tf, computed as freq / (freq + k1) from:\", subs);\n      } else {\n        byte norm;\n        if (norms.advanceExact(doc)) {\n          norm = (byte) norms.longValue();\n        } else {\n          norm = 0;\n        }\n        float doclen = lengthCache[norm & 0xff];\n        subs.add(Explanation.match(b, \"b, length normalization parameter\"));\n        if ((norm & 0xFF) > 39) {\n          subs.add(Explanation.match(doclen, \"dl, length of field (approximate)\"));\n        } else {\n          subs.add(Explanation.match(doclen, \"dl, length of field\"));\n        }\n        subs.add(Explanation.match(stats.avgdl, \"avgdl, average length of field\"));\n        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) normValue)),\n            \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", subs);\n      }\n    }\n\n","bugFix":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","date":1514891219,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","sourceNew":"    private Explanation explainTF(int doc, Explanation freq) throws IOException {\n      List<Explanation> subs = new ArrayList<>();\n      subs.add(freq);\n      subs.add(Explanation.match(k1, \"k1, term saturation parameter\"));\n      if (norms == null) {\n        subs.add(Explanation.match(0, \"b, field omits length norms\"));\n        return Explanation.match(\n            (float) (freq.getValue().floatValue() / (freq.getValue().floatValue() + (double) k1)),\n            \"tf, computed as freq / (freq + k1) from:\", subs);\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        byte norm = (byte) norms.longValue();\n        float doclen = lengthCache[norm & 0xff];\n        subs.add(Explanation.match(b, \"b, length normalization parameter\"));\n        if ((norm & 0xFF) > 39) {\n          subs.add(Explanation.match(doclen, \"dl, length of field (approximate)\"));\n        } else {\n          subs.add(Explanation.match(doclen, \"dl, length of field\"));\n        }\n        subs.add(Explanation.match(stats.avgdl, \"avgdl, average length of field\"));\n        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);\n        return Explanation.match(\n            (float) (freq.getValue().floatValue() / (freq.getValue().floatValue() + (double) normValue)),\n            \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", subs);\n      }\n    }\n\n","sourceOld":"    private Explanation explainTF(int doc, Explanation freq) throws IOException {\n      List<Explanation> subs = new ArrayList<>();\n      subs.add(freq);\n      subs.add(Explanation.match(k1, \"k1, term saturation parameter\"));\n      if (norms == null) {\n        subs.add(Explanation.match(0, \"b, field omits length norms\"));\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) k1)),\n            \"tf, computed as freq / (freq + k1) from:\", subs);\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        byte norm = (byte) norms.longValue();\n        float doclen = lengthCache[norm & 0xff];\n        subs.add(Explanation.match(b, \"b, length normalization parameter\"));\n        if ((norm & 0xFF) > 39) {\n          subs.add(Explanation.match(doclen, \"dl, length of field (approximate)\"));\n        } else {\n          subs.add(Explanation.match(doclen, \"dl, length of field\"));\n        }\n        subs.add(Explanation.match(stats.avgdl, \"avgdl, average length of field\"));\n        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);\n        return Explanation.match(\n            (float) (freq.getValue() / (freq.getValue() + (double) normValue)),\n            \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", subs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68d6cb7f0f019661a784bd0e5a21e85b5f812af6","date":1515075216,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","sourceNew":null,"sourceOld":"    private Explanation explainTF(int doc, Explanation freq) throws IOException {\n      List<Explanation> subs = new ArrayList<>();\n      subs.add(freq);\n      subs.add(Explanation.match(k1, \"k1, term saturation parameter\"));\n      if (norms == null) {\n        subs.add(Explanation.match(0, \"b, field omits length norms\"));\n        return Explanation.match(\n            (float) (freq.getValue().floatValue() / (freq.getValue().floatValue() + (double) k1)),\n            \"tf, computed as freq / (freq + k1) from:\", subs);\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        byte norm = (byte) norms.longValue();\n        float doclen = lengthCache[norm & 0xff];\n        subs.add(Explanation.match(b, \"b, length normalization parameter\"));\n        if ((norm & 0xFF) > 39) {\n          subs.add(Explanation.match(doclen, \"dl, length of field (approximate)\"));\n        } else {\n          subs.add(Explanation.match(doclen, \"dl, length of field\"));\n        }\n        subs.add(Explanation.match(stats.avgdl, \"avgdl, average length of field\"));\n        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);\n        return Explanation.match(\n            (float) (freq.getValue().floatValue() / (freq.getValue().floatValue() + (double) normValue)),\n            \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", subs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/similarities/BM25Similarity.BM25DocScorer#explainTF(int,Explanation).mjava","sourceNew":null,"sourceOld":"    private Explanation explainTF(int doc, Explanation freq) throws IOException {\n      List<Explanation> subs = new ArrayList<>();\n      subs.add(freq);\n      subs.add(Explanation.match(k1, \"k1, term saturation parameter\"));\n      if (norms == null) {\n        subs.add(Explanation.match(0, \"b, field omits length norms\"));\n        return Explanation.match(\n            (float) (freq.getValue().floatValue() / (freq.getValue().floatValue() + (double) k1)),\n            \"tf, computed as freq / (freq + k1) from:\", subs);\n      } else {\n        boolean found = norms.advanceExact(doc);\n        assert found;\n        byte norm = (byte) norms.longValue();\n        float doclen = lengthCache[norm & 0xff];\n        subs.add(Explanation.match(b, \"b, length normalization parameter\"));\n        if ((norm & 0xFF) > 39) {\n          subs.add(Explanation.match(doclen, \"dl, length of field (approximate)\"));\n        } else {\n          subs.add(Explanation.match(doclen, \"dl, length of field\"));\n        }\n        subs.add(Explanation.match(stats.avgdl, \"avgdl, average length of field\"));\n        float normValue = k1 * ((1 - b) + b * doclen / stats.avgdl);\n        return Explanation.match(\n            (float) (freq.getValue().floatValue() / (freq.getValue().floatValue() + (double) normValue)),\n            \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\", subs);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"68d6cb7f0f019661a784bd0e5a21e85b5f812af6":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46":["0f82a9bd302914a72572934ddb0a4ee15edfe4c6"],"b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf":["b94236357aaa22b76c10629851fe4e376e0cea82","68d6cb7f0f019661a784bd0e5a21e85b5f812af6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad1dc49b5314cfdb82a7ea40d2f92f07fe8cee46"],"0f82a9bd302914a72572934ddb0a4ee15edfe4c6":["b8e3fe8a32614e52f7d9fd491b9faab852fbb4bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}