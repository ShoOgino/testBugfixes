{"path":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkController#createCollectionZkNode(CloudDescriptor).mjava","sourceNew":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","sourceOld":"  public void createCollectionZkNode(CloudDescriptor cd) throws KeeperException, InterruptedException, IOException {\n    String collection = cd.getCollectionName();\n    \n    log.info(\"Check for collection zkNode:\" + collection);\n    String collectionPath = ZkStateReader.COLLECTIONS_ZKNODE + \"/\" + collection;\n    \n    try {\n      if(!zkClient.exists(collectionPath)) {\n        log.info(\"Creating collection in ZooKeeper:\" + collection);\n       SolrParams params = cd.getParams();\n\n        try {\n          ZkNodeProps collectionProps = new ZkNodeProps();\n          // TODO: if collection.configName isn't set, and there isn't already a conf in zk, just use that?\n          String defaultConfigName = System.getProperty(COLLECTION_PARAM_PREFIX+CONFIGNAME_PROP, \"configuration1\");\n\n          // params passed in - currently only done via core admin (create core commmand).\n          if (params != null) {\n            Iterator<String> iter = params.getParameterNamesIterator();\n            while (iter.hasNext()) {\n              String paramName = iter.next();\n              if (paramName.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(paramName.substring(COLLECTION_PARAM_PREFIX.length()), params.get(paramName));\n              }\n            }\n\n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n            \n          } else if(System.getProperty(\"bootstrap_confdir\") != null) {\n            // if we are bootstrapping a collection, default the config for\n            // a new collection to the collection we are bootstrapping\n            log.info(\"Setting config for collection:\" + collection + \" to \" + defaultConfigName);\n\n            Properties sysProps = System.getProperties();\n            for (String sprop : System.getProperties().stringPropertyNames()) {\n              if (sprop.startsWith(COLLECTION_PARAM_PREFIX)) {\n                collectionProps.put(sprop.substring(COLLECTION_PARAM_PREFIX.length()), sysProps.getProperty(sprop));                \n              }\n            }\n            \n            // if the config name wasn't passed in, use the default\n            if (!collectionProps.containsKey(CONFIGNAME_PROP))\n              collectionProps.put(CONFIGNAME_PROP,  defaultConfigName);\n\n          } else {\n            // check for configName\n            log.info(\"Looking for collection configName\");\n            int retry = 1;\n            for (; retry < 6; retry++) {\n              if (zkClient.exists(collectionPath)) {\n                collectionProps = new ZkNodeProps();\n                collectionProps.load(zkClient.getData(collectionPath, null, null));\n                if (collectionProps.containsKey(CONFIGNAME_PROP)) {\n                  break;\n                }\n              }\n              log.info(\"Could not find collection configName - pausing for 2 seconds and trying again - try: \" + retry);\n              Thread.sleep(2000);\n            }\n            if (retry == 6) {\n              log.error(\"Could not find configName for collection \" + collection);\n              throw new ZooKeeperException(\n                  SolrException.ErrorCode.SERVER_ERROR,\n                  \"Could not find configName for collection \" + collection);\n            }\n          }\n          \n          zkClient.makePath(collectionPath, collectionProps.store(), CreateMode.PERSISTENT, null, true);\n         \n          // ping that there is a new collection\n          zkClient.setData(ZkStateReader.COLLECTIONS_ZKNODE, (byte[])null);\n        } catch (KeeperException e) {\n          // its okay if the node already exists\n          if (e.code() != KeeperException.Code.NODEEXISTS) {\n            throw e;\n          }\n        }\n      } else {\n        log.info(\"Collection zkNode exists\");\n      }\n      \n    } catch (KeeperException e) {\n      // its okay if another beats us creating the node\n      if (e.code() != KeeperException.Code.NODEEXISTS) {\n        throw e;\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"c26f00b574427b55127e869b935845554afde1fa":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}