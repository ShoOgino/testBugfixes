{"path":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03a125ccdf6470367771bd730ac25aabb14ba0e3","date":1402295908,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try {\n      request = handler.resolveAnalysisRequest(req);\n      fail(\"Analysis request must fail if all of q, analysis.query or analysis.value are absent\");\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  {\n        fail(\"Unexpected exception\");\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception\");\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7043e7411cdd4dbbc872bf9fedd21231168cd5b8","date":1426087141,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try {\n      request = handler.resolveAnalysisRequest(req);\n      fail(\"Analysis request must fail if all of q, analysis.query or analysis.value are absent\");\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  {\n        fail(\"Unexpected exception\");\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception\");\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ae131ec9cda430231fcefc081a4c4f5d29238ee","date":1426094638,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try {\n      request = handler.resolveAnalysisRequest(req);\n      fail(\"Analysis request must fail if all of q, analysis.query or analysis.value are absent\");\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  {\n        fail(\"Unexpected exception\");\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception\");\n    }\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try (SolrQueryRequest solrQueryRequest = new LocalSolrQueryRequest(h.getCore(), params)) {\n      SolrException ex = expectThrows(SolrException.class, () -> handler.resolveAnalysisRequest(solrQueryRequest));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try {\n      request = handler.resolveAnalysisRequest(req);\n      fail(\"Analysis request must fail if all of q, analysis.query or analysis.value are absent\");\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  {\n        fail(\"Unexpected exception\");\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception\");\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try (SolrQueryRequest solrQueryRequest = new LocalSolrQueryRequest(h.getCore(), params)) {\n      SolrException ex = expectThrows(SolrException.class, () -> handler.resolveAnalysisRequest(solrQueryRequest));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try {\n      request = handler.resolveAnalysisRequest(req);\n      fail(\"Analysis request must fail if all of q, analysis.query or analysis.value are absent\");\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  {\n        fail(\"Unexpected exception\");\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception\");\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan Høydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/FieldAnalysisRequestHandlerTest#testResolveAnalysisRequest().mjava","sourceNew":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try (SolrQueryRequest solrQueryRequest = new LocalSolrQueryRequest(h.getCore(), params)) {\n      SolrException ex = expectThrows(SolrException.class, () -> handler.resolveAnalysisRequest(solrQueryRequest));\n      assertEquals(SolrException.ErrorCode.BAD_REQUEST.code, ex.code());\n    }\n\n    req.close();\n  }\n\n","sourceOld":"  /**\n   * Tests the {@link FieldAnalysisRequestHandler#resolveAnalysisRequest(org.apache.solr.request.SolrQueryRequest)}\n   */\n  @Test\n  public void testResolveAnalysisRequest() throws Exception {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(AnalysisParams.FIELD_NAME, \"text,nametext\");\n    params.add(AnalysisParams.FIELD_TYPE, \"whitetok,keywordtok\");\n    params.add(AnalysisParams.FIELD_VALUE, \"the quick red fox jumped over the lazy brown dogs\");\n    params.add(CommonParams.Q, \"fox brown\");\n\n    SolrQueryRequest req = new LocalSolrQueryRequest(h.getCore(), params);\n    FieldAnalysisRequest request = handler.resolveAnalysisRequest(req);\n    List<String> fieldNames = request.getFieldNames();\n    assertEquals(\"Expecting 2 field names\", 2, fieldNames.size());\n    assertEquals(\"text\", fieldNames.get(0));\n    assertEquals(\"nametext\", fieldNames.get(1));\n    List<String> fieldTypes = request.getFieldTypes();\n    assertEquals(\"Expecting 2 field types\", 2, fieldTypes.size());\n    assertEquals(\"whitetok\", fieldTypes.get(0));\n    assertEquals(\"keywordtok\", fieldTypes.get(1));\n    assertEquals(\"the quick red fox jumped over the lazy brown dogs\", request.getFieldValue());\n    assertEquals(\"fox brown\", request.getQuery());\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    // testing overide of query value using analysis.query param\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // testing analysis.showmatch param\n    params.add(AnalysisParams.SHOW_MATCH, \"false\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertFalse(request.isShowMatch());\n    req.close();\n\n    params.set(AnalysisParams.SHOW_MATCH, \"true\");\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertTrue(request.isShowMatch());\n    req.close();\n\n    // testing absence of query value\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    req=new LocalSolrQueryRequest(h.getCore(), params);\n    request = handler.resolveAnalysisRequest(req);\n    assertNull(request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of q\n    params.remove(AnalysisParams.FIELD_VALUE);\n    params.add(CommonParams.Q, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // test absence of index-time value and presence of query\n    params.remove(CommonParams.Q);\n    params.add(AnalysisParams.QUERY, \"quick lazy\");\n    request = handler.resolveAnalysisRequest(req);\n    assertEquals(\"quick lazy\", request.getQuery());\n    req.close();\n\n    // must fail if all of q, analysis.query or analysis.value are absent\n    params.remove(CommonParams.Q);\n    params.remove(AnalysisParams.QUERY);\n    params.remove(AnalysisParams.FIELD_VALUE);\n    try {\n      request = handler.resolveAnalysisRequest(req);\n      fail(\"Analysis request must fail if all of q, analysis.query or analysis.value are absent\");\n    } catch (SolrException e) {\n      if (e.code() != SolrException.ErrorCode.BAD_REQUEST.code)  {\n        fail(\"Unexpected exception\");\n      }\n    } catch (Exception e) {\n      fail(\"Unexpected exception\");\n    }\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03a125ccdf6470367771bd730ac25aabb14ba0e3":["c26f00b574427b55127e869b935845554afde1fa"],"9ae131ec9cda430231fcefc081a4c4f5d29238ee":["7043e7411cdd4dbbc872bf9fedd21231168cd5b8"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7043e7411cdd4dbbc872bf9fedd21231168cd5b8":["03a125ccdf6470367771bd730ac25aabb14ba0e3"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["9ae131ec9cda430231fcefc081a4c4f5d29238ee"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["9ae131ec9cda430231fcefc081a4c4f5d29238ee","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["9ae131ec9cda430231fcefc081a4c4f5d29238ee","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"03a125ccdf6470367771bd730ac25aabb14ba0e3":["7043e7411cdd4dbbc872bf9fedd21231168cd5b8"],"9ae131ec9cda430231fcefc081a4c4f5d29238ee":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["03a125ccdf6470367771bd730ac25aabb14ba0e3"],"7043e7411cdd4dbbc872bf9fedd21231168cd5b8":["9ae131ec9cda430231fcefc081a4c4f5d29238ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}