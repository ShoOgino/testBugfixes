{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"f366ce28775e2b8ea4e06355009471328711666d","date":1360551293,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    fst.save(data);\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c54a8d0edc6c5b7196804fa09a42a607b4aad35","date":1360633612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    fst.save(data);\n    meta.writeVLong(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"/dev/null","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","date":1370266419,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton(true);\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":6,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/MemoryDocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":5,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene42/Lucene42DocValuesConsumer#writeFST(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","sourceOld":"  private void writeFST(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    meta.writeVInt(field.number);\n    meta.writeByte(FST);\n    meta.writeLong(data.getFilePointer());\n    PositiveIntOutputs outputs = PositiveIntOutputs.getSingleton();\n    Builder<Long> builder = new Builder<Long>(INPUT_TYPE.BYTE1, outputs);\n    IntsRef scratch = new IntsRef();\n    long ord = 0;\n    for (BytesRef v : values) {\n      builder.add(Util.toIntsRef(v, scratch), ord);\n      ord++;\n    }\n    FST<Long> fst = builder.finish();\n    if (fst != null) {\n      fst.save(data);\n    }\n    meta.writeVLong(ord);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f366ce28775e2b8ea4e06355009471328711666d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4c54a8d0edc6c5b7196804fa09a42a607b4aad35"],"4c54a8d0edc6c5b7196804fa09a42a607b4aad35":["f366ce28775e2b8ea4e06355009471328711666d"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["ddbb72a33557d2b5bc22ee95daf3281c43560502"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f366ce28775e2b8ea4e06355009471328711666d","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f366ce28775e2b8ea4e06355009471328711666d":["4c54a8d0edc6c5b7196804fa09a42a607b4aad35"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["6b1e6a1c51433ebaa34dc0b76d7ab1876072be39"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"4c54a8d0edc6c5b7196804fa09a42a607b4aad35":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"6b1e6a1c51433ebaa34dc0b76d7ab1876072be39":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}