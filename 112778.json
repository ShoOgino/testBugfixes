{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#perfTestBoth(int,int,int,int,Map[String,Map[String,SummaryStatistics]],Map[String,Map[String,SummaryStatistics]]).mjava","commits":[{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#perfTestBoth(int,int,int,int,Map[String,Map[String,SummaryStatistics]],Map[String,Map[String,SummaryStatistics]]).mjava","pathOld":"/dev/null","sourceNew":"  void perfTestBoth(int maxThreads, int numGets, int cacheSize, int maxKey,\n                    Map<String, Map<String, SummaryStatistics>> timeStats,\n                    Map<String, Map<String, SummaryStatistics>> hitStats) {\n    for (int nThreads = 1 ; nThreads <= maxThreads; nThreads++) {\n      String testKey = \"threads=\" + nThreads + \",gets=\" + numGets + \",size=\" + cacheSize + \",maxKey=\" + maxKey;\n      System.err.println(testKey);\n      for (int i = 0; i < NUM_RUNS; i++) {\n        double[] data = cachePerfTest(new LRUCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"LRUCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"LRUCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n        data = cachePerfTest(new CaffeineCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"CaffeineCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"CaffeineCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n        data = cachePerfTest(new FastLRUCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"FastLRUCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"FastLRUCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":0,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#perfTestBoth(int,int,int,int,Map[String,Map[String,SummaryStatistics]],Map[String,Map[String,SummaryStatistics]]).mjava","pathOld":"/dev/null","sourceNew":"  void perfTestBoth(int maxThreads, int numGets, int cacheSize, int maxKey,\n                    Map<String, Map<String, SummaryStatistics>> timeStats,\n                    Map<String, Map<String, SummaryStatistics>> hitStats) {\n    for (int nThreads = 1 ; nThreads <= maxThreads; nThreads++) {\n      String testKey = \"threads=\" + nThreads + \",gets=\" + numGets + \",size=\" + cacheSize + \",maxKey=\" + maxKey;\n      System.err.println(testKey);\n      for (int i = 0; i < NUM_RUNS; i++) {\n        double[] data = cachePerfTest(new LRUCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"LRUCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"LRUCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n        data = cachePerfTest(new CaffeineCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"CaffeineCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"CaffeineCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n        data = cachePerfTest(new FastLRUCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"FastLRUCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"FastLRUCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#perfTestBoth(int,int,int,int,Map[String,Map[String,SummaryStatistics]],Map[String,Map[String,SummaryStatistics]]).mjava","sourceNew":null,"sourceOld":"  void perfTestBoth(int maxThreads, int numGets, int cacheSize, int maxKey,\n                    Map<String, Map<String, SummaryStatistics>> timeStats,\n                    Map<String, Map<String, SummaryStatistics>> hitStats) {\n    for (int nThreads = 1 ; nThreads <= maxThreads; nThreads++) {\n      String testKey = \"threads=\" + nThreads + \",gets=\" + numGets + \",size=\" + cacheSize + \",maxKey=\" + maxKey;\n      System.err.println(testKey);\n      for (int i = 0; i < NUM_RUNS; i++) {\n        double[] data = cachePerfTest(new LRUCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"LRUCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"LRUCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n        data = cachePerfTest(new CaffeineCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"CaffeineCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"CaffeineCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n        data = cachePerfTest(new FastLRUCache(), nThreads, numGets, cacheSize, maxKey);\n        timeStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"FastLRUCache\", k -> new SummaryStatistics())\n            .addValue(data[0]);\n        hitStats.computeIfAbsent(testKey, k -> new TreeMap<>())\n            .computeIfAbsent(\"FastLRUCache\", k -> new SummaryStatistics())\n            .addValue(data[1]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d7d3943904804560937e6239effeebda0f920e4":["87f0484c38f986062889ed50f3bf3bd462848c26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"87f0484c38f986062889ed50f3bf3bd462848c26":["4d7d3943904804560937e6239effeebda0f920e4","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}