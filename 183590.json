{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#reasonableInstance(Random).mjava","commits":[{"id":"960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f","date":1460988711,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#reasonableInstance(Random).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a random {@link CompressingCodec} with more reasonable parameters for big tests.\n   */\n  public static CompressingCodec reasonableInstance(Random random) {\n    // e.g. defaults use 2^14 for FAST and ~ 2^16 for HIGH\n    final int chunkSize = TestUtil.nextInt(random, 1<<13, 1<<17);\n    // e.g. defaults use 128 for FAST and 512 for HIGH\n    final int chunkDocs = TestUtil.nextInt(random, 1<<6, 1<<10);\n    // e.g. defaults use 1024 for both cases\n    final int blockSize = TestUtil.nextInt(random, 1<<9, 1<<11);\n    return randomInstance(random, chunkSize, chunkDocs, false, blockSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76b27bc4e241a6dd8c185cdb62b458a0562564f0","date":1460988862,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#reasonableInstance(Random).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a random {@link CompressingCodec} with more reasonable parameters for big tests.\n   */\n  public static CompressingCodec reasonableInstance(Random random) {\n    // e.g. defaults use 2^14 for FAST and ~ 2^16 for HIGH\n    final int chunkSize = TestUtil.nextInt(random, 1<<13, 1<<17);\n    // e.g. defaults use 128 for FAST and 512 for HIGH\n    final int chunkDocs = TestUtil.nextInt(random, 1<<6, 1<<10);\n    // e.g. defaults use 1024 for both cases\n    final int blockSize = TestUtil.nextInt(random, 1<<9, 1<<11);\n    return randomInstance(random, chunkSize, chunkDocs, false, blockSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"713122036535651642e6d4fe57ce12b449e18473","date":1461000510,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#reasonableInstance(Random).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a random {@link CompressingCodec} with more reasonable parameters for big tests.\n   */\n  public static CompressingCodec reasonableInstance(Random random) {\n    // e.g. defaults use 2^14 for FAST and ~ 2^16 for HIGH\n    final int chunkSize = TestUtil.nextInt(random, 1<<13, 1<<17);\n    // e.g. defaults use 128 for FAST and 512 for HIGH\n    final int chunkDocs = TestUtil.nextInt(random, 1<<6, 1<<10);\n    // e.g. defaults use 1024 for both cases\n    final int blockSize = TestUtil.nextInt(random, 1<<9, 1<<11);\n    return randomInstance(random, chunkSize, chunkDocs, false, blockSize);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a4487b07c49a1861c05720e04624826ecbe9fa","date":1580924108,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#reasonableInstance(Random).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/compressing/CompressingCodec#reasonableInstance(Random).mjava","sourceNew":"  /**\n   * Creates a random {@link CompressingCodec} with more reasonable parameters for big tests.\n   */\n  public static CompressingCodec reasonableInstance(Random random) {\n    // e.g. defaults use 2^14 for FAST and ~ 2^16 for HIGH\n    final int chunkSize = TestUtil.nextInt(random, 1<<13, 1<<17);\n    // e.g. defaults use 128 for FAST and 512 for HIGH\n    final int chunkDocs = TestUtil.nextInt(random, 1<<6, 1<<10);\n    // e.g. defaults use 1024 for both cases\n    final int blockShift = TestUtil.nextInt(random, 8, 12);\n    return randomInstance(random, chunkSize, chunkDocs, false, blockShift);\n  }\n\n","sourceOld":"  /**\n   * Creates a random {@link CompressingCodec} with more reasonable parameters for big tests.\n   */\n  public static CompressingCodec reasonableInstance(Random random) {\n    // e.g. defaults use 2^14 for FAST and ~ 2^16 for HIGH\n    final int chunkSize = TestUtil.nextInt(random, 1<<13, 1<<17);\n    // e.g. defaults use 128 for FAST and 512 for HIGH\n    final int chunkDocs = TestUtil.nextInt(random, 1<<6, 1<<10);\n    // e.g. defaults use 1024 for both cases\n    final int blockSize = TestUtil.nextInt(random, 1<<9, 1<<11);\n    return randomInstance(random, chunkSize, chunkDocs, false, blockSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["713122036535651642e6d4fe57ce12b449e18473"],"713122036535651642e6d4fe57ce12b449e18473":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f"],"960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a4487b07c49a1861c05720e04624826ecbe9fa"]},"commit2Childs":{"70a4487b07c49a1861c05720e04624826ecbe9fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"713122036535651642e6d4fe57ce12b449e18473":["70a4487b07c49a1861c05720e04624826ecbe9fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["713122036535651642e6d4fe57ce12b449e18473","76b27bc4e241a6dd8c185cdb62b458a0562564f0","960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f"],"76b27bc4e241a6dd8c185cdb62b458a0562564f0":["713122036535651642e6d4fe57ce12b449e18473"],"960efc08b4e7fdfeeef3fbbc37b24a1189fbfb2f":["76b27bc4e241a6dd8c185cdb62b458a0562564f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}