{"path":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newField(\"category\", categories[i], StringField.TYPE_STORED));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.shutdown();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.shutdown();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2713584a660051cd646423be682771e3bbd99985","date":1425046322,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":null,"sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":4,"author":"Ryan Ernst","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPrefixFilter#testPrefixFilter().mjava","sourceNew":null,"sourceOld":"  public void testPrefixFilter() throws Exception {\n    Directory directory = newDirectory();\n\n    String[] categories = new String[] {\"/Computers/Linux\",\n                                        \"/Computers/Mac/One\",\n                                        \"/Computers/Mac/Two\",\n                                        \"/Computers/Windows\"};\n    RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n    for (int i = 0; i < categories.length; i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"category\", categories[i], Field.Store.YES));\n      writer.addDocument(doc);\n    }\n    IndexReader reader = writer.getReader();\n\n    // PrefixFilter combined with ConstantScoreQuery\n    PrefixFilter filter = new PrefixFilter(new Term(\"category\", \"/Computers\"));\n    Query query = new ConstantScoreQuery(filter);\n    IndexSearcher searcher = newSearcher(reader);\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test middle of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Mac\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(2, hits.length);\n\n    // test start of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Linux\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test end of values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/Windows\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    // test non-existant\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ObsoleteOS\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, before values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/AAA\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test non-existant, after values\n    filter = new PrefixFilter(new Term(\"category\", \"/Computers/ZZZ\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n\n    // test zero length prefix\n    filter = new PrefixFilter(new Term(\"category\", \"\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(4, hits.length);\n\n    // test non existent field\n    filter = new PrefixFilter(new Term(\"nonexistantfield\", \"/Computers\"));\n    query = new ConstantScoreQuery(filter);\n    hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(0, hits.length);\n    \n    writer.close();\n    reader.close();\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","2713584a660051cd646423be682771e3bbd99985"],"2713584a660051cd646423be682771e3bbd99985":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2713584a660051cd646423be682771e3bbd99985"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"2713584a660051cd646423be682771e3bbd99985":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","2713584a660051cd646423be682771e3bbd99985"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}