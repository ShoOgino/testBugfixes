{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","commits":[{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,MutableFieldInfos,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfos.addOrUpdate(name, true, false, false, storePayloads, omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fieldInfo = fieldInfos.fieldInfo(name);\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final MutableFieldInfos fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfos.addOrUpdate(name, true, false, false, storePayloads, omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fieldInfo = fieldInfos.fieldInfo(name);\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfos.addOrUpdate(name, true, false, false, storePayloads, omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fieldInfo = fieldInfos.fieldInfo(name);\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      fieldInfos.addOrUpdate(name, true);\n      fieldInfo = fieldInfos.fieldInfo(name);\n      // TODO: change this test to use all three\n      fieldInfo.indexOptions = omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n      fieldInfo.storePayloads = storePayloads;\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05ec6a37fc3562d1df9f3807af5028d2ff4d718b","date":1359605766,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean indexed() { return true; }\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return null; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfos.addOrUpdate(name, true, false, false, storePayloads, omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fieldInfo = fieldInfos.fieldInfo(name);\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean indexed() { return true; }\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return null; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfos.addOrUpdate(name, true, false, false, storePayloads, omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS, null, null);\n      fieldInfo = fieldInfos.fieldInfo(name);\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return null; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean indexed() { return true; }\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return null; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return null; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean indexed() { return true; }\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return null; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return DocValuesType.NO; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS_ONLY : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return null; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return DocValuesType.NONE; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return DocValuesType.NO; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecs.FieldData#FieldData(String,FieldInfos.Builder,TermData[],boolean,boolean).mjava","sourceNew":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.getOrAdd(name);\n      if (omitTF) {\n        fieldInfo.setIndexOptions(IndexOptions.DOCS);\n      } else {\n        fieldInfo.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS);\n      }\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","sourceOld":"    public FieldData(final String name, final FieldInfos.Builder fieldInfos, final TermData[] terms, final boolean omitTF, final boolean storePayloads) {\n      this.omitTF = omitTF;\n      this.storePayloads = storePayloads;\n      // TODO: change this test to use all three\n      fieldInfo = fieldInfos.addOrUpdate(name, new IndexableFieldType() {\n\n        @Override\n        public boolean stored() { return false; }\n\n        @Override\n        public boolean tokenized() { return false; }\n\n        @Override\n        public boolean storeTermVectors() { return false; }\n\n        @Override\n        public boolean storeTermVectorOffsets() { return false; }\n\n        @Override\n        public boolean storeTermVectorPositions() { return false; }\n\n        @Override\n        public boolean storeTermVectorPayloads() { return false; }\n\n        @Override\n        public boolean omitNorms() { return false; }\n\n        @Override\n        public IndexOptions indexOptions() { return omitTF ? IndexOptions.DOCS : IndexOptions.DOCS_AND_FREQS_AND_POSITIONS; }\n\n        @Override\n        public DocValuesType docValueType() { return DocValuesType.NONE; }\n      });\n      if (storePayloads) {\n        fieldInfo.setStorePayloads();\n      }\n      this.terms = terms;\n      for(int i=0;i<terms.length;i++)\n        terms[i].field = this;\n\n      Arrays.sort(terms);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a851824c09818632c94eba41e60ef5e72e323c8e"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["d4d69c535930b5cce125cff868d40f6373dc27d4","3184874f7f3aca850248483485b4995343066875"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","05ec6a37fc3562d1df9f3807af5028d2ff4d718b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05ec6a37fc3562d1df9f3807af5028d2ff4d718b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"a851824c09818632c94eba41e60ef5e72e323c8e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"]},"commit2Childs":{"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["d4d69c535930b5cce125cff868d40f6373dc27d4","05ec6a37fc3562d1df9f3807af5028d2ff4d718b"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"d4d69c535930b5cce125cff868d40f6373dc27d4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","a851824c09818632c94eba41e60ef5e72e323c8e"],"05ec6a37fc3562d1df9f3807af5028d2ff4d718b":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a851824c09818632c94eba41e60ef5e72e323c8e":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","2bb2842e561df4e8e9ad89010605fc86ac265465"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}