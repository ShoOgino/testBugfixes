{"path":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.copyBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.length());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.length());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n  }\n\n","sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.copyBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.length());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.length());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93124590c6e2a8b45898cbae46f96c3a05d9bce0","date":1399415098,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/analysis/TestToken#testGrow().mjava","sourceNew":null,"sourceOld":"  public void testGrow() {\n    Token t = new Token();\n    StringBuilder buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      char[] content = buf.toString().toCharArray();\n      t.copyBuffer(content, 0, content.length);\n      assertEquals(buf.length(), t.length());\n      assertEquals(buf.toString(), t.toString());\n      buf.append(buf.toString());\n    }\n    assertEquals(1048576, t.length());\n\n    // now as a string, second variant\n    t = new Token();\n    buf = new StringBuilder(\"ab\");\n    for (int i = 0; i < 20; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(content);\n    }\n    assertEquals(1048576, t.length());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n\n    // Test for slow growth to a long term\n    t = new Token();\n    buf = new StringBuilder(\"a\");\n    for (int i = 0; i < 20000; i++)\n    {\n      t.setEmpty().append(buf);\n      String content = buf.toString();\n      assertEquals(content.length(), t.length());\n      assertEquals(content, t.toString());\n      buf.append(\"a\");\n    }\n    assertEquals(20000, t.length());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"]},"commit2Childs":{"93124590c6e2a8b45898cbae46f96c3a05d9bce0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["93124590c6e2a8b45898cbae46f96c3a05d9bce0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}