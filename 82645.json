{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery))\n      return false;\n    BooleanQuery other = (BooleanQuery)o;\n    return (this.getBoost() == other.getBoost())\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery))\n      return false;\n    BooleanQuery other = (BooleanQuery)o;\n    return (this.getBoost() == other.getBoost())\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","date":1390928346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery)) {\n      return false;\n    }\n    BooleanQuery other = (BooleanQuery)o;\n    return this.getBoost() == other.getBoost()\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery))\n      return false;\n    BooleanQuery other = (BooleanQuery)o;\n    return (this.getBoost() == other.getBoost())\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","bugFix":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fdd0e99daabe8cd52cd4d7755679337bede8abe0","date":1425571318,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery)) {\n      return false;\n    }\n    BooleanQuery other = (BooleanQuery)o;\n    return super.equals(o)\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery)) {\n      return false;\n    }\n    BooleanQuery other = (BooleanQuery)o;\n    return this.getBoost() == other.getBoost()\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery)) {\n      return false;\n    }\n    BooleanQuery other = (BooleanQuery)o;\n    return super.equals(o)\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery)) {\n      return false;\n    }\n    BooleanQuery other = (BooleanQuery)o;\n    return this.getBoost() == other.getBoost()\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  @Override\n  public boolean equals(Object o) {\n    if (super.equals(o) == false) {\n      return false;\n    }\n    BooleanQuery that = (BooleanQuery)o;\n    return this.getMinimumNumberShouldMatch() == that.getMinimumNumberShouldMatch()\n        && this.disableCoord == that.disableCoord\n        && clauses.equals(that.clauses);\n  }\n\n","sourceOld":"  /** Returns true iff <code>o</code> is equal to this. */\n  @Override\n  public boolean equals(Object o) {\n    if (!(o instanceof BooleanQuery)) {\n      return false;\n    }\n    BooleanQuery other = (BooleanQuery)o;\n    return super.equals(o)\n        && this.clauses.equals(other.clauses)\n        && this.getMinimumNumberShouldMatch() == other.getMinimumNumberShouldMatch()\n        && this.disableCoord == other.disableCoord;\n  }\n\n","bugFix":null,"bugIntro":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","date":1444679002,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /**\n   * Compares the specified object with this boolean query for equality.\n   * Returns true if and only if the provided object<ul>\n   * <li>is also a {@link BooleanQuery},</li>\n   * <li>has the same value of {@link #isCoordDisabled()}</li>\n   * <li>has the same value of {@link #getMinimumNumberShouldMatch()}</li>\n   * <li>has the same {@link Occur#SHOULD} clauses, regardless of the order</li>\n   * <li>has the same {@link Occur#MUST} clauses, regardless of the order</li>\n   * <li>has the same set of {@link Occur#FILTER} clauses, regardless of the\n   * order and regardless of duplicates</li>\n   * <li>has the same set of {@link Occur#MUST_NOT} clauses, regardless of\n   * the order and regardless of duplicates</li></ul>\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (super.equals(o) == false) {\n      return false;\n    }\n    BooleanQuery that = (BooleanQuery)o;\n    return this.getMinimumNumberShouldMatch() == that.getMinimumNumberShouldMatch()\n        && this.disableCoord == that.disableCoord\n        && clauseSets.equals(that.clauseSets);\n  }\n\n","sourceOld":"  @Override\n  public boolean equals(Object o) {\n    if (super.equals(o) == false) {\n      return false;\n    }\n    BooleanQuery that = (BooleanQuery)o;\n    return this.getMinimumNumberShouldMatch() == that.getMinimumNumberShouldMatch()\n        && this.disableCoord == that.disableCoord\n        && clauses.equals(that.clauses);\n  }\n\n","bugFix":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7bc21595222ae4f75509300fbb7726691f387f","date":1464078795,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /**\n   * Compares the specified object with this boolean query for equality.\n   * Returns true if and only if the provided object<ul>\n   * <li>is also a {@link BooleanQuery},</li>\n   * <li>has the same value of {@link #isCoordDisabled()}</li>\n   * <li>has the same value of {@link #getMinimumNumberShouldMatch()}</li>\n   * <li>has the same {@link Occur#SHOULD} clauses, regardless of the order</li>\n   * <li>has the same {@link Occur#MUST} clauses, regardless of the order</li>\n   * <li>has the same set of {@link Occur#FILTER} clauses, regardless of the\n   * order and regardless of duplicates</li>\n   * <li>has the same set of {@link Occur#MUST_NOT} clauses, regardless of\n   * the order and regardless of duplicates</li></ul>\n   */\n  @Override\n  public boolean equals(Object o) {\n    return sameClassAs(o) &&\n           equalsTo(getClass().cast(o));\n  }\n\n","sourceOld":"  /**\n   * Compares the specified object with this boolean query for equality.\n   * Returns true if and only if the provided object<ul>\n   * <li>is also a {@link BooleanQuery},</li>\n   * <li>has the same value of {@link #isCoordDisabled()}</li>\n   * <li>has the same value of {@link #getMinimumNumberShouldMatch()}</li>\n   * <li>has the same {@link Occur#SHOULD} clauses, regardless of the order</li>\n   * <li>has the same {@link Occur#MUST} clauses, regardless of the order</li>\n   * <li>has the same set of {@link Occur#FILTER} clauses, regardless of the\n   * order and regardless of duplicates</li>\n   * <li>has the same set of {@link Occur#MUST_NOT} clauses, regardless of\n   * the order and regardless of duplicates</li></ul>\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (super.equals(o) == false) {\n      return false;\n    }\n    BooleanQuery that = (BooleanQuery)o;\n    return this.getMinimumNumberShouldMatch() == that.getMinimumNumberShouldMatch()\n        && this.disableCoord == that.disableCoord\n        && clauseSets.equals(that.clauseSets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /**\n   * Compares the specified object with this boolean query for equality.\n   * Returns true if and only if the provided object<ul>\n   * <li>is also a {@link BooleanQuery},</li>\n   * <li>has the same value of {@link #getMinimumNumberShouldMatch()}</li>\n   * <li>has the same {@link Occur#SHOULD} clauses, regardless of the order</li>\n   * <li>has the same {@link Occur#MUST} clauses, regardless of the order</li>\n   * <li>has the same set of {@link Occur#FILTER} clauses, regardless of the\n   * order and regardless of duplicates</li>\n   * <li>has the same set of {@link Occur#MUST_NOT} clauses, regardless of\n   * the order and regardless of duplicates</li></ul>\n   */\n  @Override\n  public boolean equals(Object o) {\n    return sameClassAs(o) &&\n           equalsTo(getClass().cast(o));\n  }\n\n","sourceOld":"  /**\n   * Compares the specified object with this boolean query for equality.\n   * Returns true if and only if the provided object<ul>\n   * <li>is also a {@link BooleanQuery},</li>\n   * <li>has the same value of {@link #isCoordDisabled()}</li>\n   * <li>has the same value of {@link #getMinimumNumberShouldMatch()}</li>\n   * <li>has the same {@link Occur#SHOULD} clauses, regardless of the order</li>\n   * <li>has the same {@link Occur#MUST} clauses, regardless of the order</li>\n   * <li>has the same set of {@link Occur#FILTER} clauses, regardless of the\n   * order and regardless of duplicates</li>\n   * <li>has the same set of {@link Occur#MUST_NOT} clauses, regardless of\n   * the order and regardless of duplicates</li></ul>\n   */\n  @Override\n  public boolean equals(Object o) {\n    return sameClassAs(o) &&\n           equalsTo(getClass().cast(o));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#equals(Object).mjava","sourceNew":"  /**\n   * Compares the specified object with this boolean query for equality.\n   * Returns true if and only if the provided object<ul>\n   * <li>is also a {@link BooleanQuery},</li>\n   * <li>has the same value of {@link #getMinimumNumberShouldMatch()}</li>\n   * <li>has the same {@link Occur#SHOULD} clauses, regardless of the order</li>\n   * <li>has the same {@link Occur#MUST} clauses, regardless of the order</li>\n   * <li>has the same set of {@link Occur#FILTER} clauses, regardless of the\n   * order and regardless of duplicates</li>\n   * <li>has the same set of {@link Occur#MUST_NOT} clauses, regardless of\n   * the order and regardless of duplicates</li></ul>\n   */\n  @Override\n  public boolean equals(Object o) {\n    return sameClassAs(o) &&\n           equalsTo(getClass().cast(o));\n  }\n\n","sourceOld":"  /**\n   * Compares the specified object with this boolean query for equality.\n   * Returns true if and only if the provided object<ul>\n   * <li>is also a {@link BooleanQuery},</li>\n   * <li>has the same value of {@link #isCoordDisabled()}</li>\n   * <li>has the same value of {@link #getMinimumNumberShouldMatch()}</li>\n   * <li>has the same {@link Occur#SHOULD} clauses, regardless of the order</li>\n   * <li>has the same {@link Occur#MUST} clauses, regardless of the order</li>\n   * <li>has the same set of {@link Occur#FILTER} clauses, regardless of the\n   * order and regardless of duplicates</li>\n   * <li>has the same set of {@link Occur#MUST_NOT} clauses, regardless of\n   * the order and regardless of duplicates</li></ul>\n   */\n  @Override\n  public boolean equals(Object o) {\n    if (super.equals(o) == false) {\n      return false;\n    }\n    BooleanQuery that = (BooleanQuery)o;\n    return this.getMinimumNumberShouldMatch() == that.getMinimumNumberShouldMatch()\n        && this.disableCoord == that.disableCoord\n        && clauseSets.equals(that.clauseSets);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea","fdd0e99daabe8cd52cd4d7755679337bede8abe0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e7bc21595222ae4f75509300fbb7726691f387f":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c8a0e442f7b61f811680273b25da95994a724466":["0e7bc21595222ae4f75509300fbb7726691f387f"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969"],"fdd0e99daabe8cd52cd4d7755679337bede8abe0":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"ad158e4c28c7c33b7d3fd5c187a183d014d1f6ea":["fdd0e99daabe8cd52cd4d7755679337bede8abe0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"0e7bc21595222ae4f75509300fbb7726691f387f":["c8a0e442f7b61f811680273b25da95994a724466"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d04f3d96e2fd0e82dee63ff3ac603e8cb9e9969":["0e7bc21595222ae4f75509300fbb7726691f387f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}