{"path":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","commits":[{"id":"c15914b0d98e563f81d03ee023dc82f58171369d","date":1464292003,"type":0,"author":"jdyer1","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da8a02bef7458089240404614139b53c9f875ec7","date":1464597207,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ff704ef91e9ae30ca59babb23ece85720701b60","date":1498684964,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","sourceNew":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","sourceNew":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","sourceNew":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","pathOld":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testWithCursorMark().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","sourceOld":"  @Test\n  public void testWithCursorMark() throws Exception\n  {\n    SolrCore core = h.getCore();\n    SearchComponent speller = core.getSearchComponent(\"spellcheck\");\n    assertTrue(\"speller is null and it shouldn't be\", speller != null);\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();   \n    params.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");   \n    params.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"2\");\n    params.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n    params.add(CommonParams.Q, \"lowerfilt:(+fauth)\");\n    params.add(CommonParams.SORT, \"id asc\");\n    params.add(CursorMarkParams.CURSOR_MARK_PARAM, CursorMarkParams.CURSOR_MARK_START);\n    SolrRequestHandler handler = core.getRequestHandler(\"/spellCheckCompRH\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    rsp.addResponseHeader(new SimpleOrderedMap());\n    SolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n    handler.handleRequest(req, rsp);\n    req.close();\n    NamedList values = rsp.getValues();\n    NamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n    NamedList collationList = (NamedList) spellCheck.get(\"collations\");\n    List<?> collations = (List<?>) collationList.getAll(\"collation\");\n    assertTrue(collations.size() == 1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8a02bef7458089240404614139b53c9f875ec7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c15914b0d98e563f81d03ee023dc82f58171369d"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["c15914b0d98e563f81d03ee023dc82f58171369d","28288370235ed02234a64753cdbf0c6ec096304a"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c15914b0d98e563f81d03ee023dc82f58171369d"],"c15914b0d98e563f81d03ee023dc82f58171369d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["c15914b0d98e563f81d03ee023dc82f58171369d","5ff704ef91e9ae30ca59babb23ece85720701b60"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c15914b0d98e563f81d03ee023dc82f58171369d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"5ff704ef91e9ae30ca59babb23ece85720701b60":["c15914b0d98e563f81d03ee023dc82f58171369d"]},"commit2Childs":{"da8a02bef7458089240404614139b53c9f875ec7":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8a02bef7458089240404614139b53c9f875ec7","5b8ee93140fd0efef7e101786e3ed5160a700b5f","c15914b0d98e563f81d03ee023dc82f58171369d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"30c8e5574b55d57947e989443dfde611646530ee":[],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":[],"c15914b0d98e563f81d03ee023dc82f58171369d":["da8a02bef7458089240404614139b53c9f875ec7","30c8e5574b55d57947e989443dfde611646530ee","5b8ee93140fd0efef7e101786e3ed5160a700b5f","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5ff704ef91e9ae30ca59babb23ece85720701b60"],"28288370235ed02234a64753cdbf0c6ec096304a":["aa2585c33d5d66a1c837c312221eb55ddb3c4300","30c8e5574b55d57947e989443dfde611646530ee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"5ff704ef91e9ae30ca59babb23ece85720701b60":["28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["da8a02bef7458089240404614139b53c9f875ec7","30c8e5574b55d57947e989443dfde611646530ee","5b8ee93140fd0efef7e101786e3ed5160a700b5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}