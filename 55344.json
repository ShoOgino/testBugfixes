{"path":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory(new HashMap<String,String>()) );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory(new HashMap<String,String>()) );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<String,String>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<String,String>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory() );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory() );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"824d674c7c80eeddb2c2e429f92d3b15688d8393","date":1379775111,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception\n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory(new HashMap<String,String>()) );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory(new HashMap<String,String>()) );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<String,String>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<String,String>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n    loader.close();\n  }\n\n","sourceOld":"  public void testAwareCompatibility() \n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory(new HashMap<String,String>()) );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory(new HashMap<String,String>()) );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<String,String>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<String,String>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34413af2ffe8be7ac2af245bbcc9fd212ae20d38","date":1425389089,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception\n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n    loader.close();\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception\n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory(new HashMap<String,String>()) );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory(new HashMap<String,String>()) );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<String,String>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<String,String>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception\n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n    loader.close();\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception\n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new NGramFilterFactory(new HashMap<String,String>()) );\n    loader.assertAwareCompatibility( clazz, new KeywordTokenizerFactory(new HashMap<String,String>()) );\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    loader.assertAwareCompatibility( clazz, new LukeRequestHandler() );\n    loader.assertAwareCompatibility( clazz, new FacetComponent() );\n    loader.assertAwareCompatibility( clazz, new JSONResponseWriter() );\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<String,String>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<String,String>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        loader.assertAwareCompatibility( clazz, obj );\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception\n  {\n    SolrResourceLoader loader = new SolrResourceLoader( \".\" );\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n    loader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\", 12.3f,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09757edf4cd72839c2280f766968560573a4700d","date":1528216234,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\", 12.3f,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new NGramFilterFactory(new HashMap<>()));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(new HashMap<>()),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\",  new Float( 12.3f ),\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",  new Float( 12.3f ),\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68cb00b5f16300efa7bd172de723d9ac91d38cc2","date":1543702774,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  public void testAwareCompatibility() throws Exception {\n    \n    final Class<?> clazz1 = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz1, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz1, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz1, obj));\n    }\n    \n\n    final Class<?> clazz2 = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz2, new LukeRequestHandler());\n    assertAwareCompatibility(clazz2, new FacetComponent());\n    assertAwareCompatibility(clazz2, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz2, obj));\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    Class<?> clazz = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n    \n\n    clazz = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz, new LukeRequestHandler());\n    assertAwareCompatibility(clazz, new FacetComponent());\n    assertAwareCompatibility(clazz, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      try {\n        assertAwareCompatibility(clazz, obj);\n        Assert.fail( \"Should be invalid class: \"+obj + \" FOR \" + clazz );\n      }\n      catch( SolrException ex ) { } // OK\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testAwareCompatibility() throws Exception {\n    \n    final Class<?> clazz1 = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz1, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz1, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz1, obj));\n    }\n    \n\n    final Class<?> clazz2 = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz2, new LukeRequestHandler());\n    assertAwareCompatibility(clazz2, new FacetComponent());\n    assertAwareCompatibility(clazz2, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz2, obj));\n    }\n  }\n\n","sourceOld":"  public void testAwareCompatibility() throws Exception {\n    \n    final Class<?> clazz1 = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz1, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz1, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz1, obj));\n    }\n    \n\n    final Class<?> clazz2 = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz2, new LukeRequestHandler());\n    assertAwareCompatibility(clazz2, new FacetComponent());\n    assertAwareCompatibility(clazz2, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz2, obj));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eba8995e4d085569e201ecf8bf75d1cb02fa74bf","date":1592955411,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/ResourceLoaderTest#testAwareCompatibility().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testAwareCompatibility() throws Exception {\n    \n    final Class<?> clazz1 = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz1, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz1, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz1, obj));\n    }\n    \n\n    final Class<?> clazz2 = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz2, new LukeRequestHandler());\n    assertAwareCompatibility(clazz2, new FacetComponent());\n    assertAwareCompatibility(clazz2, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz2, obj));\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  public void testAwareCompatibility() throws Exception {\n    \n    final Class<?> clazz1 = ResourceLoaderAware.class;\n    // Check ResourceLoaderAware valid objects\n    //noinspection unchecked\n    assertAwareCompatibility(clazz1, new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")));\n    assertAwareCompatibility(clazz1, new KeywordTokenizerFactory(new HashMap<>()));\n    \n    // Make sure it throws an error for invalid objects\n    Object[] invalid = new Object[] {\n        // new NGramTokenFilter( null ),\n        \"hello\", 12.3f,\n        new LukeRequestHandler(),\n        new JSONResponseWriter()\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz1, obj));\n    }\n    \n\n    final Class<?> clazz2 = SolrCoreAware.class;\n    // Check ResourceLoaderAware valid objects\n    assertAwareCompatibility(clazz2, new LukeRequestHandler());\n    assertAwareCompatibility(clazz2, new FacetComponent());\n    assertAwareCompatibility(clazz2, new JSONResponseWriter());\n    \n    // Make sure it throws an error for invalid objects\n    //noinspection unchecked\n    invalid = new Object[] {\n        new NGramFilterFactory(map(\"minGramSize\", \"1\", \"maxGramSize\", \"2\")),\n        \"hello\",   12.3f ,\n        new KeywordTokenizerFactory(new HashMap<>())\n    };\n    for( Object obj : invalid ) {\n      expectThrows(SolrException.class, () -> assertAwareCompatibility(clazz2, obj));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"eba8995e4d085569e201ecf8bf75d1cb02fa74bf":["e98520789adb1d5ad05afb4956eca0944a929688"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["c26f00b574427b55127e869b935845554afde1fa"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"09757edf4cd72839c2280f766968560573a4700d":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["09757edf4cd72839c2280f766968560573a4700d","f592209545c71895260367152601e9200399776d"],"e98520789adb1d5ad05afb4956eca0944a929688":["68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["824d674c7c80eeddb2c2e429f92d3b15688d8393","34413af2ffe8be7ac2af245bbcc9fd212ae20d38"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["b70042a8a492f7054d480ccdd2be9796510d4327","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["34413af2ffe8be7ac2af245bbcc9fd212ae20d38"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["a626ec4d1c92e59fe390724d6220081047b03ce7","09757edf4cd72839c2280f766968560573a4700d"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"34413af2ffe8be7ac2af245bbcc9fd212ae20d38":["824d674c7c80eeddb2c2e429f92d3b15688d8393"],"f592209545c71895260367152601e9200399776d":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","09757edf4cd72839c2280f766968560573a4700d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eba8995e4d085569e201ecf8bf75d1cb02fa74bf"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["f592209545c71895260367152601e9200399776d"],"c26f00b574427b55127e869b935845554afde1fa":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"eba8995e4d085569e201ecf8bf75d1cb02fa74bf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["824d674c7c80eeddb2c2e429f92d3b15688d8393"],"824d674c7c80eeddb2c2e429f92d3b15688d8393":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","34413af2ffe8be7ac2af245bbcc9fd212ae20d38"],"09757edf4cd72839c2280f766968560573a4700d":["628903f37b6c442da0d390db1c6af9a0e74d41a7","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","68cb00b5f16300efa7bd172de723d9ac91d38cc2"],"e98520789adb1d5ad05afb4956eca0944a929688":["eba8995e4d085569e201ecf8bf75d1cb02fa74bf"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","09757edf4cd72839c2280f766968560573a4700d","b70042a8a492f7054d480ccdd2be9796510d4327"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b70042a8a492f7054d480ccdd2be9796510d4327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5"],"68cb00b5f16300efa7bd172de723d9ac91d38cc2":["e98520789adb1d5ad05afb4956eca0944a929688"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f592209545c71895260367152601e9200399776d":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"34413af2ffe8be7ac2af245bbcc9fd212ae20d38":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a626ec4d1c92e59fe390724d6220081047b03ce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}