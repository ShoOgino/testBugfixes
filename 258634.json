{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","commits":[{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/BaseNonFuzzySpatialOpStrategyTest#testOperationRandomShapes(SpatialOperation).mjava","sourceNew":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","sourceOld":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"11e8ea32003f6ccf3282ad6c05ca47eec277e928","date":1428695518,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","sourceNew":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","sourceOld":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n    //first show that when there's no data, a query will result in no results\n    {\n      Query query = strategy.makeQuery(new SpatialArgs(operation, randomQueryShape()));\n      SearchResults searchResults = executeQuery(query, 1);\n      assertEquals(0, searchResults.numFound);\n    }\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","sourceNew":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","sourceOld":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpStrategyTestCase#testOperationRandomShapes(SpatialOperation).mjava","sourceNew":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","sourceOld":"  protected void testOperationRandomShapes(final SpatialOperation operation) throws IOException {\n\n    final int numIndexedShapes = randomIntBetween(1, 6);\n    List<Shape> indexedShapes = new ArrayList<>(numIndexedShapes);\n    for (int i = 0; i < numIndexedShapes; i++) {\n      indexedShapes.add(randomIndexedShape());\n    }\n\n    final int numQueryShapes = atLeast(20);\n    List<Shape> queryShapes = new ArrayList<>(numQueryShapes);\n    for (int i = 0; i < numQueryShapes; i++) {\n      queryShapes.add(randomQueryShape());\n    }\n\n    testOperation(operation, indexedShapes, queryShapes, true/*havoc*/);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["11e8ea32003f6ccf3282ad6c05ca47eec277e928","112d77ac8d3e10a362516ad834c9a11d35c94234"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["0521546db127e358ced1772a9d696dbdd255b203"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"0521546db127e358ced1772a9d696dbdd255b203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11e8ea32003f6ccf3282ad6c05ca47eec277e928":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0521546db127e358ced1772a9d696dbdd255b203"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"0521546db127e358ced1772a9d696dbdd255b203":["11e8ea32003f6ccf3282ad6c05ca47eec277e928"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}