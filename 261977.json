{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#append(FSTCompiler[Output],FST[Output],long,IntsRefBuilder).mjava","commits":[{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":1,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#append(FSTCompiler[Output],FST[Output],long,IntsRefBuilder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#append(Builder[Output],FST[Output],long,IntsRefBuilder).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(FSTCompiler<Output> fstCompiler, FST<Output> subIndex, long termOrdOffset, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<Output> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<Output> indexEnt;\n      while ((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        Output output = indexEnt.output;\n        //long blockTermCount = output.endOrd - output.startOrd + 1;\n        Output newOutput = FST_OUTPUTS.newOutput(output.bytes, termOrdOffset+output.startOrd, output.endOrd-termOrdOffset);\n        //System.out.println(\"  append sub=\" + indexEnt.input + \" output=\" + indexEnt.output + \" termOrdOffset=\" + termOrdOffset + \" blockTermCount=\" + blockTermCount  + \" newOutput=\" + newOutput  + \" endOrd=\" + (termOrdOffset+Long.MAX_VALUE-output.endOrd));\n        fstCompiler.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), newOutput);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<Output> builder, FST<Output> subIndex, long termOrdOffset, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<Output> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<Output> indexEnt;\n      while ((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        Output output = indexEnt.output;\n        //long blockTermCount = output.endOrd - output.startOrd + 1;\n        Output newOutput = FST_OUTPUTS.newOutput(output.bytes, termOrdOffset+output.startOrd, output.endOrd-termOrdOffset);\n        //System.out.println(\"  append sub=\" + indexEnt.input + \" output=\" + indexEnt.output + \" termOrdOffset=\" + termOrdOffset + \" blockTermCount=\" + blockTermCount  + \" newOutput=\" + newOutput  + \" endOrd=\" + (termOrdOffset+Long.MAX_VALUE-output.endOrd));\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), newOutput);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#append(FSTCompiler[Output],FST[Output],long,IntsRefBuilder).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/blocktreeords/OrdsBlockTreeTermsWriter.PendingBlock#append(Builder[Output],FST[Output],long,IntsRefBuilder).mjava","sourceNew":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(FSTCompiler<Output> fstCompiler, FST<Output> subIndex, long termOrdOffset, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<Output> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<Output> indexEnt;\n      while ((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        Output output = indexEnt.output;\n        //long blockTermCount = output.endOrd - output.startOrd + 1;\n        Output newOutput = FST_OUTPUTS.newOutput(output.bytes, termOrdOffset+output.startOrd, output.endOrd-termOrdOffset);\n        //System.out.println(\"  append sub=\" + indexEnt.input + \" output=\" + indexEnt.output + \" termOrdOffset=\" + termOrdOffset + \" blockTermCount=\" + blockTermCount  + \" newOutput=\" + newOutput  + \" endOrd=\" + (termOrdOffset+Long.MAX_VALUE-output.endOrd));\n        fstCompiler.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), newOutput);\n      }\n    }\n\n","sourceOld":"    // TODO: maybe we could add bulk-add method to\n    // Builder?  Takes FST and unions it w/ current\n    // FST.\n    private void append(Builder<Output> builder, FST<Output> subIndex, long termOrdOffset, IntsRefBuilder scratchIntsRef) throws IOException {\n      final BytesRefFSTEnum<Output> subIndexEnum = new BytesRefFSTEnum<>(subIndex);\n      BytesRefFSTEnum.InputOutput<Output> indexEnt;\n      while ((indexEnt = subIndexEnum.next()) != null) {\n        //if (DEBUG) {\n        //  System.out.println(\"      add sub=\" + indexEnt.input + \" \" + indexEnt.input + \" output=\" + indexEnt.output);\n        //}\n        Output output = indexEnt.output;\n        //long blockTermCount = output.endOrd - output.startOrd + 1;\n        Output newOutput = FST_OUTPUTS.newOutput(output.bytes, termOrdOffset+output.startOrd, output.endOrd-termOrdOffset);\n        //System.out.println(\"  append sub=\" + indexEnt.input + \" output=\" + indexEnt.output + \" termOrdOffset=\" + termOrdOffset + \" blockTermCount=\" + blockTermCount  + \" newOutput=\" + newOutput  + \" endOrd=\" + (termOrdOffset+Long.MAX_VALUE-output.endOrd));\n        builder.add(Util.toIntsRef(indexEnt.input, scratchIntsRef), newOutput);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}