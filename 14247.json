{"path":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      Filter filter;\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        if (filter == null) {\n          DocSet set = getDocSet(searcher);\n          filter = set.getTopFilter();\n        }\n\n        // Although this set only includes live docs, other filters can be pushed down to queries.\n        DocIdSet readerSet = filter.getDocIdSet(context, null);\n        if (readerSet == null) {\n          return null;\n        }\n        DocIdSetIterator readerSetIterator = readerSet.iterator();\n        if (readerSetIterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), readerSetIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      Filter filter;\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        if (filter == null) {\n          DocSet set = getDocSet(searcher);\n          filter = set.getTopFilter();\n        }\n\n        // Although this set only includes live docs, other filters can be pushed down to queries.\n        DocIdSet readerSet = filter.getDocIdSet(context, null);\n        if (readerSet == null) {\n          return null;\n        }\n        DocIdSetIterator readerSetIterator = readerSet.iterator();\n        if (readerSetIterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), readerSetIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      Filter filter;\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        if (filter == null) {\n          DocSet set = getDocSet(searcher);\n          filter = set.getTopFilter();\n        }\n\n        // Although this set only includes live docs, other filters can be pushed down to queries.\n        DocIdSet readerSet = filter.getDocIdSet(context, null);\n        if (readerSet == null) {\n          return null;\n        }\n        DocIdSetIterator readerSetIterator = readerSet.iterator();\n        if (readerSetIterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), readerSetIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      Filter filter;\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        if (filter == null) {\n          DocSet set = getDocSet(searcher);\n          filter = set.getTopFilter();\n        }\n\n        // Although this set only includes live docs, other filters can be pushed down to queries.\n        DocIdSet readerSet = filter.getDocIdSet(context, null);\n        if (readerSet == null) {\n          return null;\n        }\n        DocIdSetIterator readerSetIterator = readerSet.iterator();\n        if (readerSetIterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), readerSetIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c226b0eeb8b028f572020f459851a663a2c064e","date":1542377651,"type":3,"author":"Christophe Bismuth","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/PointSetQuery[GraphTermsQParserPlugin]#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      Filter filter;\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        if (filter == null) {\n          DocSet set = getDocSet(searcher);\n          filter = set.getTopFilter();\n        }\n\n        // Although this set only includes live docs, other filters can be pushed down to queries.\n        DocIdSet readerSet = filter.getDocIdSet(context, null);\n        if (readerSet == null) {\n          return null;\n        }\n        DocIdSetIterator readerSetIterator = readerSet.iterator();\n        if (readerSetIterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), scoreMode, readerSetIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public final Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      Filter filter;\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        if (filter == null) {\n          DocSet set = getDocSet(searcher);\n          filter = set.getTopFilter();\n        }\n\n        // Although this set only includes live docs, other filters can be pushed down to queries.\n        DocIdSet readerSet = filter.getDocIdSet(context, null);\n        if (readerSet == null) {\n          return null;\n        }\n        DocIdSetIterator readerSetIterator = readerSet.iterator();\n        if (readerSetIterator == null) {\n          return null;\n        }\n        return new ConstantScoreScorer(this, score(), readerSetIterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return true;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9c226b0eeb8b028f572020f459851a663a2c064e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9c226b0eeb8b028f572020f459851a663a2c064e"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"9c226b0eeb8b028f572020f459851a663a2c064e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"417142ff08fda9cf0b72d5133e63097a166c6458":["9c226b0eeb8b028f572020f459851a663a2c064e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}