{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","sourceNew":"  /**\n   * Tests two span queries.\n   * \n   * @throws IOException\n   */\n  protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,\n      final float expectedScore) throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"1\", \"2\", \"3\", \"4\"};\n    final float[] expectedScores = new float[] {expectedScore, expectedScore,\n        expectedScore, expectedScore};\n    assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n  }\n\n","sourceOld":"  /**\n   * Tests two span queries.\n   * \n   * @throws IOException\n   */\n  protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,\n      final float expectedScore) throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"1\", \"2\", \"3\", \"4\"};\n    final float[] expectedScores = new float[] {expectedScore, expectedScore,\n        expectedScore, expectedScore};\n    assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","sourceNew":"  /**\n   * Tests two span queries.\n   */\n  protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,\n      final float expectedScore) throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"1\", \"2\", \"3\", \"4\"};\n    final float[] expectedScores = new float[] {expectedScore, expectedScore,\n        expectedScore, expectedScore};\n    assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n  }\n\n","sourceOld":"  /**\n   * Tests two span queries.\n   * \n   * @throws IOException\n   */\n  protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,\n      final float expectedScore) throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"1\", \"2\", \"3\", \"4\"};\n    final float[] expectedScores = new float[] {expectedScore, expectedScore,\n        expectedScore, expectedScore};\n    assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","sourceNew":"  /**\n   * Tests two span queries.\n   */\n  protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,\n      final float expectedScore) throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"1\", \"2\", \"3\", \"4\"};\n    final float[] expectedScores = new float[] {expectedScore, expectedScore,\n        expectedScore, expectedScore};\n    assertHits(s, query.build(), \"two span queries\", expectedIds, expectedScores);\n  }\n\n","sourceOld":"  /**\n   * Tests two span queries.\n   */\n  protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,\n      final float expectedScore) throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n    final BooleanQuery query = new BooleanQuery();\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"1\", \"2\", \"3\", \"4\"};\n    final float[] expectedScores = new float[] {expectedScore, expectedScore,\n        expectedScore, expectedScore};\n    assertHits(s, query, \"two span queries\", expectedIds, expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e75448368ba628d73e9967b45e29c40bbfe39fa","date":1441768575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestSpansAdvanced#doTestBooleanQueryWithSpanQueries(IndexSearcher,float).mjava","sourceNew":null,"sourceOld":"  /**\n   * Tests two span queries.\n   */\n  protected void doTestBooleanQueryWithSpanQueries(IndexSearcher s,\n      final float expectedScore) throws IOException {\n    \n    final Query spanQuery = new SpanTermQuery(new Term(FIELD_TEXT, \"work\"));\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    query.add(spanQuery, BooleanClause.Occur.MUST);\n    final String[] expectedIds = new String[] {\"1\", \"2\", \"3\", \"4\"};\n    final float[] expectedScores = new float[] {expectedScore, expectedScore,\n        expectedScore, expectedScore};\n    assertHits(s, query.build(), \"two span queries\", expectedIds, expectedScores);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6e75448368ba628d73e9967b45e29c40bbfe39fa"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["6e75448368ba628d73e9967b45e29c40bbfe39fa"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"6e75448368ba628d73e9967b45e29c40bbfe39fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}