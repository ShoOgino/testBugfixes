{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","commits":[{"id":"0f719faa74f7213d4a395510dbc1f1b7cb178484","date":1410881394,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n    //Float Date                      \n    ArrayList<Double> floatDate = getDoubleList(\"mf\", \"rangeFacets\", \"date_dtd\", \"double\", \"sumOfSquares\");\n    ArrayList<Double> floatDateTest = calculateNumberStat(transformLists(floatDateTestStart, 4, 46, \"4,5\"\n                                                          , false, false, true, true, false), \"sumOfSquares\");\n    assertEquals(getRawResponse(), floatDate,floatDateTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":5,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/legacy/facet/LegacyRangeFacetTest#multiGapTest().mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/facet/RangeFacetTest#multiGapTest().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void multiGapTest() throws Exception {\n    //Int Long\n    ArrayList<Double> intLong = getDoubleList(\"mi\", \"rangeFacets\", \"long_ld\", \"double\", \"sum\");\n    ArrayList<Double> intLongTest = calculateNumberStat(transformLists(intLongTestStart, 5, 30, \"4,2,6,3\"\n                                                        , false, true, false, false, false), \"sum\");\n    assertEquals(getRawResponse(), intLong,intLongTest);\n    //Int Double\n    ArrayList<Double> intDouble = getDoubleList(\"mi\", \"rangeFacets\", \"double_dd\", \"double\", \"mean\");\n    ArrayList<Double> intDoubleTest = calculateNumberStat(transformLists(intDoubleTestStart, 3, 39, \"3,1,7\"\n                                                          , false, false, true, false, true), \"mean\");\n    assertEquals(getRawResponse(), intDouble,intDoubleTest);\n    //Int Date\n    ArrayList<Long> intDate = getLongList(\"mi\", \"rangeFacets\", \"date_dtd\", \"long\", \"count\");\n    ArrayList<Long> intDateTest = (ArrayList<Long>)calculateStat(transformLists(intDateTestStart, 7, 44, \"2,7\"\n                                                      , false, true, false, true, true), \"count\");\n    assertEquals(getRawResponse(), intDate,intDateTest);\n    \n    //Float Long\n    ArrayList<Double> floatLong = getDoubleList(\"mf\", \"rangeFacets\", \"long_ld\", \"double\", \"median\");\n    ArrayList<Double> floatLongTest = calculateNumberStat(transformLists(floatLongTestStart, 0, 29, \"1,4\"\n                                                          , false, true, true, true, true), \"median\");;\n    assertEquals(getRawResponse(), floatLong,floatLongTest);\n    //Float Double\n    ArrayList<Long> floatDouble = getLongList(\"mf\", \"rangeFacets\", \"double_dd\", \"long\", \"count\");\n    ArrayList<Long> floatDoubleTest = (ArrayList<Long>)calculateStat(transformLists(floatDoubleTestStart, 4, 47, \"2,3,11\"\n                                                          , false, false, false, true, false), \"count\");\n    assertEquals(getRawResponse(), floatDouble,floatDoubleTest);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["0f719faa74f7213d4a395510dbc1f1b7cb178484","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["0f719faa74f7213d4a395510dbc1f1b7cb178484","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f719faa74f7213d4a395510dbc1f1b7cb178484"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"0f719faa74f7213d4a395510dbc1f1b7cb178484":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["30c8e5574b55d57947e989443dfde611646530ee","3bd4c6955956e76c96eb12dfe64108ed03522983"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}