{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a136026dd5340a1feb1e3efd8cafe390616c1d8","date":1311317263,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      getDebubLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebubLogger().log(DIHLogLevels.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            getDebubLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            getDebubLogger().log(DIHLogLevels.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              getDebubLogger().log(DIHLogLevels.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebubLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      writer.log(SolrWriter.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      writer.log(SolrWriter.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            writer.log(SolrWriter.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            writer.log(SolrWriter.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            writer.log(SolrWriter.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              writer.log(SolrWriter.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        writer.log(SolrWriter.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bedd63933040e88a07397e8a0fda8f3aae2a8db","date":1311328450,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      getDebubLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebubLogger().log(DIHLogLevels.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            getDebubLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            getDebubLogger().log(DIHLogLevels.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebubLogger().log(DIHLogLevels.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              getDebubLogger().log(DIHLogLevels.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebubLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95755793ac5f02eed6154c705e8638e001a5a0a","date":1312178495,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.debug) {\n              \treqParams.debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n      Map<String,Object> pk, DataConfig.Entity entity, boolean isRoot,\n      ContextImpl parentCtx) {\n    List<EntityProcessorWrapper> entitiesToDestroy = new ArrayList<EntityProcessorWrapper>();\n    try {\n      buildDocument(vr, doc, pk, entity, isRoot, parentCtx, entitiesToDestroy);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      for (EntityProcessorWrapper entityWrapper : entitiesToDestroy) {\n        entityWrapper.destroy();\n      }\n      resetEntity(entity);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n                             Map<String, Object> pk, DataConfig.Entity entity, boolean isRoot,\n                             ContextImpl parentCtx) {\n\n    EntityProcessorWrapper entityProcessor = getEntityProcessor(entity);\n\n    ContextImpl ctx = new ContextImpl(entity, vr, null,\n            pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n            session, parentCtx, this);\n    entityProcessor.init(ctx);\n    Context.CURRENT_CONTEXT.set(ctx);\n    \n    if (requestParameters.start > 0) {\n      getDebugLogger().log(DIHLogLevels.DISABLE_LOGGING, null, null);\n    }\n\n    if (verboseDebug) {\n      getDebugLogger().log(DIHLogLevels.START_ENTITY, entity.name, null);\n    }\n\n    int seenDocCount = 0;\n\n    try {\n      while (true) {\n        if (stop.get())\n          return;\n        if(importStatistics.docCount.get() > (requestParameters.start + requestParameters.rows)) break;\n        try {\n          seenDocCount++;\n\n          if (seenDocCount > requestParameters.start) {\n            getDebugLogger().log(DIHLogLevels.ENABLE_LOGGING, null, null);\n          }\n\n          if (verboseDebug && entity.isDocRoot) {\n            getDebugLogger().log(DIHLogLevels.START_DOC, entity.name, null);\n          }\n          if (doc == null && entity.isDocRoot) {\n            doc = new DocWrapper();\n            ctx.setDoc(doc);\n            DataConfig.Entity e = entity;\n            while (e.parentEntity != null) {\n              addFields(e.parentEntity, doc, (Map<String, Object>) vr\n                      .resolve(e.parentEntity.name), vr);\n              e = e.parentEntity;\n            }\n          }\n\n          Map<String, Object> arow = entityProcessor.nextRow();\n          if (arow == null) {\n            break;\n          }\n\n          // Support for start parameter in debug mode\n          if (entity.isDocRoot) {\n            if (seenDocCount <= requestParameters.start)\n              continue;\n            if (seenDocCount > requestParameters.start + requestParameters.rows) {\n              LOG.info(\"Indexing stopped at docCount = \" + importStatistics.docCount);\n              break;\n            }\n          }\n\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_OUT, entity.name, arow);\n          }\n          importStatistics.rowsCount.incrementAndGet();\n          if (doc != null) {\n            handleSpecialCommands(arow, doc);\n            addFields(entity, doc, arow, vr);\n          }\n          if (entity.entities != null) {\n            vr.addNamespace(entity.name, arow);\n            for (DataConfig.Entity child : entity.entities) {\n              buildDocument(vr, doc,\n                  child.isDocRoot ? pk : null, child, false, ctx);\n            }\n            vr.removeNamespace(entity.name);\n          }\n          /*The child entities would have changed the CURRENT_CONTEXT. So when they are done, set it back to the old.\n           *\n           */\n          Context.CURRENT_CONTEXT.set(ctx);\n\n          if (entity.isDocRoot) {\n            if (stop.get())\n              return;\n            if (!doc.isEmpty()) {\n              boolean result = writer.upload(doc);\n              if(reqParams.debug) {\n              \treqParams.debugDocuments.add(doc);\n              }\n              doc = null;\n              if (result){\n                importStatistics.docCount.incrementAndGet();\n              } else {\n                importStatistics.failedDocCount.incrementAndGet();\n              }\n            }\n          }\n\n        } catch (DataImportHandlerException e) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, e);\n          }\n          if(e.getErrCode() == DataImportHandlerException.SKIP_ROW){\n            continue;\n          }\n          if (isRoot) {\n            if (e.getErrCode() == DataImportHandlerException.SKIP) {\n              importStatistics.skipDocCount.getAndIncrement();\n              doc = null;\n            } else {\n              SolrException.log(LOG, \"Exception while processing: \"\n                      + entity.name + \" document : \" + doc, e);\n            }\n            if (e.getErrCode() == DataImportHandlerException.SEVERE)\n              throw e;\n          } else\n            throw e;\n        } catch (Throwable t) {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ENTITY_EXCEPTION, entity.name, t);\n          }\n          throw new DataImportHandlerException(DataImportHandlerException.SEVERE, t);\n        } finally {\n          if (verboseDebug) {\n            getDebugLogger().log(DIHLogLevels.ROW_END, entity.name, null);\n            if (entity.isDocRoot)\n              getDebugLogger().log(DIHLogLevels.END_DOC, null, null);\n            Context.CURRENT_CONTEXT.remove();\n          }\n        }\n      }\n    } finally {\n      if (verboseDebug) {\n        getDebugLogger().log(DIHLogLevels.END_ENTITY, null, null);\n      }\n      entityProcessor.destroy();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],EntityProcessorWrapper,boolean,ContextImpl).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder#buildDocument(VariableResolverImpl,DocWrapper,Map[String,Object],DataConfig.Entity,boolean,ContextImpl).mjava","sourceNew":"  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n      Map<String,Object> pk, EntityProcessorWrapper epw, boolean isRoot,\n      ContextImpl parentCtx) {\n    List<EntityProcessorWrapper> entitiesToDestroy = new ArrayList<EntityProcessorWrapper>();\n    try {\n      buildDocument(vr, doc, pk, epw, isRoot, parentCtx, entitiesToDestroy);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      for (EntityProcessorWrapper entityWrapper : entitiesToDestroy) {\n        entityWrapper.destroy();\n      }\n      resetEntity(epw);\n    }\n  }\n\n","sourceOld":"  private void buildDocument(VariableResolverImpl vr, DocWrapper doc,\n      Map<String,Object> pk, DataConfig.Entity entity, boolean isRoot,\n      ContextImpl parentCtx) {\n    List<EntityProcessorWrapper> entitiesToDestroy = new ArrayList<EntityProcessorWrapper>();\n    try {\n      buildDocument(vr, doc, pk, entity, isRoot, parentCtx, entitiesToDestroy);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    } finally {\n      for (EntityProcessorWrapper entityWrapper : entitiesToDestroy) {\n        entityWrapper.destroy();\n      }\n      resetEntity(entity);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["3337b86edd36607f0208321f1deee79c55e5fd21"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"3337b86edd36607f0208321f1deee79c55e5fd21":["f95755793ac5f02eed6154c705e8638e001a5a0a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95755793ac5f02eed6154c705e8638e001a5a0a":["7bedd63933040e88a07397e8a0fda8f3aae2a8db"],"7a136026dd5340a1feb1e3efd8cafe390616c1d8":["c26f00b574427b55127e869b935845554afde1fa"],"7bedd63933040e88a07397e8a0fda8f3aae2a8db":["7a136026dd5340a1feb1e3efd8cafe390616c1d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7a136026dd5340a1feb1e3efd8cafe390616c1d8"],"3337b86edd36607f0208321f1deee79c55e5fd21":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"f95755793ac5f02eed6154c705e8638e001a5a0a":["3337b86edd36607f0208321f1deee79c55e5fd21"],"7a136026dd5340a1feb1e3efd8cafe390616c1d8":["7bedd63933040e88a07397e8a0fda8f3aae2a8db"],"7bedd63933040e88a07397e8a0fda8f3aae2a8db":["f95755793ac5f02eed6154c705e8638e001a5a0a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}