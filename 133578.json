{"path":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUnicodeComparator#compare(BytesRef,BytesRef).mjava","commits":[{"id":"08932c793647a36953d1816b1060121f48820d3f","date":1277386540,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUnicodeComparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUTF16Comparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        int diff = aByte - bByte;\n        if (diff != 0) {\n          return diff;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }    \n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        if (aByte != bByte) {\n\n          // See http://icu-project.org/docs/papers/utf16_code_point_order.html#utf-8-in-utf-16-order\n\n          // We know the terms are not equal, but, we may\n          // have to carefully fixup the bytes at the\n          // difference to match UTF16's sort order:\n          if (aByte >= 0xee && bByte >= 0xee) {\n            if ((aByte & 0xfe) == 0xee) {\n              aByte += 0x10;\n            }\n            if ((bByte&0xfe) == 0xee) {\n              bByte += 0x10;\n            }\n          }\n          return aByte - bByte;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUnicodeComparator#compare(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        int diff = aByte - bByte;\n        if (diff != 0) {\n          return diff;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }    \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUnicodeComparator#compare(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRef.UTF8SortedAsUnicodeComparator#compare(BytesRef,BytesRef).mjava","sourceNew":"    public int compare(BytesRef a, BytesRef b) {\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        int diff = aByte - bByte;\n        if (diff != 0) {\n          return diff;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }    \n\n","sourceOld":"    public int compare(BytesRef a, BytesRef b) {\n      final byte[] aBytes = a.bytes;\n      int aUpto = a.offset;\n      final byte[] bBytes = b.bytes;\n      int bUpto = b.offset;\n      \n      final int aStop;\n      if (a.length < b.length) {\n        aStop = aUpto + a.length;\n      } else {\n        aStop = aUpto + b.length;\n      }\n\n      while(aUpto < aStop) {\n        int aByte = aBytes[aUpto++] & 0xff;\n        int bByte = bBytes[bUpto++] & 0xff;\n\n        int diff = aByte - bByte;\n        if (diff != 0) {\n          return diff;\n        }\n      }\n\n      // One is a prefix of the other, or, they are equal:\n      return a.length - b.length;\n    }    \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"08932c793647a36953d1816b1060121f48820d3f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["08932c793647a36953d1816b1060121f48820d3f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","08932c793647a36953d1816b1060121f48820d3f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"08932c793647a36953d1816b1060121f48820d3f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5f4e87790277826a2aea119328600dfb07761f32"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08932c793647a36953d1816b1060121f48820d3f","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}