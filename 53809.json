{"path":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","commits":[{"id":"4275990669802f4c50b4de5d3252a0987854ad68","date":1260360486,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"contrib/collation/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiTermRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, String firstBeg,\n      String firstEnd, String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiTermRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, String firstBeg,\n      String firstEnd, String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(TEST_VERSION_CURRENT).setAnalyzer(analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, String firstBeg,\n      String firstEnd, String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery\n    (Analyzer analyzer, String firstBeg, String firstEnd, \n     String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter\n      (farsiIndex, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","pathOld":"src/test/org/apache/lucene/collation/CollationTestBase#testFarsiTermRangeQuery(Analyzer,String,String,String,String).mjava","sourceNew":"  public void testFarsiTermRangeQuery(Analyzer analyzer, String firstBeg,\n      String firstEnd, String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","sourceOld":"  public void testFarsiTermRangeQuery(Analyzer analyzer, String firstBeg,\n      String firstEnd, String secondBeg, String secondEnd) throws Exception {\n\n    RAMDirectory farsiIndex = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(farsiIndex, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer));\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"\\u0633\\u0627\\u0628\", \n                      Field.Store.YES, Field.Index.ANALYZED));\n    doc.add(new Field(\"body\", \"body\",\n                      Field.Store.YES, Field.Index.NOT_ANALYZED));\n    writer.addDocument(doc);\n    writer.close();\n\n    IndexReader reader = IndexReader.open(farsiIndex, true);\n    IndexSearcher search = new IndexSearcher(reader);\n        \n    // Unicode order would include U+0633 in [ U+062F - U+0698 ], but Farsi\n    // orders the U+0698 character before the U+0633 character, so the single\n    // index Term below should NOT be returned by a TermRangeQuery\n    // with a Farsi Collator (or an Arabic one for the case when Farsi is \n    // not supported).\n    Query csrq \n      = new TermRangeQuery(\"content\", firstBeg, firstEnd, true, true);\n    ScoreDoc[] result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should not be included.\", 0, result.length);\n\n    csrq = new TermRangeQuery\n      (\"content\", secondBeg, secondEnd, true, true);\n    result = search.search(csrq, null, 1000).scoreDocs;\n    assertEquals(\"The index Term should be included.\", 1, result.length);\n    search.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"4275990669802f4c50b4de5d3252a0987854ad68":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1cedb00d2dd44640194401179358a2e3ba6051bf":["4275990669802f4c50b4de5d3252a0987854ad68"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"4275990669802f4c50b4de5d3252a0987854ad68":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4275990669802f4c50b4de5d3252a0987854ad68"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}