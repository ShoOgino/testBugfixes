{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,int,BytesRef).mjava","commits":[{"id":"9ee663728a95682ffb5dee37517ac9e863cd0820","date":1352758633,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Decompress bytes that were stored between offsets <code>offset</code> and\n   * <code>offset+length</code> in the original stream from the compressed\n   * stream <code>in</code> to <code>bytes</code>. After returning, the length\n   * of <code>bytes</code> (<code>bytes.length</code>) must be equal to\n   * <code>length</code>. Implementations of this method are free to resize\n   * <code>bytes</code> depending on their needs.\n   *\n   * @param in the input that stores the compressed stream\n   * @param originalLength the length of the original data (before compression)\n   * @param offset bytes before this offset do not need to be decompressed\n   * @param length bytes after <code>offset+length</code> do not need to be decompressed\n   * @param bytes a {@link BytesRef} where to store the decompressed data\n   */\n  public abstract void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException;\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,int,BytesRef).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/Decompressor#decompress(DataInput,int,int,int,BytesRef).mjava","sourceNew":"  /**\n   * Decompress bytes that were stored between offsets <code>offset</code> and\n   * <code>offset+length</code> in the original stream from the compressed\n   * stream <code>in</code> to <code>bytes</code>. After returning, the length\n   * of <code>bytes</code> (<code>bytes.length</code>) must be equal to\n   * <code>length</code>. Implementations of this method are free to resize\n   * <code>bytes</code> depending on their needs.\n   *\n   * @param in the input that stores the compressed stream\n   * @param originalLength the length of the original data (before compression)\n   * @param offset bytes before this offset do not need to be decompressed\n   * @param length bytes after <code>offset+length</code> do not need to be decompressed\n   * @param bytes a {@link BytesRef} where to store the decompressed data\n   */\n  public abstract void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException;\n\n","sourceOld":"  /**\n   * Decompress bytes that were stored between offsets <code>offset</code> and\n   * <code>offset+length</code> in the original stream from the compressed\n   * stream <code>in</code> to <code>bytes</code>. After returning, the length\n   * of <code>bytes</code> (<code>bytes.length</code>) must be equal to\n   * <code>length</code>. Implementations of this method are free to resize\n   * <code>bytes</code> depending on their needs.\n   *\n   * @param in the input that stores the compressed stream\n   * @param originalLength the length of the original data (before compression)\n   * @param offset bytes before this offset do not need to be decompressed\n   * @param length bytes after <code>offset+length</code> do not need to be decompressed\n   * @param bytes a {@link BytesRef} where to store the decompressed data\n   */\n  public abstract void decompress(DataInput in, int originalLength, int offset, int length, BytesRef bytes) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"9ee663728a95682ffb5dee37517ac9e863cd0820":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ee663728a95682ffb5dee37517ac9e863cd0820"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}