{"path":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"/dev/null","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      TermEnum terms = r.terms(new Term(\"field3\", \"bbb\"));\n      // pre-flex API should seek to the next field\n      assertNotNull(terms.term());\n      assertEquals(\"field4\", terms.term().field());\n      \n      terms = r.terms(new Term(\"field5\", \"abc\"));\n      assertNull(terms.term());\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      TermEnum terms = r.terms(new Term(\"field3\", \"bbb\"));\n      // pre-flex API should seek to the next field\n      assertNotNull(terms.term());\n      assertEquals(\"field4\", terms.term().field());\n      \n      terms = r.terms(new Term(\"field5\", \"abc\"));\n      assertNull(terms.term());\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new WhitespaceAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      TermEnum terms = r.terms(new Term(\"field3\", \"bbb\"));\n      // pre-flex API should seek to the next field\n      assertNotNull(terms.term());\n      assertEquals(\"field4\", terms.term().field());\n      \n      terms = r.terms(new Term(\"field5\", \"abc\"));\n      assertNull(terms.term());\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      TermEnum terms = r.terms(new Term(\"field3\", \"bbb\"));\n      // pre-flex API should seek to the next field\n      assertNotNull(terms.term());\n      assertEquals(\"field4\", terms.term().field());\n      \n      terms = r.terms(new Term(\"field5\", \"abc\"));\n      assertNull(terms.term());\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      TermEnum terms = r.terms(new Term(\"field3\", \"bbb\"));\n      // pre-flex API should seek to the next field\n      assertNotNull(terms.term());\n      assertEquals(\"field4\", terms.term().field());\n      \n      terms = r.terms(new Term(\"field5\", \"abc\"));\n      assertNull(terms.term());\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory(newRandom());\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory(newRandom());\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer()).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer()).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer()).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = new MockRAMDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(d, new MockAnalyzer(),\n                                    IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        w.setMaxBufferedDocs(7);\n        Document doc = new Document();\n        doc.add(new Field(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(new Field(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer()).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer()).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer()).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer()).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seek(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field2\", \"this is field2\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field3\", \"aaa\", Field.Store.NO, Field.Index.ANALYZED));\n        doc.add(newField(\"field4\", \"bbb\", Field.Store.NO, Field.Index.ANALYZED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.optimize();\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator();\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestFlex#testNonFlex().mjava","sourceNew":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // Test non-flex API emulated on flex index\n  public void testNonFlex() throws Exception {\n    Directory d = newDirectory();\n\n    final int DOC_COUNT = 177;\n\n    IndexWriter w = new IndexWriter(\n        d,\n        new IndexWriterConfig(Version.LUCENE_31, new MockAnalyzer(random)).\n            setMaxBufferedDocs(7)\n    );\n\n    for(int iter=0;iter<2;iter++) {\n      if (iter == 0) {\n        Document doc = new Document();\n        doc.add(newField(\"field1\", \"this is field1\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field2\", \"this is field2\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field3\", \"aaa\", TextField.TYPE_UNSTORED));\n        doc.add(newField(\"field4\", \"bbb\", TextField.TYPE_UNSTORED));\n        for(int i=0;i<DOC_COUNT;i++) {\n          w.addDocument(doc);\n        }\n      } else {\n        w.forceMerge(1);\n      }\n\n      IndexReader r = w.getReader();\n      \n      TermsEnum terms = MultiFields.getTerms(r, \"field3\").iterator(null);\n      assertEquals(TermsEnum.SeekStatus.END, terms.seekCeil(new BytesRef(\"abc\")));\n      r.close();\n    }\n\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["3bb13258feba31ab676502787ab2e1779f129b7a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d572389229127c297dd1fa5ce4758e1cec41e799":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","28427ef110c4c5bf5b4057731b83110bd1e13724"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","fd9cc9d77712aba3662f24632df7539ab75e3667"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["d572389229127c297dd1fa5ce4758e1cec41e799"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3bb13258feba31ab676502787ab2e1779f129b7a":["132903c28af3aa6f67284b78de91c0f0a99488c2","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["132903c28af3aa6f67284b78de91c0f0a99488c2"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d572389229127c297dd1fa5ce4758e1cec41e799":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["d572389229127c297dd1fa5ce4758e1cec41e799"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3cc749c053615f5871f3b95715fe292f34e70a53"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","fd9cc9d77712aba3662f24632df7539ab75e3667"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","5f4e87790277826a2aea119328600dfb07761f32"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3bb13258feba31ab676502787ab2e1779f129b7a":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}