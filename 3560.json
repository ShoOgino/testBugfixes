{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","commits":[{"id":"b4e444678504caf66a8060b1d514383aa4feac0c","date":1457399659,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/geo3d/TestGeo3DPoint#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = toRadians(randomLon());\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = toRadians(randomLat());\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = toRadians(randomLat());\n        lons[docID] = toRadians(randomLon());\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = toRadians(randomLon());\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = toRadians(randomLat());\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = toRadians(randomLat());\n        lons[docID] = toRadians(randomLon());\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b","date":1459439641,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = randomLon();\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = randomLat();\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = randomLat();\n        lons[docID] = randomLon();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = toRadians(randomLon());\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = toRadians(randomLat());\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = toRadians(randomLat());\n        lons[docID] = toRadians(randomLon());\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9","date":1459984736,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = GeoTestUtil.nextLongitude();\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = GeoTestUtil.nextLatitude();\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = GeoTestUtil.nextLatitude();\n        lons[docID] = GeoTestUtil.nextLongitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = randomLon();\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = randomLat();\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = randomLat();\n        lons[docID] = randomLon();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a","date":1583186777,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/TestGeo3DPoint#doTestRandom(int).mjava","sourceNew":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = GeoTestUtil.nextLongitude();\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = GeoTestUtil.nextLatitude();\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = GeoTestUtil.nextLatitude();\n        lons[docID] = GeoTestUtil.nextLongitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons, randomPlanetModel());\n  }\n\n","sourceOld":"  private void doTestRandom(int count) throws Exception {\n    int numPoints = atLeast(count);\n\n    if (VERBOSE) {\n      System.err.println(\"TEST: numPoints=\" + numPoints);\n    }\n\n    double[] lats = new double[numPoints];\n    double[] lons = new double[numPoints];\n\n    boolean haveRealDoc = false;\n\n    for (int docID=0;docID<numPoints;docID++) {\n      int x = random().nextInt(20);\n      if (x == 17) {\n        // Some docs don't have a point:\n        lats[docID] = Double.NaN;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" is missing\");\n        }\n        continue;\n      }\n\n      if (docID > 0 && x < 3 && haveRealDoc) {\n        int oldDocID;\n        while (true) {\n          oldDocID = random().nextInt(docID);\n          if (Double.isNaN(lats[oldDocID]) == false) {\n            break;\n          }\n        }\n            \n        if (x == 0) {\n          // Identical lat to old point\n          lats[docID] = lats[oldDocID];\n          lons[docID] = GeoTestUtil.nextLongitude();\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat as doc=\" + oldDocID + \")\");\n          }\n        } else if (x == 1) {\n          // Identical lon to old point\n          lats[docID] = GeoTestUtil.nextLatitude();\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lon as doc=\" + oldDocID + \")\");\n          }\n        } else {\n          assert x == 2;\n          // Fully identical point:\n          lats[docID] = lats[oldDocID];\n          lons[docID] = lons[oldDocID];\n          if (VERBOSE) {\n            System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID] + \" (same lat/lon as doc=\" + oldDocID + \")\");\n          }\n        }\n      } else {\n        lats[docID] = GeoTestUtil.nextLatitude();\n        lons[docID] = GeoTestUtil.nextLongitude();\n        haveRealDoc = true;\n        if (VERBOSE) {\n          System.err.println(\"  doc=\" + docID + \" lat=\" + lats[docID] + \" lon=\" + lons[docID]);\n        }\n      }\n    }\n\n    verify(lats, lons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b"],"c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b":["b4e444678504caf66a8060b1d514383aa4feac0c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"b4e444678504caf66a8060b1d514383aa4feac0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"]},"commit2Childs":{"4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9":["c33ed6824db1d3c54aaf0208e68c3df3fd43d93a"],"c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b":["4d3a37d877793d2b7b46b7d8b0b0319d65f7d2a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4e444678504caf66a8060b1d514383aa4feac0c"],"c33ed6824db1d3c54aaf0208e68c3df3fd43d93a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4e444678504caf66a8060b1d514383aa4feac0c":["c6e339fe2e96467edfc4bf0aa5654e4da37e2d1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}