{"path":"solr/core/src/java/org/apache/solr/response/DocsStreamer#calcDocValueFieldsForReturn(SolrDocumentFetcher,ReturnFields).mjava","commits":[{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#calcDocValueFieldsForReturn(SolrDocumentFetcher,ReturnFields).mjava","pathOld":"/dev/null","sourceNew":"  // TODO move to ReturnFields ?  Or SolrDocumentFetcher ?\n  public static Set<String> calcDocValueFieldsForReturn(SolrDocumentFetcher docFetcher, ReturnFields returnFields) {\n    Set<String> result = null;\n    if (returnFields.wantsAllFields()) {\n      // check whether there are no additional fields\n      Set<String> fieldNames = returnFields.getLuceneFieldNames(true);\n      if (fieldNames == null) {\n        result = docFetcher.getNonStoredDVs(true);\n      } else {\n        result = new HashSet<>(docFetcher.getNonStoredDVs(true)); // copy\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (docFetcher.getNonStoredDVs(false).contains(fl)) {\n            result.add(fl);\n          }\n        }\n      }\n    } else {\n      if (returnFields.hasPatternMatching()) {\n        for (String s : docFetcher.getNonStoredDVs(true)) {\n          if (returnFields.wantsField(s)) {\n            if (null == result) {\n              result = new HashSet<>();\n            }\n            result.add(s);\n          }\n        }\n      } else {\n        Set<String> fnames = returnFields.getLuceneFieldNames();\n        if (fnames == null) {\n          return null;\n        }\n        result = new HashSet<>(fnames); // copy\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        result.retainAll(docFetcher.getNonStoredDVs(false));\n      }\n    }\n    if (result != null && result.isEmpty()) {\n      return null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/DocsStreamer#calcDocValueFieldsForReturn(SolrDocumentFetcher,ReturnFields).mjava","pathOld":"/dev/null","sourceNew":"  // TODO move to ReturnFields ?  Or SolrDocumentFetcher ?\n  public static Set<String> calcDocValueFieldsForReturn(SolrDocumentFetcher docFetcher, ReturnFields returnFields) {\n    Set<String> result = null;\n    if (returnFields.wantsAllFields()) {\n      // check whether there are no additional fields\n      Set<String> fieldNames = returnFields.getLuceneFieldNames(true);\n      if (fieldNames == null) {\n        result = docFetcher.getNonStoredDVs(true);\n      } else {\n        result = new HashSet<>(docFetcher.getNonStoredDVs(true)); // copy\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (docFetcher.getNonStoredDVs(false).contains(fl)) {\n            result.add(fl);\n          }\n        }\n      }\n    } else {\n      if (returnFields.hasPatternMatching()) {\n        for (String s : docFetcher.getNonStoredDVs(true)) {\n          if (returnFields.wantsField(s)) {\n            if (null == result) {\n              result = new HashSet<>();\n            }\n            result.add(s);\n          }\n        }\n      } else {\n        Set<String> fnames = returnFields.getLuceneFieldNames();\n        if (fnames == null) {\n          return null;\n        }\n        result = new HashSet<>(fnames); // copy\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        result.retainAll(docFetcher.getNonStoredDVs(false));\n      }\n    }\n    if (result != null && result.isEmpty()) {\n      return null;\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2","date":1505775734,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/RetrieveFieldsOptimizer#calcDocValueFieldsForReturn(SolrDocumentFetcher,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#calcDocValueFieldsForReturn(SolrDocumentFetcher,ReturnFields).mjava","sourceNew":"  private static Set<String> calcDocValueFieldsForReturn(SolrDocumentFetcher docFetcher, ReturnFields returnFields) {\n    // always return not null\n    final Set<String> result = new HashSet<>();\n    if (returnFields.wantsAllFields()) {\n      result.addAll(docFetcher.getNonStoredDVs(true));\n      // check whether there are no additional fields\n      Set<String> fieldNames = returnFields.getLuceneFieldNames(true);\n      if (fieldNames != null) {\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (docFetcher.getNonStoredDVs(false).contains(fl)) {\n            result.add(fl);\n          }\n        }\n      }\n    } else if (returnFields.hasPatternMatching()) {\n      for (String s : docFetcher.getNonStoredDVs(true)) {\n        if (returnFields.wantsField(s)) {\n          result.add(s);\n        }\n      }\n    } else {\n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      if (fnames != null) {\n        result.addAll(fnames);\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        result.retainAll(docFetcher.getNonStoredDVs(false));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // TODO move to ReturnFields ?  Or SolrDocumentFetcher ?\n  public static Set<String> calcDocValueFieldsForReturn(SolrDocumentFetcher docFetcher, ReturnFields returnFields) {\n    Set<String> result = null;\n    if (returnFields.wantsAllFields()) {\n      // check whether there are no additional fields\n      Set<String> fieldNames = returnFields.getLuceneFieldNames(true);\n      if (fieldNames == null) {\n        result = docFetcher.getNonStoredDVs(true);\n      } else {\n        result = new HashSet<>(docFetcher.getNonStoredDVs(true)); // copy\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (docFetcher.getNonStoredDVs(false).contains(fl)) {\n            result.add(fl);\n          }\n        }\n      }\n    } else {\n      if (returnFields.hasPatternMatching()) {\n        for (String s : docFetcher.getNonStoredDVs(true)) {\n          if (returnFields.wantsField(s)) {\n            if (null == result) {\n              result = new HashSet<>();\n            }\n            result.add(s);\n          }\n        }\n      } else {\n        Set<String> fnames = returnFields.getLuceneFieldNames();\n        if (fnames == null) {\n          return null;\n        }\n        result = new HashSet<>(fnames); // copy\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        result.retainAll(docFetcher.getNonStoredDVs(false));\n      }\n    }\n    if (result != null && result.isEmpty()) {\n      return null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04af4a840c8f501ba34e09e382b8f8ace82aa51e","date":1505847466,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/RetrieveFieldsOptimizer#calcDocValueFieldsForReturn(SolrDocumentFetcher,ReturnFields).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/DocsStreamer#calcDocValueFieldsForReturn(SolrDocumentFetcher,ReturnFields).mjava","sourceNew":"  private static Set<String> calcDocValueFieldsForReturn(SolrDocumentFetcher docFetcher, ReturnFields returnFields) {\n    // always return not null\n    final Set<String> result = new HashSet<>();\n    if (returnFields.wantsAllFields()) {\n      result.addAll(docFetcher.getNonStoredDVs(true));\n      // check whether there are no additional fields\n      Set<String> fieldNames = returnFields.getLuceneFieldNames(true);\n      if (fieldNames != null) {\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (docFetcher.getNonStoredDVs(false).contains(fl)) {\n            result.add(fl);\n          }\n        }\n      }\n    } else if (returnFields.hasPatternMatching()) {\n      for (String s : docFetcher.getNonStoredDVs(true)) {\n        if (returnFields.wantsField(s)) {\n          result.add(s);\n        }\n      }\n    } else {\n      Set<String> fnames = returnFields.getLuceneFieldNames();\n      if (fnames != null) {\n        result.addAll(fnames);\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        result.retainAll(docFetcher.getNonStoredDVs(false));\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  // TODO move to ReturnFields ?  Or SolrDocumentFetcher ?\n  public static Set<String> calcDocValueFieldsForReturn(SolrDocumentFetcher docFetcher, ReturnFields returnFields) {\n    Set<String> result = null;\n    if (returnFields.wantsAllFields()) {\n      // check whether there are no additional fields\n      Set<String> fieldNames = returnFields.getLuceneFieldNames(true);\n      if (fieldNames == null) {\n        result = docFetcher.getNonStoredDVs(true);\n      } else {\n        result = new HashSet<>(docFetcher.getNonStoredDVs(true)); // copy\n        // add all requested fields that may be useDocValuesAsStored=false\n        for (String fl : fieldNames) {\n          if (docFetcher.getNonStoredDVs(false).contains(fl)) {\n            result.add(fl);\n          }\n        }\n      }\n    } else {\n      if (returnFields.hasPatternMatching()) {\n        for (String s : docFetcher.getNonStoredDVs(true)) {\n          if (returnFields.wantsField(s)) {\n            if (null == result) {\n              result = new HashSet<>();\n            }\n            result.add(s);\n          }\n        }\n      } else {\n        Set<String> fnames = returnFields.getLuceneFieldNames();\n        if (fnames == null) {\n          return null;\n        }\n        result = new HashSet<>(fnames); // copy\n        // here we get all non-stored dv fields because even if a user has set\n        // useDocValuesAsStored=false in schema, he may have requested a field\n        // explicitly using the fl parameter\n        result.retainAll(docFetcher.getNonStoredDVs(false));\n      }\n    }\n    if (result != null && result.isEmpty()) {\n      return null;\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04af4a840c8f501ba34e09e382b8f8ace82aa51e":["de548de3ce5405595899f548152d4b93ac9eb9cc","bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"]},"commit2Childs":{"04af4a840c8f501ba34e09e382b8f8ace82aa51e":[],"de548de3ce5405595899f548152d4b93ac9eb9cc":["04af4a840c8f501ba34e09e382b8f8ace82aa51e"],"bf0aa6856a12eff25ab6d79dec11bea9e4031ca2":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["bf0aa6856a12eff25ab6d79dec11bea9e4031ca2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["de548de3ce5405595899f548152d4b93ac9eb9cc","63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04af4a840c8f501ba34e09e382b8f8ace82aa51e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}