{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","commits":[{"id":"9c327517edf97b94827c01757fbf21e0ca625eb7","date":1341211669,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double dist, int assertNumFound, int... assertIds) {\n    Point pt = (Point) ctx.readShape(ptStr);\n    Shape shape = ctx.makeCircle(pt,dist);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args, fieldInfo);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args, fieldInfo));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0415a016b37e58a017fed0a91234f733ab359971","date":1341458183,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double dist, int assertNumFound, int... assertIds) {\n    Point pt = (Point) ctx.readShape(ptStr);\n    Shape shape = ctx.makeCircle(pt,dist);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double dist, int assertNumFound, int... assertIds) {\n    Point pt = (Point) ctx.readShape(ptStr);\n    Shape shape = ctx.makeCircle(pt,dist);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args, fieldInfo);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args, fieldInfo));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double dist, int assertNumFound, int... assertIds) {\n    Point pt = (Point) ctx.readShape(ptStr);\n    Shape shape = ctx.makeCircle(pt,dist);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da956410d7a790f567af4e7e94584fb0930212f2","date":1346859431,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    Point pt = (Point) new ShapeReadWriter(ctx).readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double dist, int assertNumFound, int... assertIds) {\n    Point pt = (Point) ctx.readShape(ptStr);\n    Shape shape = ctx.makeCircle(pt,dist);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9cb4b4651ba335fd70d51cf8448325add98f71c6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7","date":1347426169,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(boolean,String,double,int,int...).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/PortedSolr3Test#_checkHits(SpatialOperation,String,double,int,int...).mjava","sourceNew":"  private void _checkHits(boolean bbox, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    SpatialOperation op = SpatialOperation.Intersects;\n    Point pt = (Point) new ShapeReadWriter(ctx).readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n    if (bbox)\n      shape = shape.getBoundingBox();\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void _checkHits(SpatialOperation op, String ptStr, double distKM, int assertNumFound, int... assertIds) {\n    Point pt = (Point) new ShapeReadWriter(ctx).readShape(ptStr);\n    double distDEG = DistanceUtils.dist2Degrees(distKM, DistanceUtils.EARTH_MEAN_RADIUS_KM);\n    Shape shape = ctx.makeCircle(pt, distDEG);\n\n    SpatialArgs args = new SpatialArgs(op,shape);\n    //args.setDistPrecision(0.025);\n    Query query;\n    if (random().nextBoolean()) {\n      query = strategy.makeQuery(args);\n    } else {\n      query = new FilteredQuery(new MatchAllDocsQuery(),strategy.makeFilter(args));\n    }\n    SearchResults results = executeQuery(query, 100);\n    assertEquals(\"\"+shape,assertNumFound,results.numFound);\n    if (assertIds != null) {\n      Set<Integer> resultIds = new HashSet<Integer>();\n      for (SearchResult result : results.results) {\n        resultIds.add(Integer.valueOf(result.document.get(\"id\")));\n      }\n      for (int assertId : assertIds) {\n        assertTrue(\"has \" + assertId, resultIds.contains(assertId));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0415a016b37e58a017fed0a91234f733ab359971":["9c327517edf97b94827c01757fbf21e0ca625eb7"],"9c327517edf97b94827c01757fbf21e0ca625eb7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7":["da956410d7a790f567af4e7e94584fb0930212f2"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0415a016b37e58a017fed0a91234f733ab359971"],"da956410d7a790f567af4e7e94584fb0930212f2":["0415a016b37e58a017fed0a91234f733ab359971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46e67dde361bddc1a35dc332c2a1e553d7a8ebd7"]},"commit2Childs":{"0415a016b37e58a017fed0a91234f733ab359971":["fe33227f6805edab2036cbb80645cc4e2d1fa424","da956410d7a790f567af4e7e94584fb0930212f2"],"9c327517edf97b94827c01757fbf21e0ca625eb7":["0415a016b37e58a017fed0a91234f733ab359971"],"46e67dde361bddc1a35dc332c2a1e553d7a8ebd7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9c327517edf97b94827c01757fbf21e0ca625eb7","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"da956410d7a790f567af4e7e94584fb0930212f2":["46e67dde361bddc1a35dc332c2a1e553d7a8ebd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}