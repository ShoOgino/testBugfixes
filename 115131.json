{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSqlStream().mjava","commits":[{"id":"37ba6c2d18fe05b92cb264c3d67e4cae76f75136","date":1495126259,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSqlStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSqlStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n    try {\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(\"+COLLECTIONORALIAS+\", stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSqlStream().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSqlStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n    try {\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(\"+COLLECTIONORALIAS+\", stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de7bcacac0e2bad580b76d74b3e61aac6e97e318","date":1506695786,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSqlStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSqlStream().mjava","sourceNew":"  @Test\n  public void testSqlStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n    try {\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(\"+COLLECTIONORALIAS+\", stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //Test with using the default collection\n      solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSqlStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n    try {\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(\"+COLLECTIONORALIAS+\", stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSqlStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testSqlStream().mjava","sourceNew":"  @Test\n  public void testSqlStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n    try {\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(\"+COLLECTIONORALIAS+\", stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n      //Test with using the default collection\n      solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testSqlStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    List<Tuple> tuples;\n    StreamContext streamContext = new StreamContext();\n    SolrClientCache solrClientCache = new SolrClientCache();\n    streamContext.setSolrClientCache(solrClientCache);\n    List<String> shardUrls = TupleStream.getShards(cluster.getZkServer().getZkAddress(), COLLECTIONORALIAS, streamContext);\n\n    try {\n      StringBuilder buf = new StringBuilder();\n      for (String shardUrl : shardUrls) {\n        if (buf.length() > 0) {\n          buf.append(\",\");\n        }\n        buf.append(shardUrl);\n      }\n\n      ModifiableSolrParams solrParams = new ModifiableSolrParams();\n      solrParams.add(\"qt\", \"/stream\");\n      solrParams.add(\"expr\", \"sql(\"+COLLECTIONORALIAS+\", stmt=\\\"select id from collection1 order by a_i asc\\\")\");\n      SolrStream solrStream = new SolrStream(shardUrls.get(0), solrParams);\n      solrStream.setStreamContext(streamContext);\n      tuples = getTuples(solrStream);\n      assert (tuples.size() == 5);\n      assertOrder(tuples, 0, 1, 2, 3, 4);\n\n    } finally {\n      solrClientCache.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["e9017cf144952056066919f1ebc7897ff9bd71b1","de7bcacac0e2bad580b76d74b3e61aac6e97e318"],"de7bcacac0e2bad580b76d74b3e61aac6e97e318":["37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["de7bcacac0e2bad580b76d74b3e61aac6e97e318"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"de7bcacac0e2bad580b76d74b3e61aac6e97e318":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","37ba6c2d18fe05b92cb264c3d67e4cae76f75136"],"37ba6c2d18fe05b92cb264c3d67e4cae76f75136":["e9017cf144952056066919f1ebc7897ff9bd71b1","de7bcacac0e2bad580b76d74b3e61aac6e97e318"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}