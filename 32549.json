{"path":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher) throws IOException {\n\n      return new Weight() {\n\n        @Override\n        public Query getQuery() {\n          return FixedScoreQuery.this;\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs, boolean needsScores) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"954e59be3da8dc1b046646ad7af4b466852009d3","date":1423482367,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a47d642ab24da1a811adce4bda9cc52c520ca13","date":1423483323,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,int).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, int postingsFlags) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449f2318aa7f06ce3bce9031e402201231cb781e","date":1424530966,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public int nextPosition() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int startOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public int endOffset() throws IOException {\n              return -1;\n            }\n\n            @Override\n            public BytesRef getPayload() throws IOException {\n              return null;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05c52ac194342b760b830342ee8423fcf00e54d0","date":1429197275,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dd748bb245633a8195281556bb0e68a6ea97d18","date":1449755030,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public long cost() {\n              return 1;\n            }\n\n            @Override\n            public int nextDoc() {\n              docID++;\n              if (docID >= context.reader().maxDoc()) {\n                return NO_MORE_DOCS;\n              }\n              return docID;\n            }\n\n            @Override\n            public int advance(int target) {\n              docID = target;\n              return docID;\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestQueryRescorer.FixedScoreQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n\n      return new Weight(FixedScoreQuery.this) {\n\n        @Override\n        public void extractTerms(Set<Term> terms) {\n        }\n\n        @Override\n        public float getValueForNormalization() {\n          return 1.0f;\n        }\n\n        @Override\n        public void normalize(float queryNorm, float topLevelBoost) {\n        }\n\n        @Override\n        public Scorer scorer(final LeafReaderContext context) throws IOException {\n\n          return new Scorer(null) {\n            int docID = -1;\n\n            @Override\n            public int docID() {\n              return docID;\n            }\n\n            @Override\n            public int freq() {\n              return 1;\n            }\n\n            @Override\n            public DocIdSetIterator iterator() {\n              return new DocIdSetIterator() {\n\n                @Override\n                public int docID() {\n                  return docID;\n                }\n\n                @Override\n                public long cost() {\n                  return 1;\n                }\n\n                @Override\n                public int nextDoc() {\n                  docID++;\n                  if (docID >= context.reader().maxDoc()) {\n                    return NO_MORE_DOCS;\n                  }\n                  return docID;\n                }\n\n                @Override\n                public int advance(int target) {\n                  docID = target;\n                  return docID;\n                }\n              };\n            }\n\n            @Override\n            public float score() throws IOException {\n              int num = idToNum[Integer.parseInt(context.reader().document(docID).get(\"id\"))];\n              if (reverse) {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + num);\n                return num;\n              } else {\n                //System.out.println(\"score doc=\" + docID + \" num=\" + -num);\n                return -num;\n              }\n            }\n          };\n        }\n\n        @Override\n        public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n          return null;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["954e59be3da8dc1b046646ad7af4b466852009d3"],"fb17639909a369c1e64866842e5c213440acc17e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["05c52ac194342b760b830342ee8423fcf00e54d0"],"449f2318aa7f06ce3bce9031e402201231cb781e":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"05c52ac194342b760b830342ee8423fcf00e54d0":["449f2318aa7f06ce3bce9031e402201231cb781e"],"954e59be3da8dc1b046646ad7af4b466852009d3":["fb17639909a369c1e64866842e5c213440acc17e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7dd748bb245633a8195281556bb0e68a6ea97d18","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"]},"commit2Childs":{"6a47d642ab24da1a811adce4bda9cc52c520ca13":["449f2318aa7f06ce3bce9031e402201231cb781e"],"fb17639909a369c1e64866842e5c213440acc17e":["954e59be3da8dc1b046646ad7af4b466852009d3"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["7dd748bb245633a8195281556bb0e68a6ea97d18"],"449f2318aa7f06ce3bce9031e402201231cb781e":["05c52ac194342b760b830342ee8423fcf00e54d0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb17639909a369c1e64866842e5c213440acc17e"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7dd748bb245633a8195281556bb0e68a6ea97d18":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"954e59be3da8dc1b046646ad7af4b466852009d3":["6a47d642ab24da1a811adce4bda9cc52c520ca13"],"05c52ac194342b760b830342ee8423fcf00e54d0":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}