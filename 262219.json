{"path":"solr/core/src/java/org/apache/solr/handler/component/PhrasesIdentificationComponent.Phrase#populateStats(List[Phrase],List[NamedList[Object]]).mjava","commits":[{"id":"0d1411e62d30c460b09c6f3643df82daa10a27cc","date":1536256256,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PhrasesIdentificationComponent.Phrase#populateStats(List[Phrase],List[NamedList[Object]]).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Populates the phrases with (merged) stats from a remote shard\n     * @see #formatShardResponse\n     */\n    public static void populateStats(final List<Phrase> phrases, final List<NamedList<Object>> shardData) {\n      final int numPhrases = phrases.size();\n      if (shardData.size() != numPhrases) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                \"num phrases in shard data not consistent: \" +\n                                numPhrases + \" vs \" + shardData.size());\n      }\n      for (int i = 0; i < phrases.size(); i++) {\n        // rather then being paranoid about the expected structure, we'll just let the low level\n        // code throw an NPE / CCE / AIOOBE / etc. and wrap & rethrow later...\n        try {\n          final Phrase p = phrases.get(i);\n          final NamedList<Object> data = shardData.get(i);\n          // sanity check the correct phrase\n          if (! p.getChecksum().equals(data.get(\"checksum\"))) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"phrase #\" + i + \" in shard data had invalid checksum\");\n          }\n          if (p.is_indexed) {\n            for (Map.Entry<String,Long> ttf : (NamedList<Long>) data.get(\"ttf\")) {\n              p.phrase_ttf.merge(ttf.getKey(), ttf.getValue(), Long::sum);\n            }\n            for (Map.Entry<String,Long> df : (NamedList<Long>) data.get(\"df\")) {\n              p.phrase_df.merge(df.getKey(), df.getValue(), Long::sum);\n            }\n          }\n          for (Map.Entry<String,Long> conj_dc : (NamedList<Long>) data.get(\"conj_dc\")) {\n            p.subTerms_conjunctionCounts.merge(conj_dc.getKey(), conj_dc.getValue(), Long::sum);\n          }\n        } catch (RuntimeException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"shard data for phrase#\" + i + \" not consistent\", e);\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PhrasesIdentificationComponent.Phrase#populateStats(List[Phrase],List[NamedList[Object]]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PhrasesIdentificationComponent.Phrase#populateStats(List[Phrase],List[NamedList[Object]]).mjava","sourceNew":"    /**\n     * Populates the phrases with (merged) stats from a remote shard\n     * @see #formatShardResponse\n     */\n    @SuppressWarnings({\"unchecked\"})\n    public static void populateStats(final List<Phrase> phrases, final List<NamedList<Object>> shardData) {\n      final int numPhrases = phrases.size();\n      if (shardData.size() != numPhrases) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                \"num phrases in shard data not consistent: \" +\n                                numPhrases + \" vs \" + shardData.size());\n      }\n      for (int i = 0; i < phrases.size(); i++) {\n        // rather then being paranoid about the expected structure, we'll just let the low level\n        // code throw an NPE / CCE / AIOOBE / etc. and wrap & rethrow later...\n        try {\n          final Phrase p = phrases.get(i);\n          final NamedList<Object> data = shardData.get(i);\n          // sanity check the correct phrase\n          if (! p.getChecksum().equals(data.get(\"checksum\"))) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"phrase #\" + i + \" in shard data had invalid checksum\");\n          }\n          if (p.is_indexed) {\n            for (Map.Entry<String,Long> ttf : (NamedList<Long>) data.get(\"ttf\")) {\n              p.phrase_ttf.merge(ttf.getKey(), ttf.getValue(), Long::sum);\n            }\n            for (Map.Entry<String,Long> df : (NamedList<Long>) data.get(\"df\")) {\n              p.phrase_df.merge(df.getKey(), df.getValue(), Long::sum);\n            }\n          }\n          for (Map.Entry<String,Long> conj_dc : (NamedList<Long>) data.get(\"conj_dc\")) {\n            p.subTerms_conjunctionCounts.merge(conj_dc.getKey(), conj_dc.getValue(), Long::sum);\n          }\n        } catch (RuntimeException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"shard data for phrase#\" + i + \" not consistent\", e);\n        }\n      }\n    }\n\n","sourceOld":"    /**\n     * Populates the phrases with (merged) stats from a remote shard\n     * @see #formatShardResponse\n     */\n    public static void populateStats(final List<Phrase> phrases, final List<NamedList<Object>> shardData) {\n      final int numPhrases = phrases.size();\n      if (shardData.size() != numPhrases) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                \"num phrases in shard data not consistent: \" +\n                                numPhrases + \" vs \" + shardData.size());\n      }\n      for (int i = 0; i < phrases.size(); i++) {\n        // rather then being paranoid about the expected structure, we'll just let the low level\n        // code throw an NPE / CCE / AIOOBE / etc. and wrap & rethrow later...\n        try {\n          final Phrase p = phrases.get(i);\n          final NamedList<Object> data = shardData.get(i);\n          // sanity check the correct phrase\n          if (! p.getChecksum().equals(data.get(\"checksum\"))) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                    \"phrase #\" + i + \" in shard data had invalid checksum\");\n          }\n          if (p.is_indexed) {\n            for (Map.Entry<String,Long> ttf : (NamedList<Long>) data.get(\"ttf\")) {\n              p.phrase_ttf.merge(ttf.getKey(), ttf.getValue(), Long::sum);\n            }\n            for (Map.Entry<String,Long> df : (NamedList<Long>) data.get(\"df\")) {\n              p.phrase_df.merge(df.getKey(), df.getValue(), Long::sum);\n            }\n          }\n          for (Map.Entry<String,Long> conj_dc : (NamedList<Long>) data.get(\"conj_dc\")) {\n            p.subTerms_conjunctionCounts.merge(conj_dc.getKey(), conj_dc.getValue(), Long::sum);\n          }\n        } catch (RuntimeException e) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"shard data for phrase#\" + i + \" not consistent\", e);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["0d1411e62d30c460b09c6f3643df82daa10a27cc"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0d1411e62d30c460b09c6f3643df82daa10a27cc"],"0d1411e62d30c460b09c6f3643df82daa10a27cc":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}