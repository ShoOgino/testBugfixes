{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","commits":[{"id":"22a2e66dfda83847e80095b8693c660742ab3e9c","date":1408628796,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingDocValuesFormat.AssertingNormsConsumer#addNumericField(FieldInfo,Iterable[Number]).mjava","sourceNew":"    @Override\n    public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n      int count = 0;\n      for (Number v : values) {\n        assert v != null;\n        count++;\n      }\n      assert count == maxDoc;\n      AssertingDocValuesFormat.checkIterator(values.iterator(), maxDoc, false);\n      in.addNormsField(field, values);\n    }\n\n","sourceOld":"    @Override\n    public void addNumericField(FieldInfo field, Iterable<Number> values) throws IOException {\n      int count = 0;\n      for (Number v : values) {\n        assert v != null;\n        count++;\n      }\n      assert count == maxDoc;\n      checkIterator(values.iterator(), maxDoc, false);\n      in.addNumericField(field, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":"    @Override\n    public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n      int count = 0;\n      for (Number v : values) {\n        assert v != null;\n        count++;\n      }\n      assert count == maxDoc;\n      TestUtil.checkIterator(values.iterator(), maxDoc, false);\n      in.addNormsField(field, values);\n    }\n\n","sourceOld":"    @Override\n    public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n      int count = 0;\n      for (Number v : values) {\n        assert v != null;\n        count++;\n      }\n      assert count == maxDoc;\n      AssertingDocValuesFormat.checkIterator(values.iterator(), maxDoc, false);\n      in.addNormsField(field, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n      int count = 0;\n      for (Number v : values) {\n        assert v != null;\n        count++;\n      }\n      assert count == maxDoc;\n      TestUtil.checkIterator(values.iterator(), maxDoc, false);\n      in.addNormsField(field, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n      int count = 0;\n      for (Number v : values) {\n        assert v != null;\n        count++;\n      }\n      assert count == maxDoc;\n      TestUtil.checkIterator(values.iterator(), maxDoc, false);\n      in.addNormsField(field, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingNormsFormat.AssertingNormsConsumer#addNormsField(FieldInfo,Iterable[Number]).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void addNormsField(FieldInfo field, Iterable<Number> values) throws IOException {\n      int count = 0;\n      for (Number v : values) {\n        assert v != null;\n        count++;\n      }\n      assert count == maxDoc;\n      TestUtil.checkIterator(values.iterator(), maxDoc, false);\n      in.addNormsField(field, values);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0936055c0eed56be3e4ae5c9db5b0e355390736a","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0936055c0eed56be3e4ae5c9db5b0e355390736a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["22a2e66dfda83847e80095b8693c660742ab3e9c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"22a2e66dfda83847e80095b8693c660742ab3e9c":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}