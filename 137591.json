{"path":"solr/core/src/test/org/apache/solr/util/TestFastOutputStream#doRandomWrites().mjava","commits":[{"id":"fb5e2d9cb6380aa54e123da56915c9be394a0952","date":1345248904,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestFastOutputStream#doRandomWrites().mjava","pathOld":"/dev/null","sourceNew":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(10)+1;\n    for (int i=0; i<iter; i++) {\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n      out.write(arr, off, len);\n      hash = incHash(hash, arr, off, len);\n      written += len;\n\n      int pos = rand.nextInt(arr.length);\n      out.write(arr[pos]);\n      hash = incHash(hash, arr, pos, 1);\n      written += 1;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (byte[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n    assertEquals(written, out.written());\n    assertEquals(written, out.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestFastOutputStream#doRandomWrites().mjava","pathOld":"/dev/null","sourceNew":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(10)+1;\n    for (int i=0; i<iter; i++) {\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n      out.write(arr, off, len);\n      hash = incHash(hash, arr, off, len);\n      written += len;\n\n      int pos = rand.nextInt(arr.length);\n      out.write(arr[pos]);\n      hash = incHash(hash, arr, pos, 1);\n      written += 1;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (byte[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n    assertEquals(written, out.written());\n    assertEquals(written, out.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestFastOutputStream#doRandomWrites().mjava","pathOld":"/dev/null","sourceNew":"  public void doRandomWrites() throws Exception {\n    int bufSize = ( rand.nextBoolean() ? rand.nextInt(10) : rand.nextInt(20000) )+1;\n    MemOutputStream out = new MemOutputStream(new byte[bufSize]);\n\n    int hash = 0;\n    long written = 0;\n    int iter = rand.nextInt(10)+1;\n    for (int i=0; i<iter; i++) {\n      int off = rand.nextInt(arr.length);\n      int len = off < arr.length ? rand.nextInt(arr.length - off) : 0;\n      out.write(arr, off, len);\n      hash = incHash(hash, arr, off, len);\n      written += len;\n\n      int pos = rand.nextInt(arr.length);\n      out.write(arr[pos]);\n      hash = incHash(hash, arr, pos, 1);\n      written += 1;\n    }\n\n    out.close();\n\n    int hash2 = 0;\n    for (byte[] buffer : out.buffers) {\n      hash2 = incHash(hash2, buffer, 0, buffer.length);\n    }\n\n    assertEquals(hash, hash2);\n    assertEquals(written, out.written());\n    assertEquals(written, out.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb5e2d9cb6380aa54e123da56915c9be394a0952":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb5e2d9cb6380aa54e123da56915c9be394a0952"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb5e2d9cb6380aa54e123da56915c9be394a0952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb5e2d9cb6380aa54e123da56915c9be394a0952"]},"commit2Childs":{"fb5e2d9cb6380aa54e123da56915c9be394a0952":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb5e2d9cb6380aa54e123da56915c9be394a0952","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}