{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","commits":[{"id":"610f5499a87a7113d53e5b621b616890f002e9f1","date":1450873010,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"/dev/null","sourceNew":"  private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7392b75d2c2f2aecf31188732a0764fe0dc74ade","date":1489420141,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","sourceNew":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":"  private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","sourceNew":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","sourceNew":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreDescriptor().getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","date":1498031702,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","sourceNew":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.count(new MatchAllDocsQuery());\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","bugFix":["610f5499a87a7113d53e5b621b616890f002e9f1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","sourceNew":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.count(new MatchAllDocsQuery());\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","sourceNew":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.count(new MatchAllDocsQuery());\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.search(new MatchAllDocsQuery(), 1).totalHits;\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveryStrategy#cloudDebugLog(SolrCore,String).mjava","sourceNew":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!log.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.count(new MatchAllDocsQuery());\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        log.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      log.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","sourceOld":"  final private void cloudDebugLog(SolrCore core, String op) {\n    if (!LOG.isDebugEnabled()) {\n      return;\n    }\n    try {\n      RefCounted<SolrIndexSearcher> searchHolder = core.getNewestSearcher(false);\n      SolrIndexSearcher searcher = searchHolder.get();\n      try {\n        final int totalHits = searcher.count(new MatchAllDocsQuery());\n        final String nodeName = core.getCoreContainer().getZkController().getNodeName();\n        LOG.debug(\"[{}] {} [{} total hits]\", nodeName, op, totalHits);\n      } finally {\n        searchHolder.decref();\n      }\n    } catch (Exception e) {\n      LOG.debug(\"Error in solrcloud_debug block\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"610f5499a87a7113d53e5b621b616890f002e9f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["610f5499a87a7113d53e5b621b616890f002e9f1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"28288370235ed02234a64753cdbf0c6ec096304a":["729cb470f975115d4c60517b2cb7c42e37a7a2e1","f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"610f5499a87a7113d53e5b621b616890f002e9f1":["7392b75d2c2f2aecf31188732a0764fe0dc74ade"],"f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["610f5499a87a7113d53e5b621b616890f002e9f1"],"7392b75d2c2f2aecf31188732a0764fe0dc74ade":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["f8f3dce1d4820d9634c1a6a46cd50ac13cf0f5a6","28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}