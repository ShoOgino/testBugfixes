{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory#initHttpClientBuilder(SolrHttpClientBuilder).mjava","commits":[{"id":"9ddd225c382b8919214f3db79af4c842f893b871","date":1486491351,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory#initHttpClientBuilder(SolrHttpClientBuilder).mjava","pathOld":"/dev/null","sourceNew":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n      @Override\n      public CredentialsProvider getCredentialsProvider() {\n        CredentialsProvider credsProvider = new BasicCredentialsProvider();\n        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n        return credsProvider;\n      }\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a77e5e21cbd575a8240b0e3926164f15295f4e8","date":1544979500,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory#setup(Http2SolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/PreemptiveBasicAuthClientBuilderFactory#initHttpClientBuilder(SolrHttpClientBuilder).mjava","sourceNew":"  @Override\n  public void setup(Http2SolrClient client) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    HttpAuthenticationStore authenticationStore = new HttpAuthenticationStore();\n    authenticationStore.addAuthentication(new SolrBasicAuthentication(basicAuthUser, basicAuthPass));\n    client.getHttpClient().setAuthenticationStore(authenticationStore);\n    client.getProtocolHandlers().put(new WWWAuthenticationProtocolHandler(client.getHttpClient()));\n    client.getProtocolHandlers().put(new ProxyAuthenticationProtocolHandler(client.getHttpClient()));\n  }\n\n","sourceOld":"  private SolrHttpClientBuilder initHttpClientBuilder(SolrHttpClientBuilder builder) {\n    final String basicAuthUser = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_USER);\n    final String basicAuthPass = defaultParams.get(HttpClientUtil.PROP_BASIC_AUTH_PASS);\n    if(basicAuthUser == null || basicAuthPass == null) {\n      throw new IllegalArgumentException(\"username & password must be specified with \" + getClass().getName());\n    }\n\n    builder.setDefaultCredentialsProvider(new CredentialsProviderProvider() {\n      @Override\n      public CredentialsProvider getCredentialsProvider() {\n        CredentialsProvider credsProvider = new BasicCredentialsProvider();\n        credsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(basicAuthUser, basicAuthPass));\n        return credsProvider;\n      }\n    });\n\n    HttpClientUtil.addRequestInterceptor(requestInterceptor);\n    return builder;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ddd225c382b8919214f3db79af4c842f893b871":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["9ddd225c382b8919214f3db79af4c842f893b871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"]},"commit2Childs":{"9ddd225c382b8919214f3db79af4c842f893b871":["1a77e5e21cbd575a8240b0e3926164f15295f4e8"],"1a77e5e21cbd575a8240b0e3926164f15295f4e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9ddd225c382b8919214f3db79af4c842f893b871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}