{"path":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTLookupTest#testRequestedCount().mjava","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(\"four\", 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(\"four\", 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(\"one\", 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(lookup.lookup(\"four\", true, 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(lookup.lookup(\"four\", true, 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    lookup = new FSTLookup(10, false);\n    lookup.build(new TermFreqArrayIterator(evalKeys()));\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    assertMatchEquals(lookup.lookup(\"one\", true, 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(lookup.lookup(\"one\", false, 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecc52400551de6a7d8daf646be839487911627c","date":1330076979,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"four\", random), 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"four\", random), 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(\"four\", 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(\"four\", 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(\"one\", 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"four\", random), 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"four\", random), 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(\"four\", 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(\"four\", 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(\"one\", 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(\"one\", 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(stringToCharSequence(\"four\"), 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(stringToCharSequence(\"four\"), 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(stringToCharSequence(\"one\"), 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"four\", random), 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(_TestUtil.stringToCharSequence(\"four\", random), 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(_TestUtil.stringToCharSequence(\"one\", random), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","pathOld":"modules/suggest/src/test/org/apache/lucene/search/suggest/fst/FSTCompletionTest#testRequestedCount().mjava","sourceNew":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(stringToCharSequence(\"four\"), 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(stringToCharSequence(\"four\"), 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(stringToCharSequence(\"one\"), 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","sourceOld":"  public void testRequestedCount() throws Exception {\n    // 'one' is promoted after collecting two higher ranking results.\n    assertMatchEquals(completion.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n\n    // 'four' is collected in a bucket and then again as an exact match. \n    assertMatchEquals(completion.lookup(stringToCharSequence(\"four\"), 2), \n        \"four/0.0\", \n        \"fourblah/1.0\");\n\n    // Check reordering of exact matches. \n    assertMatchEquals(completion.lookup(stringToCharSequence(\"four\"), 4), \n        \"four/0.0\",\n        \"fourblah/1.0\",\n        \"fourteen/1.0\",\n        \"fourier/0.0\");\n\n    // 'one' is at the top after collecting all alphabetical results.\n    assertMatchEquals(completionAlphabetical.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n    \n    // 'one' is not promoted after collecting two higher ranking results.\n    FSTCompletion noPromotion = new FSTCompletion(completion.getFST(), true, false);\n    assertMatchEquals(noPromotion.lookup(stringToCharSequence(\"one\"), 2),  \n        \"oneness/1.0\",\n        \"onerous/1.0\");\n\n    // 'one' is at the top after collecting all alphabetical results. \n    assertMatchEquals(completionAlphabetical.lookup(stringToCharSequence(\"one\"), 2), \n        \"one/0.0\", \n        \"oneness/1.0\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["7bf07f4ebadc7539de83a531e64678350d78ca26","6ecc52400551de6a7d8daf646be839487911627c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6ecc52400551de6a7d8daf646be839487911627c":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6ecc52400551de6a7d8daf646be839487911627c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","6ecc52400551de6a7d8daf646be839487911627c"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"6ecc52400551de6a7d8daf646be839487911627c":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}