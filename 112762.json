{"path":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","commits":[{"id":"4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa","date":1284906916,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FixedGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FixedGapTermsIndexWriter#indexedTermPrefixLength(BytesRef,BytesRef).mjava","sourceNew":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","sourceOld":"  /** NOTE: if your codec does not sort in unicode code\n   *  point order, you must override this method, to simply\n   *  return indexedTerm.length. */\n  protected int indexedTermPrefixLength(final BytesRef priorTerm, final BytesRef indexedTerm) {\n    // As long as codec sorts terms in unicode codepoint\n    // order, we can safely strip off the non-distinguishing\n    // suffix to save RAM in the loaded terms index.\n    final int idxTermOffset = indexedTerm.offset;\n    final int priorTermOffset = priorTerm.offset;\n    final int limit = Math.min(priorTerm.length, indexedTerm.length);\n    for(int byteIdx=0;byteIdx<limit;byteIdx++) {\n      if (priorTerm.bytes[priorTermOffset+byteIdx] != indexedTerm.bytes[idxTermOffset+byteIdx]) {\n        return byteIdx+1;\n      }\n    }\n    return Math.min(1+priorTerm.length, indexedTerm.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a8d4c33bdfde7ddeb97b16c7f634740c191b5fa","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}