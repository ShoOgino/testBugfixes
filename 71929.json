{"path":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","commits":[{"id":"abbfb3ad1f90df8ebf4751c8e72b2756ace50699","date":1190497478,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e35dbbbfe6418ed8fab5fdeb68792e20322bff6","date":1234203883,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and loggin will want to know the path. If it contains a ':' \n    // the handler could use it for RESTfull URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","pathOld":"src/webapp/src/org/apache/solr/servlet/SolrRequestParsers#parse(SolrCore,String,HttpServletRequest).mjava","sourceNew":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","sourceOld":"  public SolrQueryRequest parse( SolrCore core, String path, HttpServletRequest req ) throws Exception\n  {\n    SolrRequestParser parser = standard;\n    \n    // TODO -- in the future, we could pick a different parser based on the request\n    \n    // Pick the parser from the request...\n    ArrayList<ContentStream> streams = new ArrayList<ContentStream>(1);\n    SolrParams params = parser.parseParamsAndFillStreams( req, streams );\n    SolrQueryRequest sreq = buildRequestFrom( core, params, streams );\n\n    // Handlers and login will want to know the path. If it contains a ':'\n    // the handler could use it for RESTful URLs\n    sreq.getContext().put( \"path\", path );\n    return sreq;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"7e35dbbbfe6418ed8fab5fdeb68792e20322bff6":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"ad94625fb8d088209f46650c8097196fec67f00c":["7e35dbbbfe6418ed8fab5fdeb68792e20322bff6"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["abbfb3ad1f90df8ebf4751c8e72b2756ace50699"],"7e35dbbbfe6418ed8fab5fdeb68792e20322bff6":["ad94625fb8d088209f46650c8097196fec67f00c"],"abbfb3ad1f90df8ebf4751c8e72b2756ace50699":["7e35dbbbfe6418ed8fab5fdeb68792e20322bff6"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}