{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Pushes the new term to the top of the stack, and writes new blocks. */\n  private void pushTerm(BytesRef text) throws IOException {\n    int limit = Math.min(lastTerm.length(), text.length);\n\n    // Find common prefix between last term and current term:\n    int pos = 0;\n    while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset+pos]) {\n      pos++;\n    }\n\n    //if (DEBUG) System.out.println(\"  shared=\" + pos + \"  lastTerm.length=\" + lastTerm.length());\n\n    // Close the \"abandoned\" suffix now:\n    for(int i=lastTerm.length()-1;i>=pos;i--) {\n\n      // How many items on top of the stack share the current suffix\n      // we are closing:\n      int prefixTopSize = pending.size() - prefixStarts[i];\n\n      while (prefixTopSize >= minItemsInPrefix) {       \n        //if (DEBUG) System.out.println(\"pushTerm i=\" + i + \" prefixTopSize=\" + prefixTopSize + \" minItemsInBlock=\" + minItemsInPrefix);\n        savePrefixes(i+1, prefixTopSize);\n        //prefixStarts[i] -= prefixTopSize;\n        //System.out.println(\"    after savePrefixes: \" + (pending.size() - prefixStarts[i]) + \" pending.size()=\" + pending.size() + \" start=\" + prefixStarts[i]);\n\n        // For large floor blocks, it's possible we should now re-run on the new prefix terms we just created:\n        prefixTopSize = pending.size() - prefixStarts[i];\n      }\n    }\n\n    if (prefixStarts.length < text.length) {\n      prefixStarts = ArrayUtil.grow(prefixStarts, text.length);\n    }\n\n    // Init new tail:\n    for(int i=pos;i<text.length;i++) {\n      prefixStarts[i] = pending.size();\n    }\n\n    lastTerm.copyBytes(text);\n\n    // Only append the first (optional) empty string, no the fake last one used to close all prefixes:\n    if (text.length > 0 || pending.isEmpty()) {\n      byte[] termBytes = new byte[text.length];\n      System.arraycopy(text.bytes, text.offset, termBytes, 0, text.length);\n      pending.add(termBytes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Pushes the new term to the top of the stack, and writes new blocks. */\n  private void pushTerm(BytesRef text) throws IOException {\n    int limit = Math.min(lastTerm.length(), text.length);\n\n    // Find common prefix between last term and current term:\n    int pos = 0;\n    while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset+pos]) {\n      pos++;\n    }\n\n    //if (DEBUG) System.out.println(\"  shared=\" + pos + \"  lastTerm.length=\" + lastTerm.length());\n\n    // Close the \"abandoned\" suffix now:\n    for(int i=lastTerm.length()-1;i>=pos;i--) {\n\n      // How many items on top of the stack share the current suffix\n      // we are closing:\n      int prefixTopSize = pending.size() - prefixStarts[i];\n\n      while (prefixTopSize >= minItemsInPrefix) {       \n        //if (DEBUG) System.out.println(\"pushTerm i=\" + i + \" prefixTopSize=\" + prefixTopSize + \" minItemsInBlock=\" + minItemsInPrefix);\n        savePrefixes(i+1, prefixTopSize);\n        //prefixStarts[i] -= prefixTopSize;\n        //System.out.println(\"    after savePrefixes: \" + (pending.size() - prefixStarts[i]) + \" pending.size()=\" + pending.size() + \" start=\" + prefixStarts[i]);\n\n        // For large floor blocks, it's possible we should now re-run on the new prefix terms we just created:\n        prefixTopSize = pending.size() - prefixStarts[i];\n      }\n    }\n\n    if (prefixStarts.length < text.length) {\n      prefixStarts = ArrayUtil.grow(prefixStarts, text.length);\n    }\n\n    // Init new tail:\n    for(int i=pos;i<text.length;i++) {\n      prefixStarts[i] = pending.size();\n    }\n\n    lastTerm.copyBytes(text);\n\n    // Only append the first (optional) empty string, no the fake last one used to close all prefixes:\n    if (text.length > 0 || pending.isEmpty()) {\n      byte[] termBytes = new byte[text.length];\n      System.arraycopy(text.bytes, text.offset, termBytes, 0, text.length);\n      pending.add(termBytes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86c653526aa49b33e8d542315fb4de5846893e98","date":1428878595,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","sourceNew":"  /** Pushes the new term to the top of the stack, and writes new blocks. */\n  private void pushTerm(BytesRef text) throws IOException {\n    int limit = Math.min(lastTerm.length(), text.length);\n    //if (DEBUG) System.out.println(\"\\nterm: \" + text.utf8ToString());\n\n    // Find common prefix between last term and current term:\n    int pos = 0;\n    while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset+pos]) {\n      pos++;\n    }\n\n    //if (DEBUG) System.out.println(\"  shared=\" + pos + \"  lastTerm.length=\" + lastTerm.length());\n\n    // Close the \"abandoned\" suffix now:\n    for(int i=lastTerm.length()-1;i>=pos;i--) {\n\n      // How many items on top of the stack share the current suffix\n      // we are closing:\n      int prefixTopSize = pending.size() - prefixStarts[i];\n\n      while (prefixTopSize >= minItemsInPrefix) {       \n        //if (DEBUG) System.out.println(\"  pop: i=\" + i + \" prefixTopSize=\" + prefixTopSize + \" minItemsInBlock=\" + minItemsInPrefix);\n        savePrefixes(i+1, prefixTopSize);\n        //prefixStarts[i] -= prefixTopSize;\n        //if (DEBUG) System.out.println(\"    after savePrefixes: \" + (pending.size() - prefixStarts[i]) + \" pending.size()=\" + pending.size() + \" start=\" + prefixStarts[i]);\n\n        // For large floor blocks, it's possible we should now re-run on the new prefix terms we just created:\n        prefixTopSize = pending.size() - prefixStarts[i];\n      }\n    }\n\n    if (prefixStarts.length < text.length) {\n      prefixStarts = ArrayUtil.grow(prefixStarts, text.length);\n    }\n\n    // Init new tail:\n    for(int i=pos;i<text.length;i++) {\n      prefixStarts[i] = pending.size();\n    }\n\n    lastTerm.copyBytes(text);\n\n    // Only append the first (optional) empty string, no the fake last one used to close all prefixes:\n    if (text.length > 0 || pending.isEmpty()) {\n      byte[] termBytes = new byte[text.length];\n      System.arraycopy(text.bytes, text.offset, termBytes, 0, text.length);\n      pending.add(termBytes);\n    }\n  }\n\n","sourceOld":"  /** Pushes the new term to the top of the stack, and writes new blocks. */\n  private void pushTerm(BytesRef text) throws IOException {\n    int limit = Math.min(lastTerm.length(), text.length);\n\n    // Find common prefix between last term and current term:\n    int pos = 0;\n    while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset+pos]) {\n      pos++;\n    }\n\n    //if (DEBUG) System.out.println(\"  shared=\" + pos + \"  lastTerm.length=\" + lastTerm.length());\n\n    // Close the \"abandoned\" suffix now:\n    for(int i=lastTerm.length()-1;i>=pos;i--) {\n\n      // How many items on top of the stack share the current suffix\n      // we are closing:\n      int prefixTopSize = pending.size() - prefixStarts[i];\n\n      while (prefixTopSize >= minItemsInPrefix) {       \n        //if (DEBUG) System.out.println(\"pushTerm i=\" + i + \" prefixTopSize=\" + prefixTopSize + \" minItemsInBlock=\" + minItemsInPrefix);\n        savePrefixes(i+1, prefixTopSize);\n        //prefixStarts[i] -= prefixTopSize;\n        //System.out.println(\"    after savePrefixes: \" + (pending.size() - prefixStarts[i]) + \" pending.size()=\" + pending.size() + \" start=\" + prefixStarts[i]);\n\n        // For large floor blocks, it's possible we should now re-run on the new prefix terms we just created:\n        prefixTopSize = pending.size() - prefixStarts[i];\n      }\n    }\n\n    if (prefixStarts.length < text.length) {\n      prefixStarts = ArrayUtil.grow(prefixStarts, text.length);\n    }\n\n    // Init new tail:\n    for(int i=pos;i<text.length;i++) {\n      prefixStarts[i] = pending.size();\n    }\n\n    lastTerm.copyBytes(text);\n\n    // Only append the first (optional) empty string, no the fake last one used to close all prefixes:\n    if (text.length > 0 || pending.isEmpty()) {\n      byte[] termBytes = new byte[text.length];\n      System.arraycopy(text.bytes, text.offset, termBytes, 0, text.length);\n      pending.add(termBytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","date":1466407389,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Pushes the new term to the top of the stack, and writes new blocks. */\n  private void pushTerm(BytesRef text) throws IOException {\n    int limit = Math.min(lastTerm.length(), text.length);\n    //if (DEBUG) System.out.println(\"\\nterm: \" + text.utf8ToString());\n\n    // Find common prefix between last term and current term:\n    int pos = 0;\n    while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset+pos]) {\n      pos++;\n    }\n\n    //if (DEBUG) System.out.println(\"  shared=\" + pos + \"  lastTerm.length=\" + lastTerm.length());\n\n    // Close the \"abandoned\" suffix now:\n    for(int i=lastTerm.length()-1;i>=pos;i--) {\n\n      // How many items on top of the stack share the current suffix\n      // we are closing:\n      int prefixTopSize = pending.size() - prefixStarts[i];\n\n      while (prefixTopSize >= minItemsInPrefix) {       \n        //if (DEBUG) System.out.println(\"  pop: i=\" + i + \" prefixTopSize=\" + prefixTopSize + \" minItemsInBlock=\" + minItemsInPrefix);\n        savePrefixes(i+1, prefixTopSize);\n        //prefixStarts[i] -= prefixTopSize;\n        //if (DEBUG) System.out.println(\"    after savePrefixes: \" + (pending.size() - prefixStarts[i]) + \" pending.size()=\" + pending.size() + \" start=\" + prefixStarts[i]);\n\n        // For large floor blocks, it's possible we should now re-run on the new prefix terms we just created:\n        prefixTopSize = pending.size() - prefixStarts[i];\n      }\n    }\n\n    if (prefixStarts.length < text.length) {\n      prefixStarts = ArrayUtil.grow(prefixStarts, text.length);\n    }\n\n    // Init new tail:\n    for(int i=pos;i<text.length;i++) {\n      prefixStarts[i] = pending.size();\n    }\n\n    lastTerm.copyBytes(text);\n\n    // Only append the first (optional) empty string, no the fake last one used to close all prefixes:\n    if (text.length > 0 || pending.isEmpty()) {\n      byte[] termBytes = new byte[text.length];\n      System.arraycopy(text.bytes, text.offset, termBytes, 0, text.length);\n      pending.add(termBytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6aaba221b22442bdf0ef28770c25fe259dfb3f55","date":1466496193,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Pushes the new term to the top of the stack, and writes new blocks. */\n  private void pushTerm(BytesRef text) throws IOException {\n    int limit = Math.min(lastTerm.length(), text.length);\n    //if (DEBUG) System.out.println(\"\\nterm: \" + text.utf8ToString());\n\n    // Find common prefix between last term and current term:\n    int pos = 0;\n    while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset+pos]) {\n      pos++;\n    }\n\n    //if (DEBUG) System.out.println(\"  shared=\" + pos + \"  lastTerm.length=\" + lastTerm.length());\n\n    // Close the \"abandoned\" suffix now:\n    for(int i=lastTerm.length()-1;i>=pos;i--) {\n\n      // How many items on top of the stack share the current suffix\n      // we are closing:\n      int prefixTopSize = pending.size() - prefixStarts[i];\n\n      while (prefixTopSize >= minItemsInPrefix) {       \n        //if (DEBUG) System.out.println(\"  pop: i=\" + i + \" prefixTopSize=\" + prefixTopSize + \" minItemsInBlock=\" + minItemsInPrefix);\n        savePrefixes(i+1, prefixTopSize);\n        //prefixStarts[i] -= prefixTopSize;\n        //if (DEBUG) System.out.println(\"    after savePrefixes: \" + (pending.size() - prefixStarts[i]) + \" pending.size()=\" + pending.size() + \" start=\" + prefixStarts[i]);\n\n        // For large floor blocks, it's possible we should now re-run on the new prefix terms we just created:\n        prefixTopSize = pending.size() - prefixStarts[i];\n      }\n    }\n\n    if (prefixStarts.length < text.length) {\n      prefixStarts = ArrayUtil.grow(prefixStarts, text.length);\n    }\n\n    // Init new tail:\n    for(int i=pos;i<text.length;i++) {\n      prefixStarts[i] = pending.size();\n    }\n\n    lastTerm.copyBytes(text);\n\n    // Only append the first (optional) empty string, no the fake last one used to close all prefixes:\n    if (text.length > 0 || pending.isEmpty()) {\n      byte[] termBytes = new byte[text.length];\n      System.arraycopy(text.bytes, text.offset, termBytes, 0, text.length);\n      pending.add(termBytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/AutoPrefixTermsWriter#pushTerm(BytesRef).mjava","sourceNew":null,"sourceOld":"  /** Pushes the new term to the top of the stack, and writes new blocks. */\n  private void pushTerm(BytesRef text) throws IOException {\n    int limit = Math.min(lastTerm.length(), text.length);\n    //if (DEBUG) System.out.println(\"\\nterm: \" + text.utf8ToString());\n\n    // Find common prefix between last term and current term:\n    int pos = 0;\n    while (pos < limit && lastTerm.byteAt(pos) == text.bytes[text.offset+pos]) {\n      pos++;\n    }\n\n    //if (DEBUG) System.out.println(\"  shared=\" + pos + \"  lastTerm.length=\" + lastTerm.length());\n\n    // Close the \"abandoned\" suffix now:\n    for(int i=lastTerm.length()-1;i>=pos;i--) {\n\n      // How many items on top of the stack share the current suffix\n      // we are closing:\n      int prefixTopSize = pending.size() - prefixStarts[i];\n\n      while (prefixTopSize >= minItemsInPrefix) {       \n        //if (DEBUG) System.out.println(\"  pop: i=\" + i + \" prefixTopSize=\" + prefixTopSize + \" minItemsInBlock=\" + minItemsInPrefix);\n        savePrefixes(i+1, prefixTopSize);\n        //prefixStarts[i] -= prefixTopSize;\n        //if (DEBUG) System.out.println(\"    after savePrefixes: \" + (pending.size() - prefixStarts[i]) + \" pending.size()=\" + pending.size() + \" start=\" + prefixStarts[i]);\n\n        // For large floor blocks, it's possible we should now re-run on the new prefix terms we just created:\n        prefixTopSize = pending.size() - prefixStarts[i];\n      }\n    }\n\n    if (prefixStarts.length < text.length) {\n      prefixStarts = ArrayUtil.grow(prefixStarts, text.length);\n    }\n\n    // Init new tail:\n    for(int i=pos;i<text.length;i++) {\n      prefixStarts[i] = pending.size();\n    }\n\n    lastTerm.copyBytes(text);\n\n    // Only append the first (optional) empty string, no the fake last one used to close all prefixes:\n    if (text.length > 0 || pending.isEmpty()) {\n      byte[] termBytes = new byte[text.length];\n      System.arraycopy(text.bytes, text.offset, termBytes, 0, text.length);\n      pending.add(termBytes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86c653526aa49b33e8d542315fb4de5846893e98":["3e8715d826e588419327562287d5d6a8040d63d6"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["86c653526aa49b33e8d542315fb4de5846893e98","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["86c653526aa49b33e8d542315fb4de5846893e98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["86c653526aa49b33e8d542315fb4de5846893e98","6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"]},"commit2Childs":{"86c653526aa49b33e8d542315fb4de5846893e98":["6aaba221b22442bdf0ef28770c25fe259dfb3f55","25b8a027ba57951e63075a2ae9647c5c4a8c5c5f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6aaba221b22442bdf0ef28770c25fe259dfb3f55":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"25b8a027ba57951e63075a2ae9647c5c4a8c5c5f":["6aaba221b22442bdf0ef28770c25fe259dfb3f55"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"3e8715d826e588419327562287d5d6a8040d63d6":["86c653526aa49b33e8d542315fb4de5846893e98","d2638f781be724518ff6c2263d14a48cf6e68017"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}