{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","commits":[{"id":"ebb71e9cf26b3ed37798b1d399b589a59ce33c37","date":1328527413,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","pathOld":"/dev/null","sourceNew":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = getSolrCore0();\n    \n    Assert.assertEquals(2, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["abad9f9da3e1a25fe52dd31439ed7d11af1440a5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"abad9f9da3e1a25fe52dd31439ed7d11af1440a5","date":1330117371,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","sourceNew":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n    \n  }\n\n","sourceOld":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = getSolrCore0();\n    \n    Assert.assertEquals(2, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n    \n  }\n\n","bugFix":["ebb71e9cf26b3ed37798b1d399b589a59ce33c37"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","sourceNew":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n    \n  }\n\n","sourceOld":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = getSolrCore0();\n    \n    Assert.assertEquals(2, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82484aea958a2f87f01285b102e83b1b89b6b6ad","date":1332516764,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","sourceNew":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = (EmbeddedSolrServer)getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n  }\n\n","sourceOld":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","sourceNew":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = (EmbeddedSolrServer)getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n  }\n\n","sourceOld":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = (EmbeddedSolrServer)getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<SolrCore>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testClose().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer#testShutdown().mjava","sourceNew":"  public void testClose() throws IOException {\n    \n    EmbeddedSolrServer solrServer = (EmbeddedSolrServer) getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.close();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n  }\n\n","sourceOld":"  public void testShutdown() {\n    \n    EmbeddedSolrServer solrServer = (EmbeddedSolrServer)getSolrCore0();\n    \n    Assert.assertEquals(3, cores.getCores().size());\n    List<SolrCore> solrCores = new ArrayList<>();\n    for (SolrCore solrCore : cores.getCores()) {\n      Assert.assertEquals(false, solrCore.isClosed());\n      solrCores.add(solrCore);\n    }\n    \n    solrServer.shutdown();\n    \n    Assert.assertEquals(0, cores.getCores().size());\n    \n    for (SolrCore solrCore : solrCores) {\n      Assert.assertEquals(true, solrCore.isClosed());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["82484aea958a2f87f01285b102e83b1b89b6b6ad"],"abad9f9da3e1a25fe52dd31439ed7d11af1440a5":["ebb71e9cf26b3ed37798b1d399b589a59ce33c37"],"82484aea958a2f87f01285b102e83b1b89b6b6ad":["abad9f9da3e1a25fe52dd31439ed7d11af1440a5"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["ebb71e9cf26b3ed37798b1d399b589a59ce33c37","abad9f9da3e1a25fe52dd31439ed7d11af1440a5"],"ebb71e9cf26b3ed37798b1d399b589a59ce33c37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc3b13b430571c2e169f98fe38e1e7666f88522d"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"abad9f9da3e1a25fe52dd31439ed7d11af1440a5":["82484aea958a2f87f01285b102e83b1b89b6b6ad","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"82484aea958a2f87f01285b102e83b1b89b6b6ad":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"ebb71e9cf26b3ed37798b1d399b589a59ce33c37":["abad9f9da3e1a25fe52dd31439ed7d11af1440a5","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ebb71e9cf26b3ed37798b1d399b589a59ce33c37"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}