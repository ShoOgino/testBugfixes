{"path":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c70cdb81dc660d90f9d0664dd91b473b7e66563","date":1341679310,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2acf500f78aa12b92e371fd89c719291986b6b90","date":1341846236,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"46d8ada1fff8d18cb197c38c7983225162599948","date":1341853497,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n\n      String s = new String(buffer, 0, size);\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2514163c3f8c1a68f291deb0c54e2b6142a93b2a","date":1375242961,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File tempDir = _TestUtil.getTempDir(\"growingchararray\");\n    File f = new File(tempDir, \"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File tempDir = _TestUtil.getTempDir(\"growingchararray\");\n    File f = new File(tempDir, \"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File f = new File(\"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cad50ed6659649a0edef71b8cf56280b0bdadd7","date":1385496862,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File tempDir = _TestUtil.getTempDir(\"growingchararray\");\n    File f = new File(tempDir, \"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File tempDir = _TestUtil.getTempDir(\"growingchararray\");\n    File f = new File(tempDir, \"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/TestCharBlockArray#testArray().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/writercache/cl2o/TestCharBlockArray#testArray().mjava","sourceNew":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File tempDir = _TestUtil.getTempDir(\"growingchararray\");\n    File f = new File(tempDir, \"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","sourceOld":"  @Test public void testArray() throws Exception {\n    CharBlockArray array = new CharBlockArray();\n    StringBuilder builder = new StringBuilder();\n\n    final int n = 100 * 1000;\n\n    byte[] buffer = new byte[50];\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append(s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      array.append((CharSequence)s);\n      builder.append(s);\n    }\n\n    for (int i = 0; i < n; i++) {\n      random().nextBytes(buffer);\n      int size = 1 + random().nextInt(50);\n      // This test is turning random bytes into a string,\n      // this is asking for trouble.\n      CharsetDecoder decoder = IOUtils.CHARSET_UTF_8.newDecoder()\n          .onUnmappableCharacter(CodingErrorAction.REPLACE)\n          .onMalformedInput(CodingErrorAction.REPLACE);\n      String s = decoder.decode(ByteBuffer.wrap(buffer, 0, size)).toString();\n      for (int j = 0; j < s.length(); j++) {\n        array.append(s.charAt(j));\n      }\n      builder.append(s);\n    }\n\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch.\", builder, array);\n\n    File tempDir = _TestUtil.getTempDir(\"growingchararray\");\n    File f = new File(tempDir, \"GrowingCharArrayTest.tmp\");\n    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(f));\n    array.flush(out);\n    out.flush();\n    out.close();\n\n    BufferedInputStream in = new BufferedInputStream(new FileInputStream(f));\n    array = CharBlockArray.open(in);\n    assertEqualsInternal(\"GrowingCharArray<->StringBuilder mismatch after flush/load.\", builder, array);\n    in.close();\n    f.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"2514163c3f8c1a68f291deb0c54e2b6142a93b2a":["2acf500f78aa12b92e371fd89c719291986b6b90"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["2514163c3f8c1a68f291deb0c54e2b6142a93b2a"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2acf500f78aa12b92e371fd89c719291986b6b90"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["2514163c3f8c1a68f291deb0c54e2b6142a93b2a","5cad50ed6659649a0edef71b8cf56280b0bdadd7"],"2acf500f78aa12b92e371fd89c719291986b6b90":["b89678825b68eccaf09e6ab71675fc0b0af1e099","9c70cdb81dc660d90f9d0664dd91b473b7e66563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"46d8ada1fff8d18cb197c38c7983225162599948":["b89678825b68eccaf09e6ab71675fc0b0af1e099","2acf500f78aa12b92e371fd89c719291986b6b90"]},"commit2Childs":{"2514163c3f8c1a68f291deb0c54e2b6142a93b2a":["5cad50ed6659649a0edef71b8cf56280b0bdadd7","3cc728b07df73b197e6d940d27f9b08b63918f13"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["fe33227f6805edab2036cbb80645cc4e2d1fa424","2acf500f78aa12b92e371fd89c719291986b6b90","9c70cdb81dc660d90f9d0664dd91b473b7e66563","46d8ada1fff8d18cb197c38c7983225162599948"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5cad50ed6659649a0edef71b8cf56280b0bdadd7":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2acf500f78aa12b92e371fd89c719291986b6b90":["2514163c3f8c1a68f291deb0c54e2b6142a93b2a","fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","46d8ada1fff8d18cb197c38c7983225162599948"],"9c70cdb81dc660d90f9d0664dd91b473b7e66563":["2acf500f78aa12b92e371fd89c719291986b6b90"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"46d8ada1fff8d18cb197c38c7983225162599948":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","46d8ada1fff8d18cb197c38c7983225162599948"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}