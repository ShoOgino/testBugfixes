{"path":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","sourceNew":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        if (e.getCause() instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(e.getCause());\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","sourceOld":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        if (e.getCause() instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(e.getCause());\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/ParallelMultiSearcher#[T]_foreach(Function[T],List[Future[T]]).mjava","sourceNew":null,"sourceOld":"  /*\n   * apply the function to each element of the list. This method encapsulates the logic how \n   * to wait for concurrently executed searchables.  \n   */\n  private <T> void foreach(Function<T> func, List<Future<T>> list) throws IOException{\n    for (Future<T> future : list) {\n      try{\n        func.apply(future.get());\n      } catch (ExecutionException e) {\n        if (e.getCause() instanceof IOException)\n          throw (IOException) e.getCause();\n        throw new RuntimeException(e.getCause());\n      } catch (InterruptedException ie) {\n        throw new ThreadInterruptedException(ie);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}