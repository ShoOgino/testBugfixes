{"path":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":null,"sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"/dev/null","sourceNew":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f860e70f9624e5f04c00b71bd4c42b57ba482e2d","date":1299690771,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6aedf81f068e430dec27d94310415cc6ff52731c","date":1301070261,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      writeDoc(name, (Document)val, returnFields, 0.0f, false);\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, null);\n    } else if (val instanceof DocList) {\n      // requires access to IndexReader\n      writeDocList(name, (DocList)val, returnFields,null);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields, null);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","pathOld":"solr/src/java/org/apache/solr/response/TextResponseWriter#writeVal(String,Object).mjava","sourceNew":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","sourceOld":"  public final void writeVal(String name, Object val) throws IOException {\n\n    // if there get to be enough types, perhaps hashing on the type\n    // to get a handler might be faster (but types must be exact to do that...)\n\n    // go in order of most common to least common\n    if (val==null) {\n      writeNull(name);\n    } else if (val instanceof String) {\n      writeStr(name, val.toString(), true);\n      // micro-optimization... using toString() avoids a cast first\n    } else if (val instanceof Fieldable) {\n      Fieldable f = (Fieldable)val;\n      SchemaField sf = schema.getFieldOrNull( f.name() );\n      if( sf != null ) {\n        sf.getType().write(this, name, f);\n      }\n      else {\n        writeStr(name, f.stringValue(), true);\n      }\n    } else if (val instanceof Integer) {\n      writeInt(name, val.toString());\n    } else if (val instanceof Boolean) {\n      writeBool(name, val.toString());\n    } else if (val instanceof Long) {\n      writeLong(name, val.toString());\n    } else if (val instanceof Date) {\n      writeDate(name,(Date)val);\n    } else if (val instanceof Float) {\n      // we pass the float instead of using toString() because\n      // it may need special formatting. same for double.\n      writeFloat(name, ((Float)val).floatValue());\n    } else if (val instanceof Double) {\n      writeDouble(name, ((Double)val).doubleValue());\n    } else if (val instanceof Document) {\n      SolrDocument doc = toSolrDocument( (Document)val );\n      writeSolrDocument(name, doc, returnFields, 0 );\n    } else if (val instanceof SolrDocument) {\n      writeSolrDocument(name, (SolrDocument)val, returnFields, 0);\n    } else if (val instanceof ResultContext) {\n      // requires access to IndexReader\n      writeDocuments(name, (ResultContext)val, returnFields);\n    } else if (val instanceof DocList) {\n      // Should not happen normally\n      ResultContext ctx = new ResultContext();\n      ctx.docs = (DocList)val;\n      writeDocuments(name, ctx, returnFields);\n    // }\n    // else if (val instanceof DocSet) {\n    // how do we know what fields to read?\n    // todo: have a DocList/DocSet wrapper that\n    // restricts the fields to write...?\n    } else if (val instanceof SolrDocumentList) {\n      writeSolrDocumentList(name, (SolrDocumentList)val, returnFields);\n    } else if (val instanceof Map) {\n      writeMap(name, (Map)val, false, true);\n    } else if (val instanceof NamedList) {\n      writeNamedList(name, (NamedList)val);\n    } else if (val instanceof Iterable) {\n      writeArray(name,((Iterable)val).iterator());\n    } else if (val instanceof Object[]) {\n      writeArray(name,(Object[])val);\n    } else if (val instanceof Iterator) {\n      writeArray(name,(Iterator)val);\n    } else {\n      // default... for debugging only\n      writeStr(name, val.getClass().getName() + ':' + val.toString(), true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f860e70f9624e5f04c00b71bd4c42b57ba482e2d":["1da8d55113b689b06716246649de6f62430f15c0"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["6aedf81f068e430dec27d94310415cc6ff52731c","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["1da8d55113b689b06716246649de6f62430f15c0","6aedf81f068e430dec27d94310415cc6ff52731c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["6aedf81f068e430dec27d94310415cc6ff52731c"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["1da8d55113b689b06716246649de6f62430f15c0","6aedf81f068e430dec27d94310415cc6ff52731c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["6aedf81f068e430dec27d94310415cc6ff52731c"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"6aedf81f068e430dec27d94310415cc6ff52731c":["f860e70f9624e5f04c00b71bd4c42b57ba482e2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"f860e70f9624e5f04c00b71bd4c42b57ba482e2d":["6aedf81f068e430dec27d94310415cc6ff52731c"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"1da8d55113b689b06716246649de6f62430f15c0":["f860e70f9624e5f04c00b71bd4c42b57ba482e2d","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"6aedf81f068e430dec27d94310415cc6ff52731c":["c26f00b574427b55127e869b935845554afde1fa","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}