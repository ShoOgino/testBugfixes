{"path":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#toDot().mjava","commits":[{"id":"06a4493f0c732d2928d1a4f773f15d19434aa8ba","date":1405856163,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#toDot().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n\n    // TODO: refactor & share with Automaton.toDot!\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = det.getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (det.isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = det.initTransition(state, t);\n      for(int i=0;i<numTransitions;i++) {\n        det.getNextTransition(t);\n        assert t.max >= t.min;\n        for(int j=t.min;j<=t.max;j++) {\n          b.append(\"  \");\n          b.append(state);\n          b.append(\" -> \");\n          b.append(t.dest);\n          b.append(\" [label=\\\"\");\n          if (j == anyTermID) {\n            b.append('*');\n          } else {\n            b.append(idToTerm.get(j).utf8ToString());\n          }\n          b.append(\"\\\"]\\n\");\n        }\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#toDot().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/TermAutomatonQuery#toDot().mjava","sourceNew":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n\n    // TODO: refactor & share with Automaton.toDot!\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = det.getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (det.isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\").append(state).append(\"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\").append(state).append(\"\\\"]\\n\");\n      }\n      int numTransitions = det.initTransition(state, t);\n      for(int i=0;i<numTransitions;i++) {\n        det.getNextTransition(t);\n        assert t.max >= t.min;\n        for(int j=t.min;j<=t.max;j++) {\n          b.append(\"  \");\n          b.append(state);\n          b.append(\" -> \");\n          b.append(t.dest);\n          b.append(\" [label=\\\"\");\n          if (j == anyTermID) {\n            b.append('*');\n          } else {\n            b.append(idToTerm.get(j).utf8ToString());\n          }\n          b.append(\"\\\"]\\n\");\n        }\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","sourceOld":"  /** Returns the dot (graphviz) representation of this automaton.\n   *  This is extremely useful for visualizing the automaton. */\n  public String toDot() {\n\n    // TODO: refactor & share with Automaton.toDot!\n\n    StringBuilder b = new StringBuilder();\n    b.append(\"digraph Automaton {\\n\");\n    b.append(\"  rankdir = LR\\n\");\n    final int numStates = det.getNumStates();\n    if (numStates > 0) {\n      b.append(\"  initial [shape=plaintext,label=\\\"0\\\"]\\n\");\n      b.append(\"  initial -> 0\\n\");\n    }\n\n    Transition t = new Transition();\n    for(int state=0;state<numStates;state++) {\n      b.append(\"  \");\n      b.append(state);\n      if (det.isAccept(state)) {\n        b.append(\" [shape=doublecircle,label=\\\"\" + state + \"\\\"]\\n\");\n      } else {\n        b.append(\" [shape=circle,label=\\\"\" + state + \"\\\"]\\n\");\n      }\n      int numTransitions = det.initTransition(state, t);\n      for(int i=0;i<numTransitions;i++) {\n        det.getNextTransition(t);\n        assert t.max >= t.min;\n        for(int j=t.min;j<=t.max;j++) {\n          b.append(\"  \");\n          b.append(state);\n          b.append(\" -> \");\n          b.append(t.dest);\n          b.append(\" [label=\\\"\");\n          if (j == anyTermID) {\n            b.append('*');\n          } else {\n            b.append(idToTerm.get(j).utf8ToString());\n          }\n          b.append(\"\\\"]\\n\");\n        }\n      }\n    }\n    b.append('}');\n    return b.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2ffe681f212e5073c69955b4ad22946794c84940":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["06a4493f0c732d2928d1a4f773f15d19434aa8ba"],"06a4493f0c732d2928d1a4f773f15d19434aa8ba":["2ffe681f212e5073c69955b4ad22946794c84940"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}