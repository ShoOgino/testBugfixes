{"path":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/values/PackedIntValues.PackedIntsWriter#writePackedInts(IndexOutput,int).mjava","sourceNew":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","sourceOld":"    private void writePackedInts(IndexOutput datOut, int docCount) throws IOException {\n      datOut.writeLong(minValue);\n      \n      // write a default value to recognize docs without a value for that\n      // field\n      final long defaultValue = maxValue >= 0 && minValue <= 0 ? 0 - minValue\n          : ++maxValue - minValue;\n      datOut.writeLong(defaultValue);\n      PackedInts.Writer w = PackedInts.getWriter(datOut, docCount,\n          PackedInts.bitsRequired(maxValue - minValue));\n      for (int i = 0; i < lastDocID + 1; i++) {\n        set(bytesRef, i);\n        byte[] bytes = bytesRef.bytes;\n        int offset = bytesRef.offset;\n        long asLong =  \n           (((long)(bytes[offset+0] & 0xff) << 56) |\n            ((long)(bytes[offset+1] & 0xff) << 48) |\n            ((long)(bytes[offset+2] & 0xff) << 40) |\n            ((long)(bytes[offset+3] & 0xff) << 32) |\n            ((long)(bytes[offset+4] & 0xff) << 24) |\n            ((long)(bytes[offset+5] & 0xff) << 16) |\n            ((long)(bytes[offset+6] & 0xff) <<  8) |\n            ((long)(bytes[offset+7] & 0xff)));\n        w.add(asLong == 0 ? defaultValue : asLong - minValue);\n      }\n      for (int i = lastDocID + 1; i < docCount; i++) {\n        w.add(defaultValue);\n      }\n      w.finish();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}