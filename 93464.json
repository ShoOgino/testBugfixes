{"path":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String).mjava","commits":[{"id":"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b","date":1438774486,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.put(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.put(\"solr.tests.mergePolicy\", \"org.apache.lucene.index.TieredMergePolicy\");\n    collectionProperties.put(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.put(\"solr.directoryFactory\", \"solr.RAMDirectoryFactory\");\n    \n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, createNodeSet, asyncId, collectionProperties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7","date":1445955220,"type":5,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestMiniSolrCloudCluster#createCollection(MiniSolrCloudCluster,String,String,String).mjava","sourceNew":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId, boolean persistIndex) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.put(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.put(\"solr.tests.mergePolicy\", \"org.apache.lucene.index.TieredMergePolicy\");\n    collectionProperties.put(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.put(\"solr.directoryFactory\", (persistIndex ? \"solr.StandardDirectoryFactory\" : \"solr.RAMDirectoryFactory\"));\n    \n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, createNodeSet, asyncId, collectionProperties);\n  }\n\n","sourceOld":"  private void createCollection(MiniSolrCloudCluster miniCluster, String collectionName, String createNodeSet, String asyncId) throws Exception {\n    String configName = \"solrCloudCollectionConfig\";\n    File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n    miniCluster.uploadConfigDir(configDir, configName);\n\n    Map<String, String> collectionProperties = new HashMap<>();\n    collectionProperties.put(CoreDescriptor.CORE_CONFIG, \"solrconfig-tlog.xml\");\n    collectionProperties.put(\"solr.tests.maxBufferedDocs\", \"100000\");\n    collectionProperties.put(\"solr.tests.ramBufferSizeMB\", \"100\");\n    // use non-test classes so RandomizedRunner isn't necessary\n    collectionProperties.put(\"solr.tests.mergePolicy\", \"org.apache.lucene.index.TieredMergePolicy\");\n    collectionProperties.put(\"solr.tests.mergeScheduler\", \"org.apache.lucene.index.ConcurrentMergeScheduler\");\n    collectionProperties.put(\"solr.directoryFactory\", \"solr.RAMDirectoryFactory\");\n    \n    miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, createNodeSet, asyncId, collectionProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"]},"commit2Childs":{"2c0d0643efdcc41b0c814bf27a381e4dc2ff472b":["57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c0d0643efdcc41b0c814bf27a381e4dc2ff472b"],"57131fa4ce09b8042f56ebbbd65dfe28c51d2ad7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}