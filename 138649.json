{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Properties]).mjava","commits":[{"id":"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","date":1335805170,"type":0,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Properties]).mjava","pathOld":"/dev/null","sourceNew":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Properties> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5101aff20e65c9a285c274627ec956eb5409d253","date":1344005120,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Properties]).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Properties> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Map[String,String]]).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Properties]).mjava","sourceNew":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Map<String,String>> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Properties> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/config/DIHConfiguration#DIHConfiguration(Element,DataImporter,List[Map[String,String]],Script,Map[String,Properties]).mjava","sourceNew":null,"sourceOld":"  public DIHConfiguration(Element element, DataImporter di, List<Map<String, String>> functions, Script script, Map<String, Properties> dataSources) {\n    this.deleteQuery = ConfigParseUtil.getStringAttribute(element, \"deleteQuery\", null);\n    this.onImportStart = ConfigParseUtil.getStringAttribute(element, \"onImportStart\", null);\n    this.onImportEnd = ConfigParseUtil.getStringAttribute(element, \"onImportEnd\", null);\n    List<Entity> modEntities = new ArrayList<Entity>();\n    List<Element> l = ConfigParseUtil.getChildNodes(element, \"entity\");\n    boolean docRootFound = false;\n    for (Element e : l) {\n      Entity entity = new Entity(docRootFound, e, di, null);\n      Map<String, EntityField> fields = ConfigParseUtil.gatherAllFields(di, entity);\n      ConfigParseUtil.verifyWithSchema(di, fields);    \n      modEntities.add(entity);\n    }\n    this.entities = Collections.unmodifiableList(modEntities);\n    if(functions==null) {\n      functions = Collections.emptyList();\n    }\n    List<Map<String, String>> modFunc = new ArrayList<Map<String, String>>(functions.size());\n    for(Map<String, String> f : functions) {\n      modFunc.add(Collections.unmodifiableMap(f));\n    }\n    this.functions = Collections.unmodifiableList(modFunc);\n    this.script = script;\n    this.dataSources = Collections.unmodifiableMap(dataSources);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c","5101aff20e65c9a285c274627ec956eb5409d253"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5101aff20e65c9a285c274627ec956eb5409d253"],"5101aff20e65c9a285c274627ec956eb5409d253":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"]},"commit2Childs":{"4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","5101aff20e65c9a285c274627ec956eb5409d253"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ebea96bbe279c4a8dc0cd5cd1f987cc9b33436c"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":[],"5101aff20e65c9a285c274627ec956eb5409d253":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}