{"path":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#collect(int).mjava","commits":[{"id":"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","date":1444426023,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (!leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["487de3f55283f58d7e02a16993f8be55bbe32061","487de3f55283f58d7e02a16993f8be55bbe32061"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","date":1500994164,"type":5,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#collect(int).mjava","sourceNew":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (!leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/join/GraphEdgeCollector[GraphTermsCollector]#collect(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#collect(int).mjava","sourceNew":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (leafNodes == null || !leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","sourceOld":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (!leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/join/GraphTermsCollector#collect(int).mjava","sourceNew":null,"sourceOld":"  public void collect(int doc) throws IOException {    \n    doc += base;\n    if (currentResult.get(doc)) {\n      // cycle detected / already been here.\n      // knowing if your graph had a cycle might be useful and it's lightweight to implement here.\n      hasCycles = true;\n      return;\n    }\n    // collect the docs\n    addDocToResult(doc);\n    // Optimization to not look up edges for a document that is a leaf node\n    if (!leafNodes.exists(doc)) {\n      addEdgeIdsToResult(doc-base);\n    } \n    // Note: tracking links in for each result would be a huge memory hog... so not implementing at this time.\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"a52341299179de5479672f7cf518bf4b173f34b3":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b","a52341299179de5479672f7cf518bf4b173f34b3"],"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a52341299179de5479672f7cf518bf4b173f34b3"]},"commit2Childs":{"a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b":["a3be7723008a2c26b93c1b9d6a5e67ed2e4a2976","a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["49f41ca5b59802ba2b8fb507bb73d5c4bf53db2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}