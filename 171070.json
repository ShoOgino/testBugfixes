{"path":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#getCompetitiveFreqNormPairs().mjava","commits":[{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#getCompetitiveFreqNormPairs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveFreqNormAccumulator#getCompetitiveFreqNormPairs().mjava","sourceNew":"  /** Get the set of competitive freq and norm pairs, orderer by increasing freq and norm. */\n  public SortedSet<Impact> getCompetitiveFreqNormPairs() {\n    if (dirty) {\n      for (int i = 0; i < maxFreqs.length; ++i) {\n        if (maxFreqs[i] > 0) {\n          add(new Impact(maxFreqs[i], (byte) i));\n          maxFreqs[i] = 0;\n        }\n      }\n      dirty = false;\n    }\n    return Collections.unmodifiableSortedSet(freqNormPairs);\n  }\n\n","sourceOld":"  /** Get the set of competitive freq and norm pairs, orderer by increasing freq and norm. */\n  public SortedSet<FreqAndNorm> getCompetitiveFreqNormPairs() {\n    if (dirty) {\n      for (int i = 0; i < maxFreqs.length; ++i) {\n        if (maxFreqs[i] > 0) {\n          add(new FreqAndNorm(maxFreqs[i], (byte) i));\n          maxFreqs[i] = 0;\n        }\n      }\n      dirty = false;\n    }\n    return Collections.unmodifiableSortedSet(freqNormPairs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f50c9e80683584f12bcb862485e917b70cad163f","date":1574765397,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#getCompetitiveFreqNormPairs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#getCompetitiveFreqNormPairs().mjava","sourceNew":"  /** Get the set of competitive freq and norm pairs, orderer by increasing freq and norm. */\n  public Collection<Impact> getCompetitiveFreqNormPairs() {\n    List<Impact> impacts = new ArrayList<>();\n    int maxFreqForLowerNorms = 0;\n    for (int i = 0; i < maxFreqs.length; ++i) {\n      int maxFreq = maxFreqs[i];\n      if (maxFreq > maxFreqForLowerNorms) {\n        impacts.add(new Impact(maxFreq, (byte) i));\n        maxFreqForLowerNorms = maxFreq;\n      }\n    }\n\n    if (otherFreqNormPairs.isEmpty()) {\n      // Common case: all norms are bytes\n      return impacts;\n    }\n\n    TreeSet<Impact> freqNormPairs = new TreeSet<>(this.otherFreqNormPairs);\n    for (Impact impact : impacts) {\n      add(impact, freqNormPairs);\n    }\n    return Collections.unmodifiableSet(freqNormPairs);\n  }\n\n","sourceOld":"  /** Get the set of competitive freq and norm pairs, orderer by increasing freq and norm. */\n  public SortedSet<Impact> getCompetitiveFreqNormPairs() {\n    if (dirty) {\n      for (int i = 0; i < maxFreqs.length; ++i) {\n        if (maxFreqs[i] > 0) {\n          add(new Impact(maxFreqs[i], (byte) i));\n          maxFreqs[i] = 0;\n        }\n      }\n      dirty = false;\n    }\n    return Collections.unmodifiableSortedSet(freqNormPairs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2af44fa9bd43d5df330d6438c1af390323f7d567","date":1574847240,"type":3,"author":"Benedict Jin","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#getCompetitiveFreqNormPairs().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/CompetitiveImpactAccumulator#getCompetitiveFreqNormPairs().mjava","sourceNew":"  /** Get the set of competitive freq and norm pairs, ordered by increasing freq and norm. */\n  public Collection<Impact> getCompetitiveFreqNormPairs() {\n    List<Impact> impacts = new ArrayList<>();\n    int maxFreqForLowerNorms = 0;\n    for (int i = 0; i < maxFreqs.length; ++i) {\n      int maxFreq = maxFreqs[i];\n      if (maxFreq > maxFreqForLowerNorms) {\n        impacts.add(new Impact(maxFreq, (byte) i));\n        maxFreqForLowerNorms = maxFreq;\n      }\n    }\n\n    if (otherFreqNormPairs.isEmpty()) {\n      // Common case: all norms are bytes\n      return impacts;\n    }\n\n    TreeSet<Impact> freqNormPairs = new TreeSet<>(this.otherFreqNormPairs);\n    for (Impact impact : impacts) {\n      add(impact, freqNormPairs);\n    }\n    return Collections.unmodifiableSet(freqNormPairs);\n  }\n\n","sourceOld":"  /** Get the set of competitive freq and norm pairs, orderer by increasing freq and norm. */\n  public Collection<Impact> getCompetitiveFreqNormPairs() {\n    List<Impact> impacts = new ArrayList<>();\n    int maxFreqForLowerNorms = 0;\n    for (int i = 0; i < maxFreqs.length; ++i) {\n      int maxFreq = maxFreqs[i];\n      if (maxFreq > maxFreqForLowerNorms) {\n        impacts.add(new Impact(maxFreq, (byte) i));\n        maxFreqForLowerNorms = maxFreq;\n      }\n    }\n\n    if (otherFreqNormPairs.isEmpty()) {\n      // Common case: all norms are bytes\n      return impacts;\n    }\n\n    TreeSet<Impact> freqNormPairs = new TreeSet<>(this.otherFreqNormPairs);\n    for (Impact impact : impacts) {\n      add(impact, freqNormPairs);\n    }\n    return Collections.unmodifiableSet(freqNormPairs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f50c9e80683584f12bcb862485e917b70cad163f":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["f50c9e80683584f12bcb862485e917b70cad163f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2af44fa9bd43d5df330d6438c1af390323f7d567"]},"commit2Childs":{"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["f50c9e80683584f12bcb862485e917b70cad163f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"f50c9e80683584f12bcb862485e917b70cad163f":["2af44fa9bd43d5df330d6438c1af390323f7d567"],"2af44fa9bd43d5df330d6438c1af390323f7d567":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}