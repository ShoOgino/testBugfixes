{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0936055c0eed56be3e4ae5c9db5b0e355390736a","date":1410874015,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      if (tvxVersion != tvdVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvd=\" + tvdVersion + \" (resource=\" + tvd + \")\");\n      }\n      if (tvxVersion != tvfVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvf=\" + tvfVersion + \" (resource=\" + tvf + \")\");\n      }\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      assert tvxVersion == tvdVersion;\n      assert tvxVersion == tvfVersion;\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9a70ce9bddc6f985feb8e5e182aebe20872328d4","date":1411172748,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      if (tvxVersion != tvdVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvd=\" + tvdVersion, tvd);\n      }\n      if (tvxVersion != tvfVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvf=\" + tvfVersion, tvf);\n      }\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      if (tvxVersion != tvdVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvd=\" + tvdVersion + \" (resource=\" + tvd + \")\");\n      }\n      if (tvxVersion != tvfVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvf=\" + tvfVersion + \" (resource=\" + tvf + \")\");\n      }\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40TermVectorsReader#Lucene40TermVectorsReader(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":null,"sourceOld":"  /** Sole constructor. */\n  public Lucene40TermVectorsReader(Directory d, SegmentInfo si, FieldInfos fieldInfos, IOContext context)\n    throws IOException {\n    final String segment = si.name;\n    final int size = si.getDocCount();\n    \n    boolean success = false;\n\n    try {\n      String idxName = IndexFileNames.segmentFileName(segment, \"\", VECTORS_INDEX_EXTENSION);\n      tvx = d.openInput(idxName, context);\n      final int tvxVersion = CodecUtil.checkHeader(tvx, CODEC_NAME_INDEX, VERSION_START, VERSION_CURRENT);\n      \n      String fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_DOCUMENTS_EXTENSION);\n      tvd = d.openInput(fn, context);\n      final int tvdVersion = CodecUtil.checkHeader(tvd, CODEC_NAME_DOCS, VERSION_START, VERSION_CURRENT);\n      fn = IndexFileNames.segmentFileName(segment, \"\", VECTORS_FIELDS_EXTENSION);\n      tvf = d.openInput(fn, context);\n      final int tvfVersion = CodecUtil.checkHeader(tvf, CODEC_NAME_FIELDS, VERSION_START, VERSION_CURRENT);\n      assert HEADER_LENGTH_INDEX == tvx.getFilePointer();\n      assert HEADER_LENGTH_DOCS == tvd.getFilePointer();\n      assert HEADER_LENGTH_FIELDS == tvf.getFilePointer();\n      if (tvxVersion != tvdVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvd=\" + tvdVersion, tvd);\n      }\n      if (tvxVersion != tvfVersion) {\n        throw new CorruptIndexException(\"version mismatch: tvx=\" + tvxVersion + \" != tvf=\" + tvfVersion, tvf);\n      }\n\n      numTotalDocs = (int) (tvx.length()-HEADER_LENGTH_INDEX >> 4);\n\n      this.size = numTotalDocs;\n      assert size == 0 || numTotalDocs == size;\n\n      this.fieldInfos = fieldInfos;\n      success = true;\n    } finally {\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above. In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        try {\n          close();\n        } catch (Throwable t) {} // ensure we throw our original exception\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"9a70ce9bddc6f985feb8e5e182aebe20872328d4":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"0936055c0eed56be3e4ae5c9db5b0e355390736a":["9a70ce9bddc6f985feb8e5e182aebe20872328d4"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["0936055c0eed56be3e4ae5c9db5b0e355390736a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}