{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"9b2af6b2c05418fb9df466c739ed5b3a153eadde","date":1337520269,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(SegmentInfo).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx:\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors:\n      output.writeByte((byte) 1);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public void write3xInfo(SegmentInfo si) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n    //System.out.println(\"UPGRADE write \" + fileName);\n    // nocommit what IOCtx\n    boolean success = false;\n\n    IndexOutput output = si.dir.createOutput(fileName, new IOContext(new FlushInfo(0, 0)));\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx:\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors:\n      output.writeByte((byte) 1);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        si.dir.deleteFile(fileName);\n      } else {\n        output.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.getFiles());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx:\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors:\n      output.writeByte((byte) 1);\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ace9b78896617dcee984890f3300d45c539c1b15","date":1337655022,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.getFiles().add(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.getFiles());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfosFormat.SI_EXTENSION);\n    si.getFiles().add(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.getFiles());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.getFiles().add(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.getFiles());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.getFiles().add(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      assert si.getDelCount() <= si.docCount: \"delCount=\" + si.getDelCount() + \" docCount=\" + si.docCount + \" segment=\" + si.name;\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n      output.writeLong(si.getDelGen());\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeInt(si.getDelCount());\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.getFiles());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5728b83dbb3e002cdd22adfe6caf103a96ef15","date":1337791289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.getFiles().add(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.getFiles());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"203d7d3cb7712e10ef33009a63247ae40c302d7a","date":1337798111,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.getDocCount());\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.docCount);\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a917aca07a305ab70118a83e84d931503441271","date":1337826487,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.getDocCount());\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeStringStringMap(si.attributes());\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.getDocCount());\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeInt(si.getDocStoreOffset());\n      if (si.getDocStoreOffset() != -1) {\n        output.writeString(si.getDocStoreSegment());\n        output.writeByte((byte) (si.getDocStoreIsCompoundFile() ? 1:0));\n      }\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb579626a6376d3070a0353a64c484f55cfabc6","date":1337866286,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeStringStringMap(si.attributes());\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeString(si.name);\n      output.writeInt(si.getDocCount());\n\n      // NOTE: a lie\n      output.writeLong(0L);\n\n      output.writeStringStringMap(si.attributes());\n      // pre-4.0 indexes write a byte if there is a single norms file\n      output.writeByte((byte) 1);\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n\n      // NOTE: a lie\n      output.writeInt(0);\n\n      // hasProx (lie):\n      output.writeByte((byte) 1);\n      output.writeStringStringMap(si.getDiagnostics());\n      // hasVectors (lie):\n      output.writeByte((byte) 1);\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee3df95012e016c229172f87a6c4077957246c4a","date":1337867023,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.UPGRADED_SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      CodecUtil.writeHeader(output, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME, \n                                    Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeStringStringMap(si.attributes());\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeStringStringMap(si.attributes());\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"764b942fd30efcae6e532c19771f32eeeb0037b2","date":1337868546,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.UPGRADED_SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      CodecUtil.writeHeader(output, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME, \n                                    Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeStringStringMap(si.attributes());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.UPGRADED_SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      CodecUtil.writeHeader(output, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME, \n                                    Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeStringStringMap(si.attributes());\n\n      Map<Integer,Long> normGen = si.getNormGen();\n      if (normGen == null) {\n        output.writeInt(SegmentInfo.NO);\n      } else {\n        output.writeInt(normGen.size());\n        for (Map.Entry<Integer,Long> entry : normGen.entrySet()) {\n          output.writeLong(entry.getValue());\n        }\n      }\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.UPGRADED_SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      CodecUtil.writeHeader(output, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME, \n                                    Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeStringStringMap(si.attributes());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfos#write3xInfo(Directory,SegmentInfo,IOContext).mjava","sourceNew":null,"sourceOld":"  @Deprecated\n  public static String write3xInfo(Directory dir, SegmentInfo si, IOContext context) throws IOException {\n\n    // NOTE: this is NOT how 3.x is really written...\n    String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene3xSegmentInfoFormat.UPGRADED_SI_EXTENSION);\n    si.addFile(fileName);\n\n    //System.out.println(\"UPGRADE write \" + fileName);\n    boolean success = false;\n    IndexOutput output = dir.createOutput(fileName, context);\n    try {\n      // we are about to write this SI in 3.x format, dropping all codec information, etc.\n      // so it had better be a 3.x segment or you will get very confusing errors later.\n      assert si.getCodec() instanceof Lucene3xCodec : \"broken test, trying to mix preflex with other codecs\";\n      CodecUtil.writeHeader(output, Lucene3xSegmentInfoFormat.UPGRADED_SI_CODEC_NAME, \n                                    Lucene3xSegmentInfoFormat.UPGRADED_SI_VERSION_CURRENT);\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeString(si.getVersion());\n      output.writeInt(si.getDocCount());\n\n      output.writeStringStringMap(si.attributes());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      output.writeStringSet(si.files());\n\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(output);\n        try {\n          si.dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      } else {\n        output.close();\n      }\n    }\n\n    return fileName;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee3df95012e016c229172f87a6c4077957246c4a":["dbb579626a6376d3070a0353a64c484f55cfabc6"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"6a917aca07a305ab70118a83e84d931503441271":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["ee3df95012e016c229172f87a6c4077957246c4a"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["ace9b78896617dcee984890f3300d45c539c1b15"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9b2af6b2c05418fb9df466c739ed5b3a153eadde"],"dbb579626a6376d3070a0353a64c484f55cfabc6":["6a917aca07a305ab70118a83e84d931503441271"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","764b942fd30efcae6e532c19771f32eeeb0037b2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ace9b78896617dcee984890f3300d45c539c1b15":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"ee3df95012e016c229172f87a6c4077957246c4a":["764b942fd30efcae6e532c19771f32eeeb0037b2"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["203d7d3cb7712e10ef33009a63247ae40c302d7a"],"6a917aca07a305ab70118a83e84d931503441271":["dbb579626a6376d3070a0353a64c484f55cfabc6"],"764b942fd30efcae6e532c19771f32eeeb0037b2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"9b2af6b2c05418fb9df466c739ed5b3a153eadde":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["ace9b78896617dcee984890f3300d45c539c1b15"],"dbb579626a6376d3070a0353a64c484f55cfabc6":["ee3df95012e016c229172f87a6c4077957246c4a"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b2af6b2c05418fb9df466c739ed5b3a153eadde","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"ace9b78896617dcee984890f3300d45c539c1b15":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"203d7d3cb7712e10ef33009a63247ae40c302d7a":["6a917aca07a305ab70118a83e84d931503441271"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}