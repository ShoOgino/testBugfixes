{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","commits":[{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    this.cloudSolrClient.connect();\n    Set<String> collections = this.cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n    final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n    for (String collection : collections) {\n      builder.put(collection, new SolrTable(this, collection));\n    }\n    return builder.build();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a69e2a486e794ef99347d76fd562d069f922d1ce","date":1461874102,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    this.cloudSolrClient.connect();\n    Set<String> collections = this.cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n    final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n    for (String collection : collections) {\n      builder.put(collection, new SolrTable(this, collection));\n    }\n    return builder.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34960db40f081388a12ae7131547fb03236705fd","date":1461892880,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient(zk)) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a","date":1462461875,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient(zk)) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa4a466195c69a11a113b33adc90f9069031e54e","date":1477605536,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollectionsMap().keySet();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollections();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304f75a2a17bf5438a631f849ecd01694dd6c16","date":1483738361,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      for (Map.Entry<String, String> alias : zkStateReader.getAliases().getCollectionAliasMap().entrySet()) {\n        builder.put(alias.getKey(), new SolrTable(this, alias.getValue()));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      Set<String> collections = cloudSolrClient.getZkStateReader().getClusterState().getCollectionsMap().keySet();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      if(aliases.collectionAliasSize() > 0) {\n        for (Map.Entry<String, String> alias : aliases.getCollectionAliasMap().entrySet()) {\n          builder.put(alias.getKey(), new SolrTable(this, alias.getValue()));\n        }\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      for (Map.Entry<String, String> alias : zkStateReader.getAliases().getCollectionAliasMap().entrySet()) {\n        builder.put(alias.getKey(), new SolrTable(this, alias.getValue()));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      if(aliases.collectionAliasSize() > 0) {\n        for (Map.Entry<String, String> alias : aliases.getCollectionAliasMap().entrySet()) {\n          builder.put(alias.getKey(), new SolrTable(this, alias.getValue()));\n        }\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        builder.put(alias, new SolrTable(this, alias));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      if(aliases.collectionAliasSize() > 0) {\n        for (Map.Entry<String, String> alias : aliases.getCollectionAliasMap().entrySet()) {\n          builder.put(alias.getKey(), new SolrTable(this, alias.getValue()));\n        }\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8","date":1520696743,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        builder.put(alias, new SolrTable(this, alias));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder().withZkHost(zk).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        builder.put(alias, new SolrTable(this, alias));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a"],"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        builder.put(alias, new SolrTable(this, alias));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        builder.put(alias, new SolrTable(this, alias));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      Set<String> collections = clusterState.getCollectionsMap().keySet();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        // don't create duplicate entries\n        if (!collections.contains(alias)) {\n          builder.put(alias, new SolrTable(this, alias));\n        }\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      for (String collection : clusterState.getCollectionsMap().keySet()) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        builder.put(alias, new SolrTable(this, alias));\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa","date":1589312640,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrSchema#getTableMap().mjava","sourceNew":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    CloudSolrClient cloudSolrClient = solrClientCache.getCloudSolrClient(zk);\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n    Set<String> collections = clusterState.getCollectionsMap().keySet();\n    for (String collection : collections) {\n      builder.put(collection, new SolrTable(this, collection));\n    }\n\n    Aliases aliases = zkStateReader.getAliases();\n    for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n      // don't create duplicate entries\n      if (!collections.contains(alias)) {\n        builder.put(alias, new SolrTable(this, alias));\n      }\n    }\n\n    return builder.build();\n  }\n\n","sourceOld":"  @Override\n  protected Map<String, Table> getTableMap() {\n    String zk = this.properties.getProperty(\"zk\");\n    try(CloudSolrClient cloudSolrClient = new CloudSolrClient.Builder(Collections.singletonList(zk), Optional.empty()).withSocketTimeout(30000).withConnectionTimeout(15000).build()) {\n      cloudSolrClient.connect();\n      ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n      ClusterState clusterState = zkStateReader.getClusterState();\n\n      final ImmutableMap.Builder<String, Table> builder = ImmutableMap.builder();\n\n      Set<String> collections = clusterState.getCollectionsMap().keySet();\n      for (String collection : collections) {\n        builder.put(collection, new SolrTable(this, collection));\n      }\n\n      Aliases aliases = zkStateReader.getAliases();\n      for (String alias : aliases.getCollectionAliasListMap().keySet()) {\n        // don't create duplicate entries\n        if (!collections.contains(alias)) {\n          builder.put(alias, new SolrTable(this, alias));\n        }\n      }\n\n      return builder.build();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34960db40f081388a12ae7131547fb03236705fd":["a69e2a486e794ef99347d76fd562d069f922d1ce"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a69e2a486e794ef99347d76fd562d069f922d1ce":["d984627825732e682759c22df7a3b171a80f3812"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"c304f75a2a17bf5438a631f849ecd01694dd6c16":["fa4a466195c69a11a113b33adc90f9069031e54e"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["34960db40f081388a12ae7131547fb03236705fd"],"fa4a466195c69a11a113b33adc90f9069031e54e":["ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"d984627825732e682759c22df7a3b171a80f3812":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["c304f75a2a17bf5438a631f849ecd01694dd6c16","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"34960db40f081388a12ae7131547fb03236705fd":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["c7d763eff38c4e1702b60d626f9c8d39f9ad8af8"],"a69e2a486e794ef99347d76fd562d069f922d1ce":["34960db40f081388a12ae7131547fb03236705fd"],"2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["2022c62013ac31ba0bed28b0f0e6faf9af8dd2aa"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"c304f75a2a17bf5438a631f849ecd01694dd6c16":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a"],"fa4a466195c69a11a113b33adc90f9069031e54e":["c304f75a2a17bf5438a631f849ecd01694dd6c16"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"d984627825732e682759c22df7a3b171a80f3812":["a69e2a486e794ef99347d76fd562d069f922d1ce"],"c7d763eff38c4e1702b60d626f9c8d39f9ad8af8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"ae2a8dc9b275e35e6a1e6d55ca518c02b09ced7a":["fa4a466195c69a11a113b33adc90f9069031e54e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}