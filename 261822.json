{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","commits":[{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = 100000 * RANDOM_MULTIPLIER;\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterUnicode#testRandomUnicodeStrings().mjava","sourceNew":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","sourceOld":"  // LUCENE-510\n  public void testRandomUnicodeStrings() throws Throwable {\n    char[] buffer = new char[20];\n    char[] expected = new char[20];\n\n    BytesRef utf8 = new BytesRef(20);\n    CharsRef utf16 = new CharsRef(20);\n\n    int num = atLeast(100000);\n    for (int iter = 0; iter < num; iter++) {\n      boolean hasIllegal = fillUnicode(buffer, expected, 0, 20);\n\n      UnicodeUtil.UTF16toUTF8(buffer, 0, 20, utf8);\n      if (!hasIllegal) {\n        byte[] b = new String(buffer, 0, 20).getBytes(\"UTF-8\");\n        assertEquals(b.length, utf8.length);\n        for(int i=0;i<b.length;i++)\n          assertEquals(b[i], utf8.bytes[i]);\n      }\n\n      UnicodeUtil.UTF8toUTF16(utf8.bytes, 0, utf8.length, utf16);\n      assertEquals(utf16.length, 20);\n      for(int i=0;i<20;i++)\n        assertEquals(expected[i], utf16.chars[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3a119bbc8703c10faa329ec201c654b3a35a1e3e","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}