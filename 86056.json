{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ac4bff3307e88928bf48cd1a283ff7da1f82464","date":1411914960,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0628077afea69a2955260949478afabab8e500d8","date":1413915332,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new Lucene40BlockTreeTermsReader(postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new Lucene40BlockTreeTermsReader(postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new BlockTreeTermsReader(\n                                                    state.directory,\n                                                    state.fieldInfos,\n                                                    state.segmentInfo,\n                                                    postings,\n                                                    state.context,\n                                                    state.segmentSuffix);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/Lucene40PostingsFormat#fieldsProducer(SegmentReadState).mjava","sourceNew":null,"sourceOld":"  @Override\n  public final FieldsProducer fieldsProducer(SegmentReadState state) throws IOException {\n    PostingsReaderBase postings = new Lucene40PostingsReader(state.directory, state.fieldInfos, state.segmentInfo, state.context, state.segmentSuffix);\n\n    boolean success = false;\n    try {\n      FieldsProducer ret = new Lucene40BlockTreeTermsReader(postings, state);\n      success = true;\n      return ret;\n    } finally {\n      if (!success) {\n        postings.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"9bb9a29a5e71a90295f175df8919802993142c9a":["402ad3ddc9da7b70da1b167667a60ece6a1381fb","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","0628077afea69a2955260949478afabab8e500d8"],"0628077afea69a2955260949478afabab8e500d8":["99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["0628077afea69a2955260949478afabab8e500d8"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"0628077afea69a2955260949478afabab8e500d8":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"6ac4bff3307e88928bf48cd1a283ff7da1f82464":["99eb4a732d1a908f4636ace52928876136bf1896","9bb9a29a5e71a90295f175df8919802993142c9a"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["9bb9a29a5e71a90295f175df8919802993142c9a","6ac4bff3307e88928bf48cd1a283ff7da1f82464"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}