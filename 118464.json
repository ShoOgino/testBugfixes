{"path":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#buildZooKeeper(File,String,String).mjava","commits":[{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#buildZooKeeper(File,String,String).mjava","pathOld":"/dev/null","sourceNew":"  // static to share with distrib test\n  public void buildZooKeeper(File solrhome, String config, String schema) throws Exception {\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    \n    List<Op> ops = new ArrayList<>(2);\n    String path = \"/collections\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs/conf1\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    chRootClient.multi(ops, true);\n\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    chRootClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", chRootClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", chRootClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"synonyms.txt\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15","date":1554259533,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#buildZooKeeper(File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#buildZooKeeper(File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public void buildZooKeeper(File solrhome, String config, String schema) throws Exception {\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n\n\n    List<Op> ops = new ArrayList<>(2);\n    String path = \"/collections\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs/conf1\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    chRootClient.multi(ops, true);\n\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    chRootClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", chRootClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", chRootClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"synonyms.txt\");\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public void buildZooKeeper(File solrhome, String config, String schema) throws Exception {\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n    \n    \n    List<Op> ops = new ArrayList<>(2);\n    String path = \"/collections\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs/conf1\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    chRootClient.multi(ops, true);\n\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    chRootClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", chRootClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", chRootClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"synonyms.txt\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#buildZooKeeper(File,String,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/ZkTestServer#buildZooKeeper(File,String,String).mjava","sourceNew":"  // static to share with distrib test\n  public void buildZooKeeper(File solrhome, String config, String schema) throws Exception {\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n\n\n    List<Op> ops = new ArrayList<>(2);\n    String path = \"/collections\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs/conf1\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    chRootClient.multi(ops, true);\n\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", chRootClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", chRootClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"synonyms.txt\");\n  }\n\n","sourceOld":"  // static to share with distrib test\n  public void buildZooKeeper(File solrhome, String config, String schema) throws Exception {\n\n    Map<String,Object> props = new HashMap<>();\n    props.put(\"configName\", \"conf1\");\n    final ZkNodeProps zkProps = new ZkNodeProps(props);\n\n\n    List<Op> ops = new ArrayList<>(2);\n    String path = \"/collections\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/collection1/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection\";\n    ops.add(Op.create(path, Utils.toJSON(zkProps), chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/collections/control_collection/shards\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    path = \"/configs/conf1\";\n    ops.add(Op.create(path, null, chRootClient.getZkACLProvider().getACLsToAdd(path),  CreateMode.PERSISTENT));\n    chRootClient.multi(ops, true);\n\n    // this workaround is acceptable until we remove legacyCloud because we just init a single core here\n    String defaultClusterProps = \"{\\\"\"+ZkStateReader.LEGACY_CLOUD+\"\\\":\\\"true\\\"}\";\n    chRootClient.makePath(ZkStateReader.CLUSTER_PROPS, defaultClusterProps.getBytes(StandardCharsets.UTF_8), CreateMode.PERSISTENT, true);\n    // for now, always upload the config and schema to the canonical names\n    putConfig(\"conf1\", chRootClient, solrhome, config, \"solrconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, schema, \"schema.xml\");\n\n    putConfig(\"conf1\", chRootClient, solrhome, \"solrconfig.snippet.randomindexconfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"stopwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"protwords.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"currency.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"enumsConfig.xml\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"open-exchange-rates.json\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"mapping-ISOLatin1Accent.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"old_synonyms.txt\");\n    putConfig(\"conf1\", chRootClient, solrhome, \"synonyms.txt\");\n  }\n\n","bugFix":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0db83f1bb855a4ac824c9a2a8e1ee9b29a039c15":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}