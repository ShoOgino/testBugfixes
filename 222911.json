{"path":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(SolrResourceLoader).mjava","commits":[{"id":"df151630bfbea5338a007b97bfd37e4ec94f873f","date":1553017904,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(IndexSchema).mjava","sourceNew":"  private MergeScheduler buildMergeScheduler(SolrResourceLoader resourceLoader) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = resourceLoader.newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        Boolean ioThrottle = (Boolean) args.remove(\"ioThrottle\");\n        if (ioThrottle != null && !ioThrottle) { //by-default 'enabled'\n            ((ConcurrentMergeScheduler) scheduler).disableAutoIOThrottle();\n        }\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(IndexSchema schema) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = schema.getResourceLoader().newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        Boolean ioThrottle = (Boolean) args.remove(\"ioThrottle\");\n        if (ioThrottle != null && !ioThrottle) { //by-default 'enabled'\n            ((ConcurrentMergeScheduler) scheduler).disableAutoIOThrottle();\n        }\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/SolrIndexConfig#buildMergeScheduler(SolrResourceLoader).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private MergeScheduler buildMergeScheduler(SolrResourceLoader resourceLoader) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = resourceLoader.newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        Boolean ioThrottle = (Boolean) args.remove(\"ioThrottle\");\n        if (ioThrottle != null && !ioThrottle) { //by-default 'enabled'\n            ((ConcurrentMergeScheduler) scheduler).disableAutoIOThrottle();\n        }\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","sourceOld":"  private MergeScheduler buildMergeScheduler(SolrResourceLoader resourceLoader) {\n    String msClassName = mergeSchedulerInfo == null ? SolrIndexConfig.DEFAULT_MERGE_SCHEDULER_CLASSNAME : mergeSchedulerInfo.className;\n    MergeScheduler scheduler = resourceLoader.newInstance(msClassName, MergeScheduler.class);\n\n    if (mergeSchedulerInfo != null) {\n      // LUCENE-5080: these two setters are removed, so we have to invoke setMaxMergesAndThreads\n      // if someone has them configured.\n      if (scheduler instanceof ConcurrentMergeScheduler) {\n        NamedList args = mergeSchedulerInfo.initArgs.clone();\n        Integer maxMergeCount = (Integer) args.remove(\"maxMergeCount\");\n        if (maxMergeCount == null) {\n          maxMergeCount = ((ConcurrentMergeScheduler) scheduler).getMaxMergeCount();\n        }\n        Integer maxThreadCount = (Integer) args.remove(\"maxThreadCount\");\n        if (maxThreadCount == null) {\n          maxThreadCount = ((ConcurrentMergeScheduler) scheduler).getMaxThreadCount();\n        }\n        ((ConcurrentMergeScheduler)scheduler).setMaxMergesAndThreads(maxMergeCount, maxThreadCount);\n        Boolean ioThrottle = (Boolean) args.remove(\"ioThrottle\");\n        if (ioThrottle != null && !ioThrottle) { //by-default 'enabled'\n            ((ConcurrentMergeScheduler) scheduler).disableAutoIOThrottle();\n        }\n        SolrPluginUtils.invokeSetters(scheduler, args);\n      } else {\n        SolrPluginUtils.invokeSetters(scheduler, mergeSchedulerInfo.initArgs);\n      }\n    }\n\n    return scheduler;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df151630bfbea5338a007b97bfd37e4ec94f873f":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["df151630bfbea5338a007b97bfd37e4ec94f873f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}