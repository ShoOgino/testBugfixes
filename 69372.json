{"path":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        StoredDocument[] results = new StoredDocument[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        StoredDocument[] results = new StoredDocument[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        StoredDocument[] results = new StoredDocument[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8e966c067d1296ec349b51042bd4a8cc4888bd4c","date":1526450385,"type":4,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/demo/src/java/org/apache/lucene/demo/xmlparser/FormBasedXmlQueryDemo#doPost(HttpServletRequest,HttpServletResponse).mjava","sourceNew":null,"sourceOld":"  @Override\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n    //Take all completed form fields and add to a Properties object\n    Properties completedFormFields = new Properties();\n    Enumeration<?> pNames = request.getParameterNames();\n    while (pNames.hasMoreElements()) {\n      String propName = (String) pNames.nextElement();\n      String value = request.getParameter(propName);\n      if ((value != null) && (value.trim().length() > 0)) {\n        completedFormFields.setProperty(propName, value);\n      }\n    }\n\n    try {\n      //Create an XML query by populating template with given user criteria\n      org.w3c.dom.Document xmlQuery = queryTemplateManager.getQueryAsDOM(completedFormFields);\n\n      //Parse the XML to produce a Lucene query\n      Query query = xmlParser.getQuery(xmlQuery.getDocumentElement());\n\n      //Run the query\n      TopDocs topDocs = searcher.search(query, 10);\n\n      //and package the results and forward to JSP\n      if (topDocs != null) {\n        ScoreDoc[] sd = topDocs.scoreDocs;\n        Document[] results = new Document[sd.length];\n        for (int i = 0; i < results.length; i++) {\n          results[i] = searcher.doc(sd[i].doc);\n          request.setAttribute(\"results\", results);\n        }\n      }\n      RequestDispatcher dispatcher = getServletContext().getRequestDispatcher(\"/index.jsp\");\n      dispatcher.forward(request, response);\n    }\n    catch (Exception e) {\n      throw new ServletException(\"Error processing query\", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d028314cced5858683a1bb4741423d0f934257b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"8e966c067d1296ec349b51042bd4a8cc4888bd4c":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8e966c067d1296ec349b51042bd4a8cc4888bd4c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"8e966c067d1296ec349b51042bd4a8cc4888bd4c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["8e966c067d1296ec349b51042bd4a8cc4888bd4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}