{"path":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#assertQuery(Term,Directory,int,CodecProvider).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num, CodecProvider codecs)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true,\n        IndexReader.DEFAULT_TERMS_INDEX_DIVISOR, codecs);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c5b026d03cbbb03ca4c0b97d14e9839682281dc","date":1323049298,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, null, true, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    searcher.close();\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#assertQuery(Term,Directory,int).mjava","sourceNew":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","sourceOld":"  public void assertQuery(Term t, Directory dir, int num)\n      throws CorruptIndexException, IOException {\n    if (VERBOSE) {\n      System.out.println(\"\\nTEST: assertQuery \" + t);\n    }\n    IndexReader reader = IndexReader.open(dir, 1);\n    IndexSearcher searcher = newSearcher(reader);\n    TopDocs search = searcher.search(new TermQuery(t), num + 10);\n    assertEquals(num, search.totalHits);\n    reader.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["7b91922b55d15444d554721b352861d028eb8278"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60","1c5b026d03cbbb03ca4c0b97d14e9839682281dc"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["0e7c2454a6a8237bfd0e953f5b940838408c9055","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00"],"1c5b026d03cbbb03ca4c0b97d14e9839682281dc":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}