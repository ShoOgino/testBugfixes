{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","commits":[{"id":"8d2ebfffa7de566fcbacb528a536a81ac3d15168","date":1545939747,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad296b823241a7204dcaa288b06f3df339fb2ed6","date":1551795554,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","sourceNew":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e20dc8a74764ae091d43344295c88e92031a5ca","date":1560548943,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","sourceNew":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c321d251297b1429500664d9fabd7e5f78d87aa","date":1562031585,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","sourceNew":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n\n    cexpr = \"let(a=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        b=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        c=transpose(matrix(a, b)),\"+\n        \"        d=kmeans(c, 5),\"+\n        \"        zplot(clusters=d))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 700);\n\n    Set clusters = new HashSet();\n    for(Tuple tup : tuples) {\n      assertNotNull(tup.get(\"x\"));\n      assertNotNull(tup.get(\"y\"));\n      clusters.add(tup.getString(\"cluster\"));\n    }\n\n    assertEquals(clusters.size(), 5);\n    assertTrue(clusters.contains(\"cluster1\"));\n    assertTrue(clusters.contains(\"cluster2\"));\n    assertTrue(clusters.contains(\"cluster3\"));\n    assertTrue(clusters.contains(\"cluster4\"));\n    assertTrue(clusters.contains(\"cluster5\"));\n  }\n\n","sourceOld":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c469fe67f2da2a654eb8d709dfd239236f23a9a2","date":1570414680,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","sourceNew":"  @Test\n  public void testZplot() throws Exception {\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n\n\n    String cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n\n    cexpr = \"let(a=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        b=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        c=transpose(matrix(a, b)),\"+\n        \"        d=kmeans(c, 5),\"+\n        \"        zplot(clusters=d))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 700);\n\n    Set clusters = new HashSet();\n    for(Tuple tup : tuples) {\n      assertNotNull(tup.get(\"x\"));\n      assertNotNull(tup.get(\"y\"));\n      clusters.add(tup.getString(\"cluster\"));\n    }\n\n    assertEquals(clusters.size(), 5);\n    assertTrue(clusters.contains(\"cluster1\"));\n    assertTrue(clusters.contains(\"cluster2\"));\n    assertTrue(clusters.contains(\"cluster3\"));\n    assertTrue(clusters.contains(\"cluster4\"));\n    assertTrue(clusters.contains(\"cluster5\"));\n\n    cexpr = \"let(a=matrix(array(0,1,2,3,4,5,6,7,8,9,10,11), array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    Tuple tuple = tuples.get(0);\n    String xLabel = tuple.getString(\"x\");\n    String yLabel = tuple.getString(\"y\");\n    Number z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col01\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col02\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row1\");\n    assertEquals(z.longValue(), 10L);\n\n\n    cexpr = \"let(a=transpose(matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                           array(10,11,12,13,14,15,16,17,18,19,20,21))),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col1\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 10L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row01\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row06\");\n    assertEquals(z.longValue(), 6L);\n\n    cexpr = \"let(a=matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                 array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        b=setRowLabels(a, array(\\\"blah1\\\", \\\"blah2\\\")),\"+\n        \"        c=setColumnLabels(b, array(\\\"rah1\\\", \\\"rah2\\\", \\\"rah3\\\", \\\"rah4\\\", \\\"rah5\\\", \\\"rah6\\\", \\\"rah7\\\", \\\"rah8\\\", \\\"rah9\\\", \\\"rah10\\\", \\\"rah11\\\", \\\"rah12\\\")),\"+\n        \"        zplot(heat=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah2\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah3\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah2\");\n    assertEquals(z.longValue(), 10L);\n  }\n\n","sourceOld":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n\n    cexpr = \"let(a=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        b=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        c=transpose(matrix(a, b)),\"+\n        \"        d=kmeans(c, 5),\"+\n        \"        zplot(clusters=d))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 700);\n\n    Set clusters = new HashSet();\n    for(Tuple tup : tuples) {\n      assertNotNull(tup.get(\"x\"));\n      assertNotNull(tup.get(\"y\"));\n      clusters.add(tup.getString(\"cluster\"));\n    }\n\n    assertEquals(clusters.size(), 5);\n    assertTrue(clusters.contains(\"cluster1\"));\n    assertTrue(clusters.contains(\"cluster2\"));\n    assertTrue(clusters.contains(\"cluster3\"));\n    assertTrue(clusters.contains(\"cluster4\"));\n    assertTrue(clusters.contains(\"cluster5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","sourceNew":"  @Test\n  public void testZplot() throws Exception {\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n\n\n    String cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n\n    cexpr = \"let(a=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        b=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        c=transpose(matrix(a, b)),\"+\n        \"        d=kmeans(c, 5),\"+\n        \"        zplot(clusters=d))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 700);\n\n    Set clusters = new HashSet();\n    for(Tuple tup : tuples) {\n      assertNotNull(tup.get(\"x\"));\n      assertNotNull(tup.get(\"y\"));\n      clusters.add(tup.getString(\"cluster\"));\n    }\n\n    assertEquals(clusters.size(), 5);\n    assertTrue(clusters.contains(\"cluster1\"));\n    assertTrue(clusters.contains(\"cluster2\"));\n    assertTrue(clusters.contains(\"cluster3\"));\n    assertTrue(clusters.contains(\"cluster4\"));\n    assertTrue(clusters.contains(\"cluster5\"));\n\n    cexpr = \"let(a=matrix(array(0,1,2,3,4,5,6,7,8,9,10,11), array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    Tuple tuple = tuples.get(0);\n    String xLabel = tuple.getString(\"x\");\n    String yLabel = tuple.getString(\"y\");\n    Number z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col01\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col02\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row1\");\n    assertEquals(z.longValue(), 10L);\n\n\n    cexpr = \"let(a=transpose(matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                           array(10,11,12,13,14,15,16,17,18,19,20,21))),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col1\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 10L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row01\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row06\");\n    assertEquals(z.longValue(), 6L);\n\n    cexpr = \"let(a=matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                 array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        b=setRowLabels(a, array(\\\"blah1\\\", \\\"blah2\\\")),\"+\n        \"        c=setColumnLabels(b, array(\\\"rah1\\\", \\\"rah2\\\", \\\"rah3\\\", \\\"rah4\\\", \\\"rah5\\\", \\\"rah6\\\", \\\"rah7\\\", \\\"rah8\\\", \\\"rah9\\\", \\\"rah10\\\", \\\"rah11\\\", \\\"rah12\\\")),\"+\n        \"        zplot(heat=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah2\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah3\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah2\");\n    assertEquals(z.longValue(), 10L);\n  }\n\n","sourceOld":"  @Test\n  public void testZplot() throws Exception {\n    String cexpr = \"let(c=tuple(a=add(1,2), b=add(2,3)),\" +\n        \"               zplot(table=c))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 1);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    cexpr = \"let(c=list(tuple(a=add(1,2), b=add(2,3)), tuple(a=add(1,3), b=add(2,4))),\" +\n        \"        zplot(table=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 2);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 5.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"a\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"b\").doubleValue(), 6.0, 0.0);\n\n\n    cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n\n    cexpr = \"let(a=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        b=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        c=transpose(matrix(a, b)),\"+\n        \"        d=kmeans(c, 5),\"+\n        \"        zplot(clusters=d))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 700);\n\n    Set clusters = new HashSet();\n    for(Tuple tup : tuples) {\n      assertNotNull(tup.get(\"x\"));\n      assertNotNull(tup.get(\"y\"));\n      clusters.add(tup.getString(\"cluster\"));\n    }\n\n    assertEquals(clusters.size(), 5);\n    assertTrue(clusters.contains(\"cluster1\"));\n    assertTrue(clusters.contains(\"cluster2\"));\n    assertTrue(clusters.contains(\"cluster3\"));\n    assertTrue(clusters.contains(\"cluster4\"));\n    assertTrue(clusters.contains(\"cluster5\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/MathExpressionTest#testZplot().mjava","sourceNew":"  @Test\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public void testZplot() throws Exception {\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n\n\n    String cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n\n    cexpr = \"let(a=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        b=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        c=transpose(matrix(a, b)),\"+\n        \"        d=kmeans(c, 5),\"+\n        \"        zplot(clusters=d))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 700);\n\n    Set clusters = new HashSet();\n    for(Tuple tup : tuples) {\n      assertNotNull(tup.get(\"x\"));\n      assertNotNull(tup.get(\"y\"));\n      clusters.add(tup.getString(\"cluster\"));\n    }\n\n    assertEquals(clusters.size(), 5);\n    assertTrue(clusters.contains(\"cluster1\"));\n    assertTrue(clusters.contains(\"cluster2\"));\n    assertTrue(clusters.contains(\"cluster3\"));\n    assertTrue(clusters.contains(\"cluster4\"));\n    assertTrue(clusters.contains(\"cluster5\"));\n\n    cexpr = \"let(a=matrix(array(0,1,2,3,4,5,6,7,8,9,10,11), array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    Tuple tuple = tuples.get(0);\n    String xLabel = tuple.getString(\"x\");\n    String yLabel = tuple.getString(\"y\");\n    Number z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col01\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col02\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row1\");\n    assertEquals(z.longValue(), 10L);\n\n\n    cexpr = \"let(a=transpose(matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                           array(10,11,12,13,14,15,16,17,18,19,20,21))),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col1\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 10L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row01\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row06\");\n    assertEquals(z.longValue(), 6L);\n\n    cexpr = \"let(a=matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                 array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        b=setRowLabels(a, array(\\\"blah1\\\", \\\"blah2\\\")),\"+\n        \"        c=setColumnLabels(b, array(\\\"rah1\\\", \\\"rah2\\\", \\\"rah3\\\", \\\"rah4\\\", \\\"rah5\\\", \\\"rah6\\\", \\\"rah7\\\", \\\"rah8\\\", \\\"rah9\\\", \\\"rah10\\\", \\\"rah11\\\", \\\"rah12\\\")),\"+\n        \"        zplot(heat=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah2\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah3\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah2\");\n    assertEquals(z.longValue(), 10L);\n  }\n\n","sourceOld":"  @Test\n  public void testZplot() throws Exception {\n\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n\n\n    String cexpr = \"let(a=array(1,2,3,4),\" +\n        \"        b=array(10,11,12,13),\"+\n        \"        zplot(x=a, y=b))\";\n\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    TupleStream solrStream = new SolrStream(url, paramsLoc);\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    Tuple out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 4.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n\n    cexpr = \"let(b=array(10,11,12,13),\"+\n        \"        zplot(y=b))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 4);\n    out = tuples.get(0);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 0.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 10.0, 0.0);\n\n    out = tuples.get(1);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 1.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 11.0, 0.0);\n\n    out = tuples.get(2);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 2.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 12.0, 0.0);\n\n    out = tuples.get(3);\n\n    assertEquals(out.getDouble(\"x\").doubleValue(), 3.0, 0.0);\n    assertEquals(out.getDouble(\"y\").doubleValue(), 13.0, 0.0);\n\n    cexpr = \"zplot(dist=binomialDistribution(10, .50))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertEquals(tuples.size(),11);\n    long x = tuples.get(5).getLong(\"x\");\n    double y = tuples.get(5).getDouble(\"y\");\n\n    assertEquals(x, 5);\n    assertEquals(y,     0.24609375000000003, 0);\n\n    //Due to random errors (bugs) in Apache Commons Math EmpiricalDistribution\n    //there are times when tuples are discarded because\n    //they contain values with NaN values. This will occur\n    //only on the very end of the tails of the normal distribution or other\n    //real distributions and doesn't effect the visual quality of the curve very much.\n    //But it does effect the reliability of tests.\n    //For this reason the loop below is in place to run the test N times looking\n    //for the correct number of tuples before asserting the mean.\n\n    int n = 0;\n    int limit = 15;\n    while(true) {\n      cexpr = \"zplot(dist=normalDistribution(100, 10))\";\n      paramsLoc = new ModifiableSolrParams();\n      paramsLoc.set(\"expr\", cexpr);\n      paramsLoc.set(\"qt\", \"/stream\");\n      solrStream = new SolrStream(url, paramsLoc);\n      context = new StreamContext();\n      solrStream.setStreamContext(context);\n      tuples = getTuples(solrStream);\n      //Assert the mean\n      if (tuples.size() == 32) {\n        double x1 = tuples.get(15).getDouble(\"x\");\n        double y1 = tuples.get(15).getDouble(\"y\");\n        assertEquals(x1, 100, 10);\n        assertEquals(y1, .039, .02);\n        break;\n      } else {\n        ++n;\n        if(n == limit) {\n          throw new Exception(\"Reached iterations limit without correct tuple count.\");\n        }\n      }\n    }\n\n    cexpr = \"let(a=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        b=sample(normalDistribution(40, 1.5), 700),\" +\n        \"        c=transpose(matrix(a, b)),\"+\n        \"        d=kmeans(c, 5),\"+\n        \"        zplot(clusters=d))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 700);\n\n    Set clusters = new HashSet();\n    for(Tuple tup : tuples) {\n      assertNotNull(tup.get(\"x\"));\n      assertNotNull(tup.get(\"y\"));\n      clusters.add(tup.getString(\"cluster\"));\n    }\n\n    assertEquals(clusters.size(), 5);\n    assertTrue(clusters.contains(\"cluster1\"));\n    assertTrue(clusters.contains(\"cluster2\"));\n    assertTrue(clusters.contains(\"cluster3\"));\n    assertTrue(clusters.contains(\"cluster4\"));\n    assertTrue(clusters.contains(\"cluster5\"));\n\n    cexpr = \"let(a=matrix(array(0,1,2,3,4,5,6,7,8,9,10,11), array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    Tuple tuple = tuples.get(0);\n    String xLabel = tuple.getString(\"x\");\n    String yLabel = tuple.getString(\"y\");\n    Number z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col01\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col02\");\n    assertEquals(yLabel, \"row0\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col00\");\n    assertEquals(yLabel, \"row1\");\n    assertEquals(z.longValue(), 10L);\n\n\n    cexpr = \"let(a=transpose(matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                           array(10,11,12,13,14,15,16,17,18,19,20,21))),\" +\n        \"        zplot(heat=a))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col1\");\n    assertEquals(yLabel, \"row00\");\n    assertEquals(z.longValue(), 10L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row01\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"col0\");\n    assertEquals(yLabel, \"row06\");\n    assertEquals(z.longValue(), 6L);\n\n    cexpr = \"let(a=matrix(array(0, 1, 2, 3, 4, 5, 6, 7,8,9,10,11), \" +\n        \"                 array(10,11,12,13,14,15,16,17,18,19,20,21)),\" +\n        \"        b=setRowLabels(a, array(\\\"blah1\\\", \\\"blah2\\\")),\"+\n        \"        c=setColumnLabels(b, array(\\\"rah1\\\", \\\"rah2\\\", \\\"rah3\\\", \\\"rah4\\\", \\\"rah5\\\", \\\"rah6\\\", \\\"rah7\\\", \\\"rah8\\\", \\\"rah9\\\", \\\"rah10\\\", \\\"rah11\\\", \\\"rah12\\\")),\"+\n        \"        zplot(heat=c))\";\n\n    paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", cexpr);\n    paramsLoc.set(\"qt\", \"/stream\");\n    solrStream = new SolrStream(url, paramsLoc);\n    context = new StreamContext();\n    solrStream.setStreamContext(context);\n    tuples = getTuples(solrStream);\n    assertTrue(tuples.size() == 24);\n    tuple = tuples.get(0);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 0L);\n\n    tuple = tuples.get(1);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah2\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 1L);\n\n    tuple = tuples.get(2);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah3\");\n    assertEquals(yLabel, \"blah1\");\n    assertEquals(z.longValue(), 2L);\n\n    tuple = tuples.get(12);\n    xLabel = tuple.getString(\"x\");\n    yLabel = tuple.getString(\"y\");\n    z = tuple.getLong(\"z\");\n\n    assertEquals(xLabel, \"rah1\");\n    assertEquals(yLabel, \"blah2\");\n    assertEquals(z.longValue(), 10L);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["c469fe67f2da2a654eb8d709dfd239236f23a9a2"],"7c321d251297b1429500664d9fabd7e5f78d87aa":["3e20dc8a74764ae091d43344295c88e92031a5ca"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["7c321d251297b1429500664d9fabd7e5f78d87aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["8d2ebfffa7de566fcbacb528a536a81ac3d15168"],"3e20dc8a74764ae091d43344295c88e92031a5ca":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"],"8d2ebfffa7de566fcbacb528a536a81ac3d15168":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b0b597c65628ca9e73913a07e81691f8229bae35":["7c321d251297b1429500664d9fabd7e5f78d87aa","c469fe67f2da2a654eb8d709dfd239236f23a9a2"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c321d251297b1429500664d9fabd7e5f78d87aa":["c469fe67f2da2a654eb8d709dfd239236f23a9a2","b0b597c65628ca9e73913a07e81691f8229bae35"],"c469fe67f2da2a654eb8d709dfd239236f23a9a2":["9ba1b632c041956c93c41aa1143d16a567014891","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8d2ebfffa7de566fcbacb528a536a81ac3d15168"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["3e20dc8a74764ae091d43344295c88e92031a5ca"],"3e20dc8a74764ae091d43344295c88e92031a5ca":["7c321d251297b1429500664d9fabd7e5f78d87aa"],"8d2ebfffa7de566fcbacb528a536a81ac3d15168":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}