{"path":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(Class,String,boolean,boolean).mjava","commits":[{"id":"28a016ae2abf4934515e45810192aa4350e3092b","date":1252309557,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(Class,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(String,boolean,boolean).mjava","sourceNew":"  private void loadPluginInfo(Class clazz, String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n       if(pluginInfo.isEnabled()) result.add(pluginInfo);\n     }\n    if(!result.isEmpty()) pluginStore.put(clazz.getName(),result);\n  }\n\n","sourceOld":"  private List<PluginInfo> loadPluginInfo(String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n       if(pluginInfo.isEnabled()) result.add(pluginInfo);\n     }\n    return result.isEmpty() ?\n            Collections.<PluginInfo>emptyList() :\n            Collections.unmodifiableList(result) ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72795268249b27583ff50fb731db1179e4d4bdce","date":1253625275,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(Class,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(Class,String,boolean,boolean).mjava","sourceNew":"  private void loadPluginInfo(Class clazz, String tag, boolean requireName, boolean requireClass) {\n    List<PluginInfo> result = readPluginInfos(tag, requireName, requireClass);\n    if(!result.isEmpty()) pluginStore.put(clazz.getName(),result);\n  }\n\n","sourceOld":"  private void loadPluginInfo(Class clazz, String tag, boolean requireName, boolean requireClass) {\n    ArrayList<PluginInfo> result = new ArrayList<PluginInfo>();\n    NodeList nodes = (NodeList) evaluate(tag, XPathConstants.NODESET);\n     for (int i=0; i<nodes.getLength(); i++) {\n       PluginInfo pluginInfo = new PluginInfo(nodes.item(i), \"[solrconfig.xml] \" + tag, requireName, requireClass);\n       if(pluginInfo.isEnabled()) result.add(pluginInfo);\n     }\n    if(!result.isEmpty()) pluginStore.put(clazz.getName(),result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(Class,String,boolean,boolean).mjava","pathOld":"src/java/org/apache/solr/core/SolrConfig#loadPluginInfo(Class,String,boolean,boolean).mjava","sourceNew":"  private void loadPluginInfo(Class clazz, String tag, boolean requireName, boolean requireClass) {\n    List<PluginInfo> result = readPluginInfos(tag, requireName, requireClass);\n    if(!result.isEmpty()) pluginStore.put(clazz.getName(),result);\n  }\n\n","sourceOld":"  private void loadPluginInfo(Class clazz, String tag, boolean requireName, boolean requireClass) {\n    List<PluginInfo> result = readPluginInfos(tag, requireName, requireClass);\n    if(!result.isEmpty()) pluginStore.put(clazz.getName(),result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"72795268249b27583ff50fb731db1179e4d4bdce":["28a016ae2abf4934515e45810192aa4350e3092b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["72795268249b27583ff50fb731db1179e4d4bdce"],"28a016ae2abf4934515e45810192aa4350e3092b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"72795268249b27583ff50fb731db1179e4d4bdce":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["28a016ae2abf4934515e45810192aa4350e3092b"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"28a016ae2abf4934515e45810192aa4350e3092b":["72795268249b27583ff50fb731db1179e4d4bdce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}