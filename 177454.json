{"path":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartitionWithEmptyValues().mjava","commits":[{"id":"9f54c4bd7e9b6532e1e90cc7fad89988aed5f122","date":1533418356,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartitionWithEmptyValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHashPartitionWithEmptyValues() throws Exception {\n\n    assertU(adoc(\"id\", \"1\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"2\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    //Test with string hash\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=1 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"wt\", \"xml\");\n    String response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n\n    //Test with int hash\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=1 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"wt\", \"xml\");\n    response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["85b7d92fa7b7dac117c267e0ad18c1f62df5a15c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85b7d92fa7b7dac117c267e0ad18c1f62df5a15c","date":1534705178,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartitionWithEmptyValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartitionWithEmptyValues().mjava","sourceNew":"  @Test\n  public void testHashPartitionWithEmptyValues() throws Exception {\n\n    assertU(adoc(\"id\", \"1\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"2\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    //Test with string hash\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"wt\", \"xml\");\n    String response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n\n    //Test with int hash\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"wt\", \"xml\");\n    response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartitionWithEmptyValues() throws Exception {\n\n    assertU(adoc(\"id\", \"1\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"2\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    //Test with string hash\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=1 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"wt\", \"xml\");\n    String response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n\n    //Test with int hash\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=1 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"wt\", \"xml\");\n    response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n  }\n\n","bugFix":["9f54c4bd7e9b6532e1e90cc7fad89988aed5f122"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd6cf7e1b30a14801c9e290183b875c6801bbe9","date":1591734817,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartitionWithEmptyValues().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestHashQParserPlugin#testHashPartitionWithEmptyValues().mjava","sourceNew":"  @Test\n  public void testHashPartitionWithEmptyValues() throws Exception {\n\n    assertU(adoc(\"id\", \"1\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"2\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    //Test with string hash\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"wt\", \"xml\");\n    String response = h.query(req(params));\n    BaseTestHarness.validateXPath(response, \"//*[@numFound='4']\");\n\n    //Test with int hash\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"wt\", \"xml\");\n    response = h.query(req(params));\n    BaseTestHarness.validateXPath(response, \"//*[@numFound='4']\");\n  }\n\n","sourceOld":"  @Test\n  public void testHashPartitionWithEmptyValues() throws Exception {\n\n    assertU(adoc(\"id\", \"1\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"2\", \"a_s\", \"one\", \"a_i\" , \"1\"));\n    assertU(adoc(\"id\", \"3\"));\n    assertU(adoc(\"id\", \"4\"));\n    assertU(commit());\n\n    //Test with string hash\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_s\");\n    params.add(\"wt\", \"xml\");\n    String response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n\n    //Test with int hash\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!hash worker=0 workers=2 cost=\"+getCost(random())+\"}\");\n    params.add(\"partitionKeys\", \"a_i\");\n    params.add(\"wt\", \"xml\");\n    response = h.query(req(params));\n    h.validateXPath(response, \"//*[@numFound='4']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["85b7d92fa7b7dac117c267e0ad18c1f62df5a15c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9f54c4bd7e9b6532e1e90cc7fad89988aed5f122":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85b7d92fa7b7dac117c267e0ad18c1f62df5a15c":["9f54c4bd7e9b6532e1e90cc7fad89988aed5f122"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"]},"commit2Childs":{"9dd6cf7e1b30a14801c9e290183b875c6801bbe9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9f54c4bd7e9b6532e1e90cc7fad89988aed5f122"],"9f54c4bd7e9b6532e1e90cc7fad89988aed5f122":["85b7d92fa7b7dac117c267e0ad18c1f62df5a15c"],"85b7d92fa7b7dac117c267e0ad18c1f62df5a15c":["9dd6cf7e1b30a14801c9e290183b875c6801bbe9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}