{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"/dev/null","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              String indexedValue = ((BytesRef) sortValue).utf8ToChars(spare).toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0a78ab521623caecbd36991301ea579bd377775c","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0","date":1322229341,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              String indexedValue = ((BytesRef) sortValue).utf8ToChars(spare).toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a78ab521623caecbd36991301ea579bd377775c","date":1328025398,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toObject(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","date":1344218343,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 0.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 0.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    SchemaField uniqueField = rb.req.getSearcher().getSchema().getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? rb.req.getSearcher().getSchema().getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25","date":1389830331,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","ccc08aa684aee4964baee0644a6ba047bfd70829","da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27ab7b234eab0cbc020836989b96ed430e1065bb","date":1389894025,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue instanceof BytesRef) {\n              UnicodeUtil.UTF8toUTF16((BytesRef)sortValue, spare);\n              String indexedValue = spare.toString();\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable(indexedValue), 1.0f));\n            } else if (sortValue instanceof String) {\n              sortValue = fieldType.toObject(field.createField(fieldType.indexedToReadable((String) sortValue), 1.0f));\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<Object>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<Object>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<NamedList<Object>>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<Object>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2","date":1448513807,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n    CharsRef spare = new CharsRef();\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue;\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        StoredDocument doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01","date":1489998096,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06f29c9961912220543423aa6fc6f64362874871","date":1490280012,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ? groupField.getType().indexedToReadable(searchGroup.groupValue.utf8ToString()): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(\"id\", uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f7a37353edeecde86a45f4895ef74901a0158b","date":1492601294,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort withinGroupSort = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = withinGroupSort.getSort()[j].getField() != null ? schema.getFieldOrNull(withinGroupSort.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort withinGroupSort = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = withinGroupSort.getSort()[j].getField() != null ? schema.getFieldOrNull(withinGroupSort.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort sortWithinGroup = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = sortWithinGroup.getSort()[j].getField() != null ? schema.getFieldOrNull(sortWithinGroup.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      assert searchGroup.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      groupResult.add(\"totalHits\", searchGroup.totalHits.value);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort withinGroupSort = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = withinGroupSort.getSort()[j].getField() != null ? schema.getFieldOrNull(withinGroupSort.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      groupResult.add(\"totalHits\", searchGroup.totalHits);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort withinGroupSort = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = withinGroupSort.getSort()[j].getField() != null ? schema.getFieldOrNull(withinGroupSort.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85bef26bbc598445704c1f9c6d7953f3942d5426","date":1562162588,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer#serializeTopGroups(TopGroups[BytesRef],SchemaField).mjava","sourceNew":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      assert searchGroup.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      groupResult.add(\"totalHits\", searchGroup.totalHits.value);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort withinGroupSort = rb.getGroupingSpec().getWithinGroupSortSpec().getSort();\n          SchemaField field = withinGroupSort.getSort()[j].getField() != null ? schema.getFieldOrNull(withinGroupSort.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","sourceOld":"  protected NamedList serializeTopGroups(TopGroups<BytesRef> data, SchemaField groupField) throws IOException {\n    NamedList<Object> result = new NamedList<>();\n    result.add(\"totalGroupedHitCount\", data.totalGroupedHitCount);\n    result.add(\"totalHitCount\", data.totalHitCount);\n    if (data.totalGroupCount != null) {\n      result.add(\"totalGroupCount\", data.totalGroupCount);\n    }\n\n    final IndexSchema schema = rb.req.getSearcher().getSchema();\n    SchemaField uniqueField = schema.getUniqueKeyField();\n    for (GroupDocs<BytesRef> searchGroup : data.groups) {\n      NamedList<Object> groupResult = new NamedList<>();\n      assert searchGroup.totalHits.relation == TotalHits.Relation.EQUAL_TO;\n      groupResult.add(\"totalHits\", searchGroup.totalHits.value);\n      if (!Float.isNaN(searchGroup.maxScore)) {\n        groupResult.add(\"maxScore\", searchGroup.maxScore);\n      }\n\n      List<NamedList<Object>> documents = new ArrayList<>();\n      for (int i = 0; i < searchGroup.scoreDocs.length; i++) {\n        NamedList<Object> document = new NamedList<>();\n        documents.add(document);\n\n        Document doc = retrieveDocument(uniqueField, searchGroup.scoreDocs[i].doc);\n        document.add(ID, uniqueField.getType().toExternal(doc.getField(uniqueField.getName())));\n        if (!Float.isNaN(searchGroup.scoreDocs[i].score))  {\n          document.add(\"score\", searchGroup.scoreDocs[i].score);\n        }\n        if (!(searchGroup.scoreDocs[i] instanceof FieldDoc)) {\n          continue; // thus don't add sortValues below\n        }\n\n        FieldDoc fieldDoc = (FieldDoc) searchGroup.scoreDocs[i];\n        Object[] convertedSortValues  = new Object[fieldDoc.fields.length];\n        for (int j = 0; j < fieldDoc.fields.length; j++) {\n          Object sortValue  = fieldDoc.fields[j];\n          Sort withinGroupSort = rb.getGroupingSpec().getSortWithinGroup();\n          SchemaField field = withinGroupSort.getSort()[j].getField() != null ? schema.getFieldOrNull(withinGroupSort.getSort()[j].getField()) : null;\n          if (field != null) {\n            FieldType fieldType = field.getType();\n            if (sortValue != null) {\n              sortValue = fieldType.marshalSortValue(sortValue);\n            }\n          }\n          convertedSortValues[j] = sortValue;\n        }\n        document.add(\"sortValues\", convertedSortValues);\n      }\n      groupResult.add(\"documents\", documents);\n      String groupValue = searchGroup.groupValue != null ?\n          groupField.getType().indexedToReadable(searchGroup.groupValue, new CharsRefBuilder()).toString(): null;\n      result.add(groupValue, groupResult);\n    }\n\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e5fa6615014cd2288fe930f8c8bb726f9504961d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["08970e5b8411182a29412c177eff67ec1110095b","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"55f7a37353edeecde86a45f4895ef74901a0158b":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["08970e5b8411182a29412c177eff67ec1110095b"],"08970e5b8411182a29412c177eff67ec1110095b":["1d028314cced5858683a1bb4741423d0f934257b"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["06f29c9961912220543423aa6fc6f64362874871"],"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72":["0a78ab521623caecbd36991301ea579bd377775c"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["0a78ab521623caecbd36991301ea579bd377775c","f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72"],"0a78ab521623caecbd36991301ea579bd377775c":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a7e4907084808af8fdb14b9809e6dceaccf6867b","f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["55f7a37353edeecde86a45f4895ef74901a0158b"],"06f29c9961912220543423aa6fc6f64362874871":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["0a78ab521623caecbd36991301ea579bd377775c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2"],"da6c07e76d701edbcc45c3e83ad8464a5e44a4c0":["0a78ab521623caecbd36991301ea579bd377775c"],"27ab7b234eab0cbc020836989b96ed430e1065bb":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["da6c07e76d701edbcc45c3e83ad8464a5e44a4c0"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["55f7a37353edeecde86a45f4895ef74901a0158b"],"5e8a6094f2ecf9edcd3bb224b087580ac0aa13f2":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25":["27ab7b234eab0cbc020836989b96ed430e1065bb"],"55f7a37353edeecde86a45f4895ef74901a0158b":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"08970e5b8411182a29412c177eff67ec1110095b":["27ab7b234eab0cbc020836989b96ed430e1065bb","a485770e19d1ea7a458aa6b08bd2ff0c4b5bec25"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"1d028314cced5858683a1bb4741423d0f934257b":["08970e5b8411182a29412c177eff67ec1110095b"],"f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72":["1d028314cced5858683a1bb4741423d0f934257b","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"0a78ab521623caecbd36991301ea579bd377775c":["f9adff53c0ebbe9ea861e28bc9f40208dfbc7a72","c7869f64c874ebf7f317d22c00baf2b6857797a6","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"85bef26bbc598445704c1f9c6d7953f3942d5426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["1d028314cced5858683a1bb4741423d0f934257b"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["85bef26bbc598445704c1f9c6d7953f3942d5426"],"06f29c9961912220543423aa6fc6f64362874871":["e5fa6615014cd2288fe930f8c8bb726f9504961d"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6ce489ffe249d0942d3dd9d8f0b46d3a5385ca01","06f29c9961912220543423aa6fc6f64362874871"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c7869f64c874ebf7f317d22c00baf2b6857797a6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}