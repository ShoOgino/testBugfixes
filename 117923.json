{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   * */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":["77301f098b899884dd472e6b27fb5f8136189fe3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   * */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   * */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   * */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","498e168d849b4dbc097ac7b31f6db170d6f55725"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","498e168d849b4dbc097ac7b31f6db170d6f55725"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}