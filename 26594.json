{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640a015a5b43a8d9d05b311071bf93beb685e6b1","date":1338352782,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74fe524b3f952dcace4fd46ad5e69b16d5090c57","date":1338527592,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder,boolean).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellDictionary#readAffixFile(InputStream,CharsetDecoder).mjava","sourceNew":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder, boolean strict) throws IOException, ParseException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n\n    LineNumberReader reader = new LineNumberReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN, strict);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","sourceOld":"  /**\n   * Reads the affix file through the provided InputStream, building up the prefix and suffix maps\n   *\n   * @param affixStream InputStream to read the content of the affix file from\n   * @param decoder CharsetDecoder to decode the content of the file\n   * @throws IOException Can be thrown while reading from the InputStream\n   */\n  private void readAffixFile(InputStream affixStream, CharsetDecoder decoder) throws IOException {\n    prefixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    suffixes = new CharArrayMap<List<HunspellAffix>>(version, 8, ignoreCase);\n    \n    BufferedReader reader = new BufferedReader(new InputStreamReader(affixStream, decoder));\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n      if (line.startsWith(ALIAS_KEY)) {\n        parseAlias(line);\n      } else if (line.startsWith(PREFIX_KEY)) {\n        parseAffix(prefixes, line, reader, PREFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(SUFFIX_KEY)) {\n        parseAffix(suffixes, line, reader, SUFFIX_CONDITION_REGEX_PATTERN);\n      } else if (line.startsWith(FLAG_KEY)) {\n        // Assume that the FLAG line comes before any prefix or suffixes\n        // Store the strategy so it can be used when parsing the dic file\n        flagParsingStrategy = getFlagParsingStrategy(line);\n      }\n    }\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"640a015a5b43a8d9d05b311071bf93beb685e6b1":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["640a015a5b43a8d9d05b311071bf93beb685e6b1"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["640a015a5b43a8d9d05b311071bf93beb685e6b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"640a015a5b43a8d9d05b311071bf93beb685e6b1":["74fe524b3f952dcace4fd46ad5e69b16d5090c57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"74fe524b3f952dcace4fd46ad5e69b16d5090c57":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}