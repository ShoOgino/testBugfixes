{"path":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","commits":[{"id":"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd","date":1380757525,"type":0,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Used for getting one or many arguments from NamedList objects that hold\n   * configuration parameters. Finds all entries in the NamedList that match\n   * the given name. If they are all strings or arrays of strings, remove them\n   * from the NamedList and return the individual elements as a {@link Collection}.\n   * Parameter order will be preserved if the returned collection is handled as\n   * an {@link ArrayList}. Throws SolrException if any of the values associated\n   * with the name are not strings or arrays of strings.  If exception is\n   * thrown, the NamedList is not modified.  Returns an empty collection if no\n   * matches found.  If you need to remove and retrieve all matching items from\n   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.\n   * \n   * @param name\n   *          The key to look up in the NamedList.\n   * @return A collection of the values found.\n   * @throws SolrException\n   *           If values are found for the input key that are not strings or\n   *           arrays of strings.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Collection<String> removeConfigArgs(final String name)\n      throws SolrException {\n    List<T> objects = getAll(name);\n    List<String> collection = new ArrayList<String>(size() / 2);\n    final String err = \"init arg '\" + name + \"' must be a string \"\n        + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o : objects) {\n      if (o instanceof String) {\n        collection.add((String) o);\n        continue;\n      }\n      \n      // If it's an array, convert to List (which is a Collection).\n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      // If it's a Collection, collect each value.\n      if (o instanceof Collection) {\n        for (Object item : (Collection) o) {\n          if (!(item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          collection.add((String) item);\n        }\n        continue;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    if (collection.size() > 0) {\n      killAll(name);\n    }\n    \n    return collection;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daeabea0f98580c53abe9b70ec5b71caa9dd32","date":1380827550,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","sourceNew":"  /**\n   * Used for getting one or many arguments from NamedList objects that hold\n   * configuration parameters. Finds all entries in the NamedList that match\n   * the given name. If they are all strings or arrays of strings, remove them\n   * from the NamedList and return the individual elements as a {@link Collection}.\n   * Parameter order will be preserved if the returned collection is handled as\n   * an {@link ArrayList}. Throws SolrException if any of the values associated\n   * with the name are not strings or arrays of strings.  If exception is\n   * thrown, the NamedList is not modified.  Returns an empty collection if no\n   * matches found.  If you need to remove and retrieve all matching items from\n   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.\n   * The {@link #removeBooleanArg(String)} method can be used for retrieving a\n   * boolean argument.\n   * \n   * @param name\n   *          The key to look up in the NamedList.\n   * @return A collection of the values found.\n   * @throws SolrException\n   *           If values are found for the input key that are not strings or\n   *           arrays of strings.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Collection<String> removeConfigArgs(final String name)\n      throws SolrException {\n    List<T> objects = getAll(name);\n    List<String> collection = new ArrayList<String>(size() / 2);\n    final String err = \"init arg '\" + name + \"' must be a string \"\n        + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o : objects) {\n      if (o instanceof String) {\n        collection.add((String) o);\n        continue;\n      }\n      \n      // If it's an array, convert to List (which is a Collection).\n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      // If it's a Collection, collect each value.\n      if (o instanceof Collection) {\n        for (Object item : (Collection) o) {\n          if (!(item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          collection.add((String) item);\n        }\n        continue;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    if (collection.size() > 0) {\n      killAll(name);\n    }\n    \n    return collection;\n  }\n\n","sourceOld":"  /**\n   * Used for getting one or many arguments from NamedList objects that hold\n   * configuration parameters. Finds all entries in the NamedList that match\n   * the given name. If they are all strings or arrays of strings, remove them\n   * from the NamedList and return the individual elements as a {@link Collection}.\n   * Parameter order will be preserved if the returned collection is handled as\n   * an {@link ArrayList}. Throws SolrException if any of the values associated\n   * with the name are not strings or arrays of strings.  If exception is\n   * thrown, the NamedList is not modified.  Returns an empty collection if no\n   * matches found.  If you need to remove and retrieve all matching items from\n   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.\n   * \n   * @param name\n   *          The key to look up in the NamedList.\n   * @return A collection of the values found.\n   * @throws SolrException\n   *           If values are found for the input key that are not strings or\n   *           arrays of strings.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Collection<String> removeConfigArgs(final String name)\n      throws SolrException {\n    List<T> objects = getAll(name);\n    List<String> collection = new ArrayList<String>(size() / 2);\n    final String err = \"init arg '\" + name + \"' must be a string \"\n        + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o : objects) {\n      if (o instanceof String) {\n        collection.add((String) o);\n        continue;\n      }\n      \n      // If it's an array, convert to List (which is a Collection).\n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      // If it's a Collection, collect each value.\n      if (o instanceof Collection) {\n        for (Object item : (Collection) o) {\n          if (!(item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          collection.add((String) item);\n        }\n        continue;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    if (collection.size() > 0) {\n      killAll(name);\n    }\n    \n    return collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","sourceNew":"  /**\n   * Used for getting one or many arguments from NamedList objects that hold\n   * configuration parameters. Finds all entries in the NamedList that match\n   * the given name. If they are all strings or arrays of strings, remove them\n   * from the NamedList and return the individual elements as a {@link Collection}.\n   * Parameter order will be preserved if the returned collection is handled as\n   * an {@link ArrayList}. Throws SolrException if any of the values associated\n   * with the name are not strings or arrays of strings.  If exception is\n   * thrown, the NamedList is not modified.  Returns an empty collection if no\n   * matches found.  If you need to remove and retrieve all matching items from\n   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.\n   * The {@link #removeBooleanArg(String)} method can be used for retrieving a\n   * boolean argument.\n   * \n   * @param name\n   *          The key to look up in the NamedList.\n   * @return A collection of the values found.\n   * @throws SolrException\n   *           If values are found for the input key that are not strings or\n   *           arrays of strings.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Collection<String> removeConfigArgs(final String name)\n      throws SolrException {\n    List<T> objects = getAll(name);\n    List<String> collection = new ArrayList<>(size() / 2);\n    final String err = \"init arg '\" + name + \"' must be a string \"\n        + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o : objects) {\n      if (o instanceof String) {\n        collection.add((String) o);\n        continue;\n      }\n      \n      // If it's an array, convert to List (which is a Collection).\n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      // If it's a Collection, collect each value.\n      if (o instanceof Collection) {\n        for (Object item : (Collection) o) {\n          if (!(item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          collection.add((String) item);\n        }\n        continue;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    if (collection.size() > 0) {\n      killAll(name);\n    }\n    \n    return collection;\n  }\n\n","sourceOld":"  /**\n   * Used for getting one or many arguments from NamedList objects that hold\n   * configuration parameters. Finds all entries in the NamedList that match\n   * the given name. If they are all strings or arrays of strings, remove them\n   * from the NamedList and return the individual elements as a {@link Collection}.\n   * Parameter order will be preserved if the returned collection is handled as\n   * an {@link ArrayList}. Throws SolrException if any of the values associated\n   * with the name are not strings or arrays of strings.  If exception is\n   * thrown, the NamedList is not modified.  Returns an empty collection if no\n   * matches found.  If you need to remove and retrieve all matching items from\n   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.\n   * The {@link #removeBooleanArg(String)} method can be used for retrieving a\n   * boolean argument.\n   * \n   * @param name\n   *          The key to look up in the NamedList.\n   * @return A collection of the values found.\n   * @throws SolrException\n   *           If values are found for the input key that are not strings or\n   *           arrays of strings.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Collection<String> removeConfigArgs(final String name)\n      throws SolrException {\n    List<T> objects = getAll(name);\n    List<String> collection = new ArrayList<String>(size() / 2);\n    final String err = \"init arg '\" + name + \"' must be a string \"\n        + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o : objects) {\n      if (o instanceof String) {\n        collection.add((String) o);\n        continue;\n      }\n      \n      // If it's an array, convert to List (which is a Collection).\n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      // If it's a Collection, collect each value.\n      if (o instanceof Collection) {\n        for (Object item : (Collection) o) {\n          if (!(item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          collection.add((String) item);\n        }\n        continue;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    if (collection.size() > 0) {\n      killAll(name);\n    }\n    \n    return collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/NamedList#removeConfigArgs(String).mjava","sourceNew":"  /**\n   * Used for getting one or many arguments from NamedList objects that hold\n   * configuration parameters. Finds all entries in the NamedList that match\n   * the given name. If they are all strings or arrays of strings, remove them\n   * from the NamedList and return the individual elements as a {@link Collection}.\n   * Parameter order will be preserved if the returned collection is handled as\n   * an {@link ArrayList}. Throws SolrException if any of the values associated\n   * with the name are not strings or arrays of strings.  If exception is\n   * thrown, the NamedList is not modified.  Returns an empty collection if no\n   * matches found.  If you need to remove and retrieve all matching items from\n   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.\n   * The {@link #removeBooleanArg(String)} method can be used for retrieving a\n   * boolean argument.\n   * \n   * @param name\n   *          The key to look up in the NamedList.\n   * @return A collection of the values found.\n   * @throws SolrException\n   *           If values are found for the input key that are not strings or\n   *           arrays of strings.\n   */\n  public Collection<String> removeConfigArgs(final String name)\n      throws SolrException {\n    List<T> objects = getAll(name);\n    List<String> collection = new ArrayList<>(size() / 2);\n    final String err = \"init arg '\" + name + \"' must be a string \"\n        + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o : objects) {\n      if (o instanceof String) {\n        collection.add((String) o);\n        continue;\n      }\n      \n      // If it's an array, convert to List (which is a Collection).\n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      // If it's a Collection, collect each value.\n      if (o instanceof Collection) {\n        for (Object item : (Collection) o) {\n          if (!(item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          collection.add((String) item);\n        }\n        continue;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    if (collection.size() > 0) {\n      killAll(name);\n    }\n    \n    return collection;\n  }\n\n","sourceOld":"  /**\n   * Used for getting one or many arguments from NamedList objects that hold\n   * configuration parameters. Finds all entries in the NamedList that match\n   * the given name. If they are all strings or arrays of strings, remove them\n   * from the NamedList and return the individual elements as a {@link Collection}.\n   * Parameter order will be preserved if the returned collection is handled as\n   * an {@link ArrayList}. Throws SolrException if any of the values associated\n   * with the name are not strings or arrays of strings.  If exception is\n   * thrown, the NamedList is not modified.  Returns an empty collection if no\n   * matches found.  If you need to remove and retrieve all matching items from\n   * the NamedList regardless of data type, use {@link #removeAll(String)} instead.\n   * The {@link #removeBooleanArg(String)} method can be used for retrieving a\n   * boolean argument.\n   * \n   * @param name\n   *          The key to look up in the NamedList.\n   * @return A collection of the values found.\n   * @throws SolrException\n   *           If values are found for the input key that are not strings or\n   *           arrays of strings.\n   */\n  @SuppressWarnings(\"rawtypes\")\n  public Collection<String> removeConfigArgs(final String name)\n      throws SolrException {\n    List<T> objects = getAll(name);\n    List<String> collection = new ArrayList<>(size() / 2);\n    final String err = \"init arg '\" + name + \"' must be a string \"\n        + \"(ie: 'str'), or an array (ie: 'arr') containing strings; found: \";\n    \n    for (Object o : objects) {\n      if (o instanceof String) {\n        collection.add((String) o);\n        continue;\n      }\n      \n      // If it's an array, convert to List (which is a Collection).\n      if (o instanceof Object[]) {\n        o = Arrays.asList((Object[]) o);\n      }\n      \n      // If it's a Collection, collect each value.\n      if (o instanceof Collection) {\n        for (Object item : (Collection) o) {\n          if (!(item instanceof String)) {\n            throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + item.getClass());\n          }\n          collection.add((String) item);\n        }\n        continue;\n      }\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, err + o.getClass());\n    }\n    \n    if (collection.size() > 0) {\n      killAll(name);\n    }\n    \n    return collection;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d8daeabea0f98580c53abe9b70ec5b71caa9dd32":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["d8daeabea0f98580c53abe9b70ec5b71caa9dd32"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d8daeabea0f98580c53abe9b70ec5b71caa9dd32":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3ae0c36347d7586e501169851eb8fe2ad2b8f0dd"],"3ae0c36347d7586e501169851eb8fe2ad2b8f0dd":["d8daeabea0f98580c53abe9b70ec5b71caa9dd32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}