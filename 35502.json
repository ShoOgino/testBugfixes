{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight#bulkScorer(LeafReaderContext).mjava","commits":[{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight#bulkScorer(LeafReaderContext,Bits).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(final LeafReaderContext context) throws IOException {\n    final LeafReader reader = context.reader();\n    final Terms terms;\n    final NRTSuggester suggester;\n    if ((terms = reader.terms(completionQuery.getField())) == null) {\n      return null;\n    }\n    if (terms instanceof CompletionTerms) {\n      CompletionTerms completionTerms = (CompletionTerms) terms;\n      if ((suggester = completionTerms.suggester()) == null) {\n        // a segment can have a null suggester\n        // i.e. no FST was built\n        return null;\n      }\n    } else {\n      throw new IllegalArgumentException(completionQuery.getField() + \" is not a SuggestField\");\n    }\n\n    DocIdSet docIdSet = null;\n    Filter filter = completionQuery.getFilter();\n    if (filter != null) {\n      docIdSet = filter.getDocIdSet(context, null);\n      if (docIdSet == null || docIdSet.iterator() == null) {\n        // filter matches no docs in current leave\n        return null;\n      } else if (docIdSet.bits() == null) {\n        throw new IllegalArgumentException(\"DocIDSet does not provide random access interface\");\n      }\n    }\n    Bits acceptDocBits = (docIdSet != null) ? docIdSet.bits() : null;\n    return new CompletionScorer(this, suggester, reader, acceptDocBits, filter != null, automaton);\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(final LeafReaderContext context, Bits acceptDocs) throws IOException {\n    final LeafReader reader = context.reader();\n    final Terms terms;\n    final NRTSuggester suggester;\n    if ((terms = reader.terms(completionQuery.getField())) == null) {\n      return null;\n    }\n    if (terms instanceof CompletionTerms) {\n      CompletionTerms completionTerms = (CompletionTerms) terms;\n      if ((suggester = completionTerms.suggester()) == null) {\n        // a segment can have a null suggester\n        // i.e. no FST was built\n        return null;\n      }\n    } else {\n      throw new IllegalArgumentException(completionQuery.getField() + \" is not a SuggestField\");\n    }\n\n    DocIdSet docIdSet = null;\n    Filter filter = completionQuery.getFilter();\n    if (filter != null) {\n      docIdSet = filter.getDocIdSet(context, acceptDocs);\n      if (docIdSet == null || docIdSet.iterator() == null) {\n        // filter matches no docs in current leave\n        return null;\n      } else if (docIdSet.bits() == null) {\n        throw new IllegalArgumentException(\"DocIDSet does not provide random access interface\");\n      }\n    }\n    Bits acceptDocBits = (docIdSet != null) ? docIdSet.bits() : acceptDocs;\n    return new CompletionScorer(this, suggester, reader, acceptDocBits, filter != null, automaton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8cd299e7a00489961ab0877977e0f1b9f48a4c15","date":1435768484,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight#bulkScorer(LeafReaderContext).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/document/CompletionWeight#bulkScorer(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BulkScorer bulkScorer(final LeafReaderContext context) throws IOException {\n    final LeafReader reader = context.reader();\n    final Terms terms;\n    final NRTSuggester suggester;\n    if ((terms = reader.terms(completionQuery.getField())) == null) {\n      return null;\n    }\n    if (terms instanceof CompletionTerms) {\n      CompletionTerms completionTerms = (CompletionTerms) terms;\n      if ((suggester = completionTerms.suggester()) == null) {\n        // a segment can have a null suggester\n        // i.e. no FST was built\n        return null;\n      }\n    } else {\n      throw new IllegalArgumentException(completionQuery.getField() + \" is not a SuggestField\");\n    }\n\n    BitsProducer filter = completionQuery.getFilter();\n    Bits filteredDocs = null;\n    if (filter != null) {\n      filteredDocs = filter.getBits(context);\n      if (filteredDocs.getClass() == Bits.MatchNoBits.class) {\n        return null;\n      }\n    }\n    return new CompletionScorer(this, suggester, reader, filteredDocs, filter != null, automaton);\n  }\n\n","sourceOld":"  @Override\n  public BulkScorer bulkScorer(final LeafReaderContext context) throws IOException {\n    final LeafReader reader = context.reader();\n    final Terms terms;\n    final NRTSuggester suggester;\n    if ((terms = reader.terms(completionQuery.getField())) == null) {\n      return null;\n    }\n    if (terms instanceof CompletionTerms) {\n      CompletionTerms completionTerms = (CompletionTerms) terms;\n      if ((suggester = completionTerms.suggester()) == null) {\n        // a segment can have a null suggester\n        // i.e. no FST was built\n        return null;\n      }\n    } else {\n      throw new IllegalArgumentException(completionQuery.getField() + \" is not a SuggestField\");\n    }\n\n    DocIdSet docIdSet = null;\n    Filter filter = completionQuery.getFilter();\n    if (filter != null) {\n      docIdSet = filter.getDocIdSet(context, null);\n      if (docIdSet == null || docIdSet.iterator() == null) {\n        // filter matches no docs in current leave\n        return null;\n      } else if (docIdSet.bits() == null) {\n        throw new IllegalArgumentException(\"DocIDSet does not provide random access interface\");\n      }\n    }\n    Bits acceptDocBits = (docIdSet != null) ? docIdSet.bits() : null;\n    return new CompletionScorer(this, suggester, reader, acceptDocBits, filter != null, automaton);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8cd299e7a00489961ab0877977e0f1b9f48a4c15":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8cd299e7a00489961ab0877977e0f1b9f48a4c15"]},"commit2Childs":{"0f4464508ee83288c8c4585b533f9faaa93aa314":["8cd299e7a00489961ab0877977e0f1b9f48a4c15"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"8cd299e7a00489961ab0877977e0f1b9f48a4c15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}