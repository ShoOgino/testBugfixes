{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2989b58779e186266a5d5ab0c6fc46096e68b848","date":1350919624,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"62e52115b56781006682fd92c6938efaf174304d","date":1351014780,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.BlockDocsEnum#reset(Bits,IntBlockTermState).mjava","sourceNew":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      totalTermFreq = indexHasFreq ? termState.totalTermFreq : docFreq;\n      docTermStartFP = termState.docStartFP;\n      skipOffset = termState.skipOffset;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n\n      doc = -1;\n      this.needsFreq = (flags & DocsEnum.FLAG_FREQS) != 0;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public DocsEnum reset(Bits liveDocs, IntBlockTermState termState) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      docIn.seek(docTermStartFP);\n      skipOffset = termState.skipOffset;\n\n      doc = -1;\n      if (!indexHasFreq) {\n        Arrays.fill(freqBuffer, 1);\n      }\n      accum = 0;\n      docUpto = 0;\n      nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"62e52115b56781006682fd92c6938efaf174304d":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","2989b58779e186266a5d5ab0c6fc46096e68b848"],"2989b58779e186266a5d5ab0c6fc46096e68b848":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2989b58779e186266a5d5ab0c6fc46096e68b848"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["2989b58779e186266a5d5ab0c6fc46096e68b848","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"62e52115b56781006682fd92c6938efaf174304d":[],"2989b58779e186266a5d5ab0c6fc46096e68b848":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["62e52115b56781006682fd92c6938efaf174304d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["62e52115b56781006682fd92c6938efaf174304d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}