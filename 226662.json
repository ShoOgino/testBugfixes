{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // examine the values to determine best type to use\n    HashSet<BytesRef> uniqueValues = new HashSet<>();\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      if (b == null) {\n        b = new BytesRef(); // 4.0 doesnt distinguish\n      }\n      if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(BytesRef.deepCopyOf(b))) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n    \n    int maxDoc = state.segmentInfo.getDocCount();\n    final boolean fixed = minLength == maxLength;\n    final boolean dedup = uniqueValues != null && uniqueValues.size() * 2 < maxDoc;\n    \n    if (dedup) {\n      // we will deduplicate and deref values\n      boolean success = false;\n      IndexOutput data = null;\n      IndexOutput index = null;\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      try {\n        data = dir.createOutput(dataName, state.context);\n        index = dir.createOutput(indexName, state.context);\n        if (fixed) {\n          addFixedDerefBytesField(field, data, index, values, minLength);\n        } else {\n          addVarDerefBytesField(field, data, index, values);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n    } else {\n      // we dont deduplicate, just write values straight\n      if (fixed) {\n        // fixed byte[]\n        String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        IndexOutput data = dir.createOutput(fileName, state.context);\n        boolean success = false;\n        try {\n          addFixedStraightBytesField(field, data, values, minLength);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data);\n          } else {\n            IOUtils.closeWhileHandlingException(data);\n          }\n        }\n      } else {\n        // variable byte[]\n        boolean success = false;\n        IndexOutput data = null;\n        IndexOutput index = null;\n        String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n        try {\n          data = dir.createOutput(dataName, state.context);\n          index = dir.createOutput(indexName, state.context);\n          addVarStraightBytesField(field, data, index, values);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data, index);\n          } else {\n            IOUtils.closeWhileHandlingException(data, index);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // examine the values to determine best type to use\n    HashSet<BytesRef> uniqueValues = new HashSet<>();\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      if (b == null) {\n        b = new BytesRef(); // 4.0 doesnt distinguish\n      }\n      if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(BytesRef.deepCopyOf(b))) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n    \n    int maxDoc = state.segmentInfo.getDocCount();\n    final boolean fixed = minLength == maxLength;\n    final boolean dedup = uniqueValues != null && uniqueValues.size() * 2 < maxDoc;\n    \n    if (dedup) {\n      // we will deduplicate and deref values\n      boolean success = false;\n      IndexOutput data = null;\n      IndexOutput index = null;\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      try {\n        data = dir.createOutput(dataName, state.context);\n        index = dir.createOutput(indexName, state.context);\n        if (fixed) {\n          addFixedDerefBytesField(field, data, index, values, minLength);\n        } else {\n          addVarDerefBytesField(field, data, index, values);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n    } else {\n      // we dont deduplicate, just write values straight\n      if (fixed) {\n        // fixed byte[]\n        String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        IndexOutput data = dir.createOutput(fileName, state.context);\n        boolean success = false;\n        try {\n          addFixedStraightBytesField(field, data, values, minLength);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data);\n          } else {\n            IOUtils.closeWhileHandlingException(data);\n          }\n        }\n      } else {\n        // variable byte[]\n        boolean success = false;\n        IndexOutput data = null;\n        IndexOutput index = null;\n        String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n        try {\n          data = dir.createOutput(dataName, state.context);\n          index = dir.createOutput(indexName, state.context);\n          addVarStraightBytesField(field, data, index, values);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data, index);\n          } else {\n            IOUtils.closeWhileHandlingException(data, index);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    HashSet<BytesRef> uniqueValues = new HashSet<>();\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      if (b == null) {\n        b = new BytesRef(); // 4.0 doesnt distinguish\n      }\n      if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(BytesRef.deepCopyOf(b))) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n    \n    int maxDoc = state.segmentInfo.getDocCount();\n    final boolean fixed = minLength == maxLength;\n    final boolean dedup = uniqueValues != null && uniqueValues.size() * 2 < maxDoc;\n    \n    if (dedup) {\n      // we will deduplicate and deref values\n      boolean success = false;\n      IndexOutput data = null;\n      IndexOutput index = null;\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      try {\n        data = dir.createOutput(dataName, state.context);\n        index = dir.createOutput(indexName, state.context);\n        if (fixed) {\n          addFixedDerefBytesField(field, data, index, values, minLength);\n        } else {\n          addVarDerefBytesField(field, data, index, values);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n    } else {\n      // we dont deduplicate, just write values straight\n      if (fixed) {\n        // fixed byte[]\n        String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        IndexOutput data = dir.createOutput(fileName, state.context);\n        boolean success = false;\n        try {\n          addFixedStraightBytesField(field, data, values, minLength);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data);\n          } else {\n            IOUtils.closeWhileHandlingException(data);\n          }\n        }\n      } else {\n        // variable byte[]\n        boolean success = false;\n        IndexOutput data = null;\n        IndexOutput index = null;\n        String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n        try {\n          data = dir.createOutput(dataName, state.context);\n          index = dir.createOutput(indexName, state.context);\n          addVarStraightBytesField(field, data, index, values);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data, index);\n          } else {\n            IOUtils.closeWhileHandlingException(data, index);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // examine the values to determine best type to use\n    HashSet<BytesRef> uniqueValues = new HashSet<>();\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      if (b == null) {\n        b = new BytesRef(); // 4.0 doesnt distinguish\n      }\n      if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(BytesRef.deepCopyOf(b))) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n    \n    int maxDoc = state.segmentInfo.getDocCount();\n    final boolean fixed = minLength == maxLength;\n    final boolean dedup = uniqueValues != null && uniqueValues.size() * 2 < maxDoc;\n    \n    if (dedup) {\n      // we will deduplicate and deref values\n      boolean success = false;\n      IndexOutput data = null;\n      IndexOutput index = null;\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      try {\n        data = dir.createOutput(dataName, state.context);\n        index = dir.createOutput(indexName, state.context);\n        if (fixed) {\n          addFixedDerefBytesField(field, data, index, values, minLength);\n        } else {\n          addVarDerefBytesField(field, data, index, values);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n    } else {\n      // we dont deduplicate, just write values straight\n      if (fixed) {\n        // fixed byte[]\n        String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        IndexOutput data = dir.createOutput(fileName, state.context);\n        boolean success = false;\n        try {\n          addFixedStraightBytesField(field, data, values, minLength);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data);\n          } else {\n            IOUtils.closeWhileHandlingException(data);\n          }\n        }\n      } else {\n        // variable byte[]\n        boolean success = false;\n        IndexOutput data = null;\n        IndexOutput index = null;\n        String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n        try {\n          data = dir.createOutput(dataName, state.context);\n          index = dir.createOutput(indexName, state.context);\n          addVarStraightBytesField(field, data, index, values);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data, index);\n          } else {\n            IOUtils.closeWhileHandlingException(data, index);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    HashSet<BytesRef> uniqueValues = new HashSet<>();\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      if (b == null) {\n        b = new BytesRef(); // 4.0 doesnt distinguish\n      }\n      if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(BytesRef.deepCopyOf(b))) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n    \n    int maxDoc = state.segmentInfo.getDocCount();\n    final boolean fixed = minLength == maxLength;\n    final boolean dedup = uniqueValues != null && uniqueValues.size() * 2 < maxDoc;\n    \n    if (dedup) {\n      // we will deduplicate and deref values\n      boolean success = false;\n      IndexOutput data = null;\n      IndexOutput index = null;\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      try {\n        data = dir.createOutput(dataName, state.context);\n        index = dir.createOutput(indexName, state.context);\n        if (fixed) {\n          addFixedDerefBytesField(field, data, index, values, minLength);\n        } else {\n          addVarDerefBytesField(field, data, index, values);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n    } else {\n      // we dont deduplicate, just write values straight\n      if (fixed) {\n        // fixed byte[]\n        String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        IndexOutput data = dir.createOutput(fileName, state.context);\n        boolean success = false;\n        try {\n          addFixedStraightBytesField(field, data, values, minLength);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data);\n          } else {\n            IOUtils.closeWhileHandlingException(data);\n          }\n        }\n      } else {\n        // variable byte[]\n        boolean success = false;\n        IndexOutput data = null;\n        IndexOutput index = null;\n        String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n        try {\n          data = dir.createOutput(dataName, state.context);\n          index = dir.createOutput(indexName, state.context);\n          addVarStraightBytesField(field, data, index, values);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data, index);\n          } else {\n            IOUtils.closeWhileHandlingException(data, index);\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    // examine the values to determine best type to use\n    HashSet<BytesRef> uniqueValues = new HashSet<>();\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      if (b == null) {\n        b = new BytesRef(); // 4.0 doesnt distinguish\n      }\n      if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(BytesRef.deepCopyOf(b))) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n    \n    int maxDoc = state.segmentInfo.getDocCount();\n    final boolean fixed = minLength == maxLength;\n    final boolean dedup = uniqueValues != null && uniqueValues.size() * 2 < maxDoc;\n    \n    if (dedup) {\n      // we will deduplicate and deref values\n      boolean success = false;\n      IndexOutput data = null;\n      IndexOutput index = null;\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      try {\n        data = dir.createOutput(dataName, state.context);\n        index = dir.createOutput(indexName, state.context);\n        if (fixed) {\n          addFixedDerefBytesField(field, data, index, values, minLength);\n        } else {\n          addVarDerefBytesField(field, data, index, values);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n    } else {\n      // we dont deduplicate, just write values straight\n      if (fixed) {\n        // fixed byte[]\n        String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        IndexOutput data = dir.createOutput(fileName, state.context);\n        boolean success = false;\n        try {\n          addFixedStraightBytesField(field, data, values, minLength);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data);\n          } else {\n            IOUtils.closeWhileHandlingException(data);\n          }\n        }\n      } else {\n        // variable byte[]\n        boolean success = false;\n        IndexOutput data = null;\n        IndexOutput index = null;\n        String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n        try {\n          data = dir.createOutput(dataName, state.context);\n          index = dir.createOutput(indexName, state.context);\n          addVarStraightBytesField(field, data, index, values);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data, index);\n          } else {\n            IOUtils.closeWhileHandlingException(data, index);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addBinaryField(FieldInfo,Iterable[BytesRef]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addBinaryField(FieldInfo field, Iterable<BytesRef> values) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    HashSet<BytesRef> uniqueValues = new HashSet<>();\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      if (b == null) {\n        b = new BytesRef(); // 4.0 doesnt distinguish\n      }\n      if (b.length > Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH) {\n        throw new IllegalArgumentException(\"DocValuesField \\\"\" + field.name + \"\\\" is too large, must be <= \" + Lucene40DocValuesFormat.MAX_BINARY_FIELD_LENGTH);\n      }\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n      if (uniqueValues != null) {\n        if (uniqueValues.add(BytesRef.deepCopyOf(b))) {\n          if (uniqueValues.size() > 256) {\n            uniqueValues = null;\n          }\n        }\n      }\n    }\n    \n    int maxDoc = state.segmentInfo.getDocCount();\n    final boolean fixed = minLength == maxLength;\n    final boolean dedup = uniqueValues != null && uniqueValues.size() * 2 < maxDoc;\n    \n    if (dedup) {\n      // we will deduplicate and deref values\n      boolean success = false;\n      IndexOutput data = null;\n      IndexOutput index = null;\n      String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n      String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n      try {\n        data = dir.createOutput(dataName, state.context);\n        index = dir.createOutput(indexName, state.context);\n        if (fixed) {\n          addFixedDerefBytesField(field, data, index, values, minLength);\n        } else {\n          addVarDerefBytesField(field, data, index, values);\n        }\n        success = true;\n      } finally {\n        if (success) {\n          IOUtils.close(data, index);\n        } else {\n          IOUtils.closeWhileHandlingException(data, index);\n        }\n      }\n    } else {\n      // we dont deduplicate, just write values straight\n      if (fixed) {\n        // fixed byte[]\n        String fileName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        IndexOutput data = dir.createOutput(fileName, state.context);\n        boolean success = false;\n        try {\n          addFixedStraightBytesField(field, data, values, minLength);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data);\n          } else {\n            IOUtils.closeWhileHandlingException(data);\n          }\n        }\n      } else {\n        // variable byte[]\n        boolean success = false;\n        IndexOutput data = null;\n        IndexOutput index = null;\n        String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n        String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n        try {\n          data = dir.createOutput(dataName, state.context);\n          index = dir.createOutput(indexName, state.context);\n          addVarStraightBytesField(field, data, index, values);\n          success = true;\n        } finally {\n          if (success) {\n            IOUtils.close(data, index);\n          } else {\n            IOUtils.closeWhileHandlingException(data, index);\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2daae254c28b627693692fbf8f14d2f36c3591c1"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}