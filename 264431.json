{"path":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","commits":[{"id":"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe","date":1430750405,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) ctx.getTags().put(HOST, solrNode.substring(0, solrNode.indexOf(':')));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68","date":1434369345,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) ctx.getTags().put(HOST, solrNode.substring(0, solrNode.indexOf(':')));\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","bugFix":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d029fbe10fe5651865203eddc5b9d07fa3c59128","date":1456214468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9db5fcef0c59566ad373ff7844f8a985f0017c","date":1467374856,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dded3df9e710f258905cff1def2f25eb51c62e0f","date":1475158173,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, \"org.apache.solr.cloud.rule.ImplicitSnitch\", null);\n  }\n\n","sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n    if (requestedTags.contains(ROLE)) fillRole(solrNode, ctx);\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/rule/ImplicitSnitch#getTags(String,Set[String],SnitchContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void getTags(String solrNode, Set<String> requestedTags, SnitchContext ctx) {\n    if (requestedTags.contains(NODE)) ctx.getTags().put(NODE, solrNode);\n    if (requestedTags.contains(HOST)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(HOST, hostAndPortMatcher.group(1));\n    }\n    if (requestedTags.contains(PORT)) {\n      Matcher hostAndPortMatcher = hostAndPortPattern.matcher(solrNode);\n      if (hostAndPortMatcher.find()) ctx.getTags().put(PORT, hostAndPortMatcher.group(2));\n    }\n\n    addIpTags(solrNode, requestedTags, ctx);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    if (requestedTags.contains(CORES)) params.add(CORES, \"1\");\n    if (requestedTags.contains(DISK)) params.add(DISK, \"1\");\n    for (String tag : requestedTags) {\n      if (tag.startsWith(SYSPROP)) params.add(SYSPROP, tag.substring(SYSPROP.length()));\n    }\n    if (params.size() > 0) ctx.invokeRemote(solrNode, params, ImplicitSnitch.class.getName(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","dded3df9e710f258905cff1def2f25eb51c62e0f"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["2e9db5fcef0c59566ad373ff7844f8a985f0017c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d029fbe10fe5651865203eddc5b9d07fa3c59128","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68":["d029fbe10fe5651865203eddc5b9d07fa3c59128"],"8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe":["c3f6e4b6ca9f7129a4f8bdac8692de05ebe44d68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c7a6584aa35e033d783e02c6f4eefa6ad21c7fe"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2e9db5fcef0c59566ad373ff7844f8a985f0017c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","dded3df9e710f258905cff1def2f25eb51c62e0f"],"d029fbe10fe5651865203eddc5b9d07fa3c59128":["2e9db5fcef0c59566ad373ff7844f8a985f0017c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"dded3df9e710f258905cff1def2f25eb51c62e0f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}