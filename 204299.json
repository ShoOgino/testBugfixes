{"path":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","commits":[{"id":"245c71087515ed70d4fb9d9484f9dcbd79eebdfc","date":1331372561,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"/dev/null","sourceNew":"  public void testCyclicAliasing() throws IOException, Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"/dev/null","sourceNew":"  public void testCyclicAliasing() throws IOException, Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908d3355325d949c44eef48cab70c4edaeaf3f16","date":1333068149,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws IOException, Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig) ignore_exception\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws IOException, Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"Zapp Pig\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig) ignore_exception\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws IOException, Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig) ignore_exception\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","bugFix":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig) ignore_exception\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws IOException, Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig) ignore_exception\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e79e31f55cbb444e3023d430a340658755aa31","date":1357666399,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        fail(\"This is not cyclic alising\");\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig) ignore_exception\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d0ddc75fb2855fca36e3a81b86228b660cbf465"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        fail(\"This is not cyclic alising\");\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws Exception {\n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n      fail(\"Simple cyclic alising\");\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n    } catch (SolrException e) {\n      fail(\"This is not cyclic alising\");\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"ignore_exception\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n    \n    try {\n      h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig) ignore_exception\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n      fail();\n    } catch (SolrException e) {\n      assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        fail(\"This is not cyclic alising\");\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        fail(\"This is not cyclic alising\");\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        fail(\"This is not cyclic alising\");\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        fail(\"This is not cyclic alising\");\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d0ddc75fb2855fca36e3a81b86228b660cbf465","date":1538078006,"type":3,"author":"Charles Sanders","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        assertFalse(\"This is not cyclic alising\", e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n        assertTrue(e.getCause().getMessage().contains(\"not a valid field name\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"text\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        fail(\"This is not cyclic alising\");\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"field1\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","bugFix":["c7e79e31f55cbb444e3023d430a340658755aa31"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464e7336798bc8a1281d5cf610c649c5a0784e83","date":1541256496,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser#testCyclicAliasing().mjava","sourceNew":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n\n      SolrException e = expectThrows(SolrException.class, \"Simple cyclic alising not detected\",\n          () -> h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\")));\n      assertCyclicDetectionErrorMessage(e);\n\n      e = expectThrows(SolrException.class, \"Cyclic alising not detected\",\n          () -> h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\")));\n      assertCyclicDetectionErrorMessage(e);\n\n      e = expectThrows(SolrException.class, \"Cyclic aliasing not detected\", () -> h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\")));\n      assertFalse(\"This is not cyclic aliasing\", e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      assertTrue(\"Should throw exception due to invalid field name\", e.getCause().getMessage().contains(\"not a valid field name\"));\n\n      e = expectThrows(SolrException.class, \"Cyclic alising not detected\",\n          () -> h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\")));\n      assertCyclicDetectionErrorMessage(e);\n\n      e = expectThrows(SolrException.class, \"Cyclic alising not detected\",\n          () -> h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"text\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\")));\n      assertCyclicDetectionErrorMessage(e);\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","sourceOld":"  public void testCyclicAliasing() throws Exception {\n    try {\n      ignoreException(\".*Field aliases lead to a cycle.*\");\n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"who\"));\n        fail(\"Simple cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"who\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\",\"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field6\", \"f.field3.qf\",\"field6\"));\n      } catch (SolrException e) {\n        assertFalse(\"This is not cyclic alising\", e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n        assertTrue(e.getCause().getMessage().contains(\"not a valid field name\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"blarg\", \"qf\",\"field1\", \"f.field1.qf\",\"field2 field3\", \"f.field2.qf\",\"field4 field5\", \"f.field4.qf\",\"field5\", \"f.field5.qf\",\"field4\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n      \n      try {\n        h.query(req(\"defType\",\"edismax\", \"q\",\"who:(Zapp Pig)\", \"qf\",\"text\", \"f.who.qf\",\"name\",\"f.name.qf\",\"myalias\", \"f.myalias.qf\",\"who\"));\n        fail(\"Cyclic alising not detected\");\n      } catch (SolrException e) {\n        assertTrue(e.getCause().getMessage().contains(\"Field aliases lead to a cycle\"));\n      }\n    } finally {\n      resetExceptionIgnores();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c7e79e31f55cbb444e3023d430a340658755aa31","19275ba31e621f6da1b83bf13af75233876fd3d4"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c7e79e31f55cbb444e3023d430a340658755aa31"],"4d0ddc75fb2855fca36e3a81b86228b660cbf465":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["908d3355325d949c44eef48cab70c4edaeaf3f16","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["908d3355325d949c44eef48cab70c4edaeaf3f16"],"c7e79e31f55cbb444e3023d430a340658755aa31":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"908d3355325d949c44eef48cab70c4edaeaf3f16":["245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["4d0ddc75fb2855fca36e3a81b86228b660cbf465"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","c7e79e31f55cbb444e3023d430a340658755aa31"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["464e7336798bc8a1281d5cf610c649c5a0784e83"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","4d0ddc75fb2855fca36e3a81b86228b660cbf465"],"4d0ddc75fb2855fca36e3a81b86228b660cbf465":["464e7336798bc8a1281d5cf610c649c5a0784e83"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38e3b736c7ca086d61b7dbb841c905ee115490da","245c71087515ed70d4fb9d9484f9dcbd79eebdfc"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c7e79e31f55cbb444e3023d430a340658755aa31","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"c7e79e31f55cbb444e3023d430a340658755aa31":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"908d3355325d949c44eef48cab70c4edaeaf3f16":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"245c71087515ed70d4fb9d9484f9dcbd79eebdfc":["38e3b736c7ca086d61b7dbb841c905ee115490da","908d3355325d949c44eef48cab70c4edaeaf3f16"],"464e7336798bc8a1281d5cf610c649c5a0784e83":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","fe33227f6805edab2036cbb80645cc4e2d1fa424","4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}