{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","commits":[{"id":"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","date":1349450075,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an in-memory\n   * {@link CompressingStoredFieldsIndex}.\n   *\n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode, int, CompressingStoredFieldsIndex)\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this (compressionMode, chunkSize, chunkSize == 1\n        ? CompressingStoredFieldsIndex.MEMORY_DOC\n        : CompressingStoredFieldsIndex.MEMORY_CHUNK);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["25308800fd7565ab31e6353077a56bba68fb0668"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ccd8ff5675189c84a504cdee7da185e2c3ca3164","date":1351698863,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an in-memory\n   * {@link CompressingStoredFieldsIndex}.\n   *\n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode, int, CompressingStoredFieldsIndex)\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this (compressionMode, chunkSize, CompressingStoredFieldsIndex.MEMORY_CHUNK);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an in-memory\n   * {@link CompressingStoredFieldsIndex}.\n   *\n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode, int, CompressingStoredFieldsIndex)\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this (compressionMode, chunkSize, chunkSize == 1\n        ? CompressingStoredFieldsIndex.MEMORY_DOC\n        : CompressingStoredFieldsIndex.MEMORY_CHUNK);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0a96cceee825e15cd8e042b683d404086e2a58d1","date":1351872237,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an in-memory\n   * {@link CompressingStoredFieldsIndex}.\n   *\n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode, int, CompressingStoredFieldsIndex)\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this (compressionMode, chunkSize, CompressingStoredFieldsIndex.MEMORY_CHUNK);\n  }\n\n","bugFix":null,"bugIntro":["25308800fd7565ab31e6353077a56bba68fb0668"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","date":1352818449,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["ccd8ff5675189c84a504cdee7da185e2c3ca3164"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["0a96cceee825e15cd8e042b683d404086e2a58d1","5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"],"ccd8ff5675189c84a504cdee7da185e2c3ca3164":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69"]},"commit2Childs":{"5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a96cceee825e15cd8e042b683d404086e2a58d1":["5e04b732c631a77cbbd25b6ce43c2a8abb1e9e69","407687e67faf6e1f02a211ca078d8e3eed631027"],"7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa":["ccd8ff5675189c84a504cdee7da185e2c3ca3164"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"ccd8ff5675189c84a504cdee7da185e2c3ca3164":["0a96cceee825e15cd8e042b683d404086e2a58d1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}