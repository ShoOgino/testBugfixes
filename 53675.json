{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","commits":[{"id":"54f531dff997ea7763360cb59f5ccadc6811b519","date":1457742562,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing last). You can change this by calling {@link SortField#setMissingValue(Object)} on the returned SortField \n   * to a different Double value.\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * <p>\n   * <b>NOTE</b>: distance sorting might be expensive for many documents. Consider restricting the document\n   * set with a {@link #newBoxQuery box}, {@link #newDistanceQuery radius} radius, or {@link #newPolygonQuery polygon}\n   * query for better performance\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"575856a9f007b9c35d0113c9e18151b554709ef2","date":1457776622,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing last). You can change this by calling {@link SortField#setMissingValue(Object)} on the returned SortField \n   * to a different Double value.\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * <p>\n   * <b>NOTE</b>: distance sorting might be expensive for many documents. Consider restricting the document\n   * set with a {@link #newBoxQuery box}, {@link #newDistanceQuery radius} radius, or {@link #newPolygonQuery polygon}\n   * query for better performance\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","date":1457978905,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last). You can change this to sort missing values first by calling \n   * {@link SortField#setMissingValue(Object) setMissingValue(Double.NEGATIVE_INFINITY)} on the returned SortField. \n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * <p>\n   * <b>NOTE</b>: distance sorting might be expensive for many documents. Consider restricting the document\n   * set with a {@link #newBoxQuery box}, {@link #newDistanceQuery radius} radius, or {@link #newPolygonQuery polygon}\n   * query for better performance\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing last). You can change this by calling {@link SortField#setMissingValue(Object)} on the returned SortField \n   * to a different Double value.\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * <p>\n   * <b>NOTE</b>: distance sorting might be expensive for many documents. Consider restricting the document\n   * set with a {@link #newBoxQuery box}, {@link #newDistanceQuery radius} radius, or {@link #newPolygonQuery polygon}\n   * query for better performance\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","bugFix":["54f531dff997ea7763360cb59f5ccadc6811b519"],"bugIntro":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"98e0f1aa9ab98b9d47cc76e3d38926353c75b571","date":1457996850,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * <p>\n   * <b>NOTE</b>: distance sorting might be expensive for many documents. Consider restricting the document\n   * set with a {@link #newBoxQuery box}, {@link #newDistanceQuery radius} radius, or {@link #newPolygonQuery polygon}\n   * query for better performance\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last). You can change this to sort missing values first by calling \n   * {@link SortField#setMissingValue(Object) setMissingValue(Double.NEGATIVE_INFINITY)} on the returned SortField. \n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * <p>\n   * <b>NOTE</b>: distance sorting might be expensive for many documents. Consider restricting the document\n   * set with a {@link #newBoxQuery box}, {@link #newDistanceQuery radius} radius, or {@link #newPolygonQuery polygon}\n   * query for better performance\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","bugFix":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21f1868d41f914ed32e923ea15b05bdcc4c9a5f5","date":1458135045,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * <p>\n   * <b>NOTE</b>: distance sorting might be expensive for many documents. Consider restricting the document\n   * set with a {@link #newBoxQuery box}, {@link #newDistanceQuery radius} radius, or {@link #newPolygonQuery polygon}\n   * query for better performance\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. cannot be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","bugFix":["54f531dff997ea7763360cb59f5ccadc6811b519"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc75470f235495b4ac71f43bba9b503023f7f2d0","date":1461532530,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newDistanceSort(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonDocValuesField#newDistanceSort(String,double,double).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonPoint#newDistanceSort(String,double,double).mjava","sourceNew":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","sourceOld":"  /**\n   * Creates a SortField for sorting by distance from a location.\n   * <p>\n   * This sort orders documents by ascending distance from the location. The value returned in {@link FieldDoc} for\n   * the hits contains a Double instance with the distance in meters.\n   * <p>\n   * If a document is missing the field, then by default it is treated as having {@link Double#POSITIVE_INFINITY} distance\n   * (missing values sort last).\n   * <p>\n   * If a document contains multiple values for the field, the <i>closest</i> distance to the location is used.\n   * \n   * @param field field name. must not be null.\n   * @param latitude latitude at the center: must be within standard +/-90 coordinate bounds.\n   * @param longitude longitude at the center: must be within standard +/-180 coordinate bounds.\n   * @return SortField ordering documents by distance\n   * @throws IllegalArgumentException if {@code field} is null or location has invalid coordinates.\n   */\n  public static SortField newDistanceSort(String field, double latitude, double longitude) {\n    return new LatLonPointSortField(field, latitude, longitude);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["575856a9f007b9c35d0113c9e18151b554709ef2"],"21f1868d41f914ed32e923ea15b05bdcc4c9a5f5":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f531dff997ea7763360cb59f5ccadc6811b519":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["ad0d09e969f4763b0df4230f8e3f74357872a4e4","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"575856a9f007b9c35d0113c9e18151b554709ef2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","54f531dff997ea7763360cb59f5ccadc6811b519"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["21f1868d41f914ed32e923ea15b05bdcc4c9a5f5"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"]},"commit2Childs":{"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"21f1868d41f914ed32e923ea15b05bdcc4c9a5f5":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["54f531dff997ea7763360cb59f5ccadc6811b519","575856a9f007b9c35d0113c9e18151b554709ef2"],"54f531dff997ea7763360cb59f5ccadc6811b519":["575856a9f007b9c35d0113c9e18151b554709ef2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575856a9f007b9c35d0113c9e18151b554709ef2":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","cc75470f235495b4ac71f43bba9b503023f7f2d0"],"cc75470f235495b4ac71f43bba9b503023f7f2d0":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["21f1868d41f914ed32e923ea15b05bdcc4c9a5f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}