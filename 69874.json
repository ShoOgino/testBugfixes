{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","commits":[{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (shingleBufferPosition == 0 && (! shingleBuf.isEmpty()) && outputUnigrams) {\n        restoreState(nextToken);\n        posIncrAtt.setPositionIncrement(1);\n        shingleBufferPosition++;\n        return true;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuffer buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1eb45d8770b954d17dcba0a258699636f62a2bea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4","date":1252476174,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuffer buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (shingleBufferPosition == 0 && (! shingleBuf.isEmpty()) && outputUnigrams) {\n        restoreState(nextToken);\n        posIncrAtt.setPositionIncrement(1);\n        shingleBufferPosition++;\n        return true;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuffer buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["1eb45d8770b954d17dcba0a258699636f62a2bea"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuffer buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = (AttributeSource.State) shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1eb45d8770b954d17dcba0a258699636f62a2bea","date":1263146779,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else if (shingleBufferPosition % this.maxShingleSize == 0){\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition % this.maxShingleSize == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else {\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","bugFix":["0dda87e5ad7246b25d0da56a16ead95360499d86","f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39","date":1264946641,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false; \n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n    }\n    if ( ! inputWindow.isEmpty()) {\n      restoreState(inputWindow.getFirst());\n      if (1 == gramSize.getValue()) {\n        posIncrAtt.setPositionIncrement(1);\n        gramSize.advance();\n        tokenAvailable = true;\n      } else if (inputWindow.size() >= gramSize.getValue()) {\n        getNextShingle();\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    while (true) {\n      if (nextToken == null) {\n        if (!fillShingleBuffer()) {\n          return false;\n        }\n      }\n      \n      nextToken = shingleBuf.getFirst();\n      \n      if (outputUnigrams) {\n        if (shingleBufferPosition == 0) {\n          restoreState(nextToken);\n          posIncrAtt.setPositionIncrement(1);\n          shingleBufferPosition++;\n          return true;\n        }\n      } else if (shingleBufferPosition % this.maxShingleSize == 0){\n        shingleBufferPosition++;\n      }\n  \n      if (shingleBufferPosition < shingleBuf.size()) {\n        restoreState(nextToken);\n        typeAtt.setType(tokenType);\n        offsetAtt.setOffset(offsetAtt.startOffset(), endOffsets[shingleBufferPosition]);\n        StringBuilder buf = shingles[shingleBufferPosition];\n        int termLength = buf.length();\n        char[] termBuffer = termAtt.termBuffer();\n        if (termBuffer.length < termLength)\n          termBuffer = termAtt.resizeTermBuffer(termLength);\n        buf.getChars(0, termLength, termBuffer, 0);\n        termAtt.setTermLength(termLength);\n        if ((! outputUnigrams) && shingleBufferPosition % this.maxShingleSize == 1) {\n          posIncrAtt.setPositionIncrement(1);\n        } else {\n          posIncrAtt.setPositionIncrement(0);\n        }\n        shingleBufferPosition++;\n        if (shingleBufferPosition == shingleBuf.size()) {\n          nextToken = null;\n          shingleBufferPosition = 0;\n        }\n        return true;\n      } else {\n        nextToken = null;\n        shingleBufferPosition = 0;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter#incrementToken().mjava","sourceNew":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false; \n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n    }\n    if ( ! inputWindow.isEmpty()) {\n      restoreState(inputWindow.getFirst());\n      if (1 == gramSize.getValue()) {\n        posIncrAtt.setPositionIncrement(1);\n        gramSize.advance();\n        tokenAvailable = true;\n      } else if (inputWindow.size() >= gramSize.getValue()) {\n        getNextShingle();\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","sourceOld":"  /* (non-Javadoc)\n   * @see org.apache.lucene.analysis.TokenStream#next()\n   */\n  @Override\n  public final boolean incrementToken() throws IOException {\n    boolean tokenAvailable = false; \n    if (gramSize.atMinValue() || inputWindow.size() < gramSize.getValue()) {\n      shiftInputWindow();\n    }\n    if ( ! inputWindow.isEmpty()) {\n      restoreState(inputWindow.getFirst());\n      if (1 == gramSize.getValue()) {\n        posIncrAtt.setPositionIncrement(1);\n        gramSize.advance();\n        tokenAvailable = true;\n      } else if (inputWindow.size() >= gramSize.getValue()) {\n        getNextShingle();\n        gramSize.advance();\n        tokenAvailable = true;\n      }\n    }\n    return tokenAvailable;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["1eb45d8770b954d17dcba0a258699636f62a2bea"],"1eb45d8770b954d17dcba0a258699636f62a2bea":["60cdc0e643184821eb066795a8791cd82559f46e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["1eb45d8770b954d17dcba0a258699636f62a2bea"],"cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1eb45d8770b954d17dcba0a258699636f62a2bea":["cf5d35662f99ce0a5b777b6b1585aa3a3ffa8f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["60cdc0e643184821eb066795a8791cd82559f46e"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4"],"f6a10bd7a06139a7fe2285d8094a66bc2cdaeaf4":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}