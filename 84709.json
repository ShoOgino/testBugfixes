{"path":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","commits":[{"id":"3a2591037a85ef083e6588e0b846a5a34ff9b5a3","date":1326403130,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p/>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","sourceNew":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p/>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p/>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<K, V>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<CacheEntry>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["2bb583c6ee51389f2d0a7def839c425969b85fee"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","sourceNew":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p/>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2bb583c6ee51389f2d0a7def839c425969b85fee","date":1432473604,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","sourceNew":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K, V>> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f0484c38f986062889ed50f3bf3bd462848c26","date":1570108628,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","sourceNew":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K, V>> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.longValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K, V>> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","sourceNew":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K, V>> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.longValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K, V>> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.get();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/util/ConcurrentLFUCache#getMostUsedItems(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns 'n' number of most used entries present in this cache.\n   * <p>\n   * This uses a TreeSet to collect the 'n' most used items ordered by descending hitcount\n   * and returns a LinkedHashMap containing 'n' or less than 'n' entries.\n   *\n   * @param n the number of items needed\n   * @return a LinkedHashMap containing 'n' or less than 'n' entries\n   */\n  public Map<K, V> getMostUsedItems(int n) {\n    Map<K, V> result = new LinkedHashMap<>();\n    if (n <= 0)\n      return result;\n    TreeSet<CacheEntry<K, V>> tree = new TreeSet<>();\n    // we need to grab the lock since we are changing the copy variables\n    markAndSweepLock.lock();\n    try {\n      for (Map.Entry<Object, CacheEntry<K, V>> entry : map.entrySet()) {\n        CacheEntry<K, V> ce = entry.getValue();\n        ce.hitsCopy = ce.hits.longValue();\n        ce.lastAccessedCopy = ce.lastAccessed;\n        if (tree.size() < n) {\n          tree.add(ce);\n        } else {\n          // If the hits are not equal, we can remove before adding\n          // which is slightly faster\n          if (ce.hitsCopy > tree.last().hitsCopy) {\n            tree.remove(tree.last());\n            tree.add(ce);\n          } else if (ce.hitsCopy == tree.last().hitsCopy) {\n            tree.add(ce);\n            tree.remove(tree.last());\n          }\n        }\n      }\n    } finally {\n      markAndSweepLock.unlock();\n    }\n    for (CacheEntry<K, V> e : tree) {\n      result.put(e.key, e.value);\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2bb583c6ee51389f2d0a7def839c425969b85fee":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"4d7d3943904804560937e6239effeebda0f920e4":["87f0484c38f986062889ed50f3bf3bd462848c26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87f0484c38f986062889ed50f3bf3bd462848c26":["2bb583c6ee51389f2d0a7def839c425969b85fee"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["2bb583c6ee51389f2d0a7def839c425969b85fee","87f0484c38f986062889ed50f3bf3bd462848c26"]},"commit2Childs":{"2bb583c6ee51389f2d0a7def839c425969b85fee":["87f0484c38f986062889ed50f3bf3bd462848c26","b0b597c65628ca9e73913a07e81691f8229bae35"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a2591037a85ef083e6588e0b846a5a34ff9b5a3"],"87f0484c38f986062889ed50f3bf3bd462848c26":["4d7d3943904804560937e6239effeebda0f920e4","b0b597c65628ca9e73913a07e81691f8229bae35"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["2bb583c6ee51389f2d0a7def839c425969b85fee"],"3a2591037a85ef083e6588e0b846a5a34ff9b5a3":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}