{"path":"solr/core/src/java/org/apache/solr/update/TransactionLog.FSReverseReader#FSReverseReader().mjava","commits":[{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.FSReverseReader#FSReverseReader().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.ReverseReader#ReverseReader().mjava","sourceNew":"    public FSReverseReader() throws IOException {\n      incref();\n\n      long sz;\n      synchronized (TransactionLog.this) {\n        fos.flushBuffer();\n        sz = fos.size();\n        assert sz == channel.size();\n      }\n\n      fis = new ChannelFastInputStream(channel, 0);\n      if (sz >=4) {\n        // readHeader(fis);  // should not be needed\n        prevPos = sz - 4;\n        fis.seek(prevPos);\n        nextLength = fis.readInt();\n      }\n    }\n\n","sourceOld":"    public ReverseReader() throws IOException {\n      incref();\n\n      long sz;\n      synchronized (TransactionLog.this) {\n        fos.flushBuffer();\n        sz = fos.size();\n        assert sz == channel.size();\n      }\n\n      fis = new ChannelFastInputStream(channel, 0);\n      if (sz >=4) {\n        // readHeader(fis);  // should not be needed\n        prevPos = sz - 4;\n        fis.seek(prevPos);\n        nextLength = fis.readInt();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.FSReverseReader#FSReverseReader().mjava","pathOld":"/dev/null","sourceNew":"    public FSReverseReader() throws IOException {\n      incref();\n\n      long sz;\n      synchronized (TransactionLog.this) {\n        fos.flushBuffer();\n        sz = fos.size();\n        assert sz == channel.size();\n      }\n\n      fis = new ChannelFastInputStream(channel, 0);\n      if (sz >=4) {\n        // readHeader(fis);  // should not be needed\n        prevPos = sz - 4;\n        fis.seek(prevPos);\n        nextLength = fis.readInt();\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba33781da68babcaa5828121b443d3eb5c9d8480","date":1590595589,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/TransactionLog.FSReverseReader#FSReverseReader().mjava","pathOld":"solr/core/src/java/org/apache/solr/update/TransactionLog.FSReverseReader#FSReverseReader().mjava","sourceNew":"    public FSReverseReader() throws IOException {\n      incref();\n\n      long sz;\n      synchronized (TransactionLog.this) {\n        fos.flushBuffer();\n        sz = fos.size();\n        assert sz == channel.size();\n      }\n\n      fis = new ChannelFastInputStream(channel, 0);\n      if (sz >= 4) {\n        // readHeader(fis);  // should not be needed\n        prevPos = sz - 4;\n        fis.seek(prevPos);\n        nextLength = fis.readInt();\n      }\n    }\n\n","sourceOld":"    public FSReverseReader() throws IOException {\n      incref();\n\n      long sz;\n      synchronized (TransactionLog.this) {\n        fos.flushBuffer();\n        sz = fos.size();\n        assert sz == channel.size();\n      }\n\n      fis = new ChannelFastInputStream(channel, 0);\n      if (sz >=4) {\n        // readHeader(fis);  // should not be needed\n        prevPos = sz - 4;\n        fis.seek(prevPos);\n        nextLength = fis.readInt();\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba33781da68babcaa5828121b443d3eb5c9d8480":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba33781da68babcaa5828121b443d3eb5c9d8480"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","ba33781da68babcaa5828121b443d3eb5c9d8480"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"ba33781da68babcaa5828121b443d3eb5c9d8480":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}