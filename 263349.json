{"path":"lucene/core/src/java/org/apache/lucene/util/StringHelper#murmurhash3_x86_32(byte[],int,int,int).mjava","commits":[{"id":"30fe9fa09df804ce770f1b667401a7a7647301ed","date":1397554534,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#murmurhash3_x86_32(byte[],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns the MurmurHash3_x86_32 hash.\n   * Original source/tests at https://github.com/yonik/java_util/\n   */\n  public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {\n\n    final int c1 = 0xcc9e2d51;\n    final int c2 = 0x1b873593;\n\n    int h1 = seed;\n    int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block\n\n    for (int i=offset; i<roundedEnd; i+=4) {\n      // little endian load order\n      int k1 = (data[i] & 0xff) | ((data[i+1] & 0xff) << 8) | ((data[i+2] & 0xff) << 16) | (data[i+3] << 24);\n      k1 *= c1;\n      k1 = Integer.rotateLeft(k1, 15);\n      k1 *= c2;\n\n      h1 ^= k1;\n      h1 = Integer.rotateLeft(h1, 13);\n      h1 = h1*5+0xe6546b64;\n    }\n\n    // tail\n    int k1 = 0;\n\n    switch(len & 0x03) {\n      case 3:\n        k1 = (data[roundedEnd + 2] & 0xff) << 16;\n        // fallthrough\n      case 2:\n        k1 |= (data[roundedEnd + 1] & 0xff) << 8;\n        // fallthrough\n      case 1:\n        k1 |= (data[roundedEnd] & 0xff);\n        k1 *= c1;\n        k1 = Integer.rotateLeft(k1, 15);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // finalization\n    h1 ^= len;\n\n    // fmix(h1);\n    h1 ^= h1 >>> 16;\n    h1 *= 0x85ebca6b;\n    h1 ^= h1 >>> 13;\n    h1 *= 0xc2b2ae35;\n    h1 ^= h1 >>> 16;\n\n    return h1;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"13b712ddec103dd2ed3b3da5be5b47512eb5134f","date":1397589066,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/StringHelper#murmurhash3_x86_32(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/StringHelper#murmurhash3_x86_32(byte[],int,int,int).mjava","sourceNew":"  /** Returns the MurmurHash3_x86_32 hash.\n   * Original source/tests at https://github.com/yonik/java_util/\n   */\n  @SuppressWarnings(\"fallthrough\")\n  public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {\n\n    final int c1 = 0xcc9e2d51;\n    final int c2 = 0x1b873593;\n\n    int h1 = seed;\n    int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block\n\n    for (int i=offset; i<roundedEnd; i+=4) {\n      // little endian load order\n      int k1 = (data[i] & 0xff) | ((data[i+1] & 0xff) << 8) | ((data[i+2] & 0xff) << 16) | (data[i+3] << 24);\n      k1 *= c1;\n      k1 = Integer.rotateLeft(k1, 15);\n      k1 *= c2;\n\n      h1 ^= k1;\n      h1 = Integer.rotateLeft(h1, 13);\n      h1 = h1*5+0xe6546b64;\n    }\n\n    // tail\n    int k1 = 0;\n\n    switch(len & 0x03) {\n      case 3:\n        k1 = (data[roundedEnd + 2] & 0xff) << 16;\n        // fallthrough\n      case 2:\n        k1 |= (data[roundedEnd + 1] & 0xff) << 8;\n        // fallthrough\n      case 1:\n        k1 |= (data[roundedEnd] & 0xff);\n        k1 *= c1;\n        k1 = Integer.rotateLeft(k1, 15);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // finalization\n    h1 ^= len;\n\n    // fmix(h1);\n    h1 ^= h1 >>> 16;\n    h1 *= 0x85ebca6b;\n    h1 ^= h1 >>> 13;\n    h1 *= 0xc2b2ae35;\n    h1 ^= h1 >>> 16;\n\n    return h1;\n  }\n\n","sourceOld":"  /** Returns the MurmurHash3_x86_32 hash.\n   * Original source/tests at https://github.com/yonik/java_util/\n   */\n  public static int murmurhash3_x86_32(byte[] data, int offset, int len, int seed) {\n\n    final int c1 = 0xcc9e2d51;\n    final int c2 = 0x1b873593;\n\n    int h1 = seed;\n    int roundedEnd = offset + (len & 0xfffffffc);  // round down to 4 byte block\n\n    for (int i=offset; i<roundedEnd; i+=4) {\n      // little endian load order\n      int k1 = (data[i] & 0xff) | ((data[i+1] & 0xff) << 8) | ((data[i+2] & 0xff) << 16) | (data[i+3] << 24);\n      k1 *= c1;\n      k1 = Integer.rotateLeft(k1, 15);\n      k1 *= c2;\n\n      h1 ^= k1;\n      h1 = Integer.rotateLeft(h1, 13);\n      h1 = h1*5+0xe6546b64;\n    }\n\n    // tail\n    int k1 = 0;\n\n    switch(len & 0x03) {\n      case 3:\n        k1 = (data[roundedEnd + 2] & 0xff) << 16;\n        // fallthrough\n      case 2:\n        k1 |= (data[roundedEnd + 1] & 0xff) << 8;\n        // fallthrough\n      case 1:\n        k1 |= (data[roundedEnd] & 0xff);\n        k1 *= c1;\n        k1 = Integer.rotateLeft(k1, 15);\n        k1 *= c2;\n        h1 ^= k1;\n    }\n\n    // finalization\n    h1 ^= len;\n\n    // fmix(h1);\n    h1 ^= h1 >>> 16;\n    h1 *= 0x85ebca6b;\n    h1 ^= h1 >>> 13;\n    h1 *= 0xc2b2ae35;\n    h1 ^= h1 >>> 16;\n\n    return h1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"13b712ddec103dd2ed3b3da5be5b47512eb5134f":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["13b712ddec103dd2ed3b3da5be5b47512eb5134f"]},"commit2Childs":{"30fe9fa09df804ce770f1b667401a7a7647301ed":["13b712ddec103dd2ed3b3da5be5b47512eb5134f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30fe9fa09df804ce770f1b667401a7a7647301ed"],"13b712ddec103dd2ed3b3da5be5b47512eb5134f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}