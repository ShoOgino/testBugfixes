{"path":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   * <p>\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":["0c3e228bf650e96f3002a8fb73dd0c13d55af077"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i = 0; i < val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ':\n            dest.append('+');\n            break;\n          case '&':\n            dest.append(\"%26\");\n            break;\n          case '%':\n            dest.append(\"%25\");\n            break;\n          case '=':\n            dest.append(\"%3D\");\n            break;\n          case '+':\n            dest.append(\"%2B\");\n            break;\n          default:\n            dest.append(ch);\n            break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/StrUtils#partialURLEncodeVal(Appendable,String).mjava","sourceNew":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i = 0; i < val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ':\n            dest.append('+');\n            break;\n          case '&':\n            dest.append(\"%26\");\n            break;\n          case '%':\n            dest.append(\"%25\");\n            break;\n          case '=':\n            dest.append(\"%3D\");\n            break;\n          case '+':\n            dest.append(\"%2B\");\n            break;\n          default:\n            dest.append(ch);\n            break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * URLEncodes a value, replacing only enough chars so that\n   * the URL may be unambiguously pasted back into a browser.\n   * <p>\n   * Characters with a numeric value less than 32 are encoded.\n   * &amp;,=,%,+,space are encoded.\n   */\n  public static void partialURLEncodeVal(Appendable dest, String val) throws IOException {\n    for (int i=0; i<val.length(); i++) {\n      char ch = val.charAt(i);\n      if (ch < 32) {\n        dest.append('%');\n        if (ch < 0x10) dest.append('0');\n        dest.append(Integer.toHexString(ch));\n      } else {\n        switch (ch) {\n          case ' ': dest.append('+'); break;\n          case '&': dest.append(\"%26\"); break;\n          case '%': dest.append(\"%25\"); break;\n          case '=': dest.append(\"%3D\"); break;\n          case '+': dest.append(\"%2B\"); break;\n          default : dest.append(ch); break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8476949555f799dff381770c01cfad051a264487":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8476949555f799dff381770c01cfad051a264487"],"b0b597c65628ca9e73913a07e81691f8229bae35":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","8476949555f799dff381770c01cfad051a264487"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"8476949555f799dff381770c01cfad051a264487":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["8476949555f799dff381770c01cfad051a264487","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}