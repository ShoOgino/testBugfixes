{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if(asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        if(!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if(asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(messageHandler, head.getId(), asyncId, taskKey);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        if(!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0b734049423191fc1079a874b216c07ad0722a0","date":1454966146,"type":3,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if(asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        if(!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"781578ca5d3d2194bc55fc3457c62aef623db6f2","date":1464859077,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.info(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final TimerContext timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfb8001b6712216ccbf7ccc85f830f08ce3b544","date":1576882501,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponse.serialize(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponse.serialize(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(OverseerSolrResponse.serialize(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","date":1577276097,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponse.serialize(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponse.serialize(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(OverseerSolrResponse.serialize(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, SolrResponse.serializable(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(SolrResponse.serializable(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a4045268caa5f6094d5a8d80519a1c152295f3","date":1580840817,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(OverseerSolrResponseSerializer.serialize(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponse.serialize(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponse.serialize(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(OverseerSolrResponse.serialize(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Runner processing {}\", head.getId());\n          }\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n            }\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n            }\n          }\n        } else {\n          head.setBytes(OverseerSolrResponseSerializer.serialize(response));\n          if (log.isDebugEnabled()) {\n            log.debug(\"Completed task:[{}]\", head.getId());\n          }\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Marked task [{}] as completed.\", head.getId());\n        }\n        printTrackingMaps();\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"{}: Message id: {} complete, response: {}\", messageHandler.getName(), head.getId(), response.getResponse());\n        }\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          log.debug(\"Runner processing {}\", head.getId());\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n          }\n        } else {\n          head.setBytes(OverseerSolrResponseSerializer.serialize(response));\n          log.debug(\"Completed task:[{}]\", head.getId());\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        log.debug(\"Marked task [{}] as completed.\", head.getId());\n        printTrackingMaps();\n\n        log.debug(messageHandler.getName() + \": Message id:\" + head.getId() +\n            \" complete, response:\" + response.getResponse().toString());\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Runner processing {}\", head.getId());\n          }\n          response = messageHandler.processMessage(message, cloudConfig, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n            }\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n            }\n          }\n        } else {\n          head.setBytes(OverseerSolrResponseSerializer.serialize(response));\n          if (log.isDebugEnabled()) {\n            log.debug(\"Completed task:[{}]\", head.getId());\n          }\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Marked task [{}] as completed.\", head.getId());\n        }\n        printTrackingMaps();\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"{}: Message id: {} complete, response: {}\", messageHandler.getName(), head.getId(), response.getResponse());\n        }\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Runner processing {}\", head.getId());\n          }\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n            }\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n            }\n          }\n        } else {\n          head.setBytes(OverseerSolrResponseSerializer.serialize(response));\n          if (log.isDebugEnabled()) {\n            log.debug(\"Completed task:[{}]\", head.getId());\n          }\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Marked task [{}] as completed.\", head.getId());\n        }\n        printTrackingMaps();\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"{}: Message id: {} complete, response: {}\", messageHandler.getName(), head.getId(), response.getResponse());\n        }\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":3,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerTaskProcessor.Runner#run().mjava","sourceNew":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Runner processing {}\", head.getId());\n          }\n          response = messageHandler.processMessage(message, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n            }\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n            }\n          }\n        } else {\n          head.setBytes(OverseerSolrResponseSerializer.serialize(response));\n          if (log.isDebugEnabled()) {\n            log.debug(\"Completed task:[{}]\", head.getId());\n          }\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Marked task [{}] as completed.\", head.getId());\n        }\n        printTrackingMaps();\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"{}: Message id: {} complete, response: {}\", messageHandler.getName(), head.getId(), response.getResponse());\n        }\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","sourceOld":"    public void run() {\n      String statsName = messageHandler.getTimerName(operation);\n      final Timer.Context timerContext = stats.time(statsName);\n\n      boolean success = false;\n      final String asyncId = message.getStr(ASYNC);\n      String taskKey = messageHandler.getTaskKey(message);\n\n      try {\n        try {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Runner processing {}\", head.getId());\n          }\n          response = messageHandler.processMessage(message, cloudConfig, operation);\n        } finally {\n          timerContext.stop();\n          updateStats(statsName);\n        }\n\n        if (asyncId != null) {\n          if (response != null && (response.getResponse().get(\"failure\") != null \n              || response.getResponse().get(\"exception\") != null)) {\n            failureMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated failed map for task with zkid:[{}]\", head.getId());\n            }\n          } else {\n            completedMap.put(asyncId, OverseerSolrResponseSerializer.serialize(response));\n            if (log.isDebugEnabled()) {\n              log.debug(\"Updated completed map for task with zkid:[{}]\", head.getId());\n            }\n          }\n        } else {\n          head.setBytes(OverseerSolrResponseSerializer.serialize(response));\n          if (log.isDebugEnabled()) {\n            log.debug(\"Completed task:[{}]\", head.getId());\n          }\n        }\n\n        markTaskComplete(head.getId(), asyncId);\n        if (log.isDebugEnabled()) {\n          log.debug(\"Marked task [{}] as completed.\", head.getId());\n        }\n        printTrackingMaps();\n\n        if (log.isDebugEnabled()) {\n          log.debug(\"{}: Message id: {} complete, response: {}\", messageHandler.getName(), head.getId(), response.getResponse());\n        }\n        success = true;\n      } catch (AlreadyClosedException e) {\n\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        // Reset task from tracking data structures so that it can be retried.\n        resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n        log.warn(\"Resetting task {} as the thread was interrupted.\", head.getId());\n        Thread.currentThread().interrupt();\n      } finally {\n        lock.unlock();\n        if (!success) {\n          // Reset task from tracking data structures so that it can be retried.\n          try {\n            resetTaskWithException(messageHandler, head.getId(), asyncId, taskKey, message);\n          } catch(AlreadyClosedException e) {\n            \n          }\n        }\n        synchronized (waitLock){\n          waitLock.notifyAll();\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"962cd4f5e313777f35da8f521265323e84184929":["781578ca5d3d2194bc55fc3457c62aef623db6f2"],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c526352db87264a72a7a9ad68c1b769b81e54305":["ad4957cde742defe6db19689abdc267c5d948066"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"ad4957cde742defe6db19689abdc267c5d948066":["b6a4045268caa5f6094d5a8d80519a1c152295f3"],"e0b734049423191fc1079a874b216c07ad0722a0":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["e0b734049423191fc1079a874b216c07ad0722a0","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["e0b734049423191fc1079a874b216c07ad0722a0"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","2dfb8001b6712216ccbf7ccc85f830f08ce3b544"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["781578ca5d3d2194bc55fc3457c62aef623db6f2","962cd4f5e313777f35da8f521265323e84184929"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2dfb8001b6712216ccbf7ccc85f830f08ce3b544":["b6a4045268caa5f6094d5a8d80519a1c152295f3","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","727bb765ff2542275f6d31f67be18d7104bae148"],"b6a4045268caa5f6094d5a8d80519a1c152295f3":["ad4957cde742defe6db19689abdc267c5d948066"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e0b734049423191fc1079a874b216c07ad0722a0"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["2dfb8001b6712216ccbf7ccc85f830f08ce3b544","96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a"],"ad4957cde742defe6db19689abdc267c5d948066":["c526352db87264a72a7a9ad68c1b769b81e54305"],"e0b734049423191fc1079a874b216c07ad0722a0":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","781578ca5d3d2194bc55fc3457c62aef623db6f2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"781578ca5d3d2194bc55fc3457c62aef623db6f2":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a":[],"727bb765ff2542275f6d31f67be18d7104bae148":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96b4a3cd1f2463ebc4ffc0f61acdb3359637fe2a","727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}