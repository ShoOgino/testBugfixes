{"path":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","commits":[{"id":"99761ac3b0c4136140f9cd2d081b80934bba16fa","date":1456263279,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(PointInSetQuery.newIntSet(\"int\", 16)));\n    assertEquals(1, s.count(PointInSetQuery.newIntSet(\"int\", 17)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", 17, 105, 42, 97)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"321ec990395a1d617f3097ce37d74fdfab56b34f","date":1456265570,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(PointInSetQuery.newIntSet(\"int\", 16)));\n    assertEquals(1, s.count(PointInSetQuery.newIntSet(\"int\", 17)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(PointInSetQuery.newIntSet(\"int\", 17, 105, 42, 97)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ae115468a08fb03270562a0121761d73c2c8c1","date":1456307437,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a577e4497932469db8eefa9fbecf4cb9265be98","date":1456321690,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f429037bedccb27766e77f5e772b291a8d1bc97c","date":1456353956,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    // nocommit make sure invalid bytes length hits iae\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9ccce763ea3c7e51eff749e584c061d8744b72d","date":1456395668,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    // nocommit make sure invalid bytes length hits iae\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868f63baffb79407d4b49f3c0be8dc4725ffc6e1","date":1456423715,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#testBasicPointInSetQuery().mjava","sourceNew":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r, false);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testBasicPointInSetQuery() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig();\n    iwc.setCodec(getCodec());\n    IndexWriter w = new IndexWriter(dir, iwc);\n\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int\", 17));\n    doc.add(new LongPoint(\"long\", 17L));\n    doc.add(new FloatPoint(\"float\", 17.0f));\n    doc.add(new DoublePoint(\"double\", 17.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 17}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 42));\n    doc.add(new LongPoint(\"long\", 42L));\n    doc.add(new FloatPoint(\"float\", 42.0f));\n    doc.add(new DoublePoint(\"double\", 42.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 42}));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int\", 97));\n    doc.add(new LongPoint(\"long\", 97L));\n    doc.add(new FloatPoint(\"float\", 97.0f));\n    doc.add(new DoublePoint(\"double\", 97.0));\n    doc.add(new BinaryPoint(\"bytes\", new byte[] {0, 97}));\n    w.addDocument(doc);\n\n    IndexReader r = DirectoryReader.open(w);\n    IndexSearcher s = newSearcher(r);\n    assertEquals(0, s.count(IntPoint.newSetQuery(\"int\", 16)));\n    assertEquals(1, s.count(IntPoint.newSetQuery(\"int\", 17)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 97, 42)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(IntPoint.newSetQuery(\"int\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(LongPoint.newSetQuery(\"long\", 16)));\n    assertEquals(1, s.count(LongPoint.newSetQuery(\"long\", 17)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 97, 42)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(LongPoint.newSetQuery(\"long\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(FloatPoint.newSetQuery(\"float\", 16)));\n    assertEquals(1, s.count(FloatPoint.newSetQuery(\"float\", 17)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 97, 42)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(FloatPoint.newSetQuery(\"float\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(DoublePoint.newSetQuery(\"double\", 16)));\n    assertEquals(1, s.count(DoublePoint.newSetQuery(\"double\", 17)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 97, 42)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", -7, 17, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 20, 42, 97)));\n    assertEquals(3, s.count(DoublePoint.newSetQuery(\"double\", 17, 105, 42, 97)));\n\n    assertEquals(0, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 16})));\n    assertEquals(1, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 97}, new byte[] {0, 42})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, -7}, new byte[] {0, 17}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 20}, new byte[] {0, 42}, new byte[] {0, 97})));\n    assertEquals(3, s.count(BinaryPoint.newSetQuery(\"bytes\", new byte[] {0, 17}, new byte[] {0, 105}, new byte[] {0, 42}, new byte[] {0, 97})));\n\n    w.close();\n    r.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a577e4497932469db8eefa9fbecf4cb9265be98":["96ae115468a08fb03270562a0121761d73c2c8c1"],"f429037bedccb27766e77f5e772b291a8d1bc97c":["4a577e4497932469db8eefa9fbecf4cb9265be98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b9ccce763ea3c7e51eff749e584c061d8744b72d"],"99761ac3b0c4136140f9cd2d081b80934bba16fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["f429037bedccb27766e77f5e772b291a8d1bc97c"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"96ae115468a08fb03270562a0121761d73c2c8c1":["321ec990395a1d617f3097ce37d74fdfab56b34f"],"321ec990395a1d617f3097ce37d74fdfab56b34f":["99761ac3b0c4136140f9cd2d081b80934bba16fa"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"4a577e4497932469db8eefa9fbecf4cb9265be98":["f429037bedccb27766e77f5e772b291a8d1bc97c"],"f429037bedccb27766e77f5e772b291a8d1bc97c":["b9ccce763ea3c7e51eff749e584c061d8744b72d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1","99761ac3b0c4136140f9cd2d081b80934bba16fa"],"868f63baffb79407d4b49f3c0be8dc4725ffc6e1":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"99761ac3b0c4136140f9cd2d081b80934bba16fa":["321ec990395a1d617f3097ce37d74fdfab56b34f"],"b9ccce763ea3c7e51eff749e584c061d8744b72d":["868f63baffb79407d4b49f3c0be8dc4725ffc6e1"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"96ae115468a08fb03270562a0121761d73c2c8c1":["4a577e4497932469db8eefa9fbecf4cb9265be98"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"321ec990395a1d617f3097ce37d74fdfab56b34f":["96ae115468a08fb03270562a0121761d73c2c8c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}