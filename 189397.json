{"path":"src/test/org/apache/lucene/store/MockRAMDirectory.Failure#reset().mjava","commits":[{"id":"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b","date":1184336627,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory.Failure#reset().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * reset should set the state of the failure to its default\n     * (freshly constructed) state. Reset is convenient for tests\n     * that want to create one failure object and then reuse it in\n     * multiple cases. This, combined with the fact that Failure\n     * subclasses are often anonymous classes makes reset difficult to\n     * do otherwise.\n     *\n     * A typical example of use is\n     * Failure failure = new Failure() { ... };\n     * ...\n     * mock.failOn(failure.reset())\n     */\n    public Failure reset() { return this; }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory.Failure#reset().mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory.Failure#reset().mjava","sourceNew":"    /**\n     * reset should set the state of the failure to its default\n     * (freshly constructed) state. Reset is convenient for tests\n     * that want to create one failure object and then reuse it in\n     * multiple cases. This, combined with the fact that Failure\n     * subclasses are often anonymous classes makes reset difficult to\n     * do otherwise.\n     *\n     * A typical example of use is\n     * Failure failure = new Failure() { ... };\n     * ...\n     * mock.failOn(failure.reset())\n     */\n    public Failure reset() { return this; }\n\n","sourceOld":"    /**\n     * reset should set the state of the failure to its default\n     * (freshly constructed) state. Reset is convenient for tests\n     * that want to create one failure object and then reuse it in\n     * multiple cases. This, combined with the fact that Failure\n     * subclasses are often anonymous classes makes reset difficult to\n     * do otherwise.\n     *\n     * A typical example of use is\n     * Failure failure = new Failure() { ... };\n     * ...\n     * mock.failOn(failure.reset())\n     */\n    public Failure reset() { return this; }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}