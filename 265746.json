{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   * */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   * */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77301f098b899884dd472e6b27fb5f8136189fe3","date":1415988476,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.\n   * <br>When <code>inOrder</code> is true, the spans from each clause\n   * must be in the same order as in <code>clauses</code> and must be non-overlapping.\n   * <br>When <code>inOrder</code> is false, the spans from each clause\n   * need not be ordered and may overlap.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   * */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":["498e168d849b4dbc097ac7b31f6db170d6f55725","0bcbf4ed0baed877c8b36d024e17a99bedfdd904"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.\n   * <br>When <code>inOrder</code> is true, the spans from each clause\n   * must be in the same order as in <code>clauses</code> and must be non-overlapping.\n   * <br>When <code>inOrder</code> is false, the spans from each clause\n   * need not be ordered and may overlap.\n   * @param clauses the clauses to find near each other, in the same field, at least 2.\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);\n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.\n   * <br>When <code>inOrder</code> is true, the spans from each clause\n   * must be in the same order as in <code>clauses</code> and must be non-overlapping.\n   * <br>When <code>inOrder</code> is false, the spans from each clause\n   * need not be ordered and may overlap.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.\n   * <br>When <code>inOrder</code> is true, the spans from each clause\n   * must be in the same order as in <code>clauses</code> and must be non-overlapping.\n   * <br>When <code>inOrder</code> is false, the spans from each clause\n   * need not be ordered and may overlap.\n   * @param clauses the clauses to find near each other, in the same field, at least 2.\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);\n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.\n   * <br>When <code>inOrder</code> is true, the spans from each clause\n   * must be in the same order as in <code>clauses</code> and must be non-overlapping.\n   * <br>When <code>inOrder</code> is false, the spans from each clause\n   * need not be ordered and may overlap.\n   * @param clauses the clauses to find near each other\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67926a77440e5dcb5f9c63f02b9bbe865c066978","date":1434459674,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery#SpanNearQuery(SpanQuery[],int,boolean).mjava","sourceNew":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.\n   * <br>When <code>inOrder</code> is true, the spans from each clause\n   * must be in the same order as in <code>clauses</code> and must be non-overlapping.\n   * <br>When <code>inOrder</code> is false, the spans from each clause\n   * need not be ordered and may overlap.\n   * @param clausesIn the clauses to find near each other, in the same field, at least 2.\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   */\n  public SpanNearQuery(SpanQuery[] clausesIn, int slop, boolean inOrder) {\n    this.clauses = new ArrayList<>(clausesIn.length);\n    for (SpanQuery clause : clausesIn) {\n      if (this.field == null) {                               // check field\n        this.field = clause.getField();\n      } else if (clause.getField() != null && !clause.getField().equals(field)) {\n        throw new IllegalArgumentException(\"Clauses must have same field.\");\n      }\n      this.clauses.add(clause);\n    }\n    this.slop = slop;\n    this.inOrder = inOrder;\n  }\n\n","sourceOld":"  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.\n   * <br>When <code>inOrder</code> is true, the spans from each clause\n   * must be in the same order as in <code>clauses</code> and must be non-overlapping.\n   * <br>When <code>inOrder</code> is false, the spans from each clause\n   * need not be ordered and may overlap.\n   * @param clauses the clauses to find near each other, in the same field, at least 2.\n   * @param slop The slop value\n   * @param inOrder true if order is important\n   */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"67926a77440e5dcb5f9c63f02b9bbe865c066978":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"77301f098b899884dd472e6b27fb5f8136189fe3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["77301f098b899884dd472e6b27fb5f8136189fe3"],"fab172655716b96f7e42376116235017a922de3a":["77301f098b899884dd472e6b27fb5f8136189fe3","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["67926a77440e5dcb5f9c63f02b9bbe865c066978"]},"commit2Childs":{"67926a77440e5dcb5f9c63f02b9bbe865c066978":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"77301f098b899884dd472e6b27fb5f8136189fe3":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["77301f098b899884dd472e6b27fb5f8136189fe3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["67926a77440e5dcb5f9c63f02b9bbe865c066978","fab172655716b96f7e42376116235017a922de3a"],"fab172655716b96f7e42376116235017a922de3a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}