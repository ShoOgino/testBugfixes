{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4b4e97a5e8ab5b96cc56c561131d720c756756b","date":1269362401,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(fileName);\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS,\n                                                                  \"\",\n                                                                  generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_LOCKLESS);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6066dbe072ec5334ff5824f474e9d3abd1620fb7","date":1278709584,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      pendingSegnOutput.finishCommit();\n      pendingSegnOutput.close();\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1224a4027481acce15495b03bce9b48b93b42722","date":1300792329,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      // nocommit if this is thread interrupted we should rethrow\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1601e9d958cb239b603baa13c051e3501bb92fcf","date":1306653132,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n      // nocommit if this is thread interrupted we should rethrow\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory,Codec).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#finishCommit(Directory).mjava","sourceNew":"  final void finishCommit(Directory dir, Codec codec) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codec.segmentInfosFormat().getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","sourceOld":"  final void finishCommit(Directory dir) throws IOException {\n    if (pendingSegnOutput == null)\n      throw new IllegalStateException(\"prepareCommit was not called\");\n    boolean success = false;\n    try {\n      SegmentInfosWriter infosWriter = codecs.getSegmentInfosWriter();\n      infosWriter.finishCommit(pendingSegnOutput);\n      pendingSegnOutput = null;\n      success = true;\n    } finally {\n      if (!success)\n        rollbackCommit(dir);\n    }\n\n    // NOTE: if we crash here, we have left a segments_N\n    // file in the directory in a possibly corrupt state (if\n    // some bytes made it to stable storage and others\n    // didn't).  But, the segments_N file includes checksum\n    // at the end, which should catch this case.  So when a\n    // reader tries to read it, it will throw a\n    // CorruptIndexException, which should cause the retry\n    // logic in SegmentInfos to kick in and load the last\n    // good (previous) segments_N-1 file.\n\n    final String fileName = IndexFileNames.fileNameFromGeneration(IndexFileNames.SEGMENTS, \"\", generation);\n    success = false;\n    try {\n      dir.sync(Collections.singleton(fileName));\n      success = true;\n    } finally {\n      if (!success) {\n        try {\n          dir.deleteFile(fileName);\n        } catch (Throwable t) {\n          // Suppress so we keep throwing the original exception\n        }\n      }\n    }\n\n    lastGeneration = generation;\n    if (pendingMapVersion != -1) {\n      /*\n       * TODO is it possible that the commit does not succeed here? if another\n       * commit happens at the same time and we lost the race between the\n       * prepareCommit and finishCommit the latest version is already\n       * incremented.\n       */\n      globalFieldNumberMap.commitLastVersion(pendingMapVersion);\n      pendingMapVersion = -1;\n      lastGlobalFieldMapVersion = globalFieldMapVersion;\n    }\n\n    try {\n      IndexOutput genOutput = dir.createOutput(IndexFileNames.SEGMENTS_GEN, IOContext.READONCE);\n      try {\n        genOutput.writeInt(FORMAT_SEGMENTS_GEN_CURRENT);\n        genOutput.writeLong(generation);\n        genOutput.writeLong(generation);\n      } finally {\n        genOutput.close();\n      }\n    } catch (ThreadInterruptedException t) {\n      throw t;\n    } catch (Throwable t) {\n      // It's OK if we fail to write this file since it's\n      // used only as one of the retry fallbacks.\n    }\n  }\n\n","bugFix":null,"bugIntro":["d0c334a824d4ce7d739c100bf4ae56111a995e3a","d0c334a824d4ce7d739c100bf4ae56111a995e3a"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1601e9d958cb239b603baa13c051e3501bb92fcf":["efb7a19703a037c29e30440260d393500febc1f4"],"efb7a19703a037c29e30440260d393500febc1f4":["1224a4027481acce15495b03bce9b48b93b42722"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["1601e9d958cb239b603baa13c051e3501bb92fcf"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"6267e1ce56c2eec111425690cd04e251b6f14952":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["6267e1ce56c2eec111425690cd04e251b6f14952"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["5f4e87790277826a2aea119328600dfb07761f32","1224a4027481acce15495b03bce9b48b93b42722"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1224a4027481acce15495b03bce9b48b93b42722","1601e9d958cb239b603baa13c051e3501bb92fcf"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["6066dbe072ec5334ff5824f474e9d3abd1620fb7","1224a4027481acce15495b03bce9b48b93b42722"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["1601e9d958cb239b603baa13c051e3501bb92fcf","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"1224a4027481acce15495b03bce9b48b93b42722":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"e4b4e97a5e8ab5b96cc56c561131d720c756756b":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["d619839baa8ce5503e496b94a9e42ad6f079293f","1601e9d958cb239b603baa13c051e3501bb92fcf"]},"commit2Childs":{"1601e9d958cb239b603baa13c051e3501bb92fcf":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","ddc4c914be86e34b54f70023f45a60fa7f04e929","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"efb7a19703a037c29e30440260d393500febc1f4":["1601e9d958cb239b603baa13c051e3501bb92fcf"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5f4e87790277826a2aea119328600dfb07761f32":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"6267e1ce56c2eec111425690cd04e251b6f14952":["5f4e87790277826a2aea119328600dfb07761f32","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["5f4e87790277826a2aea119328600dfb07761f32","d619839baa8ce5503e496b94a9e42ad6f079293f","1224a4027481acce15495b03bce9b48b93b42722"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"1224a4027481acce15495b03bce9b48b93b42722":["efb7a19703a037c29e30440260d393500febc1f4","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","d619839baa8ce5503e496b94a9e42ad6f079293f"],"e4b4e97a5e8ab5b96cc56c561131d720c756756b":["6267e1ce56c2eec111425690cd04e251b6f14952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e4b4e97a5e8ab5b96cc56c561131d720c756756b"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}