{"path":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0762b640e0d0d12b6edb96db68986e13145c3484","date":1307575932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8fda790e002fff32e201cbd0f7bed4c2b333a64","date":1309401082,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/queries/src/test/org/apache/lucene/queries/TestCustomScoreQuery#testCustomExternalQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/function/TestCustomScoreQuery#testCustomExternalQuery().mjava","sourceNew":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","sourceOld":"  @Test\n  public void testCustomExternalQuery() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, TEXT_FIELD,anlzr); \n    String qtxt = \"first aid text\"; // from the doc texts in FunctionQuerySetup.\n    Query q1 = qp.parse(qtxt); \n    \n    final Query q = new CustomExternalQuery(q1);\n    log(q);\n\n    IndexSearcher s = new IndexSearcher(dir, true);\n    TopDocs hits = s.search(q, 1000);\n    assertEquals(N_DOCS, hits.totalHits);\n    for(int i=0;i<N_DOCS;i++) {\n      final int doc = hits.scoreDocs[i].doc;\n      final float score = hits.scoreDocs[i].score;\n      assertEquals(\"doc=\" + doc, (float) 1+(4*doc) % N_DOCS, score, 0.0001);\n    }\n    s.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["9454a6510e2db155fb01faa5c049b06ece95fab9","0762b640e0d0d12b6edb96db68986e13145c3484"],"0762b640e0d0d12b6edb96db68986e13145c3484":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["0762b640e0d0d12b6edb96db68986e13145c3484"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["9454a6510e2db155fb01faa5c049b06ece95fab9","0762b640e0d0d12b6edb96db68986e13145c3484"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["0762b640e0d0d12b6edb96db68986e13145c3484","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8fda790e002fff32e201cbd0f7bed4c2b333a64"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"0762b640e0d0d12b6edb96db68986e13145c3484":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c8fda790e002fff32e201cbd0f7bed4c2b333a64","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c8fda790e002fff32e201cbd0f7bed4c2b333a64":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","0762b640e0d0d12b6edb96db68986e13145c3484","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}