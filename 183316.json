{"path":"src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","commits":[{"id":"4ed0ea2885b7ccb481842fabd599c56b9a0a8e80","date":1115920781,"type":0,"author":"Doug Cutting","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","pathOld":"/dev/null","sourceNew":"  private void queryTest(Query query) throws IOException {\n    Hits parallelHits = parallel.search(query);\n    Hits singleHits = single.search(query);\n    assertEquals(parallelHits.length(), singleHits.length());\n    for(int i = 0; i < parallelHits.length(); i++) {\n      assertEquals(parallelHits.score(i), singleHits.score(i), 0.001f);\n      Document docParallel = parallelHits.doc(i);\n      Document docSingle = singleHits.doc(i);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","sourceNew":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":"  private void queryTest(Query query) throws IOException {\n    Hits parallelHits = parallel.search(query);\n    Hits singleHits = single.search(query);\n    assertEquals(parallelHits.length(), singleHits.length());\n    for(int i = 0; i < parallelHits.length(); i++) {\n      assertEquals(parallelHits.score(i), singleHits.score(i), 0.001f);\n      Document docParallel = parallelHits.doc(i);\n      Document docSingle = singleHits.doc(i);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","pathOld":"src/test/org/apache/lucene/index/TestParallelReader#queryTest(Query).mjava","sourceNew":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","sourceOld":"  private void queryTest(Query query) throws IOException {\n    ScoreDoc[] parallelHits = parallel.search(query, null, 1000).scoreDocs;\n    ScoreDoc[] singleHits = single.search(query, null, 1000).scoreDocs;\n    assertEquals(parallelHits.length, singleHits.length);\n    for(int i = 0; i < parallelHits.length; i++) {\n      assertEquals(parallelHits[i].score, singleHits[i].score, 0.001f);\n      Document docParallel = parallel.doc(parallelHits[i].doc);\n      Document docSingle = single.doc(singleHits[i].doc);\n      assertEquals(docParallel.get(\"f1\"), docSingle.get(\"f1\"));\n      assertEquals(docParallel.get(\"f2\"), docSingle.get(\"f2\"));\n      assertEquals(docParallel.get(\"f3\"), docSingle.get(\"f3\"));\n      assertEquals(docParallel.get(\"f4\"), docSingle.get(\"f4\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ed0ea2885b7ccb481842fabd599c56b9a0a8e80":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["4ed0ea2885b7ccb481842fabd599c56b9a0a8e80"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5af07783dbc171e26a694c4f7d735e30c2769faa"]},"commit2Childs":{"4ed0ea2885b7ccb481842fabd599c56b9a0a8e80":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4ed0ea2885b7ccb481842fabd599c56b9a0a8e80"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}