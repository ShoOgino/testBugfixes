{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.SEP_LABEL);\n    try {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n      fail(\"no exception thrown for suggestion value containing SEP_LABEL:\" + CompletionAnalyzer.SEP_LABEL);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"[0x1f]\"));\n    }\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    try {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n      fail(\"no exception thrown for suggestion value containing HOLE_CHARACTER:\" + CompletionAnalyzer.HOLE_CHARACTER);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"[0x1e]\"));\n    }\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    try {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n      fail(\"no exception thrown for suggestion value containing END_BYTE:\" + NRTSuggesterBuilder.END_BYTE);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"[0x0]\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","sourceNew":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.SEP_LABEL);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1f]\"));\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1e]\"));\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x0]\"));\n  }\n\n","sourceOld":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.SEP_LABEL);\n    try {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n      fail(\"no exception thrown for suggestion value containing SEP_LABEL:\" + CompletionAnalyzer.SEP_LABEL);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"[0x1f]\"));\n    }\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    try {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n      fail(\"no exception thrown for suggestion value containing HOLE_CHARACTER:\" + CompletionAnalyzer.HOLE_CHARACTER);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"[0x1e]\"));\n    }\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    try {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n      fail(\"no exception thrown for suggestion value containing END_BYTE:\" + NRTSuggesterBuilder.END_BYTE);\n    } catch (IllegalArgumentException e) {\n      assertTrue(e.getMessage().contains(\"[0x0]\"));\n    }\n  }\n\n","bugFix":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","date":1528168051,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","sourceNew":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) ConcatenateGraphFilter.SEP_LABEL);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1f]\"));\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1e]\"));\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x0]\"));\n  }\n\n","sourceOld":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.SEP_LABEL);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1f]\"));\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1e]\"));\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x0]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","sourceNew":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) ConcatenateGraphFilter.SEP_LABEL);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1f]\"));\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1e]\"));\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x0]\"));\n  }\n\n","sourceOld":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.SEP_LABEL);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1f]\"));\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1e]\"));\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x0]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testReservedChars().mjava","sourceNew":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) ConcatenateGraphFilter.SEP_LABEL);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1f]\"));\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1e]\"));\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x0]\"));\n  }\n\n","sourceOld":"  @Test\n  public void testReservedChars() throws Exception {\n    CharsRefBuilder charsRefBuilder = new CharsRefBuilder();\n    charsRefBuilder.append(\"sugg\");\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.SEP_LABEL);\n    IllegalArgumentException expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1f]\"));\n\n    charsRefBuilder.setCharAt(2, (char) CompletionAnalyzer.HOLE_CHARACTER);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x1e]\"));\n\n    charsRefBuilder.setCharAt(2, (char) NRTSuggesterBuilder.END_BYTE);\n    expected = expectThrows(IllegalArgumentException.class, () -> {\n      new SuggestField(\"name\", charsRefBuilder.toString(), 1);\n    });\n    assertTrue(expected.getMessage().contains(\"[0x0]\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["05fe562aa248790944d43cdd478f512572835ba0","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"05fe562aa248790944d43cdd478f512572835ba0":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["05fe562aa248790944d43cdd478f512572835ba0"],"f592209545c71895260367152601e9200399776d":["05fe562aa248790944d43cdd478f512572835ba0","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"05fe562aa248790944d43cdd478f512572835ba0":["b70042a8a492f7054d480ccdd2be9796510d4327","9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a","f592209545c71895260367152601e9200399776d"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["05fe562aa248790944d43cdd478f512572835ba0"],"9e45ad199e1b1a4bbc15c1c08dcd73dc08fa927a":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}