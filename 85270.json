{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingFirst().mjava","commits":[{"id":"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336","date":1457978905,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingFirst().mjava","pathOld":"/dev/null","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingFirst() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    iw.close();\n\n    SortField sortField = LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731);\n    sortField.setMissingValue(Double.NEGATIVE_INFINITY);\n    Sort sort = new Sort(sortField);\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(Double.NEGATIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d210c7f333402b4828c1d10dfd5457c9fe312c7d","date":1457987131,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingFirst().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingFirst().mjava","sourceNew":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingFirst() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    SortField sortField = LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731);\n    sortField.setMissingValue(Double.NEGATIVE_INFINITY);\n    Sort sort = new Sort(sortField);\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(Double.NEGATIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingFirst() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = new IndexSearcher(reader);\n    iw.close();\n\n    SortField sortField = LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731);\n    sortField.setMissingValue(Double.NEGATIVE_INFINITY);\n    Sort sort = new Sort(sortField);\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(Double.NEGATIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"98e0f1aa9ab98b9d47cc76e3d38926353c75b571","date":1457996850,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/document/TestLatLonPointDistanceSort#testMissingFirst().mjava","sourceNew":null,"sourceOld":"  /** Add two points (one doc missing) and sort by distance */\n  public void testMissingFirst() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    \n    // missing\n    Document doc = new Document();\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.718266, -74.007819));\n    iw.addDocument(doc);\n    \n    doc = new Document();\n    doc.add(new LatLonPoint(\"location\", 40.7051157, -74.0088305));\n    iw.addDocument(doc);\n    \n    IndexReader reader = iw.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    iw.close();\n\n    SortField sortField = LatLonPoint.newDistanceSort(\"location\", 40.7143528, -74.0059731);\n    sortField.setMissingValue(Double.NEGATIVE_INFINITY);\n    Sort sort = new Sort(sortField);\n    TopDocs td = searcher.search(new MatchAllDocsQuery(), 3, sort);\n\n    FieldDoc d = (FieldDoc) td.scoreDocs[0];\n    assertEquals(Double.NEGATIVE_INFINITY, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[1];\n    assertEquals(462.61748421408186D, (Double)d.fields[0], 0.0D);\n    \n    d = (FieldDoc) td.scoreDocs[2];\n    assertEquals(1056.1630445911035D, (Double)d.fields[0], 0.0D);\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"]},"commit2Childs":{"d210c7f333402b4828c1d10dfd5457c9fe312c7d":["98e0f1aa9ab98b9d47cc76e3d38926353c75b571"],"fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336":["d210c7f333402b4828c1d10dfd5457c9fe312c7d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fe1685e5d4fe44b9b8bf8bfc5993e02d39f3f336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"98e0f1aa9ab98b9d47cc76e3d38926353c75b571":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}