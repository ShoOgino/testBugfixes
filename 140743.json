{"path":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toFilteredSolrParams(List[String]).mjava","commits":[{"id":"0e20eb505c4fd61a8fd1b129859868ceb700d224","date":1391663291,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toFilteredSolrParams(List[String]).mjava","pathOld":"/dev/null","sourceNew":"  /** Create filtered SolrParams. */\n  public SolrParams toFilteredSolrParams(List<String> names) {\n    NamedList<String> nl = new NamedList<String>();\n    for (Iterator<String> it = getParameterNamesIterator(); it.hasNext();) {\n      final String name = it.next();\n      if (names.contains(name)) {\n        final String[] values = getParams(name);\n        for (String value : values) {\n          nl.add(name, value);\n        }\n      }\n    }\n    return toSolrParams(nl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toFilteredSolrParams(List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toFilteredSolrParams(List[String]).mjava","sourceNew":"  /** Create filtered SolrParams. */\n  public SolrParams toFilteredSolrParams(List<String> names) {\n    NamedList<String> nl = new NamedList<>();\n    for (Iterator<String> it = getParameterNamesIterator(); it.hasNext();) {\n      final String name = it.next();\n      if (names.contains(name)) {\n        final String[] values = getParams(name);\n        for (String value : values) {\n          nl.add(name, value);\n        }\n      }\n    }\n    return toSolrParams(nl);\n  }\n\n","sourceOld":"  /** Create filtered SolrParams. */\n  public SolrParams toFilteredSolrParams(List<String> names) {\n    NamedList<String> nl = new NamedList<String>();\n    for (Iterator<String> it = getParameterNamesIterator(); it.hasNext();) {\n      final String name = it.next();\n      if (names.contains(name)) {\n        final String[] values = getParams(name);\n        for (String value : values) {\n          nl.add(name, value);\n        }\n      }\n    }\n    return toSolrParams(nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"129e5b874f99ae4e04f39c337c940dda690f2d38","date":1524504409,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toFilteredSolrParams(List[String]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/params/SolrParams#toFilteredSolrParams(List[String]).mjava","sourceNew":"  @Deprecated\n  public SolrParams toFilteredSolrParams(List<String> names) {\n    // TODO do this better somehow via a view that filters?  See SolrCore.preDecorateResponse.\n    //   ... and/or add some optional predicates to iterator()?\n    NamedList<String> nl = new NamedList<>();\n    for (Iterator<String> it = getParameterNamesIterator(); it.hasNext();) {\n      final String name = it.next();\n      if (names.contains(name)) {\n        final String[] values = getParams(name);\n        for (String value : values) {\n          nl.add(name, value);\n        }\n      }\n    }\n    return nl.toSolrParams();\n  }\n\n","sourceOld":"  /** Create filtered SolrParams. */\n  public SolrParams toFilteredSolrParams(List<String> names) {\n    NamedList<String> nl = new NamedList<>();\n    for (Iterator<String> it = getParameterNamesIterator(); it.hasNext();) {\n      final String name = it.next();\n      if (names.contains(name)) {\n        final String[] values = getParams(name);\n        for (String value : values) {\n          nl.add(name, value);\n        }\n      }\n    }\n    return toSolrParams(nl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0e20eb505c4fd61a8fd1b129859868ceb700d224"],"0e20eb505c4fd61a8fd1b129859868ceb700d224":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["129e5b874f99ae4e04f39c337c940dda690f2d38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["129e5b874f99ae4e04f39c337c940dda690f2d38"],"0e20eb505c4fd61a8fd1b129859868ceb700d224":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"129e5b874f99ae4e04f39c337c940dda690f2d38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0e20eb505c4fd61a8fd1b129859868ceb700d224"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}