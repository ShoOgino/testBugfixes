{"path":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26867fa391352324254e5eafd1c2d63e3221f4fc","date":1350562745,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      int nonZeroCount = 0;\n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          nonZeroCount++;\n        }\n      }\n\n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(nonZeroCount);\n      \n      for(TermsWriter field : fields) {\n        if (field.numTerms > 0) {\n          //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n          out.writeVInt(field.fieldInfo.number);\n          out.writeVLong(field.numTerms);\n          final BytesRef rootCode = ((PendingBlock) field.pending.get(0)).index.getEmptyOutput();\n          assert rootCode != null: \"field=\" + field.fieldInfo.name + \" numTerms=\" + field.numTerms;\n          out.writeVInt(rootCode.length);\n          out.writeBytes(rootCode.bytes, rootCode.offset, rootCode.length);\n          if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n            out.writeVLong(field.sumTotalTermFreq);\n          }\n          out.writeVLong(field.sumDocFreq);\n          out.writeVInt(field.docCount);\n          indexOut.writeVLong(field.indexStartFP);\n        }\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","date":1377268487,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3263230f04a1aa8d431d722fdfce583a9542c18","date":1377603209,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        if (TERMS_VERSION_CURRENT >= TERMS_VERSION_META_ARRAY) {\n          out.writeVInt(field.longsSize);\n        }\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        if (TERMS_VERSION_CURRENT >= TERMS_VERSION_META_ARRAY) {\n          out.writeVInt(field.longsSize);\n        }\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        if (TERMS_VERSION_CURRENT >= TERMS_VERSION_META_ARRAY) {\n          out.writeVInt(field.longsSize);\n        }\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        if (TERMS_VERSION_CURRENT >= TERMS_VERSION_META_ARRAY) {\n          out.writeVInt(field.longsSize);\n        }\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      writeIndexTrailer(indexOut, indexDirStart);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0974f33be0e2189e71f36b67f1017f4072b1a126","date":1398347867,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43e3527ed736c46c0f0ab28181937b9de5ef7c63","date":1399502658,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    IOException ioe = null;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n    } catch (IOException ioe2) {\n      ioe = ioe2;\n    } finally {\n      IOUtils.closeWhileHandlingException(ioe, out, indexOut, postingsWriter);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad80176d91a6f70fe93880e43dfd697dc4e63ed","date":1400176913,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/BlockTreeTermsWriter#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter#close().mjava","sourceNew":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void close() throws IOException {\n\n    boolean success = false;\n    try {\n      \n      final long dirStart = out.getFilePointer();\n      final long indexDirStart = indexOut.getFilePointer();\n\n      out.writeVInt(fields.size());\n      \n      for(FieldMetaData field : fields) {\n        //System.out.println(\"  field \" + field.fieldInfo.name + \" \" + field.numTerms + \" terms\");\n        out.writeVInt(field.fieldInfo.number);\n        assert field.numTerms > 0;\n        out.writeVLong(field.numTerms);\n        out.writeVInt(field.rootCode.length);\n        out.writeBytes(field.rootCode.bytes, field.rootCode.offset, field.rootCode.length);\n        if (field.fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n          out.writeVLong(field.sumTotalTermFreq);\n        }\n        out.writeVLong(field.sumDocFreq);\n        out.writeVInt(field.docCount);\n        out.writeVInt(field.longsSize);\n        indexOut.writeVLong(field.indexStartFP);\n        writeBytesRef(out, field.minTerm);\n        writeBytesRef(out, field.maxTerm);\n      }\n      writeTrailer(out, dirStart);\n      CodecUtil.writeFooter(out);\n      writeIndexTrailer(indexOut, indexDirStart);\n      CodecUtil.writeFooter(indexOut);\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(out, indexOut, postingsWriter);\n      } else {\n        IOUtils.closeWhileHandlingException(out, indexOut, postingsWriter);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["2f948dd442d23baa6cbb28daf77c8db78b351329","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["1f3b037cd083286b2af89f96e768f85dcd8072d6","0974f33be0e2189e71f36b67f1017f4072b1a126"],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["0974f33be0e2189e71f36b67f1017f4072b1a126"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","26867fa391352324254e5eafd1c2d63e3221f4fc"],"26867fa391352324254e5eafd1c2d63e3221f4fc":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98"],"0974f33be0e2189e71f36b67f1017f4072b1a126":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["26867fa391352324254e5eafd1c2d63e3221f4fc"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["43e3527ed736c46c0f0ab28181937b9de5ef7c63","5ad80176d91a6f70fe93880e43dfd697dc4e63ed"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2f948dd442d23baa6cbb28daf77c8db78b351329":["26867fa391352324254e5eafd1c2d63e3221f4fc","e3263230f04a1aa8d431d722fdfce583a9542c18"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d637064d608752565d4f9f41b2497dfdfdde50e"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","0974f33be0e2189e71f36b67f1017f4072b1a126"],"5ad80176d91a6f70fe93880e43dfd697dc4e63ed":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"43e3527ed736c46c0f0ab28181937b9de5ef7c63":["5ad80176d91a6f70fe93880e43dfd697dc4e63ed","4d637064d608752565d4f9f41b2497dfdfdde50e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"26867fa391352324254e5eafd1c2d63e3221f4fc":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98","2f948dd442d23baa6cbb28daf77c8db78b351329"],"e3263230f04a1aa8d431d722fdfce583a9542c18":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"0974f33be0e2189e71f36b67f1017f4072b1a126":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","43e3527ed736c46c0f0ab28181937b9de5ef7c63"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"1a88d7b0899b7d22dcbd4cf8ca35d9ec9850ab98":["e3263230f04a1aa8d431d722fdfce583a9542c18"],"4d637064d608752565d4f9f41b2497dfdfdde50e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","26867fa391352324254e5eafd1c2d63e3221f4fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}