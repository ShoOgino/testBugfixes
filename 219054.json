{"path":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/context/simple/SimpleSpatialContext#makeRect(double,double,double,double).mjava","commits":[{"id":"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a","date":1329809096,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/context/simple/SimpleSpatialContext#makeRect(double,double,double,double).mjava","pathOld":"modules/spatial/strategy/src/java/org/apache/lucene/spatial/base/context/simple/SimpleSpatialContext#makeRect(double,double,double,double).mjava","sourceNew":"  @Override\n  public Rectangle makeRect(double minX, double maxX, double minY, double maxY) {\n    //--Normalize parameters\n    if (isGeo()) {\n      double delta = calcWidth(minX,maxX);\n      if (delta >= 360) {\n        //The only way to officially support complete longitude wrap-around is via western longitude = -180. We can't\n        // support any point because 0 is undifferentiated in sign.\n        minX = -180;\n        maxX = 180;\n      } else {\n        minX = normX(minX);\n        maxX = normX(maxX);\n        assert Math.abs(delta - calcWidth(minX,maxX)) < 0.0001;//recompute delta; should be the same\n      }\n      if (minY > maxY) {\n        throw new IllegalArgumentException(\"maxY must be >= minY\");\n      }\n      if (minY < -90 || minY > 90 || maxY < -90 || maxY > 90)\n        throw new IllegalArgumentException(\"minY or maxY is outside of -90 to 90 bounds. What did you mean?\");\n//      debatable what to do in this situation.\n//      if (minY < -90) {\n//        minX = -180;\n//        maxX = 180;\n//        maxY = Math.min(90,Math.max(maxY,-90 + (-90 - minY)));\n//        minY = -90;\n//      }\n//      if (maxY > 90) {\n//        minX = -180;\n//        maxX = 180;\n//        minY = Math.max(-90,Math.min(minY,90 - (maxY - 90)));\n//        maxY = 90;\n//      }\n\n    } else {\n      //these normalizations probably won't do anything since it's not geo but should probably call them any way.\n      minX = normX(minX);\n      maxX = normX(maxX);\n      minY = normY(minY);\n      maxY = normY(maxY);\n    }\n    return new RectangleImpl( minX, maxX, minY, maxY );\n  }\n\n","sourceOld":"  @Override\n  public Rectangle makeRect(double minX, double maxX, double minY, double maxY) {\n    //--Normalize parameters\n    if (isGeo()) {\n      double delta = calcWidth(minX,maxX);\n      if (delta >= 360) {\n        //The only way to officially support complete longitude wrap-around is via western longitude = -180. We can't\n        // support any point because 0 is undifferentiated in sign.\n        minX = -180;\n        maxX = 180;\n      } else {\n        minX = normX(minX);\n        maxX = normX(maxX);\n        assert Math.abs(delta - calcWidth(minX,maxX)) < 0.0001;//recompute delta; should be the same\n      }\n      if (minY > maxY) {\n        throw new IllegalArgumentException(\"maxY must be >= minY\");\n      }\n      if (minY < -90 || minY > 90 || maxY < -90 || maxY > 90)\n        throw new IllegalArgumentException(\"minY or maxY is outside of -90 to 90 bounds. What did you mean?\");\n//      debatable what to do in this situation.\n//      if (minY < -90) {\n//        minX = -180;\n//        maxX = 180;\n//        maxY = Math.min(90,Math.max(maxY,-90 + (-90 - minY)));\n//        minY = -90;\n//      }\n//      if (maxY > 90) {\n//        minX = -180;\n//        maxX = 180;\n//        minY = Math.max(-90,Math.min(minY,90 - (maxY - 90)));\n//        maxY = 90;\n//      }\n\n    } else {\n      //these normalizations probably won't do anything since it's not geo but should probably call them any way.\n      minX = normX(minX);\n      maxX = normX(maxX);\n      minY = normY(minY);\n      maxY = normY(maxY);\n    }\n    return new RectangleImpl( minX, maxX, minY, maxY );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25738042b3fdefd34091f8a386e2ce94d892a505","date":1330492659,"type":4,"author":"Ryan McKinley","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/spatial/base/src/java/org/apache/lucene/spatial/base/context/simple/SimpleSpatialContext#makeRect(double,double,double,double).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Rectangle makeRect(double minX, double maxX, double minY, double maxY) {\n    //--Normalize parameters\n    if (isGeo()) {\n      double delta = calcWidth(minX,maxX);\n      if (delta >= 360) {\n        //The only way to officially support complete longitude wrap-around is via western longitude = -180. We can't\n        // support any point because 0 is undifferentiated in sign.\n        minX = -180;\n        maxX = 180;\n      } else {\n        minX = normX(minX);\n        maxX = normX(maxX);\n        assert Math.abs(delta - calcWidth(minX,maxX)) < 0.0001;//recompute delta; should be the same\n      }\n      if (minY > maxY) {\n        throw new IllegalArgumentException(\"maxY must be >= minY\");\n      }\n      if (minY < -90 || minY > 90 || maxY < -90 || maxY > 90)\n        throw new IllegalArgumentException(\"minY or maxY is outside of -90 to 90 bounds. What did you mean?\");\n//      debatable what to do in this situation.\n//      if (minY < -90) {\n//        minX = -180;\n//        maxX = 180;\n//        maxY = Math.min(90,Math.max(maxY,-90 + (-90 - minY)));\n//        minY = -90;\n//      }\n//      if (maxY > 90) {\n//        minX = -180;\n//        maxX = 180;\n//        minY = Math.max(-90,Math.min(minY,90 - (maxY - 90)));\n//        maxY = 90;\n//      }\n\n    } else {\n      //these normalizations probably won't do anything since it's not geo but should probably call them any way.\n      minX = normX(minX);\n      maxX = normX(maxX);\n      minY = normY(minY);\n      maxY = normY(maxY);\n    }\n    return new RectangleImpl( minX, maxX, minY, maxY );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25738042b3fdefd34091f8a386e2ce94d892a505":["d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817","d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a"],"25738042b3fdefd34091f8a386e2ce94d892a505":[],"d0df2b6e5bc4da595d109453e90eff8dc0ffeb8a":["25738042b3fdefd34091f8a386e2ce94d892a505"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["25738042b3fdefd34091f8a386e2ce94d892a505","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}