{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","commits":[{"id":"1786be6a11f9cf5e48ce84869d1bb71e9c02f966","date":1448381196,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && BKDUtil.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && NumericUtils.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && BKDUtil.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12bfdc932307442b651432f92845942f9041ace8","date":1456860728,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && NumericUtils.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && NumericUtils.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ffb58ba57f805651a528311c104f104d9f4573","date":1457861471,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, packedValueOffset) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b9028cf27fe30db95667505bb92ecaee8fa3aef7","date":1457861734,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDWriter#valueInOrder(long,byte[],byte[]).mjava","sourceNew":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue, int packedValueOffset) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, packedValueOffset) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue, packedValueOffset, packedBytesLength) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, packedValueOffset, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","sourceOld":"  // only called from assert\n  private boolean valueInOrder(long ord, byte[] lastPackedValue, byte[] packedValue) {\n    if (ord > 0 && StringHelper.compare(bytesPerDim, lastPackedValue, 0, packedValue, 0) > 0) {\n      throw new AssertionError(\"values out of order: last value=\" + new BytesRef(lastPackedValue) + \" current value=\" + new BytesRef(packedValue) + \" ord=\" + ord);\n    }\n    System.arraycopy(packedValue, 0, lastPackedValue, 0, bytesPerDim);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"12bfdc932307442b651432f92845942f9041ace8":["770342641f7b505eaa8dccdc666158bff2419109"],"16ffb58ba57f805651a528311c104f104d9f4573":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","16ffb58ba57f805651a528311c104f104d9f4573"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","12bfdc932307442b651432f92845942f9041ace8"],"770342641f7b505eaa8dccdc666158bff2419109":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"]},"commit2Childs":{"12bfdc932307442b651432f92845942f9041ace8":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"16ffb58ba57f805651a528311c104f104d9f4573":["b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"1786be6a11f9cf5e48ce84869d1bb71e9c02f966":["770342641f7b505eaa8dccdc666158bff2419109"],"b9028cf27fe30db95667505bb92ecaee8fa3aef7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1786be6a11f9cf5e48ce84869d1bb71e9c02f966"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["16ffb58ba57f805651a528311c104f104d9f4573","b9028cf27fe30db95667505bb92ecaee8fa3aef7"],"770342641f7b505eaa8dccdc666158bff2419109":["12bfdc932307442b651432f92845942f9041ace8","cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}