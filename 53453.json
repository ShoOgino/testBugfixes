{"path":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrServer,SolrServer,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrServer controlServer, SolrServer cloudServer, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlServer.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudServer.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"100000\", \"fl\",\"id\", \"tests\",\"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlServer.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudServer.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlServer.query(q).getResults();\n      SolrDocumentList b = cloudServer.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa","date":1425039471,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d875c2ae53d9e38d16cd0c08ff91c02202936d8","date":1434325243,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    }\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    }\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    try {\n      // get versions for the mismatched ids\n      boolean foundId = false;\n      StringBuilder ids = new StringBuilder(\"id:(\");\n      for (Map doc : differences) {\n        ids.append(\" \").append(doc.get(\"id\"));\n        foundId = true;\n      }\n      ids.append(\")\");\n\n      if (foundId) {\n        // get versions for those ids that don't match\n        q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n            \"sort\", \"id asc\", \"tests\",\n            \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n        // debugging via logs\n\n        // use POST, the ids in the query above is constructed and could be huge\n        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();\n        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();\n\n        log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n      }\n    } catch (Exception e) {\n      // swallow any exceptions, this is just useful for producing debug output,\n      // and shouldn't usurp the original issue with mismatches.\n      log.error(\"Unable to find versions for mismatched ids\", e);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    };\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    };\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    // get versions for the mismatched ids\n    boolean foundId = false;\n    StringBuilder ids = new StringBuilder(\"id:(\");\n    for (Map doc : differences) {\n      ids.append(\" \"+doc.get(\"id\"));\n      foundId = true;\n    }\n    ids.append(\")\");\n    \n    if (foundId) {\n      // get versions for those ids that don't match\n      q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n          \"sort\", \"id asc\", \"tests\",\n          \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n                                                       // debugging via logs\n      \n      SolrDocumentList a = controlClient.query(q).getResults();\n      SolrDocumentList b = cloudClient.query(q).getResults();\n      \n      log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n    }\n    \n    return true;\n  }\n\n","bugFix":["bafca15d8e408346a67f4282ad1143b88023893b"],"bugIntro":["ac0f74b432a8856639ea367bb63f61ba8f65d132"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac0f74b432a8856639ea367bb63f61ba8f65d132","date":1555696793,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    }\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    }\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    try {\n      // get versions for the mismatched ids\n      boolean foundId = false;\n\n      // use filter() to allow being parsed as 'terms in set' query instead of a (weighted/scored)\n      // BooleanQuery so we don't trip too many boolean clauses\n      StringBuilder ids = new StringBuilder(\"filter(id:(\");\n      for (Map doc : differences) {\n        ids.append(\" \").append(doc.get(\"id\"));\n        foundId = true;\n      }\n      ids.append(\"))\");\n\n      if (foundId) {\n        // get versions for those ids that don't match\n        q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n            \"sort\", \"id asc\", \"tests\",\n            \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n        // debugging via logs\n\n        // use POST, the ids in the query above is constructed and could be huge\n        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();\n        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();\n\n        log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n      }\n    } catch (Exception e) {\n      // swallow any exceptions, this is just useful for producing debug output,\n      // and shouldn't usurp the original issue with mismatches.\n      log.error(\"Unable to find versions for mismatched ids\", e);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    }\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    }\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    try {\n      // get versions for the mismatched ids\n      boolean foundId = false;\n      StringBuilder ids = new StringBuilder(\"id:(\");\n      for (Map doc : differences) {\n        ids.append(\" \").append(doc.get(\"id\"));\n        foundId = true;\n      }\n      ids.append(\")\");\n\n      if (foundId) {\n        // get versions for those ids that don't match\n        q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n            \"sort\", \"id asc\", \"tests\",\n            \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n        // debugging via logs\n\n        // use POST, the ids in the query above is constructed and could be huge\n        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();\n        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();\n\n        log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n      }\n    } catch (Exception e) {\n      // swallow any exceptions, this is just useful for producing debug output,\n      // and shouldn't usurp the original issue with mismatches.\n      log.error(\"Unable to find versions for mismatched ids\", e);\n    }\n\n    return true;\n  }\n\n","bugFix":["0d875c2ae53d9e38d16cd0c08ff91c02202936d8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now {}\", controlDocList.getNumFound());\n    }\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now {}\", cloudDocList.getNumFound());\n    }\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    try {\n      // get versions for the mismatched ids\n      boolean foundId = false;\n\n      // use filter() to allow being parsed as 'terms in set' query instead of a (weighted/scored)\n      // BooleanQuery so we don't trip too many boolean clauses\n      StringBuilder ids = new StringBuilder(\"filter(id:(\");\n      for (Map doc : differences) {\n        ids.append(\" \").append(doc.get(\"id\"));\n        foundId = true;\n      }\n      ids.append(\"))\");\n\n      if (foundId) {\n        // get versions for those ids that don't match\n        q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n            \"sort\", \"id asc\", \"tests\",\n            \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n        // debugging via logs\n\n        // use POST, the ids in the query above is constructed and could be huge\n        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();\n        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();\n\n        log.error(\"controlClient :{}\\n\\tcloudClient :{}\", a, b);\n      }\n    } catch (Exception e) {\n      // swallow any exceptions, this is just useful for producing debug output,\n      // and shouldn't usurp the original issue with mismatches.\n      log.error(\"Unable to find versions for mismatched ids\", e);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now \" + controlDocList.getNumFound());\n    }\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now \" + cloudDocList.getNumFound());\n    }\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    try {\n      // get versions for the mismatched ids\n      boolean foundId = false;\n\n      // use filter() to allow being parsed as 'terms in set' query instead of a (weighted/scored)\n      // BooleanQuery so we don't trip too many boolean clauses\n      StringBuilder ids = new StringBuilder(\"filter(id:(\");\n      for (Map doc : differences) {\n        ids.append(\" \").append(doc.get(\"id\"));\n        foundId = true;\n      }\n      ids.append(\"))\");\n\n      if (foundId) {\n        // get versions for those ids that don't match\n        q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n            \"sort\", \"id asc\", \"tests\",\n            \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n        // debugging via logs\n\n        // use POST, the ids in the query above is constructed and could be huge\n        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();\n        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();\n\n        log.error(\"controlClient :\" + a + \"\\n\\tcloudClient :\" + b);\n      }\n    } catch (Exception e) {\n      // swallow any exceptions, this is just useful for producing debug output,\n      // and shouldn't usurp the original issue with mismatches.\n      log.error(\"Unable to find versions for mismatched ids\", e);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6809a6d7924df2c864d6a5863944aff9dfeb372c","date":1591826750,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/CloudInspectUtil#compareResults(SolrClient,SolrClient,Set[String],Set[String]).mjava","sourceNew":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now {}\", controlDocList.getNumFound());\n    }\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now {}\", cloudDocList.getNumFound());\n    }\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    @SuppressWarnings({\"rawtypes\"})\n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    try {\n      // get versions for the mismatched ids\n      boolean foundId = false;\n\n      // use filter() to allow being parsed as 'terms in set' query instead of a (weighted/scored)\n      // BooleanQuery so we don't trip too many boolean clauses\n      StringBuilder ids = new StringBuilder(\"filter(id:(\");\n      for (@SuppressWarnings({\"rawtypes\"})Map doc : differences) {\n        ids.append(\" \").append(doc.get(\"id\"));\n        foundId = true;\n      }\n      ids.append(\"))\");\n\n      if (foundId) {\n        // get versions for those ids that don't match\n        q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n            \"sort\", \"id asc\", \"tests\",\n            \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n        // debugging via logs\n\n        // use POST, the ids in the query above is constructed and could be huge\n        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();\n        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();\n\n        log.error(\"controlClient :{}\\n\\tcloudClient :{}\", a, b);\n      }\n    } catch (Exception e) {\n      // swallow any exceptions, this is just useful for producing debug output,\n      // and shouldn't usurp the original issue with mismatches.\n      log.error(\"Unable to find versions for mismatched ids\", e);\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Compares the results of the control and cloud clients.\n   * \n   * @return true if the compared results are illegal.\n   */\n  public static boolean compareResults(SolrClient controlClient, SolrClient cloudClient, Set<String> addFails, Set<String> deleteFails)\n      throws SolrServerException, IOException {\n    \n    SolrParams q = SolrTestCaseJ4.params(\"q\",\"*:*\",\"rows\",\"0\", \"tests\",\"checkShardConsistency(vsControl)\");    // add a tag to aid in debugging via logs\n\n    SolrDocumentList controlDocList = controlClient.query(q).getResults();\n    long controlDocs = controlDocList.getNumFound();\n\n    SolrDocumentList cloudDocList = cloudClient.query(q).getResults();\n    long cloudClientDocs = cloudDocList.getNumFound();\n    \n    // re-execute the query getting ids\n    q = SolrTestCaseJ4.params(\"q\", \"*:*\", \"rows\", \"100000\", \"fl\", \"id\", \"tests\", \"checkShardConsistency(vsControl)/getIds\");    // add a tag to aid in debugging via logs\n    controlDocList = controlClient.query(q).getResults();\n    if (controlDocs != controlDocList.getNumFound()) {\n      log.error(\"Something changed! control now {}\", controlDocList.getNumFound());\n    }\n\n    cloudDocList = cloudClient.query(q).getResults();\n    if (cloudClientDocs != cloudDocList.getNumFound()) {\n      log.error(\"Something changed! cloudClient now {}\", cloudDocList.getNumFound());\n    }\n\n    if (controlDocs != cloudClientDocs && (addFails != null || deleteFails != null)) {\n      boolean legal = CloudInspectUtil.checkIfDiffIsLegal(controlDocList, cloudDocList,\n          \"controlDocList\", \"cloudDocList\", addFails, deleteFails);\n      if (legal) {\n        return false;\n      }\n    }\n    \n    Set<Map> differences = CloudInspectUtil.showDiff(controlDocList, cloudDocList,\n        \"controlDocList\", \"cloudDocList\");\n\n    try {\n      // get versions for the mismatched ids\n      boolean foundId = false;\n\n      // use filter() to allow being parsed as 'terms in set' query instead of a (weighted/scored)\n      // BooleanQuery so we don't trip too many boolean clauses\n      StringBuilder ids = new StringBuilder(\"filter(id:(\");\n      for (Map doc : differences) {\n        ids.append(\" \").append(doc.get(\"id\"));\n        foundId = true;\n      }\n      ids.append(\"))\");\n\n      if (foundId) {\n        // get versions for those ids that don't match\n        q = SolrTestCaseJ4.params(\"q\", ids.toString(), \"rows\", \"100000\", \"fl\", \"id,_version_\",\n            \"sort\", \"id asc\", \"tests\",\n            \"checkShardConsistency(vsControl)/getVers\"); // add a tag to aid in\n        // debugging via logs\n\n        // use POST, the ids in the query above is constructed and could be huge\n        SolrDocumentList a = controlClient.query(q, SolrRequest.METHOD.POST).getResults();\n        SolrDocumentList b = cloudClient.query(q, SolrRequest.METHOD.POST).getResults();\n\n        log.error(\"controlClient :{}\\n\\tcloudClient :{}\", a, b);\n      }\n    } catch (Exception e) {\n      // swallow any exceptions, this is just useful for producing debug output,\n      // and shouldn't usurp the original issue with mismatches.\n      log.error(\"Unable to find versions for mismatched ids\", e);\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d875c2ae53d9e38d16cd0c08ff91c02202936d8":["b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ac0f74b432a8856639ea367bb63f61ba8f65d132":["0d875c2ae53d9e38d16cd0c08ff91c02202936d8"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["ac0f74b432a8856639ea367bb63f61ba8f65d132"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6809a6d7924df2c864d6a5863944aff9dfeb372c"]},"commit2Childs":{"6809a6d7924df2c864d6a5863944aff9dfeb372c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0d875c2ae53d9e38d16cd0c08ff91c02202936d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"0d875c2ae53d9e38d16cd0c08ff91c02202936d8":["ac0f74b432a8856639ea367bb63f61ba8f65d132"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","b8ed5ba2c6fdd51d5fb71cfabb554a7f2a7d6cfa"],"ac0f74b432a8856639ea367bb63f61ba8f65d132":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["6809a6d7924df2c864d6a5863944aff9dfeb372c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}