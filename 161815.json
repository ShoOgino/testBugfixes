{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#isOverseerLeader().mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#isOverseerLeader().mjava","pathOld":"/dev/null","sourceNew":"  private boolean isOverseerLeader() {\n    ZkNodeProps props = null;\n    try {\n      VersionedData data = cloudManager.getDistribStateManager().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\");\n      if (data != null && data.getData() != null) {\n        props = ZkNodeProps.load(data.getData());\n      }\n    } catch (KeeperException | IOException | NoSuchElementException e) {\n      log.warn(\"Could not obtain overseer's address, skipping.\", e);\n      return false;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      return false;\n    }\n    if (props == null) {\n      return false;\n    }\n    String oid = props.getStr(ID);\n    if (oid == null) {\n      return false;\n    }\n    String[] ids = oid.split(\"-\");\n    if (ids.length != 3) { // unknown format\n      log.warn(\"Unknown format of leader id, skipping: \" + oid);\n      return false;\n    }\n    return nodeName.equals(ids[1]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#getOverseerLeader().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#isOverseerLeader().mjava","sourceNew":"  private String getOverseerLeader() {\n    // non-ZK node has no Overseer\n    if (cloudManager == null) {\n      return null;\n    }\n    ZkNodeProps props = null;\n    try {\n      VersionedData data = cloudManager.getDistribStateManager().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\");\n      if (data != null && data.getData() != null) {\n        props = ZkNodeProps.load(data.getData());\n      }\n    } catch (KeeperException | IOException | NoSuchElementException e) {\n      log.warn(\"Could not obtain overseer's address, skipping.\", e);\n      return null;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      return null;\n    }\n    if (props == null) {\n      return null;\n    }\n    String oid = props.getStr(ID);\n    if (oid == null) {\n      return null;\n    }\n    String[] ids = oid.split(\"-\");\n    if (ids.length != 3) { // unknown format\n      log.warn(\"Unknown format of leader id, skipping: \" + oid);\n      return null;\n    }\n    return ids[1];\n  }\n\n","sourceOld":"  private boolean isOverseerLeader() {\n    ZkNodeProps props = null;\n    try {\n      VersionedData data = cloudManager.getDistribStateManager().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\");\n      if (data != null && data.getData() != null) {\n        props = ZkNodeProps.load(data.getData());\n      }\n    } catch (KeeperException | IOException | NoSuchElementException e) {\n      log.warn(\"Could not obtain overseer's address, skipping.\", e);\n      return false;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      return false;\n    }\n    if (props == null) {\n      return false;\n    }\n    String oid = props.getStr(ID);\n    if (oid == null) {\n      return false;\n    }\n    String[] ids = oid.split(\"-\");\n    if (ids.length != 3) { // unknown format\n      log.warn(\"Unknown format of leader id, skipping: \" + oid);\n      return false;\n    }\n    return nodeName.equals(ids[1]);\n  }\n\n","bugFix":null,"bugIntro":["2d7769c1ceca6a76710f154832127db9f9df2bf1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":4,"author":"Michael Braun","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#isOverseerLeader().mjava","sourceNew":null,"sourceOld":"  private boolean isOverseerLeader() {\n    ZkNodeProps props = null;\n    try {\n      VersionedData data = cloudManager.getDistribStateManager().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\");\n      if (data != null && data.getData() != null) {\n        props = ZkNodeProps.load(data.getData());\n      }\n    } catch (KeeperException | IOException | NoSuchElementException e) {\n      log.warn(\"Could not obtain overseer's address, skipping.\", e);\n      return false;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      return false;\n    }\n    if (props == null) {\n      return false;\n    }\n    String oid = props.getStr(ID);\n    if (oid == null) {\n      return false;\n    }\n    String[] ids = oid.split(\"-\");\n    if (ids.length != 3) { // unknown format\n      log.warn(\"Unknown format of leader id, skipping: \" + oid);\n      return false;\n    }\n    return nodeName.equals(ids[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":4,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#isOverseerLeader().mjava","sourceNew":null,"sourceOld":"  private boolean isOverseerLeader() {\n    ZkNodeProps props = null;\n    try {\n      VersionedData data = cloudManager.getDistribStateManager().getData(\n          Overseer.OVERSEER_ELECT + \"/leader\");\n      if (data != null && data.getData() != null) {\n        props = ZkNodeProps.load(data.getData());\n      }\n    } catch (KeeperException | IOException | NoSuchElementException e) {\n      log.warn(\"Could not obtain overseer's address, skipping.\", e);\n      return false;\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      return false;\n    }\n    if (props == null) {\n      return false;\n    }\n    String oid = props.getStr(ID);\n    if (oid == null) {\n      return false;\n    }\n    String[] ids = oid.split(\"-\");\n    if (ids.length != 3) { // unknown format\n      log.warn(\"Unknown format of leader id, skipping: \" + oid);\n      return false;\n    }\n    return nodeName.equals(ids[1]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}