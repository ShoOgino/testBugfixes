{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","commits":[{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","pathOld":"/dev/null","sourceNew":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.info(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","pathOld":"/dev/null","sourceNew":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.info(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":3,"author":"Erick","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","sourceNew":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.info(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","sourceNew":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.info(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bab88b2c4f624e670440ca39c9fb887d9864019","date":1480143285,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","sourceNew":null,"sourceOld":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ZkClientClusterStateProvider#buildZkHostString(Collection[String],String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#buildZkHostString(Collection[String],String).mjava","sourceNew":"  static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n\n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","sourceOld":"  private static String buildZkHostString(Collection<String> zkHosts, String chroot) {\n    if (zkHosts == null || zkHosts.isEmpty()) {\n      throw new IllegalArgumentException(\"Cannot create CloudSearchClient without valid ZooKeeper host; none specified!\");\n    }\n    \n    StringBuilder zkBuilder = new StringBuilder();\n    int lastIndexValue = zkHosts.size() - 1;\n    int i = 0;\n    for (String zkHost : zkHosts) {\n      zkBuilder.append(zkHost);\n      if (i < lastIndexValue) {\n        zkBuilder.append(\",\");\n      }\n      i++;\n    }\n    if (chroot != null) {\n      if (chroot.startsWith(\"/\")) {\n        zkBuilder.append(chroot);\n      } else {\n        throw new IllegalArgumentException(\n            \"The chroot must start with a forward slash.\");\n      }\n    }\n\n    /* Log the constructed connection string and then initialize. */\n    final String zkHostString = zkBuilder.toString();\n    log.debug(\"Final constructed zkHost string: \" + zkHostString);\n    return zkHostString;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5bab88b2c4f624e670440ca39c9fb887d9864019":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","5bab88b2c4f624e670440ca39c9fb887d9864019"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bab88b2c4f624e670440ca39c9fb887d9864019"]},"commit2Childs":{"5bab88b2c4f624e670440ca39c9fb887d9864019":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["5bab88b2c4f624e670440ca39c9fb887d9864019","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}