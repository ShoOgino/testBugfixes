{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","commits":[{"id":"34ce7c842452c79b12c45a8feb64e4597c7110e8","date":1321637224,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#expungeDeletes(boolean).mjava","sourceNew":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream != null)\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #expungeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void expungeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream != null)\n      infoStream.message(\"IW\", \"expungeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findMergesToExpungeDeletes(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete expungeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","sourceNew":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream.isEnabled(\"IW\"))\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream != null)\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","sourceNew":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n    }\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream.isEnabled(\"IW\"))\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","sourceNew":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n    }\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream.isEnabled(\"IW\"))\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#forceMergeDeletes(boolean).mjava","sourceNew":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n    }\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","sourceOld":"  /** Just like {@link #forceMergeDeletes()}, except you can\n   *  specify whether the call should block until the\n   *  operation completes.  This is only meaningful with a\n   *  {@link MergeScheduler} that is able to run merges in\n   *  background threads.\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * <p><b>NOTE</b>: if you call {@link #close(boolean)}\n   * with <tt>false</tt>, which aborts all running merges,\n   * then any thread still running this method might hit a\n   * {@link MergePolicy.MergeAbortedException}.\n   */\n  public void forceMergeDeletes(boolean doWait)\n    throws CorruptIndexException, IOException {\n    ensureOpen();\n\n    flush(true, true);\n\n    if (infoStream.isEnabled(\"IW\")) {\n      infoStream.message(\"IW\", \"forceMergeDeletes: index now \" + segString());\n    }\n\n    MergePolicy.MergeSpecification spec;\n\n    synchronized(this) {\n      spec = mergePolicy.findForcedDeletesMerges(segmentInfos);\n      if (spec != null) {\n        final int numMerges = spec.merges.size();\n        for(int i=0;i<numMerges;i++)\n          registerMerge(spec.merges.get(i));\n      }\n    }\n\n    mergeScheduler.merge(this);\n\n    if (spec != null && doWait) {\n      final int numMerges = spec.merges.size();\n      synchronized(this) {\n        boolean running = true;\n        while(running) {\n\n          if (hitOOM) {\n            throw new IllegalStateException(\"this writer hit an OutOfMemoryError; cannot complete forceMergeDeletes\");\n          }\n\n          // Check each merge that MergePolicy asked us to\n          // do, to see if any of them are still running and\n          // if any of them have hit an exception.\n          running = false;\n          for(int i=0;i<numMerges;i++) {\n            final MergePolicy.OneMerge merge = spec.merges.get(i);\n            if (pendingMerges.contains(merge) || runningMerges.contains(merge))\n              running = true;\n            Throwable t = merge.getException();\n            if (t != null) {\n              IOException ioe = new IOException(\"background merge hit exception: \" + merge.segString(directory));\n              ioe.initCause(t);\n              throw ioe;\n            }\n          }\n\n          // If any of our merges are still running, wait:\n          if (running)\n            doWait();\n        }\n      }\n    }\n\n    // NOTE: in the ConcurrentMergeScheduler case, when\n    // doWait is false, we can return immediately while\n    // background threads accomplish the merging\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["34ce7c842452c79b12c45a8feb64e4597c7110e8"],"34ce7c842452c79b12c45a8feb64e4597c7110e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}