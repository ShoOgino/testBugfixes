{"path":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#advance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/DisjunctionMaxScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers == 0) return doc = NO_MORE_DOCS;\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n    return doc = subScorers[0].docID();\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers == 0) return doc = NO_MORE_DOCS;\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n    return doc = subScorers[0].docID();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e354c63cdcc974a17c9f8531cecc001229c0952","date":1365702197,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    if (numScorers == 0) return doc = NO_MORE_DOCS;\n    while (subScorers[0].docID() < target) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n    }\n    return doc = subScorers[0].docID();\n  }\n\n","bugFix":null,"bugIntro":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56374313ec4613df1f728772dedcff8bb3cd419d","date":1382027245,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DisjunctionScorer#advance(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    assert doc != NO_MORE_DOCS;\n    while(true) {\n      if (subScorers[0].advance(target) != NO_MORE_DOCS) {\n        heapAdjust(0);\n      } else {\n        heapRemoveRoot();\n        if (numScorers == 0) {\n          return doc = NO_MORE_DOCS;\n        }\n      }\n      if (subScorers[0].docID() >= target) {\n        afterNext();\n        return doc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0e354c63cdcc974a17c9f8531cecc001229c0952":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56374313ec4613df1f728772dedcff8bb3cd419d":["0e354c63cdcc974a17c9f8531cecc001229c0952"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56374313ec4613df1f728772dedcff8bb3cd419d"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e354c63cdcc974a17c9f8531cecc001229c0952"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0e354c63cdcc974a17c9f8531cecc001229c0952":["56374313ec4613df1f728772dedcff8bb3cd419d"],"56374313ec4613df1f728772dedcff8bb3cd419d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}