{"path":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","commits":[{"id":"b24326411db492f92ea49f6fb947c90bc73cf19e","date":1298813468,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["45903437caf2081e259d21447c117144056c6f78","45903437caf2081e259d21447c117144056c6f78","45903437caf2081e259d21447c117144056c6f78","c0f13c90eb0831e9400aab99a549a0d18506f8f2","c0f13c90eb0831e9400aab99a549a0d18506f8f2","c0f13c90eb0831e9400aab99a549a0d18506f8f2","d1c2f76fc022aa441f0c9fed67189098870656a7","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","275019a81d0883a1db4560391b072d1fbe272ec4","4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","4cc2a5e90b34bfc6bb00b6261a7956c2c022c275","4cc2a5e90b34bfc6bb00b6261a7956c2c022c275"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1c2f76fc022aa441f0c9fed67189098870656a7","date":1303317531,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    int zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","pathOld":"solr/src/java/org/apache/solr/core/CoreContainer#load(String,InputSource).mjava","sourceNew":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Load a config file listing the available solr cores.\n   * \n   * @param dir the home directory of all resources.\n   * @param cfgis the configuration file InputStream\n   * @throws ParserConfigurationException\n   * @throws IOException\n   * @throws SAXException\n   */\n  public void load(String dir, InputSource cfgis)\n      throws ParserConfigurationException, IOException, SAXException {\n    this.loader = new SolrResourceLoader(dir);\n    solrHome = loader.getInstanceDir();\n    Config cfg = new Config(loader, null, cfgis, null);\n    String dcoreName = cfg.get(\"solr/cores/@defaultCoreName\", null);\n    if(dcoreName != null) {\n      defaultCoreName = dcoreName;\n    }\n    persistent = cfg.getBool(\"solr/@persistent\", false);\n    libDir = cfg.get(\"solr/@sharedLib\", null);\n    zkHost = cfg.get(\"solr/@zkHost\" , null);\n    adminPath = cfg.get(\"solr/cores/@adminPath\", null);\n    shareSchema = cfg.getBool(\"solr/cores/@shareSchema\", false);\n    zkClientTimeout = cfg.getInt(\"solr/cores/@zkClientTimeout\", 10000);\n\n    hostPort = System.getProperty(\"hostPort\");\n    if (hostPort == null) {\n      hostPort = cfg.get(\"solr/cores/@hostPort\", \"8983\");\n    }\n\n    hostContext = cfg.get(\"solr/cores/@hostContext\", \"solr\");\n    host = cfg.get(\"solr/cores/@host\", null);\n\n    if(shareSchema){\n      indexSchemaCache = new ConcurrentHashMap<String ,IndexSchema>();\n    }\n    adminHandler  = cfg.get(\"solr/cores/@adminHandler\", null );\n    managementPath  = cfg.get(\"solr/cores/@managementPath\", null );\n    \n    zkClientTimeout = Integer.parseInt(System.getProperty(\"zkClientTimeout\", Integer.toString(zkClientTimeout)));\n    initZooKeeper(zkHost, zkClientTimeout);\n\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(dir), libDir);\n      log.info( \"loading shared library: \"+f.getAbsolutePath() );\n      libLoader = SolrResourceLoader.createClassLoader(f, null);\n    }\n\n    if (adminPath != null) {\n      if (adminHandler == null) {\n        coreAdminHandler = new CoreAdminHandler(this);\n      } else {\n        coreAdminHandler = this.createMultiCoreHandler(adminHandler);\n      }\n    }\n\n    try {\n      containerProperties = readProperties(cfg, ((NodeList) cfg.evaluate(\"solr\", XPathConstants.NODESET)).item(0));\n    } catch (Throwable e) {\n      SolrConfig.severeErrors.add(e);\n      SolrException.logOnce(log,null,e);\n    }\n\n    NodeList nodes = (NodeList)cfg.evaluate(\"solr/cores/core\", XPathConstants.NODESET);\n    boolean defaultCoreFound = false;\n    for (int i=0; i<nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      try {\n        String name = DOMUtil.getAttr(node, \"name\", null);\n        if (null == name) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                                  \"Each core in solr.xml must have a 'name'\");\n        }\n        if (name.equals(defaultCoreName)){\n          // for the default core we use a blank name,\n          // later on attempts to access it by it's full name will \n          // be mapped to this.\n          name=\"\";\n        }\n        CoreDescriptor p = new CoreDescriptor(this, name, DOMUtil.getAttr(node, \"instanceDir\", null));\n\n        // deal with optional settings\n        String opt = DOMUtil.getAttr(node, \"config\", null);\n\n        if (opt != null) {\n          p.setConfigName(opt);\n        }\n        opt = DOMUtil.getAttr(node, \"schema\", null);\n        if (opt != null) {\n          p.setSchemaName(opt);\n        }\n        if (zkController != null) {\n          opt = DOMUtil.getAttr(node, \"shard\", null);\n          if (opt != null && opt.length() > 0) {\n            p.getCloudDescriptor().setShardId(opt);\n          }\n          opt = DOMUtil.getAttr(node, \"collection\", null);\n          if (opt != null) {\n            p.getCloudDescriptor().setCollectionName(opt);\n          }\n        }\n        opt = DOMUtil.getAttr(node, \"properties\", null);\n        if (opt != null) {\n          p.setPropertiesName(opt);\n        }\n        opt = DOMUtil.getAttr(node, CoreAdminParams.DATA_DIR, null);\n        if (opt != null) {\n          p.setDataDir(opt);\n        }\n\n        p.setCoreProperties(readProperties(cfg, node));\n\n        SolrCore core = create(p);\n        register(name, core, false);\n      }\n      catch (Throwable ex) {\n        SolrConfig.severeErrors.add( ex );\n        SolrException.logOnce(log,null,ex);\n      }\n    }\n    \n    if(zkController != null) {\n      try {\n        synchronized (zkController.getZkStateReader().getUpdateLock()) {\n          zkController.getZkStateReader().makeShardZkNodeWatches(false);\n          zkController.getZkStateReader().updateCloudState(true);\n        }\n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b24326411db492f92ea49f6fb947c90bc73cf19e"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b24326411db492f92ea49f6fb947c90bc73cf19e"],"c26f00b574427b55127e869b935845554afde1fa":["d1c2f76fc022aa441f0c9fed67189098870656a7","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["b24326411db492f92ea49f6fb947c90bc73cf19e","d1c2f76fc022aa441f0c9fed67189098870656a7"],"d1c2f76fc022aa441f0c9fed67189098870656a7":["b24326411db492f92ea49f6fb947c90bc73cf19e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["d619839baa8ce5503e496b94a9e42ad6f079293f","d1c2f76fc022aa441f0c9fed67189098870656a7"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d1c2f76fc022aa441f0c9fed67189098870656a7"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d1c2f76fc022aa441f0c9fed67189098870656a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b24326411db492f92ea49f6fb947c90bc73cf19e":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a3776dccca01c11e7046323cfad46a3b4a471233","d1c2f76fc022aa441f0c9fed67189098870656a7"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b24326411db492f92ea49f6fb947c90bc73cf19e","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f"],"d1c2f76fc022aa441f0c9fed67189098870656a7":["c26f00b574427b55127e869b935845554afde1fa","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}