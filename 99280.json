{"path":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","pathOld":"src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n    reader.close();\n  }\n\n","sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n    reader.close();\n  }\n\n","sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n    reader.close();\n  }\n\n","sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir);\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":null,"sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":null,"sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestDirectoryReader#doTestUndeleteAll().mjava","sourceNew":null,"sourceOld":"  public void doTestUndeleteAll() throws IOException {\n    sis.read(dir);\n    IndexReader reader = openReader();\n    assertTrue(reader != null);\n    assertEquals( 2, reader.numDocs() );\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.undeleteAll();\n    assertEquals( 2, reader.numDocs() );\n\n    // Ensure undeleteAll survives commit/close/reopen:\n    reader.commit();\n    reader.close();\n\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 2, reader.numDocs() );\n\n    reader.deleteDocument(0);\n    assertEquals( 1, reader.numDocs() );\n    reader.commit();\n    reader.close();\n    if (reader instanceof MultiReader)\n      // MultiReader does not \"own\" the directory so it does\n      // not write the changes to sis on commit:\n      sis.commit(dir, sis.codecFormat());\n    sis.read(dir);\n    reader = openReader();\n    assertEquals( 1, reader.numDocs() );\n    reader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["7b91922b55d15444d554721b352861d028eb8278"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["7b91922b55d15444d554721b352861d028eb8278","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["7b91922b55d15444d554721b352861d028eb8278","75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["7b91922b55d15444d554721b352861d028eb8278","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}