{"path":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","commits":[{"id":"e91746d568843981a68fb96dcecc7f383eb55701","date":1347520198,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"/dev/null","sourceNew":"  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea256c5290971ea9db5a3dab42c4b8d9662e513a","date":1354022529,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n  }\n\n","sourceOld":"  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n  }\n\n","sourceOld":"  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65e7bd208a7bb3c14e9df23897618cb6c8d0c211","date":1361372453,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = countDocsWithClass();\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = MultiFields.getTerms(this.atomicReader, this.classFieldName).getDocCount();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e","date":1381993379,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":"  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer) throws IOException {\n    train(atomicReader, textFieldName, classFieldName, analyzer, null);\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer)\n      throws IOException {\n    this.atomicReader = atomicReader;\n    this.indexSearcher = new IndexSearcher(this.atomicReader);\n    this.textFieldName = textFieldName;\n    this.classFieldName = classFieldName;\n    this.analyzer = analyzer;\n    this.docsWithClassSize = countDocsWithClass();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb","date":1383406909,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer) throws IOException {\n    train(atomicReader, textFieldName, classFieldName, analyzer, null);\n  }\n\n","sourceOld":"  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer) throws IOException {\n    train(atomicReader, textFieldName, classFieldName, analyzer, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/classification/src/java/org/apache/lucene/classification/SimpleNaiveBayesClassifier#train(AtomicReader,String,String,Analyzer).mjava","sourceNew":null,"sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public void train(AtomicReader atomicReader, String textFieldName, String classFieldName, Analyzer analyzer) throws IOException {\n    train(atomicReader, textFieldName, classFieldName, analyzer, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea256c5290971ea9db5a3dab42c4b8d9662e513a":["e91746d568843981a68fb96dcecc7f383eb55701"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["e91746d568843981a68fb96dcecc7f383eb55701","ea256c5290971ea9db5a3dab42c4b8d9662e513a"],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["65e7bd208a7bb3c14e9df23897618cb6c8d0c211"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"e91746d568843981a68fb96dcecc7f383eb55701":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"65e7bd208a7bb3c14e9df23897618cb6c8d0c211":["ea256c5290971ea9db5a3dab42c4b8d9662e513a"]},"commit2Childs":{"ea256c5290971ea9db5a3dab42c4b8d9662e513a":["407687e67faf6e1f02a211ca078d8e3eed631027","65e7bd208a7bb3c14e9df23897618cb6c8d0c211"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e91746d568843981a68fb96dcecc7f383eb55701"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e":["a1f508b269e97eeeb33e0d21c851eceb57bfd1eb"],"a1f508b269e97eeeb33e0d21c851eceb57bfd1eb":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"e91746d568843981a68fb96dcecc7f383eb55701":["ea256c5290971ea9db5a3dab42c4b8d9662e513a","407687e67faf6e1f02a211ca078d8e3eed631027"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"65e7bd208a7bb3c14e9df23897618cb6c8d0c211":["f8c1e95c9ddb89e882eef268cbe52ee0637f9a6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}