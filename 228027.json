{"path":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","commits":[{"id":"d3adb86d40c10078a2d59c16020be3796dd18a8c","date":1264738067,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    TokenStream stream = benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    TokenStream stream = benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","pathOld":"contrib/benchmark/src/test/org/apache/lucene/benchmark/byTask/TestPerfTasksLogic#testShingleAnalyzer().mjava","sourceNew":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","sourceOld":"  /**\n   * Test that we can create ShingleAnalyzerWrappers.\n   */\n  public void testShingleAnalyzer() throws Exception {\n    String text = \"one,two,three, four five six\";\n    \n    // Default analyzer, maxShingleSize, and outputUnigrams\n    Benchmark benchmark = execBenchmark(getShingleConfig(\"\"));\n    benchmark.getRunData().getAnalyzer().tokenStream\n      (\"bogus\", new StringReader(text)).close();\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] {\"one\", \"one two\", \"two\", \"two three\",\n                                     \"three\", \"three four\", \"four\", \"four five\",\n                                     \"five\", \"five six\", \"six\"});\n    // Default analyzer, maxShingleSize = 3, and outputUnigrams = false\n    benchmark = execBenchmark\n      (getShingleConfig(\"maxShingleSize:3,outputUnigrams:false\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one two\", \"one two three\", \"two three\",\n                                      \"two three four\", \"three four\", \n                                      \"three four five\", \"four five\",\n                                      \"four five six\", \"five six\" });\n    // WhitespaceAnalyzer, default maxShingleSize and outputUnigrams\n    benchmark = execBenchmark\n      (getShingleConfig(\"analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three,\", \"one,two,three, four\",\n                                      \"four\", \"four five\", \"five\", \"five six\", \n                                      \"six\" });\n    \n    // WhitespaceAnalyzer, maxShingleSize=3 and outputUnigrams=false\n    benchmark = execBenchmark\n      (getShingleConfig\n        (\"outputUnigrams:false,maxShingleSize:3,analyzer:WhitespaceAnalyzer\"));\n    assertEqualShingle(benchmark.getRunData().getAnalyzer(), text,\n                       new String[] { \"one,two,three, four\", \n                                      \"one,two,three, four five\",\n                                      \"four five\", \"four five six\",\n                                      \"five six\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d3adb86d40c10078a2d59c16020be3796dd18a8c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["d3adb86d40c10078a2d59c16020be3796dd18a8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3adb86d40c10078a2d59c16020be3796dd18a8c"],"d3adb86d40c10078a2d59c16020be3796dd18a8c":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}