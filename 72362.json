{"path":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","commits":[{"id":"94f787671ca16d65e86976f99bd603595f757a91","date":1330045652,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","pathOld":"/dev/null","sourceNew":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","pathOld":"/dev/null","sourceNew":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","sourceNew":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","sourceOld":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","sourceNew":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","sourceOld":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#showDiff(SolrDocumentList,SolrDocumentList,String,String).mjava","sourceNew":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","sourceOld":"  void showDiff(SolrDocumentList a, SolrDocumentList b, String aName, String bName) {\n    System.err.println(\"######\"+aName+ \": \" + a);\n    System.err.println(\"######\"+bName+ \": \" + b);\n    System.err.println(\"###### sizes=\" + a.size() + \",\" + b.size());\n    \n    Set<Map> setA = new HashSet<Map>();\n    for (SolrDocument sdoc : a) {\n      setA.add(new HashMap(sdoc));\n    }\n\n    Set<Map> setB = new HashSet<Map>();\n    for (SolrDocument sdoc : b) {\n      setB.add(new HashMap(sdoc));\n    }\n\n    Set<Map> onlyInA = new HashSet<Map>(setA);\n    onlyInA.removeAll(setB);\n    Set<Map> onlyInB = new HashSet<Map>(setB);\n    onlyInB.removeAll(setA);\n\n    if (onlyInA.size() > 0) {\n      System.err.println(\"###### Only in \" + aName + \": \" + onlyInA);\n    }\n    if (onlyInB.size() > 0) {\n      System.err.println(\"###### Only in \" + bName + \": \" + onlyInB);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"94f787671ca16d65e86976f99bd603595f757a91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["94f787671ca16d65e86976f99bd603595f757a91","2c30e4c1cee08b3b229a77991882594fe7250b66"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","94f787671ca16d65e86976f99bd603595f757a91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["94f787671ca16d65e86976f99bd603595f757a91","2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["94f787671ca16d65e86976f99bd603595f757a91"]},"commit2Childs":{"94f787671ca16d65e86976f99bd603595f757a91":["c7869f64c874ebf7f317d22c00baf2b6857797a6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94f787671ca16d65e86976f99bd603595f757a91","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}