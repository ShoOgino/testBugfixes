{"path":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","commits":[{"id":"d6c939a28130e1107d4e349d6c10d1a92c489662","date":1330299480,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {\n        visitor.binaryField(fieldInfo, value, offset, length);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","560e2ea4254f72003898bd4d74a0971828130864"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {\n        visitor.binaryField(fieldInfo, value, offset, length);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {\n        visitor.binaryField(fieldInfo, value, offset, length);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {\n        visitor.binaryField(fieldInfo, value, offset, length);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","bugFix":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {\n        visitor.binaryField(fieldInfo, value, offset, length);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws CorruptIndexException, IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {\n        visitor.binaryField(fieldInfo, value, offset, length);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560e2ea4254f72003898bd4d74a0971828130864","date":1348686997,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n        visitor.binaryField(fieldInfo, value);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value, int offset, int length) throws IOException {\n        visitor.binaryField(fieldInfo, value, offset, length);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","bugFix":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterLeafReader#document(int,StoredFieldVisitor).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/FieldFilterAtomicReader#document(int,StoredFieldVisitor).mjava","sourceNew":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n        visitor.binaryField(fieldInfo, value);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void document(final int docID, final StoredFieldVisitor visitor) throws IOException {\n    super.document(docID, new StoredFieldVisitor() {\n      @Override\n      public void binaryField(FieldInfo fieldInfo, byte[] value) throws IOException {\n        visitor.binaryField(fieldInfo, value);\n      }\n\n      @Override\n      public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n        visitor.stringField(fieldInfo, value);\n      }\n\n      @Override\n      public void intField(FieldInfo fieldInfo, int value) throws IOException {\n        visitor.intField(fieldInfo, value);\n      }\n\n      @Override\n      public void longField(FieldInfo fieldInfo, long value) throws IOException {\n        visitor.longField(fieldInfo, value);\n      }\n\n      @Override\n      public void floatField(FieldInfo fieldInfo, float value) throws IOException {\n        visitor.floatField(fieldInfo, value);\n      }\n\n      @Override\n      public void doubleField(FieldInfo fieldInfo, double value) throws IOException {\n        visitor.doubleField(fieldInfo, value);\n      }\n\n      @Override\n      public Status needsField(FieldInfo fieldInfo) throws IOException {\n        return hasField(fieldInfo.name) ? visitor.needsField(fieldInfo) : Status.NO;\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d6c939a28130e1107d4e349d6c10d1a92c489662"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["d6c939a28130e1107d4e349d6c10d1a92c489662","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d6c939a28130e1107d4e349d6c10d1a92c489662"],"560e2ea4254f72003898bd4d74a0971828130864":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["560e2ea4254f72003898bd4d74a0971828130864"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d6c939a28130e1107d4e349d6c10d1a92c489662"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","560e2ea4254f72003898bd4d74a0971828130864"],"d6c939a28130e1107d4e349d6c10d1a92c489662":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"560e2ea4254f72003898bd4d74a0971828130864":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}