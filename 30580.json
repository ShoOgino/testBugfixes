{"path":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","commits":[{"id":"8b6187898fc4413ccd18229711786550a280383c","date":1173776782,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"/dev/null","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        Hits hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"first number of hits\", 14, hits.length());\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, false, new WhitespaceAnalyzer());\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm));\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length());\n        searcher.close();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9aba6db0f2adde620bb61f591ed18dcfee36ac","date":1201778618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        Hits hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"first number of hits\", 14, hits.length());\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm));\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length());\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        Hits hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"first number of hits\", 14, hits.length());\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, false, new WhitespaceAnalyzer());\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm));\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length());\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        Hits hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"first number of hits\", 14, hits.length());\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm));\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length());\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm));\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length());\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, false, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void xxxtestCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void xxxtestCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer with\n     * autoCommit=false, so it will only commit on close,\n     * then add a bunch of docs, making sure reader does not\n     * see these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer with autoCommit disabled\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(Version.LUCENE_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new WhitespaceAnalyzer(TEST_VERSION_CURRENT), IndexWriter.MaxFieldLength.LIMITED);\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCommitOnClose().mjava","sourceNew":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","sourceOld":"    /*\n     * Simple test for \"commit on close\": open writer then\n     * add a bunch of docs, making sure reader does not see\n     * these docs until writer is closed.\n     */\n    public void testCommitOnClose() throws IOException {\n        Directory dir = new RAMDirectory();      \n        IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for (int i = 0; i < 14; i++) {\n          addDoc(writer);\n        }\n        writer.close();\n\n        Term searchTerm = new Term(\"content\", \"aaa\");        \n        IndexSearcher searcher = new IndexSearcher(dir, false);\n        ScoreDoc[] hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"first number of hits\", 14, hits.length);\n        searcher.close();\n\n        IndexReader reader = IndexReader.open(dir, true);\n\n        writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n        for(int i=0;i<3;i++) {\n          for(int j=0;j<11;j++) {\n            addDoc(writer);\n          }\n          searcher = new IndexSearcher(dir, false);\n          hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n          assertEquals(\"reader incorrectly sees changes from writer\", 14, hits.length);\n          searcher.close();\n          assertTrue(\"reader should have still been current\", reader.isCurrent());\n        }\n\n        // Now, close the writer:\n        writer.close();\n        assertFalse(\"reader should not be current now\", reader.isCurrent());\n\n        searcher = new IndexSearcher(dir, false);\n        hits = searcher.search(new TermQuery(searchTerm), null, 1000).scoreDocs;\n        assertEquals(\"reader did not see changes after writer was closed\", 47, hits.length);\n        searcher.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["09c482d1e63332617181729a225b215c452d8a79","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["8b6187898fc4413ccd18229711786550a280383c"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["09c482d1e63332617181729a225b215c452d8a79"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"8b6187898fc4413ccd18229711786550a280383c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"87c966e9308847938a7c905c2e46a56d8df788b8":["0a046c0c310bc77931fc8441bd920053b607dd14"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"c4ae99f08f69aa3acba7cd75134e8447eb747559":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["87c966e9308847938a7c905c2e46a56d8df788b8"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"fd9aba6db0f2adde620bb61f591ed18dcfee36ac":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b6187898fc4413ccd18229711786550a280383c"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"8b6187898fc4413ccd18229711786550a280383c":["fd9aba6db0f2adde620bb61f591ed18dcfee36ac"],"87c966e9308847938a7c905c2e46a56d8df788b8":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"09c482d1e63332617181729a225b215c452d8a79":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}