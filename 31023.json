{"path":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new LuceneTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new LuceneTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/taxonomy/TestTaxonomyCombined#assertConsistentYoungestChild(CategoryPath,int,int,int,int).mjava","sourceNew":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","sourceOld":"  private void assertConsistentYoungestChild(final CategoryPath abPath,\n      final int abOrd, final int abYoungChildBase1, final int abYoungChildBase2, final int retry)\n      throws Exception {\n    SlowRAMDirectory indexDir =  new SlowRAMDirectory(-1,null); // no slowness for intialization\n    TaxonomyWriter tw = new DirectoryTaxonomyWriter(indexDir);\n    tw.addCategory(new CategoryPath(\"a\", \"0\"));\n    tw.addCategory(abPath);\n    tw.commit();\n    \n    final TaxonomyReader tr = new DirectoryTaxonomyReader(indexDir);\n    for (int i=0; i < 1<<10; i++) { //1024 facets\n      final CategoryPath cp = new CategoryPath(\"a\", \"b\", Integer.toString(i));\n      tw.addCategory(cp);\n      assertEquals(\"Ordinal of \"+cp+\" must be invalid until Taxonomy Reader was refreshed\", TaxonomyReader.INVALID_ORDINAL, tr.getOrdinal(cp));\n    }\n    tw.commit();\n    \n    final boolean[] stop = new boolean[] { false };\n    final Throwable[] error = new Throwable[] { null };\n    final int retrieval[] = { 0 }; \n    \n    Thread thread = new Thread(\"Child Arrays Verifier\") {\n      @Override\n      public void run() {\n        setPriority(1+getPriority());\n        try {\n          while (!stop[0]) {\n            int lastOrd = tr.getParentArray().length-1;\n            assertNotNull(\"path of last-ord \"+lastOrd+\" is not found!\",tr.getPath(lastOrd));\n            assertChildrenArrays(tr.getChildrenArrays(),retry,retrieval[0]++);\n          }\n        } catch (Throwable e) {\n          error[0] = e;\n          stop[0] = true;\n        }\n      }\n\n      private void assertChildrenArrays(ChildrenArrays ca, int retry, int retrieval) {\n        final int abYoungChild = ca.getYoungestChildArray()[abOrd];\n        assertTrue(\n            \"Retry \"+retry+\": retrieval: \"+retrieval+\": wrong youngest child for category \"+abPath+\" (ord=\"+abOrd+\n            \") - must be either \"+abYoungChildBase1+\" or \"+abYoungChildBase2+\" but was: \"+abYoungChild,\n            abYoungChildBase1==abYoungChild ||\n            abYoungChildBase2==ca.getYoungestChildArray()[abOrd]);\n      }\n    };\n    thread.start();\n    \n    indexDir.setSleepMillis(1); // some delay for refresh\n    tr.refresh();\n    \n    stop[0] = true;\n    thread.join();\n    assertNull(\"Unexpcted exception at retry \"+retry+\" retrieval \"+retrieval[0]+\": \\n\"+stackTraceStr(error[0]), error[0]);\n    \n    tw.close();\n    tr.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}