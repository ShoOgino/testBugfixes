{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrServer],boolean).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrClient client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrClient) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n        \n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrServer> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrServer client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrServer) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n        \n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrClient client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrClient) client).getBaseURL())\n              .getPort();\n\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n\n            theClients .add(csc);\n\n            break nextClient;\n          }\n        }\n      }\n    }\n\n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n\n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n\n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n\n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n    \n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrClient client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrClient) client).getBaseURL())\n              .getPort();\n          \n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n            \n            theClients .add(csc);\n            \n            break nextClient;\n          }\n        }\n      }\n    }\n \n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n      \n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n    \n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n        \n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"102da6baafc0f534a59f31729343dbab9d3b9e9a","date":1438410244,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState();\n    cloudJettys.clear();\n    shardToJetty.clear();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrClient client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrClient) client).getBaseURL())\n              .getPort();\n\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n\n            theClients .add(csc);\n\n            break nextClient;\n          }\n        }\n      }\n    }\n\n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n\n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n\n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n\n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState(true);\n    cloudJettys.clear();\n    shardToJetty.clear();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrClient client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrClient) client).getBaseURL())\n              .getPort();\n\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n\n            theClients .add(csc);\n\n            break nextClient;\n          }\n        }\n      }\n    }\n\n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n\n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n\n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n\n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#updateMappingsFromZk(List[JettySolrRunner],List[SolrClient],boolean).mjava","sourceNew":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.forceUpdateCollection(DEFAULT_COLLECTION);\n    cloudJettys.clear();\n    shardToJetty.clear();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrClient client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrClient) client).getBaseURL())\n              .getPort();\n\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n\n            theClients .add(csc);\n\n            break nextClient;\n          }\n        }\n      }\n    }\n\n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n\n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n\n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n\n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","sourceOld":"  protected void updateMappingsFromZk(List<JettySolrRunner> jettys, List<SolrClient> clients, boolean allowOverSharding) throws Exception {\n    ZkStateReader zkStateReader = cloudClient.getZkStateReader();\n    zkStateReader.updateClusterState();\n    cloudJettys.clear();\n    shardToJetty.clear();\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    DocCollection coll = clusterState.getCollection(DEFAULT_COLLECTION);\n\n    List<CloudSolrServerClient> theClients = new ArrayList<>();\n    for (SolrClient client : clients) {\n      // find info for this client in zk \n      nextClient:\n      // we find out state by simply matching ports...\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          int port = new URI(((HttpSolrClient) client).getBaseURL())\n              .getPort();\n\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            CloudSolrServerClient csc = new CloudSolrServerClient();\n            csc.solrClient = client;\n            csc.port = port;\n            csc.shardName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            csc.info = replica;\n\n            theClients .add(csc);\n\n            break nextClient;\n          }\n        }\n      }\n    }\n\n    for (JettySolrRunner jetty : jettys) {\n      int port = jetty.getLocalPort();\n      if (port == -1) {\n        throw new RuntimeException(\"Cannot find the port for jetty\");\n      }\n\n      nextJetty:\n      for (Slice slice : coll.getSlices()) {\n        Set<Entry<String,Replica>> entries = slice.getReplicasMap().entrySet();\n        for (Entry<String,Replica> entry : entries) {\n          Replica replica = entry.getValue();\n          if (replica.getStr(ZkStateReader.BASE_URL_PROP).contains(\":\" + port)) {\n            List<CloudJettyRunner> list = shardToJetty.get(slice.getName());\n            if (list == null) {\n              list = new ArrayList<>();\n              shardToJetty.put(slice.getName(), list);\n            }\n            boolean isLeader = slice.getLeader() == replica;\n            CloudJettyRunner cjr = new CloudJettyRunner();\n            cjr.jetty = jetty;\n            cjr.info = replica;\n            cjr.nodeName = replica.getStr(ZkStateReader.NODE_NAME_PROP);\n            cjr.coreNodeName = entry.getKey();\n            cjr.url = replica.getStr(ZkStateReader.BASE_URL_PROP) + \"/\" + replica.getStr(ZkStateReader.CORE_NAME_PROP);\n            cjr.client = findClientByPort(port, theClients);\n            list.add(cjr);\n            if (isLeader) {\n              shardToLeaderJetty.put(slice.getName(), cjr);\n            }\n            cloudJettys.add(cjr);\n            break nextJetty;\n          }\n        }\n      }\n    }\n\n    // # of jetties may not match replicas in shard here, because we don't map\n    // jetties that are not running - every shard should have at least one\n    // running jetty though\n    for (Slice slice : coll.getSlices()) {\n      // check that things look right\n      List<CloudJettyRunner> jetties = shardToJetty.get(slice.getName());\n      if (!allowOverSharding) {\n        assertNotNull(\"Test setup problem: We found no jetties for shard: \"\n            + slice.getName() + \" just:\" + shardToJetty.keySet(), jetties);\n\n        assertEquals(\"slice:\" + slice.getName(), slice.getReplicas().size(),\n            jetties.size());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"abb23fcc2461782ab204e61213240feb77d355aa":["bafca15d8e408346a67f4282ad1143b88023893b"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["abb23fcc2461782ab204e61213240feb77d355aa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"]},"commit2Childs":{"abb23fcc2461782ab204e61213240feb77d355aa":["102da6baafc0f534a59f31729343dbab9d3b9e9a"],"102da6baafc0f534a59f31729343dbab9d3b9e9a":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["abb23fcc2461782ab204e61213240feb77d355aa"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}