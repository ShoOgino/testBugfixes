{"path":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","commits":[{"id":"fe3edda347939cc6859dbf4287e84f3e8e4bb939","date":1372696449,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"tdouble\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"tlong\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"tdate\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"tdouble\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"tlong\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"tdate\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ac4994ad4b84366f9bf298f175d0cef16932581","date":1497051781,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","sourceNew":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"pdoubles\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"plongs\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"pdates\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","sourceOld":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"tdouble\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"tlong\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"tdate\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","sourceNew":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"pdoubles\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"plongs\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"pdates\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","sourceOld":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"tdouble\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"tlong\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"tdate\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","sourceNew":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"pdoubles\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"plongs\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"pdates\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","sourceOld":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"tdouble\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"tlong\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"tdate\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141","date":1533657076,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/AddSchemaFieldsUpdateProcessorFactoryTest#testParseAndAddMultipleFieldsRoundTrip().mjava","sourceNew":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\", Locale.ROOT).withZone(ZoneOffset.UTC);\n    LocalDateTime dateTime = LocalDateTime.parse(field4String1, dateTimeFormatter);\n    Date field4Value1 = Date.from(dateTime.atZone(ZoneOffset.UTC).toInstant());\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormatter.ofPattern(\"yyyy-MM-dd'T'HH:mm:ss\", Locale.ROOT).withZone(ZoneOffset.UTC);\n    String field4Value1String = dateTime.format(dateTimeFormatter2) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"pdoubles\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"plongs\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"pdates\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","sourceOld":"  public void testParseAndAddMultipleFieldsRoundTrip() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    final String fieldName1 = \"newfield7\";\n    final String fieldName2 = \"newfield8\";\n    final String fieldName3 = \"newfield9\";\n    final String fieldName4 = \"newfield10\";\n    assertNull(schema.getFieldOrNull(fieldName1));\n    assertNull(schema.getFieldOrNull(fieldName2));\n    assertNull(schema.getFieldOrNull(fieldName3));\n    assertNull(schema.getFieldOrNull(fieldName4));\n    String field1String1 = \"-13,258.0\"; \n    Float field1Value1 = -13258.0f;\n    String field1String2 = \"84,828,800,808.0\"; \n    Double field1Value2 = 8.4828800808E10;\n    String field1String3 = \"999\";\n    Long field1Value3 = 999L;\n    String field2String1 = \"55,123\";\n    Integer field2Value1 = 55123;\n    String field2String2 = \"1,234,567,890,123,456,789\";\n    Long field2Value2 = 1234567890123456789L;\n    String field3String1 = \"blah-blah\";\n    String field3Value1 = field3String1;\n    String field3String2 = \"-5.28E-3\";\n    Double field3Value2 = -5.28E-3;\n    String field4String1 = \"1999-04-17 17:42\";\n    DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm\").withZoneUTC();\n    DateTime dateTime =  dateTimeFormatter.parseDateTime(field4String1);\n    Date field4Value1 = dateTime.toDate();\n    DateTimeFormatter dateTimeFormatter2 = DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss\").withZoneUTC();\n    String field4Value1String = dateTimeFormatter2.print(dateTime) + \"Z\";\n    \n    SolrInputDocument d = processAdd\n        (\"parse-and-add-fields\", doc(f(\"id\", \"6\"), f(fieldName1, field1String1, field1String2, field1String3),\n                                                   f(fieldName2, field2String1, field2String2),\n                                                   f(fieldName3, field3String1, field3String2),\n                                                   f(fieldName4, field4String1)));\n    assertNotNull(d);\n    schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(fieldName1));\n    assertNotNull(schema.getFieldOrNull(fieldName2));\n    assertNotNull(schema.getFieldOrNull(fieldName3));\n    assertNotNull(schema.getFieldOrNull(fieldName4));\n    assertEquals(\"pdoubles\", schema.getFieldType(fieldName1).getTypeName());\n    assertEquals(\"plongs\", schema.getFieldType(fieldName2).getTypeName());\n    assertEquals(\"text\", schema.getFieldType(fieldName3).getTypeName());\n    assertEquals(\"pdates\", schema.getFieldType(fieldName4).getTypeName());\n    assertU(commit());\n    assertQ(req(\"id:6\")\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName1 + \"']/double[.='\" + field1Value3.doubleValue() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value1.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName2 + \"']/long[.='\" + field2Value2.toString() + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String1 + \"']\"\n        ,\"//arr[@name='\" + fieldName3 + \"']/str[.='\" + field3String2 + \"']\"\n        ,\"//arr[@name='\" + fieldName4 + \"']/date[.='\" + field4Value1String + \"']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["28288370235ed02234a64753cdbf0c6ec096304a"],"5ac4994ad4b84366f9bf298f175d0cef16932581":["fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"28288370235ed02234a64753cdbf0c6ec096304a":["fe3edda347939cc6859dbf4287e84f3e8e4bb939","5ac4994ad4b84366f9bf298f175d0cef16932581"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["fe3edda347939cc6859dbf4287e84f3e8e4bb939","5ac4994ad4b84366f9bf298f175d0cef16932581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","fe3edda347939cc6859dbf4287e84f3e8e4bb939"],"fe3edda347939cc6859dbf4287e84f3e8e4bb939":["37a0f60745e53927c4c876cfe5b5a58170f0646c","5ac4994ad4b84366f9bf298f175d0cef16932581","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ac4994ad4b84366f9bf298f175d0cef16932581":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cf8fff0b8b3db9ffa5f8afde8c855baff0d2d141"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}