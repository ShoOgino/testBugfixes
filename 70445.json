{"path":"src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","commits":[{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(final int doc) throws IOException {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","sourceOld":"    public void collect(final int doc) throws IOException {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n          throw new RuntimeException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","pathOld":"src/test/org/apache/lucene/search/TestTimeLimitingCollector.MyHitCollector#collect(int).mjava","sourceNew":"    @Override\n    public void collect(final int doc) throws IOException {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","sourceOld":"    @Override\n    public void collect(final int doc) throws IOException {\n      int docId = doc + docBase;\n      if( slowdown > 0 ) {\n        try {\n          Thread.sleep(slowdown);\n        } catch (InterruptedException ie) {\n          throw new ThreadInterruptedException(ie);\n        }\n      }\n      assert docId >= 0: \" base=\" + docBase + \" doc=\" + doc;\n      bits.set( docId );\n      lastDocCollected = docId;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa4b66eb16ead894fa7130904af6ecf34331f050":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["aa4b66eb16ead894fa7130904af6ecf34331f050"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"64714133cf5ec732e3bbceee63351bb9af0117dc":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}