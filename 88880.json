{"path":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","commits":[{"id":"116545389190ea5d0d9a35977d09ef0fe49716ac","date":1272959441,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"solr/src/test/org/apache/solr/analysis/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(DEFAULT_VERSION, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/commongrams/CommonGramsFilterTest#testCommonGramsQueryFilter().mjava","sourceNew":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","sourceOld":"  /**\n   * This is for testing CommonGramsQueryFilter which outputs a set of tokens\n   * optimized for querying with only one token at each position, either a\n   * unigram or a bigram It also will not return a token for the final position\n   * if the final word is already in the preceding bigram Example:(three\n   * tokens/positions in)\n   * \"foo bar the\"=>\"foo:1|bar:2,bar-the:2|the:3=> \"foo\" \"bar-the\" (2 tokens\n   * out)\n   * \n   * @return Map<String,String>\n   */\n  public void testCommonGramsQueryFilter() throws Exception {\n    Analyzer a = new Analyzer() {    \n      @Override\n      public TokenStream tokenStream(String field, Reader in) {\n        return new CommonGramsQueryFilter(new CommonGramsFilter(\n            new WhitespaceTokenizer(TEST_VERSION_CURRENT, in), commonWords));\n      } \n    };\n\n    // Stop words used below are \"of\" \"the\" and \"s\"\n    \n    // two word queries\n    assertAnalyzesTo(a, \"brown fox\", \n        new String[] { \"brown\", \"fox\" });\n    assertAnalyzesTo(a, \"the fox\", \n        new String[] { \"the_fox\" });\n    assertAnalyzesTo(a, \"fox of\", \n        new String[] { \"fox_of\" });\n    assertAnalyzesTo(a, \"of the\", \n        new String[] { \"of_the\" });\n    \n    // one word queries\n    assertAnalyzesTo(a, \"the\", \n        new String[] { \"the\" });\n    assertAnalyzesTo(a, \"foo\", \n        new String[] { \"foo\" });\n\n    // 3 word combinations s=stopword/common word n=not a stop word\n    assertAnalyzesTo(a, \"n n n\", \n        new String[] { \"n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"quick brown fox\", \n        new String[] { \"quick\", \"brown\", \"fox\" });\n\n    assertAnalyzesTo(a, \"n n s\", \n        new String[] { \"n\", \"n_s\" });\n    assertAnalyzesTo(a, \"quick brown the\", \n        new String[] { \"quick\", \"brown_the\" });\n\n    assertAnalyzesTo(a, \"n s n\", \n        new String[] { \"n_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"quick the brown\", \n        new String[] { \"quick_the\", \"the_brown\" });\n\n    assertAnalyzesTo(a, \"n s s\", \n        new String[] { \"n_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"fox of the\", \n        new String[] { \"fox_of\", \"of_the\" });\n\n    assertAnalyzesTo(a, \"s n n\", \n        new String[] { \"s_n\", \"n\", \"n\" });\n    assertAnalyzesTo(a, \"the quick brown\", \n        new String[] { \"the_quick\", \"quick\", \"brown\" });\n\n    assertAnalyzesTo(a, \"s n s\", \n        new String[] { \"s_n\", \"n_s\" });\n    assertAnalyzesTo(a, \"the fox of\", \n        new String[] { \"the_fox\", \"fox_of\" });\n\n    assertAnalyzesTo(a, \"s s n\", \n        new String[] { \"s_s\", \"s_n\" });\n    assertAnalyzesTo(a, \"of the fox\", \n        new String[] { \"of_the\", \"the_fox\" });\n\n    assertAnalyzesTo(a, \"s s s\", \n        new String[] { \"s_s\", \"s_s\" });\n    assertAnalyzesTo(a, \"of the of\", \n        new String[] { \"of_the\", \"the_of\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"116545389190ea5d0d9a35977d09ef0fe49716ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["116545389190ea5d0d9a35977d09ef0fe49716ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116545389190ea5d0d9a35977d09ef0fe49716ac"],"116545389190ea5d0d9a35977d09ef0fe49716ac":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}