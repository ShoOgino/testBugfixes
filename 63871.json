{"path":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","commits":[{"id":"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8","date":1246360634,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","pathOld":"/dev/null","sourceNew":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = new Double(minId + .5);\n    Double medIdO = new Double(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",new Double(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, new Double(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c","date":1246364870,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","sourceNew":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = new Double(minId + .5);\n    Double medIdO = new Double(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",new Double(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, new Double(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = new Double(minId + .5);\n    Double medIdO = new Double(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",new Double(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, new Double(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","sourceNew":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = Double.valueOf(minId + .5);\n    Double medIdO = Double.valueOf(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",Double.valueOf(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = new Double(minId + .5);\n    Double medIdO = new Double(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",new Double(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, new Double(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","sourceNew":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = new Double(minId + .5);\n    Double medIdO = new Double(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",new Double(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, new Double(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = new Double(minId + .5);\n    Double medIdO = new Double(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",new Double(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, new Double(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","sourceNew":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = Double.valueOf(minId + .5);\n    Double medIdO = Double.valueOf(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",Double.valueOf(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = Double.valueOf(minId + .5);\n    Double medIdO = Double.valueOf(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",Double.valueOf(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","sourceNew":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = Double.valueOf(minId + .5);\n    Double medIdO = Double.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",Double.valueOf(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = Double.valueOf(minId + .5);\n    Double medIdO = Double.valueOf(minIdO.floatValue() + ((double) (maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",Double.valueOf(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","pathOld":"src/test/org/apache/lucene/search/TestFieldCacheRangeFilter#testFieldCacheRangeFilterDoubles().mjava","sourceNew":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = Double.valueOf(minId + .5);\n    Double medIdO = Double.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",Double.valueOf(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","sourceOld":"  public void testFieldCacheRangeFilterDoubles() throws IOException {\n\n    IndexReader reader = IndexReader.open(signedIndex.index, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    int numDocs = reader.numDocs();\n    Double minIdO = Double.valueOf(minId + .5);\n    Double medIdO = Double.valueOf(minIdO.floatValue() + ((maxId-minId))/2.0);\n        \n    ScoreDoc[] result;\n    Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",minIdO,medIdO,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs/2, result.length);\n    int count = 0;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,medIdO,F,T), numDocs).scoreDocs;\n    count += result.length;\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",medIdO,null,F,F), numDocs).scoreDocs;\n    count += result.length;\n    assertEquals(\"sum of two concenatted ranges\", numDocs, count);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null,null,T,T), numDocs).scoreDocs;\n    assertEquals(\"find all\", numDocs, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",Double.valueOf(Double.POSITIVE_INFINITY),null,F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n    result = search.search(q,FieldCacheRangeFilter.newDoubleRange(\"id\",null, Double.valueOf(Double.NEGATIVE_INFINITY),F,F), numDocs).scoreDocs;\n    assertEquals(\"infinity special case\", 0, result.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6bcde5e3f23911110baa101ed062b544162825b5":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0a046c0c310bc77931fc8441bd920053b607dd14":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["0a046c0c310bc77931fc8441bd920053b607dd14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"4f7c8ed26cfbf4007c46fd27a417560e932ab4d8":["9b2ba469e48c35b93f118b45188ffaf6e9c31c9c"],"6bcde5e3f23911110baa101ed062b544162825b5":["0a046c0c310bc77931fc8441bd920053b607dd14"],"9b2ba469e48c35b93f118b45188ffaf6e9c31c9c":["6bcde5e3f23911110baa101ed062b544162825b5","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f7c8ed26cfbf4007c46fd27a417560e932ab4d8"],"0a046c0c310bc77931fc8441bd920053b607dd14":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}