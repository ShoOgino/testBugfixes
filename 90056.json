{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/bbox/BBoxStrategy#makeIntersects(Rectangle).mjava","sourceNew":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","sourceOld":"  /**\n   * Constructs a query to retrieve documents that intersect the input envelope.\n   *\n   * @return the spatial query\n   */\n  Query makeIntersects(Rectangle bbox) {\n\n    // the original intersects query does not work for envelopes that cross the date line,\n    // switch to a NOT Disjoint query\n\n    // MUST_NOT causes a problem when it's the only clause type within a BooleanQuery,\n    // to get around it we add all documents as a SHOULD\n\n    // there must be an envelope, it must not be disjoint\n    Query qHasEnv;\n    if (ctx.isGeo()) {\n      Query qIsNonXDL = this.makeXDL(false);\n      Query qIsXDL = ctx.isGeo() ? this.makeXDL(true) : null;\n      qHasEnv = this.makeQuery(BooleanClause.Occur.SHOULD, qIsNonXDL, qIsXDL);\n    } else {\n      qHasEnv = this.makeXDL(false);\n    }\n\n    BooleanQuery.Builder qNotDisjoint = new BooleanQuery.Builder();\n    qNotDisjoint.add(qHasEnv, BooleanClause.Occur.MUST);\n    Query qDisjoint = makeDisjoint(bbox);\n    qNotDisjoint.add(qDisjoint, BooleanClause.Occur.MUST_NOT);\n\n    //Query qDisjoint = makeDisjoint();\n    //BooleanQuery qNotDisjoint = new BooleanQuery();\n    //qNotDisjoint.add(new MatchAllDocsQuery(),BooleanClause.Occur.SHOULD);\n    //qNotDisjoint.add(qDisjoint,BooleanClause.Occur.MUST_NOT);\n    return qNotDisjoint.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}