{"path":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copy(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copy(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copy(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copy(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copy(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copy(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seek(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copy(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copy(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copy(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copy(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e6e919043fa85ee891123768dd655a98edbbf63c","date":1322225413,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copyBytes(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copyBytes(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copy(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copy(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.MemoryIndexReader.MemoryTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copyBytes(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copyBytes(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","sourceOld":"      @Override\n      public SeekStatus seekCeil(BytesRef text, boolean useCache) {\n        termUpto = Arrays.binarySearch(info.sortedTerms, text, termComparator);\n        if (termUpto < 0) { // not found; choose successor\n          termUpto = -termUpto -1;\n          if (termUpto >= info.sortedTerms.length) {\n            return SeekStatus.END;\n          } else {\n            br.copyBytes(info.sortedTerms[termUpto].getKey());\n            return SeekStatus.NOT_FOUND;\n          }\n        } else {\n          br.copyBytes(info.sortedTerms[termUpto].getKey());\n          return SeekStatus.FOUND;\n        }\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e6e919043fa85ee891123768dd655a98edbbf63c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"e6e919043fa85ee891123768dd655a98edbbf63c":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","e6e919043fa85ee891123768dd655a98edbbf63c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"e6e919043fa85ee891123768dd655a98edbbf63c":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}