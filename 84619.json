{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestEphemeralCache#testEphemeralCache().mjava","commits":[{"id":"3337b86edd36607f0208321f1deee79c55e5fd21","date":1321266471,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestEphemeralCache#testEphemeralCache().mjava","pathOld":"/dev/null","sourceNew":"\tpublic void testEphemeralCache() throws Exception {\n\t\tList parentRows = new ArrayList();\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"1\"), \"parent_s\", \"one\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"2\"), \"parent_s\", \"two\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"3\"), \"parent_s\", \"three\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"4\"), \"parent_s\", \"four\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"5\"), \"parent_s\", \"five\"));\n\n\t\tList child1Rows = new ArrayList();\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child1a_mult_s\", \"this is the number six.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"5\"), \"child1a_mult_s\", \"this is the number five.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child1a_mult_s\", \"let's sing a song of six.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"three\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"III\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"3\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"|||\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child1a_mult_s\", \"one\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child1a_mult_s\", \"uno\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"2\"), \"child1b_s\", \"CHILD1B\", \"child1a_mult_s\", \"this is the number two.\"));\n\n    List child2Rows = new ArrayList();\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number six.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"5\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number five.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child2a_mult_s\", \"Child 2 says, 'let's sing a song of six.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, 'three'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, 'III'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2b_s\", \"CHILD2B\", \"child2a_mult_s\", \"Child 2 says, '3'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, '|||'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child2a_mult_s\", \"Child 2 says, 'one'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child2a_mult_s\", \"Child 2 says, 'uno'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"2\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number two.'\"));\n\n    MockDataSource.setIterator(\"SELECT * FROM PARENT\", parentRows.iterator());\n    MockDataSource.setIterator(\"SELECT * FROM CHILD_1\", child1Rows.iterator());\n    MockDataSource.setIterator(\"SELECT * FROM CHILD_2\", child2Rows.iterator());\n\n    runFullImport(loadDataConfig(\"dataimport-cache-ephemeral.xml\"));\n\n    assertQ(req(\"*:*\"),                                       \"//*[@numFound='5']\");\n    assertQ(req(\"id:1\"),                                      \"//*[@numFound='1']\");\n    assertQ(req(\"id:6\"),                                      \"//*[@numFound='0']\");\n    assertQ(req(\"parent_s:four\"),                             \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:this\\\\ is\\\\ the\\\\ numbe*\"),   \"//*[@numFound='2']\");\n    assertQ(req(\"child2a_mult_s:Child\\\\ 2\\\\ say*\"),           \"//*[@numFound='4']\");\n    assertQ(req(\"child1b_s:CHILD1B\"),                         \"//*[@numFound='1']\");\n    assertQ(req(\"child2b_s:CHILD2B\"),                         \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:one\"),                        \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:uno\"),                        \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:(uno OR one)\"),               \"//*[@numFound='1']\");\n\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7477cc545b0653fee13cfdaa4848535d107b96a9","date":1329404953,"type":5,"author":"James Dyer","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestEphemeralCache#setupMockData().mjava","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestEphemeralCache#testEphemeralCache().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private void setupMockData() {\n    List parentRows = new ArrayList();\n    parentRows.add(createMap(\"id\", new BigDecimal(\"1\"), \"parent_s\", \"one\"));\n    parentRows.add(createMap(\"id\", new BigDecimal(\"2\"), \"parent_s\", \"two\"));\n    parentRows.add(createMap(\"id\", new BigDecimal(\"3\"), \"parent_s\", \"three\"));\n    parentRows.add(createMap(\"id\", new BigDecimal(\"4\"), \"parent_s\", \"four\"));\n    parentRows.add(createMap(\"id\", new BigDecimal(\"5\"), \"parent_s\", \"five\"));\n    \n    List child1Rows = new ArrayList();\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child1a_mult_s\", \"this is the number six.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"5\"), \"child1a_mult_s\", \"this is the number five.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child1a_mult_s\", \"let's sing a song of six.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"three\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"III\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"3\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"|||\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child1a_mult_s\", \"one\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child1a_mult_s\", \"uno\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"2\"), \"child1b_s\", \"CHILD1B\", \"child1a_mult_s\", \"this is the number two.\"));\n    \n    List child2Rows = new ArrayList();\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number six.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"5\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number five.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child2a_mult_s\", \"Child 2 says, 'let's sing a song of six.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, 'three'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, 'III'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2b_s\", \"CHILD2B\", \"child2a_mult_s\", \"Child 2 says, '3'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, '|||'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child2a_mult_s\", \"Child 2 says, 'one'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child2a_mult_s\", \"Child 2 says, 'uno'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"2\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number two.'\"));\n    \n    MockDataSource.setIterator(\"SELECT * FROM PARENT\", parentRows.iterator());\n    MockDataSource.setIterator(\"SELECT * FROM CHILD_1\", child1Rows.iterator());\n    MockDataSource.setIterator(\"SELECT * FROM CHILD_2\", child2Rows.iterator());\n    \n  }\n\n","sourceOld":"\tpublic void testEphemeralCache() throws Exception {\n\t\tList parentRows = new ArrayList();\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"1\"), \"parent_s\", \"one\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"2\"), \"parent_s\", \"two\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"3\"), \"parent_s\", \"three\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"4\"), \"parent_s\", \"four\"));\n\t\tparentRows.add(createMap(\"id\", new BigDecimal(\"5\"), \"parent_s\", \"five\"));\n\n\t\tList child1Rows = new ArrayList();\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child1a_mult_s\", \"this is the number six.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"5\"), \"child1a_mult_s\", \"this is the number five.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child1a_mult_s\", \"let's sing a song of six.\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"three\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"III\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"3\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child1a_mult_s\", \"|||\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child1a_mult_s\", \"one\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child1a_mult_s\", \"uno\"));\n    child1Rows.add(createMap(\"id\", new BigDecimal(\"2\"), \"child1b_s\", \"CHILD1B\", \"child1a_mult_s\", \"this is the number two.\"));\n\n    List child2Rows = new ArrayList();\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number six.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"5\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number five.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"6\"), \"child2a_mult_s\", \"Child 2 says, 'let's sing a song of six.'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, 'three'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, 'III'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2b_s\", \"CHILD2B\", \"child2a_mult_s\", \"Child 2 says, '3'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"3\"), \"child2a_mult_s\", \"Child 2 says, '|||'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child2a_mult_s\", \"Child 2 says, 'one'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"1\"), \"child2a_mult_s\", \"Child 2 says, 'uno'\"));\n    child2Rows.add(createMap(\"id\", new BigDecimal(\"2\"), \"child2a_mult_s\", \"Child 2 says, 'this is the number two.'\"));\n\n    MockDataSource.setIterator(\"SELECT * FROM PARENT\", parentRows.iterator());\n    MockDataSource.setIterator(\"SELECT * FROM CHILD_1\", child1Rows.iterator());\n    MockDataSource.setIterator(\"SELECT * FROM CHILD_2\", child2Rows.iterator());\n\n    runFullImport(loadDataConfig(\"dataimport-cache-ephemeral.xml\"));\n\n    assertQ(req(\"*:*\"),                                       \"//*[@numFound='5']\");\n    assertQ(req(\"id:1\"),                                      \"//*[@numFound='1']\");\n    assertQ(req(\"id:6\"),                                      \"//*[@numFound='0']\");\n    assertQ(req(\"parent_s:four\"),                             \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:this\\\\ is\\\\ the\\\\ numbe*\"),   \"//*[@numFound='2']\");\n    assertQ(req(\"child2a_mult_s:Child\\\\ 2\\\\ say*\"),           \"//*[@numFound='4']\");\n    assertQ(req(\"child1b_s:CHILD1B\"),                         \"//*[@numFound='1']\");\n    assertQ(req(\"child2b_s:CHILD2B\"),                         \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:one\"),                        \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:uno\"),                        \"//*[@numFound='1']\");\n    assertQ(req(\"child1a_mult_s:(uno OR one)\"),               \"//*[@numFound='1']\");\n\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3337b86edd36607f0208321f1deee79c55e5fd21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7477cc545b0653fee13cfdaa4848535d107b96a9":["3337b86edd36607f0208321f1deee79c55e5fd21"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7477cc545b0653fee13cfdaa4848535d107b96a9"]},"commit2Childs":{"3337b86edd36607f0208321f1deee79c55e5fd21":["7477cc545b0653fee13cfdaa4848535d107b96a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3337b86edd36607f0208321f1deee79c55e5fd21"],"7477cc545b0653fee13cfdaa4848535d107b96a9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}