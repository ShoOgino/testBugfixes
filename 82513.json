{"path":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","commits":[{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":1,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":1,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b13106276bb5ea342253dbf6aae7b675adb38d3","date":1428054414,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size and same checksum else we assume\n   * they are not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","date":1428091986,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size and same checksum else we assume\n   * they are not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size else we assume they are\n   * not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between master and slave must have same size and same checksum else we assume\n   * they are not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            log.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size and same checksum else we assume\n   * they are not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            LOG.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/IndexFetcher#isIndexStale(Directory).mjava","sourceNew":"  /**\n   * All the files which are common between leader and follower must have same size and same checksum else we assume\n   * they are not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            log.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  /**\n   * All the files which are common between master and slave must have same size and same checksum else we assume\n   * they are not compatible (stale).\n   *\n   * @return true if the index stale and we need to download a fresh copy, false otherwise.\n   * @throws IOException  if low level io error\n   */\n  private boolean isIndexStale(Directory dir) throws IOException {\n    for (Map<String, Object> file : filesToDownload) {\n      String filename = (String) file.get(NAME);\n      Long length = (Long) file.get(SIZE);\n      Long checksum = (Long) file.get(CHECKSUM);\n      if (slowFileExists(dir, filename)) {\n        if (checksum != null) {\n          if (!(compareFile(dir, filename, length, checksum).equal)) {\n            // file exists and size or checksum is different, therefore we must download it again\n            return true;\n          }\n        } else {\n          if (length != dir.fileLength(filename)) {\n            log.warn(\"File {} did not match. expected length is {} and actual length is {}\",\n                filename, length, dir.fileLength(filename));\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["7b13106276bb5ea342253dbf6aae7b675adb38d3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7b13106276bb5ea342253dbf6aae7b675adb38d3"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c":[],"7b13106276bb5ea342253dbf6aae7b675adb38d3":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c757ac42dd1f3f893db5c4d89c61cbe1a9fab6c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}