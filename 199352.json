{"path":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6acdc953f67c10fad15168f245289efcd16588d7","date":1320400495,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      // TODO: maybe whether or not to clear the index should be configurable?\n      // an incremental update is faster (just adds new terms), but if you 'expunged'\n      // old terms I think they might hang around.\n      spellChecker.clearIndex();\n      // TODO: you should be able to specify the IWC params?\n      // TODO: if we enable this, codec gets angry since field won't exist in the schema\n      // config.setCodec(core.getCodec());\n      spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      spellChecker.clearIndex();\n      spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e72e661a57246fd5412d682d707d9dbdf81e555","date":1343303474,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {\n    IndexReader reader = null;\n    if (sourceLocation == null) {\n      // Load from Solr's index\n      reader = searcher.getIndexReader();\n    } else {\n      // Load from Lucene index at given sourceLocation\n      reader = this.reader;\n    }\n\n    // Create the dictionary\n    dictionary = new HighFrequencyDictionary(reader, field,\n        threshold);\n    // TODO: maybe whether or not to clear the index should be configurable?\n    // an incremental update is faster (just adds new terms), but if you 'expunged'\n    // old terms I think they might hang around.\n    spellChecker.clearIndex();\n    // TODO: you should be able to specify the IWC params?\n    // TODO: if we enable this, codec gets angry since field won't exist in the schema\n    // config.setCodec(core.getCodec());\n    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      // TODO: maybe whether or not to clear the index should be configurable?\n      // an incremental update is faster (just adds new terms), but if you 'expunged'\n      // old terms I think they might hang around.\n      spellChecker.clearIndex();\n      // TODO: you should be able to specify the IWC params?\n      // TODO: if we enable this, codec gets angry since field won't exist in the schema\n      // config.setCodec(core.getCodec());\n      spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {\n    IndexReader reader = null;\n    if (sourceLocation == null) {\n      // Load from Solr's index\n      reader = searcher.getIndexReader();\n    } else {\n      // Load from Lucene index at given sourceLocation\n      reader = this.reader;\n    }\n\n    // Create the dictionary\n    dictionary = new HighFrequencyDictionary(reader, field,\n        threshold);\n    // TODO: maybe whether or not to clear the index should be configurable?\n    // an incremental update is faster (just adds new terms), but if you 'expunged'\n    // old terms I think they might hang around.\n    spellChecker.clearIndex();\n    // TODO: you should be able to specify the IWC params?\n    // TODO: if we enable this, codec gets angry since field won't exist in the schema\n    // config.setCodec(core.getCodec());\n    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      // TODO: maybe whether or not to clear the index should be configurable?\n      // an incremental update is faster (just adds new terms), but if you 'expunged'\n      // old terms I think they might hang around.\n      spellChecker.clearIndex();\n      // TODO: you should be able to specify the IWC params?\n      // TODO: if we enable this, codec gets angry since field won't exist in the schema\n      // config.setCodec(core.getCodec());\n      spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {\n    IndexReader reader = null;\n    if (sourceLocation == null) {\n      // Load from Solr's index\n      reader = searcher.getIndexReader();\n    } else {\n      // Load from Lucene index at given sourceLocation\n      reader = this.reader;\n    }\n\n    // Create the dictionary\n    dictionary = new HighFrequencyDictionary(reader, field,\n        threshold);\n    // TODO: maybe whether or not to clear the index should be configurable?\n    // an incremental update is faster (just adds new terms), but if you 'expunged'\n    // old terms I think they might hang around.\n    spellChecker.clearIndex();\n    // TODO: you should be able to specify the IWC params?\n    // TODO: if we enable this, codec gets angry since field won't exist in the schema\n    // config.setCodec(core.getCodec());\n    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) {\n    IndexReader reader = null;\n    try {\n      if (sourceLocation == null) {\n        // Load from Solr's index\n        reader = searcher.getIndexReader();\n      } else {\n        // Load from Lucene index at given sourceLocation\n        reader = this.reader;\n      }\n\n      // Create the dictionary\n      dictionary = new HighFrequencyDictionary(reader, field,\n          threshold);\n      // TODO: maybe whether or not to clear the index should be configurable?\n      // an incremental update is faster (just adds new terms), but if you 'expunged'\n      // old terms I think they might hang around.\n      spellChecker.clearIndex();\n      // TODO: you should be able to specify the IWC params?\n      // TODO: if we enable this, codec gets angry since field won't exist in the schema\n      // config.setCodec(core.getCodec());\n      spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/spelling/IndexBasedSpellChecker#build(SolrCore,SolrIndexSearcher).mjava","sourceNew":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {\n    IndexReader reader = null;\n    if (sourceLocation == null) {\n      // Load from Solr's index\n      reader = searcher.getIndexReader();\n    } else {\n      // Load from Lucene index at given sourceLocation\n      reader = this.reader;\n    }\n\n    // Create the dictionary\n    dictionary = new HighFrequencyDictionary(reader, field,\n        threshold);\n    // TODO: maybe whether or not to clear the index should be configurable?\n    // an incremental update is faster (just adds new terms), but if you 'expunged'\n    // old terms I think they might hang around.\n    spellChecker.clearIndex();\n    // TODO: you should be able to specify the IWC params?\n    // TODO: if we enable this, codec gets angry since field won't exist in the schema\n    // config.setCodec(core.getCodec());\n    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(null), false);\n  }\n\n","sourceOld":"  @Override\n  public void build(SolrCore core, SolrIndexSearcher searcher) throws IOException {\n    IndexReader reader = null;\n    if (sourceLocation == null) {\n      // Load from Solr's index\n      reader = searcher.getIndexReader();\n    } else {\n      // Load from Lucene index at given sourceLocation\n      reader = this.reader;\n    }\n\n    // Create the dictionary\n    dictionary = new HighFrequencyDictionary(reader, field,\n        threshold);\n    // TODO: maybe whether or not to clear the index should be configurable?\n    // an incremental update is faster (just adds new terms), but if you 'expunged'\n    // old terms I think they might hang around.\n    spellChecker.clearIndex();\n    // TODO: you should be able to specify the IWC params?\n    // TODO: if we enable this, codec gets angry since field won't exist in the schema\n    // config.setCodec(core.getCodec());\n    spellChecker.indexDictionary(dictionary, new IndexWriterConfig(core.getSolrConfig().luceneMatchVersion, null), false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["6acdc953f67c10fad15168f245289efcd16588d7"],"aba371508186796cc6151d8223a5b4e16d02e26e":["7b91922b55d15444d554721b352861d028eb8278","6e72e661a57246fd5412d682d707d9dbdf81e555"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6e72e661a57246fd5412d682d707d9dbdf81e555":["7b91922b55d15444d554721b352861d028eb8278"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["7b91922b55d15444d554721b352861d028eb8278","6e72e661a57246fd5412d682d707d9dbdf81e555"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["6e72e661a57246fd5412d682d707d9dbdf81e555"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6acdc953f67c10fad15168f245289efcd16588d7":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0ef034a4f10871667ae75181537775ddcf8ade4"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["aba371508186796cc6151d8223a5b4e16d02e26e","6e72e661a57246fd5412d682d707d9dbdf81e555","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"6e72e661a57246fd5412d682d707d9dbdf81e555":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d0ef034a4f10871667ae75181537775ddcf8ade4"],"c26f00b574427b55127e869b935845554afde1fa":["6acdc953f67c10fad15168f245289efcd16588d7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"6acdc953f67c10fad15168f245289efcd16588d7":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}