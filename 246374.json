{"path":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next(Token).mjava","commits":[{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next().mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  public final Token next(Token result) throws java.io.IOException {\n    Token t = input.next(result);\n\n    if (t == null)\n      return null;\n\n    char[] buffer = t.termBuffer();\n    final int bufferLength = t.termLength();\n    final String type = t.type();\n\n    if (type == APOSTROPHE_TYPE &&\t\t  // remove 's\n\tbufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      t.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {\t\t  // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      t.setTermLength(upto);\n    }\n\n    return t;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  public final org.apache.lucene.analysis.Token next() throws java.io.IOException {\n    org.apache.lucene.analysis.Token t = input.next();\n\n    if (t == null)\n      return null;\n\n    String text = t.termText();\n    String type = t.type();\n\n    if (type == APOSTROPHE_TYPE &&\t\t  // remove 's\n\t(text.endsWith(\"'s\") || text.endsWith(\"'S\"))) {\n      return new org.apache.lucene.analysis.Token\n\t(text.substring(0,text.length()-2),\n\t t.startOffset(), t.endOffset(), type);\n\n    } else if (type == ACRONYM_TYPE) {\t\t  // remove dots\n      StringBuffer trimmed = new StringBuffer();\n      for (int i = 0; i < text.length(); i++) {\n\tchar c = text.charAt(i);\n\tif (c != '.')\n\t  trimmed.append(c);\n      }\n      return new org.apache.lucene.analysis.Token\n\t(trimmed.toString(), t.startOffset(), t.endOffset(), type);\n\n    } else {\n      return t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next(Token).mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  public final Token next(final Token reusableToken) throws java.io.IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n\n    if (nextToken == null)\n      return null;\n\n    char[] buffer = nextToken.termBuffer();\n    final int bufferLength = nextToken.termLength();\n    final String type = nextToken.type();\n\n    if (type == APOSTROPHE_TYPE &&\t\t  // remove 's\n\tbufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      nextToken.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {\t\t  // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      nextToken.setTermLength(upto);\n    }\n\n    return nextToken;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  public final Token next(Token result) throws java.io.IOException {\n    Token t = input.next(result);\n\n    if (t == null)\n      return null;\n\n    char[] buffer = t.termBuffer();\n    final int bufferLength = t.termLength();\n    final String type = t.type();\n\n    if (type == APOSTROPHE_TYPE &&\t\t  // remove 's\n\tbufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      t.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {\t\t  // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      t.setTermLength(upto);\n    }\n\n    return t;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next(Token).mjava","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next(Token).mjava","sourceNew":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   * @deprecated\n   */\n  public final Token next(final Token reusableToken) throws java.io.IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n\n    if (nextToken == null)\n      return null;\n\n    char[] buffer = nextToken.termBuffer();\n    final int bufferLength = nextToken.termLength();\n    final String type = nextToken.type();\n\n    if (type == APOSTROPHE_TYPE &&\t\t  // remove 's\n\tbufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      nextToken.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {\t\t  // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      nextToken.setTermLength(upto);\n    }\n\n    return nextToken;\n  }\n\n","sourceOld":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   */\n  public final Token next(final Token reusableToken) throws java.io.IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n\n    if (nextToken == null)\n      return null;\n\n    char[] buffer = nextToken.termBuffer();\n    final int bufferLength = nextToken.termLength();\n    final String type = nextToken.type();\n\n    if (type == APOSTROPHE_TYPE &&\t\t  // remove 's\n\tbufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      nextToken.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {\t\t  // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      nextToken.setTermLength(upto);\n    }\n\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8b5a20a12931b8d7e616c79c5248ae06cc5568","date":1248471948,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/standard/StandardFilter#next(Token).mjava","sourceNew":null,"sourceOld":"  /** Returns the next token in the stream, or null at EOS.\n   * <p>Removes <tt>'s</tt> from the end of words.\n   * <p>Removes dots from acronyms.\n   * @deprecated\n   */\n  public final Token next(final Token reusableToken) throws java.io.IOException {\n    assert reusableToken != null;\n    Token nextToken = input.next(reusableToken);\n\n    if (nextToken == null)\n      return null;\n\n    char[] buffer = nextToken.termBuffer();\n    final int bufferLength = nextToken.termLength();\n    final String type = nextToken.type();\n\n    if (type == APOSTROPHE_TYPE &&\t\t  // remove 's\n\tbufferLength >= 2 &&\n        buffer[bufferLength-2] == '\\'' &&\n        (buffer[bufferLength-1] == 's' || buffer[bufferLength-1] == 'S')) {\n      // Strip last 2 characters off\n      nextToken.setTermLength(bufferLength - 2);\n    } else if (type == ACRONYM_TYPE) {\t\t  // remove dots\n      int upto = 0;\n      for(int i=0;i<bufferLength;i++) {\n        char c = buffer[i];\n        if (c != '.')\n          buffer[upto++] = c;\n      }\n      nextToken.setTermLength(upto);\n    }\n\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6864413dbc0c12104c978c05456f3da1d45adb03"],"6864413dbc0c12104c978c05456f3da1d45adb03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"6864413dbc0c12104c978c05456f3da1d45adb03":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["ec8b5a20a12931b8d7e616c79c5248ae06cc5568"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6864413dbc0c12104c978c05456f3da1d45adb03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"ec8b5a20a12931b8d7e616c79c5248ae06cc5568":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}