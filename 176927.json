{"path":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","pathOld":"/dev/null","sourceNew":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (solrCore.isClosed()) {\r\n      return false;\r\n    }\r\n\r\n    if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n\r\n    String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n    if (terms.canBecomeLeader(coreNodeName)) return true;\r\n    if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n      log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n      lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n      solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":["67144a5cdd5ecbe2f8ca846956214f360fec12f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","date":1520143025,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","sourceNew":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (solrCore.isClosed()) {\r\n      return false;\r\n    }\r\n\r\n    if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n\r\n    String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n    if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n    if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n      log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n      lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n      solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (solrCore.isClosed()) {\r\n      return false;\r\n    }\r\n\r\n    if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n\r\n    String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n    if (terms.canBecomeLeader(coreNodeName)) return true;\r\n    if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n      log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n      lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n      solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":["67144a5cdd5ecbe2f8ca846956214f360fec12f5"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"67144a5cdd5ecbe2f8ca846956214f360fec12f5","date":1521599751,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","sourceNew":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (solrCore.isClosed()) {\r\n      return false;\r\n    }\r\n\r\n    if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n\r\n    String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n    if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n    if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n      log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n      lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n      solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":["84f20f331d8001864545c7021812d8c6509c7593","8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","sourceNew":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (solrCore.isClosed()) {\r\n      return false;\r\n    }\r\n\r\n    if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n\r\n    String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n    if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n    if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n      log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n      lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n      solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6cc501b75cbd5d0319284563cdd20aff857ee6","date":1575346594,"type":5,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","sourceNew":"  @Override\r\n  public boolean onTermChanged(ShardTerms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3aa683bba99315838c968fefedf3d74f44aa993","date":1575395112,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ShardTerms).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/RecoveringCoreTermWatcher#onTermChanged(ZkShardTerms.Terms).mjava","sourceNew":"  @Override\r\n  public boolean onTermChanged(ShardTerms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","sourceOld":"  @Override\r\n  public boolean onTermChanged(ZkShardTerms.Terms terms) {\r\n    if (coreContainer.isShutDown()) return false;\r\n\r\n    try (SolrCore solrCore = coreContainer.getCore(coreDescriptor.getName())) {\r\n      if (solrCore == null || solrCore.isClosed()) {\r\n        return false;\r\n      }\r\n\r\n      if (solrCore.getCoreDescriptor() == null || solrCore.getCoreDescriptor().getCloudDescriptor() == null) return true;\r\n      String coreNodeName = solrCore.getCoreDescriptor().getCloudDescriptor().getCoreNodeName();\r\n      if (terms.haveHighestTermValue(coreNodeName)) return true;\r\n      if (lastTermDoRecovery.get() < terms.getTerm(coreNodeName)) {\r\n        log.info(\"Start recovery on {} because core's term is less than leader's term\", coreNodeName);\r\n        lastTermDoRecovery.set(terms.getTerm(coreNodeName));\r\n        solrCore.getUpdateHandler().getSolrCoreState().doRecovery(solrCore.getCoreContainer(), solrCore.getCoreDescriptor());\r\n      }\r\n    } catch (Exception e) {\r\n      log.info(\"Failed to watch term of core {}\", coreDescriptor.getName(), e);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3aa683bba99315838c968fefedf3d74f44aa993":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94","67144a5cdd5ecbe2f8ca846956214f360fec12f5"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67144a5cdd5ecbe2f8ca846956214f360fec12f5":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b6cc501b75cbd5d0319284563cdd20aff857ee6"]},"commit2Childs":{"d3aa683bba99315838c968fefedf3d74f44aa993":[],"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["d3aa683bba99315838c968fefedf3d74f44aa993","5b6cc501b75cbd5d0319284563cdd20aff857ee6"],"5b6cc501b75cbd5d0319284563cdd20aff857ee6":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"67144a5cdd5ecbe2f8ca846956214f360fec12f5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"84f20f331d8001864545c7021812d8c6509c7593":["8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94"],"8c30d22eaf1287a88a402fba9d8b7b9d20d6ef94":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","67144a5cdd5ecbe2f8ca846956214f360fec12f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3aa683bba99315838c968fefedf3d74f44aa993","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}