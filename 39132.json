{"path":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","commits":[{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n        if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n          bits |= OMIT_POSITIONS;\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValues()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValues());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cfd7f00f3dbc4c50d336540f063493fc0f7d830f","date":1322850565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/Lucene40FieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/DefaultFieldInfosWriter#write(Directory,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n        if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n          bits |= OMIT_POSITIONS;\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValues()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValues());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, String segmentName, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexOutput output = directory.createOutput(fileName, context);\n    try {\n      output.writeVInt(FORMAT_CURRENT);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        assert fi.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS || !fi.storePayloads;\n        byte bits = 0x0;\n        if (fi.isIndexed) bits |= IS_INDEXED;\n        if (fi.storeTermVector) bits |= STORE_TERMVECTOR;\n        if (fi.storePositionWithTermVector) bits |= STORE_POSITIONS_WITH_TERMVECTOR;\n        if (fi.storeOffsetWithTermVector) bits |= STORE_OFFSET_WITH_TERMVECTOR;\n        if (fi.omitNorms) bits |= OMIT_NORMS;\n        if (fi.storePayloads) bits |= STORE_PAYLOADS;\n        if (fi.indexOptions == IndexOptions.DOCS_ONLY)\n          bits |= OMIT_TERM_FREQ_AND_POSITIONS;\n        else if (fi.indexOptions == IndexOptions.DOCS_AND_FREQS)\n          bits |= OMIT_POSITIONS;\n        output.writeString(fi.name);\n        output.writeInt(fi.number);\n        output.writeByte(bits);\n\n        final byte b;\n\n        if (!fi.hasDocValues()) {\n          b = 0;\n        } else {\n          switch(fi.getDocValues()) {\n          case VAR_INTS:\n            b = 1;\n            break;\n          case FLOAT_32:\n            b = 2;\n            break;\n          case FLOAT_64:\n            b = 3;\n            break;\n          case BYTES_FIXED_STRAIGHT:\n            b = 4;\n            break;\n          case BYTES_FIXED_DEREF:\n            b = 5;\n            break;\n          case BYTES_VAR_STRAIGHT:\n            b = 6;\n            break;\n          case BYTES_VAR_DEREF:\n            b = 7;\n            break;\n          case FIXED_INTS_16:\n            b = 8;\n            break;\n          case FIXED_INTS_32:\n            b = 9;\n            break;\n          case FIXED_INTS_64:\n            b = 10;\n            break;\n          case FIXED_INTS_8:\n            b = 11;\n            break;\n          case BYTES_FIXED_SORTED:\n            b = 12;\n            break;\n          case BYTES_VAR_SORTED:\n            b = 13;\n            break;\n          default:\n            throw new IllegalStateException(\"unhandled indexValues type \" + fi.getDocValues());\n          }\n        }\n        output.writeByte(b);\n      }\n    } finally {\n      output.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"]},"commit2Childs":{"cfd7f00f3dbc4c50d336540f063493fc0f7d830f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["cfd7f00f3dbc4c50d336540f063493fc0f7d830f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}