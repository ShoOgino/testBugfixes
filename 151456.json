{"path":"lucene/facet/src/java/org/apache/lucene/facet/encoding/NOnesIntEncoder#encode(IntsRef,BytesRef).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/encoding/NOnesIntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/NOnesIntEncoder#encode(IntsRef,BytesRef).mjava","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    internalBuffer.length = 0;\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.encode(internalBuffer, buf);\n  }\n\n","sourceOld":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    internalBuffer.length = 0;\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.encode(internalBuffer, buf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/encoding/NOnesIntEncoder#encode(IntsRef,BytesRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    internalBuffer.length = 0;\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.encode(internalBuffer, buf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/encoding/NOnesIntEncoder#encode(IntsRef,BytesRef).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    internalBuffer.length = 0;\n    // make sure the internal buffer is large enough\n    if (values.length > internalBuffer.ints.length) {\n      internalBuffer.grow(values.length);\n    }\n    \n    int onesCounter = 0;\n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      int value = values.ints[i];\n      if (value == 1) {\n        // every N 1's should be encoded as '2'\n        if (++onesCounter == n) {\n          internalBuffer.ints[internalBuffer.length++] = 2;\n          onesCounter = 0;\n        }\n      } else {\n        // there might have been 1's that we need to encode\n        while (onesCounter > 0) {\n          --onesCounter;\n          internalBuffer.ints[internalBuffer.length++] = 1;\n        }\n        \n        // encode value as value+1\n        internalBuffer.ints[internalBuffer.length++] = value + 1;\n      }\n    }\n    // there might have been 1's that we need to encode\n    while (onesCounter > 0) {\n      --onesCounter;\n      internalBuffer.ints[internalBuffer.length++] = 1;\n    }\n    super.encode(internalBuffer, buf);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}