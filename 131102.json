{"path":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircleIntersect().mjava","commits":[{"id":"33ee89d976c91275e5be5da438ca0977b1c5b90f","date":1329808149,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircleIntersect().mjava","pathOld":"modules/spatial/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircleIntersect().mjava","sourceNew":"  protected void testCircleIntersect() {\n    //Now do some randomized tests:\n    int i_C = 0, i_I = 0, i_W = 0, i_O = 0;//counters for the different intersection cases\n    int laps = 0;\n    int MINLAPSPERCASE = 20;\n    while(i_C < MINLAPSPERCASE || i_I < MINLAPSPERCASE || i_W < MINLAPSPERCASE || i_O < MINLAPSPERCASE) {\n      laps++;\n      double cX = randRange(-180,179);\n      double cY = randRange(-90,90);\n      double cR = randRange(0, 180);\n      double cR_dist = ctx.getDistCalc().distance(ctx.makePoint(0, 0), 0, cR);\n      Circle c = ctx.makeCircle(cX, cY, cR_dist);\n\n      double rX = randRange(-180,179);\n      double rW = randRange(0,360);\n      double rY1 = randRange(-90,90);\n      double rY2 = randRange(-90,90);\n      double rYmin = Math.min(rY1,rY2);\n      double rYmax = Math.max(rY1,rY2);\n      Rectangle r = ctx.makeRect(rX, rX+rW, rYmin, rYmax);\n\n      SpatialRelation ic = c.relate(r, ctx);\n\n      Point p;\n      switch (ic) {\n        case CONTAINS:\n          i_C++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(CONTAINS,c.relate(p, ctx));\n          break;\n        case INTERSECTS:\n          i_I++;\n          //hard to test anything here; instead we'll test it separately\n          break;\n        case WITHIN:\n          i_W++;\n          p = randomPointWithin(random,c,ctx);\n          assertEquals(CONTAINS,r.relate(p, ctx));\n          break;\n        case DISJOINT:\n          i_O++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(DISJOINT,c.relate(p, ctx));\n          break;\n        default: fail(\"\"+ic);\n      }\n    }\n    //System.out.println(\"Laps: \"+laps);\n\n    //TODO deliberately test INTERSECTS based on known intersection point\n  }\n\n","sourceOld":"  protected void testCircleIntersect() {\n    //Now do some randomized tests:\n    int i_C = 0, i_I = 0, i_W = 0, i_O = 0;//counters for the different intersection cases\n    int laps = 0;\n    int MINLAPSPERCASE = 20;\n    while(i_C < MINLAPSPERCASE || i_I < MINLAPSPERCASE || i_W < MINLAPSPERCASE || i_O < MINLAPSPERCASE) {\n      laps++;\n      double cX = randRange(-180,179);\n      double cY = randRange(-90,90);\n      double cR = randRange(0, 180);\n      double cR_dist = ctx.getDistCalc().distance(ctx.makePoint(0, 0), 0, cR);\n      Circle c = ctx.makeCircle(cX, cY, cR_dist);\n\n      double rX = randRange(-180,179);\n      double rW = randRange(0,360);\n      double rY1 = randRange(-90,90);\n      double rY2 = randRange(-90,90);\n      double rYmin = Math.min(rY1,rY2);\n      double rYmax = Math.max(rY1,rY2);\n      Rectangle r = ctx.makeRect(rX, rX+rW, rYmin, rYmax);\n\n      SpatialRelation ic = c.relate(r, ctx);\n\n      Point p;\n      switch (ic) {\n        case CONTAINS:\n          i_C++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(CONTAINS,c.relate(p, ctx));\n          break;\n        case INTERSECTS:\n          i_I++;\n          //hard to test anything here; instead we'll test it separately\n          break;\n        case WITHIN:\n          i_W++;\n          p = randomPointWithin(random,c,ctx);\n          assertEquals(CONTAINS,r.relate(p, ctx));\n          break;\n        case DISJOINT:\n          i_O++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(DISJOINT,c.relate(p, ctx));\n          break;\n        default: fail(\"\"+ic);\n      }\n    }\n    //System.out.println(\"Laps: \"+laps);\n\n    //TODO deliberately test INTERSECTS based on known intersection point\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2047ba81272a0c4edeb11b1c7810ee23ba73502","date":1329808655,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"modules/spatial/strategy/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircleIntersect().mjava","pathOld":"modules/spatial-TEMP/src/test/org/apache/lucene/spatial/base/shape/AbstractTestShapes#testCircleIntersect().mjava","sourceNew":"  protected void testCircleIntersect() {\n    //Now do some randomized tests:\n    int i_C = 0, i_I = 0, i_W = 0, i_O = 0;//counters for the different intersection cases\n    int laps = 0;\n    int MINLAPSPERCASE = 20;\n    while(i_C < MINLAPSPERCASE || i_I < MINLAPSPERCASE || i_W < MINLAPSPERCASE || i_O < MINLAPSPERCASE) {\n      laps++;\n      double cX = randRange(-180,179);\n      double cY = randRange(-90,90);\n      double cR = randRange(0, 180);\n      double cR_dist = ctx.getDistCalc().distance(ctx.makePoint(0, 0), 0, cR);\n      Circle c = ctx.makeCircle(cX, cY, cR_dist);\n\n      double rX = randRange(-180,179);\n      double rW = randRange(0,360);\n      double rY1 = randRange(-90,90);\n      double rY2 = randRange(-90,90);\n      double rYmin = Math.min(rY1,rY2);\n      double rYmax = Math.max(rY1,rY2);\n      Rectangle r = ctx.makeRect(rX, rX+rW, rYmin, rYmax);\n\n      SpatialRelation ic = c.relate(r, ctx);\n\n      Point p;\n      switch (ic) {\n        case CONTAINS:\n          i_C++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(CONTAINS,c.relate(p, ctx));\n          break;\n        case INTERSECTS:\n          i_I++;\n          //hard to test anything here; instead we'll test it separately\n          break;\n        case WITHIN:\n          i_W++;\n          p = randomPointWithin(random,c,ctx);\n          assertEquals(CONTAINS,r.relate(p, ctx));\n          break;\n        case DISJOINT:\n          i_O++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(DISJOINT,c.relate(p, ctx));\n          break;\n        default: fail(\"\"+ic);\n      }\n    }\n    //System.out.println(\"Laps: \"+laps);\n\n    //TODO deliberately test INTERSECTS based on known intersection point\n  }\n\n","sourceOld":"  protected void testCircleIntersect() {\n    //Now do some randomized tests:\n    int i_C = 0, i_I = 0, i_W = 0, i_O = 0;//counters for the different intersection cases\n    int laps = 0;\n    int MINLAPSPERCASE = 20;\n    while(i_C < MINLAPSPERCASE || i_I < MINLAPSPERCASE || i_W < MINLAPSPERCASE || i_O < MINLAPSPERCASE) {\n      laps++;\n      double cX = randRange(-180,179);\n      double cY = randRange(-90,90);\n      double cR = randRange(0, 180);\n      double cR_dist = ctx.getDistCalc().distance(ctx.makePoint(0, 0), 0, cR);\n      Circle c = ctx.makeCircle(cX, cY, cR_dist);\n\n      double rX = randRange(-180,179);\n      double rW = randRange(0,360);\n      double rY1 = randRange(-90,90);\n      double rY2 = randRange(-90,90);\n      double rYmin = Math.min(rY1,rY2);\n      double rYmax = Math.max(rY1,rY2);\n      Rectangle r = ctx.makeRect(rX, rX+rW, rYmin, rYmax);\n\n      SpatialRelation ic = c.relate(r, ctx);\n\n      Point p;\n      switch (ic) {\n        case CONTAINS:\n          i_C++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(CONTAINS,c.relate(p, ctx));\n          break;\n        case INTERSECTS:\n          i_I++;\n          //hard to test anything here; instead we'll test it separately\n          break;\n        case WITHIN:\n          i_W++;\n          p = randomPointWithin(random,c,ctx);\n          assertEquals(CONTAINS,r.relate(p, ctx));\n          break;\n        case DISJOINT:\n          i_O++;\n          p = randomPointWithin(random,r,ctx);\n          assertEquals(DISJOINT,c.relate(p, ctx));\n          break;\n        default: fail(\"\"+ic);\n      }\n    }\n    //System.out.println(\"Laps: \"+laps);\n\n    //TODO deliberately test INTERSECTS based on known intersection point\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":["33ee89d976c91275e5be5da438ca0977b1c5b90f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c2047ba81272a0c4edeb11b1c7810ee23ba73502":[],"33ee89d976c91275e5be5da438ca0977b1c5b90f":["c2047ba81272a0c4edeb11b1c7810ee23ba73502"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["33ee89d976c91275e5be5da438ca0977b1c5b90f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c2047ba81272a0c4edeb11b1c7810ee23ba73502","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}