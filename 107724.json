{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,IndexInput,IndexInput,BytesRef,BytesRef).mjava","commits":[{"id":"99f06f5dd087b1829e7b4139e4d014c786b92572","date":1592312728,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,IndexInput,IndexInput,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/FieldReader#FieldReader(BlockTreeTermsReader,FieldInfo,long,BytesRef,long,long,int,long,IndexInput,BytesRef,BytesRef).mjava","sourceNew":"  FieldReader(BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, IndexInput metaIn, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n    this.docCount = docCount;\n    this.rootCode = rootCode;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    // Initialize FST always off-heap.\n    final IndexInput clone = indexIn.clone();\n    clone.seek(indexStartFP);\n    if (metaIn == indexIn) { // Only true before Lucene 8.6\n      index = new FST<>(clone, clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());\n    } else {\n      index = new FST<>(metaIn, clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());\n    }\n    /*\n      if (false) {\n      final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n      Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n      w.close();\n      }\n     */\n  }\n\n","sourceOld":"  FieldReader(BlockTreeTermsReader parent, FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount,\n              long indexStartFP, IndexInput indexIn, BytesRef minTerm, BytesRef maxTerm) throws IOException {\n    assert numTerms > 0;\n    this.fieldInfo = fieldInfo;\n    //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n    this.parent = parent;\n    this.numTerms = numTerms;\n    this.sumTotalTermFreq = sumTotalTermFreq;\n    this.sumDocFreq = sumDocFreq;\n    this.docCount = docCount;\n    this.indexStartFP = indexStartFP;\n    this.rootCode = rootCode;\n    this.minTerm = minTerm;\n    this.maxTerm = maxTerm;\n    // if (DEBUG) {\n    //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n    // }\n    rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsReader.OUTPUT_FLAGS_NUM_BITS;\n    // Initialize FST always off-heap.\n    if (indexIn != null) {\n      final IndexInput clone = indexIn.clone();\n      clone.seek(indexStartFP);\n      index = new FST<>(clone, ByteSequenceOutputs.getSingleton(), new OffHeapFSTStore());\n      /*\n        if (false) {\n        final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n        Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n        Util.toDot(index, w, false, false);\n        System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n        w.close();\n        }\n      */\n    } else {\n      index = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99f06f5dd087b1829e7b4139e4d014c786b92572"]},"commit2Childs":{"99f06f5dd087b1829e7b4139e4d014c786b92572":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99f06f5dd087b1829e7b4139e4d014c786b92572"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}