{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea00b25de0d094d032e218976854c250141e7150","date":1321520110,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertTrue(collations.size()==2);\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    \t\n    }\n    \n  }\n\n","bugFix":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1034497e9ecad8fcbefaa3b8abeac94f06daa15","date":1338836491,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +homer +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56d78974d33c1244e0810e0dc8f1c6371faceac9","date":1338918242,"type":3,"author":"James Dyer","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_BUILD, true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n      assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n\n      List<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n      assertTrue(misspellingsAndCorrections.size()==3);\n      for(Correction correction : misspellingsAndCorrections)\n      {\n        if(\"fauth\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"faith\".equals(correction.getCorrection()));\n        } else if(\"home\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"hope\".equals(correction.getCorrection()));\n        } else if(\"loane\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n        } else\n        {\n          fail(\"Original Word Should have been either fauth, home or loane.\");\n        }\n      }\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n  \tgetSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n    \tassertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n    \t\n    \tList<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n    \tassertTrue(misspellingsAndCorrections.size()==3);\n    \tfor(Correction correction : misspellingsAndCorrections)\n    \t{    \t\n    \t\tif(\"fauth\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"faith\".equals(correction.getCorrection()));\n    \t\t} else if(\"home\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"hope\".equals(correction.getCorrection()));\n    \t\t} else if(\"loane\".equals(correction.getOriginal()))\n    \t\t{\n    \t\t\tassertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n    \t\t} else\n    \t\t{\n    \t\t\tfail(\"Original Word Should have been either fauth, home or loane.\");\n    \t\t}\t    \t\n    \t}\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n    getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    client.add(doc);\n    client.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(client).getSpellCheckResponse();\n    response = request.process(client).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(client).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n      assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n\n      List<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n      assertTrue(misspellingsAndCorrections.size()==3);\n      for(Correction correction : misspellingsAndCorrections)\n      {\n        if(\"fauth\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"faith\".equals(correction.getCorrection()));\n        } else if(\"home\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"hope\".equals(correction.getCorrection()));\n        } else if(\"loane\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n        } else\n        {\n          fail(\"Original Word Should have been either fauth, home or loane.\");\n        }\n      }\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(client).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n    getSolrServer();\n    server.deleteByQuery(\"*:*\");\n    server.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    server.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    server.add(doc);    \n    server.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(server).getSpellCheckResponse();\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(server).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n      assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n\n      List<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n      assertTrue(misspellingsAndCorrections.size()==3);\n      for(Correction correction : misspellingsAndCorrections)\n      {\n        if(\"fauth\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"faith\".equals(correction.getCorrection()));\n        } else if(\"home\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"hope\".equals(correction.getCorrection()));\n        } else if(\"loane\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n        } else\n        {\n          fail(\"Original Word Should have been either fauth, home or loane.\");\n        }\n      }\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(server).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c033cd5a1320f54b12d30182a3c231d8d38da4e","date":1567086766,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse#testSpellCheckCollationResponse().mjava","sourceNew":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n    getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    client.add(doc);\n    client.commit(true, true);\n\n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(client).getSpellCheckResponse();\n    response = request.process(client).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n\n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2);\n    request = new QueryRequest(query);\n    response = request.process(client).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n\n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n      assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n\n      List<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n      assertTrue(misspellingsAndCorrections.size()==3);\n      for(Correction correction : misspellingsAndCorrections)\n      {\n        if(\"fauth\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"faith\".equals(correction.getCorrection()));\n        } else if(\"home\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"hope\".equals(correction.getCorrection()));\n        } else if(\"loane\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n        } else\n        {\n          fail(\"Original Word Should have been either fauth, home or loane.\");\n        }\n      }\n    }\n\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(client).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2,\n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testSpellCheckCollationResponse() throws Exception {\n    getSolrClient();\n    client.deleteByQuery(\"*:*\");\n    client.commit(true, true);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.setField(\"id\", \"0\");\n    doc.setField(\"name\", \"faith hope and love\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"1\");\n    doc.setField(\"name\", \"faith hope and loaves\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"2\");\n    doc.setField(\"name\", \"fat hops and loaves\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"3\");\n    doc.setField(\"name\", \"faith of homer\");\n    client.add(doc);\n    doc = new SolrInputDocument();\n    doc.setField(\"id\", \"4\");\n    doc.setField(\"name\", \"fat of homer\");\n    client.add(doc);\n    client.commit(true, true);\n     \n    //Test Backwards Compatibility\n    SolrQuery query = new SolrQuery(\"name:(+fauth +home +loane)\");\n    query.set(CommonParams.QT, \"/spell\");\n    query.set(\"spellcheck\", true);\n    query.set(SpellingParams.SPELLCHECK_COUNT, 10);\n    query.set(SpellingParams.SPELLCHECK_COLLATE, true);\n    QueryRequest request = new QueryRequest(query);\n    SpellCheckResponse response = request.process(client).getSpellCheckResponse();\n    response = request.process(client).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    //Test Expanded Collation Results\n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, true);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATION_TRIES, 10);\n    query.set(SpellingParams.SPELLCHECK_MAX_COLLATIONS, 2); \n    request = new QueryRequest(query);\n    response = request.process(client).getSpellCheckResponse();\n    assertTrue(\"name:(+faith +hope +love)\".equals(response.getCollatedResult()) || \"name:(+faith +hope +loaves)\".equals(response.getCollatedResult()));\n    \n    List<Collation> collations = response.getCollatedResults();\n    assertEquals(2, collations.size());\n    for(Collation collation : collations)\n    {\n      assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));\n      assertTrue(collation.getNumberOfHits()==1);\n\n      List<Correction> misspellingsAndCorrections = collation.getMisspellingsAndCorrections();\n      assertTrue(misspellingsAndCorrections.size()==3);\n      for(Correction correction : misspellingsAndCorrections)\n      {\n        if(\"fauth\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"faith\".equals(correction.getCorrection()));\n        } else if(\"home\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"hope\".equals(correction.getCorrection()));\n        } else if(\"loane\".equals(correction.getOriginal()))\n        {\n          assertTrue(\"love\".equals(correction.getCorrection()) || \"loaves\".equals(correction.getCorrection()));\n        } else\n        {\n          fail(\"Original Word Should have been either fauth, home or loane.\");\n        }\n      }\n    }\n    \n    query.set(SpellingParams.SPELLCHECK_COLLATE_EXTENDED_RESULTS, false);\n    response = request.process(client).getSpellCheckResponse();\n    {\n      collations = response.getCollatedResults();\n      assertEquals(2, collations.size());\n      String collation1 = collations.get(0).getCollationQueryString();\n      String collation2 = collations.get(1).getCollationQueryString();\n      assertFalse(collation1 + \" equals \" + collation2, \n          collation1.equals(collation2));\n      for(Collation collation : collations) {\n        assertTrue(\"name:(+faith +hope +love)\".equals(collation.getCollationQueryString()) || \"name:(+faith +hope +loaves)\".equals(collation.getCollationQueryString()));  \n      }      \n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1034497e9ecad8fcbefaa3b8abeac94f06daa15":["ea00b25de0d094d032e218976854c250141e7150"],"56d78974d33c1244e0810e0dc8f1c6371faceac9":["b1034497e9ecad8fcbefaa3b8abeac94f06daa15"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea00b25de0d094d032e218976854c250141e7150":["c26f00b574427b55127e869b935845554afde1fa"],"bafca15d8e408346a67f4282ad1143b88023893b":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3c033cd5a1320f54b12d30182a3c231d8d38da4e"],"3c033cd5a1320f54b12d30182a3c231d8d38da4e":["bafca15d8e408346a67f4282ad1143b88023893b"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["56d78974d33c1244e0810e0dc8f1c6371faceac9"]},"commit2Childs":{"b1034497e9ecad8fcbefaa3b8abeac94f06daa15":["56d78974d33c1244e0810e0dc8f1c6371faceac9"],"56d78974d33c1244e0810e0dc8f1c6371faceac9":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["ea00b25de0d094d032e218976854c250141e7150"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"ea00b25de0d094d032e218976854c250141e7150":["b1034497e9ecad8fcbefaa3b8abeac94f06daa15"],"bafca15d8e408346a67f4282ad1143b88023893b":["3c033cd5a1320f54b12d30182a3c231d8d38da4e"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"3c033cd5a1320f54b12d30182a3c231d8d38da4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}