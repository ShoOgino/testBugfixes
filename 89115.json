{"path":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","commits":[{"id":"953ba6667d987c58964da9cad38c2d9d61cca920","date":1352255075,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#computeNorm(FieldInvertState,Norm).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public void computeNorm(FieldInvertState state, Norm norm) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    norm.setByte(encodeNormValue(state.getBoost() * computeLengthNorm(numTokens)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26b31c0eddccc5a2f98f4f4b05d880d658d28a12","date":1361903597,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. \n   */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","bugFix":["5ce8d53d5582eaa6a0c771c9b119d480f41da59c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acd9883560fd89e6448b2b447302fe543040cd4f","date":1488478696,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","sourceNew":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. \n   */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return computeLengthNorm(numTokens);\n  }\n\n","sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. \n   */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return state.getBoost() * computeLengthNorm(numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. \n   */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return computeLengthNorm(numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#lengthNorm(FieldInvertState).mjava","sourceNew":null,"sourceOld":"  /**\n   * Implemented as <code> state.getBoost() *\n   * computeLengthNorm(numTokens) </code> where\n   * numTokens does not count overlap tokens if\n   * discountOverlaps is true by default or true for this\n   * specific field. \n   */\n  @Override\n  public float lengthNorm(FieldInvertState state) {\n    final int numTokens;\n\n    if (discountOverlaps)\n      numTokens = state.getLength() - state.getNumOverlap();\n    else\n      numTokens = state.getLength();\n\n    return computeLengthNorm(numTokens);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["acd9883560fd89e6448b2b447302fe543040cd4f","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["acd9883560fd89e6448b2b447302fe543040cd4f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"26b31c0eddccc5a2f98f4f4b05d880d658d28a12":["953ba6667d987c58964da9cad38c2d9d61cca920"],"953ba6667d987c58964da9cad38c2d9d61cca920":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"acd9883560fd89e6448b2b447302fe543040cd4f":["26b31c0eddccc5a2f98f4f4b05d880d658d28a12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["615370d2b876c3435773b5174df2e2242ad7981a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["953ba6667d987c58964da9cad38c2d9d61cca920"],"26b31c0eddccc5a2f98f4f4b05d880d658d28a12":["acd9883560fd89e6448b2b447302fe543040cd4f"],"953ba6667d987c58964da9cad38c2d9d61cca920":["26b31c0eddccc5a2f98f4f4b05d880d658d28a12"],"acd9883560fd89e6448b2b447302fe543040cd4f":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}