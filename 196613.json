{"path":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","commits":[{"id":"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","date":1496661458,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6562145f1a8d5e123cf34a11e285b5488a83feb8","date":1503435050,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a","date":1499173980,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    MetricFilter filter;\n    if (!filters.isEmpty()) {\n      filter = new SolrMetricManager.PrefixFilter(filters);\n    } else {\n      filter = MetricFilter.ALL;\n    }\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49a2e5bf56dfbc293a421a92c0cfd65f886bef81","date":1503673133,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    MetricRegistry registry = metricManager.registry(registryName);\n    diagnosticMetricRegistry = new DiagnosticMetricRegistry(registry);\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(diagnosticMetricRegistry)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"60e6c4eb6f169ee828eabd776ced7d900664e65a","date":1503675775,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    MetricRegistry registry = metricManager.registry(registryName);\n    diagnosticMetricRegistry = new DiagnosticMetricRegistry(registry);\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(diagnosticMetricRegistry)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38b789f5691d565debde94e5cfce54e0f9b2d965","date":1503935896,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    MetricRegistry registry = metricManager.registry(registryName);\n    diagnosticMetricRegistry = new DiagnosticMetricRegistry(registry);\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(diagnosticMetricRegistry)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9867eacb5d128c5fab10ab78733980c33f16283","date":1503938113,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    MetricRegistry registry = metricManager.registry(registryName);\n    diagnosticMetricRegistry = new DiagnosticMetricRegistry(registry);\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(diagnosticMetricRegistry)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b967cd91d9adf8137e96f0776fd2f2b63b05bd47","date":1533212987,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    mdcContext = MDC.getCopyOfContextMap();\n    mdcContext.put(\"registry\", \"m:\" + registryName);\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (instancePrefix != null) {\n      builder = builder.prefixedWith(instancePrefix);\n    }\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    // build BUT don't start - scheduled execution is handled by the wrapper\n    Slf4jReporter delegate = builder.build();\n    reporter = new Slf4jReporterWrapper(logger, mdcContext, delegate, TimeUnit.SECONDS, TimeUnit.MILLISECONDS);\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    if (instancePrefix == null) {\n      instancePrefix = registryName;\n    } else {\n      instancePrefix = instancePrefix + \".\" + registryName;\n    }\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    reporter = builder.build();\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","bugFix":["e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c","date":1538077195,"type":3,"author":"Peter Somogyi","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/reporters/SolrSlf4jReporter#doInit().mjava","sourceNew":"  @Override\n  protected void doInit() {\n    mdcContext = MDC.getCopyOfContextMap();\n    mdcContext.put(\"registry\", \"m:\" + registryName);\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (instancePrefix != null) {\n      builder = builder.prefixedWith(instancePrefix);\n    }\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.enforcePrefix(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.enforcePrefix(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    // build BUT don't start - scheduled execution is handled by the wrapper\n    Slf4jReporter delegate = builder.build();\n    reporter = new Slf4jReporterWrapper(logger, mdcContext, delegate, TimeUnit.SECONDS, TimeUnit.MILLISECONDS);\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","sourceOld":"  @Override\n  protected void doInit() {\n    mdcContext = MDC.getCopyOfContextMap();\n    mdcContext.put(\"registry\", \"m:\" + registryName);\n    Slf4jReporter.Builder builder = Slf4jReporter\n        .forRegistry(metricManager.registry(registryName))\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS);\n\n    final MetricFilter filter = newMetricFilter();\n    builder = builder.filter(filter);\n    if (instancePrefix != null) {\n      builder = builder.prefixedWith(instancePrefix);\n    }\n    if (logger == null || logger.isEmpty()) {\n      // construct logger name from Group\n      if (pluginInfo.attributes.containsKey(\"group\")) {\n        logger = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"group\"));\n      } else if (pluginInfo.attributes.containsKey(\"registry\")) {\n        String reg = SolrMetricManager.overridableRegistryName(pluginInfo.attributes.get(\"registry\"));\n        String[] names = reg.split(\"\\\\.\");\n        if (names.length < 2) {\n          logger = reg;\n        } else {\n          logger = names[0] + \".\" + names[1];\n        }\n      }\n    }\n    builder = builder.outputTo(LoggerFactory.getLogger(logger));\n    // build BUT don't start - scheduled execution is handled by the wrapper\n    Slf4jReporter delegate = builder.build();\n    reporter = new Slf4jReporterWrapper(logger, mdcContext, delegate, TimeUnit.SECONDS, TimeUnit.MILLISECONDS);\n    reporter.start(period, TimeUnit.SECONDS);\n    active = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["28288370235ed02234a64753cdbf0c6ec096304a"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6562145f1a8d5e123cf34a11e285b5488a83feb8":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["6562145f1a8d5e123cf34a11e285b5488a83feb8","49a2e5bf56dfbc293a421a92c0cfd65f886bef81"],"e9867eacb5d128c5fab10ab78733980c33f16283":["60e6c4eb6f169ee828eabd776ced7d900664e65a","38b789f5691d565debde94e5cfce54e0f9b2d965"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3ee7308fb49e4d4f77d7a23584a2128a0d6921e"],"49a2e5bf56dfbc293a421a92c0cfd65f886bef81":["6562145f1a8d5e123cf34a11e285b5488a83feb8"],"38b789f5691d565debde94e5cfce54e0f9b2d965":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["e9017cf144952056066919f1ebc7897ff9bd71b1","13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065","e9867eacb5d128c5fab10ab78733980c33f16283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b967cd91d9adf8137e96f0776fd2f2b63b05bd47":["e9867eacb5d128c5fab10ab78733980c33f16283"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["b967cd91d9adf8137e96f0776fd2f2b63b05bd47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"]},"commit2Childs":{"13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a":["6562145f1a8d5e123cf34a11e285b5488a83feb8","2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"e3ee7308fb49e4d4f77d7a23584a2128a0d6921e":["28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"6562145f1a8d5e123cf34a11e285b5488a83feb8":["60e6c4eb6f169ee828eabd776ced7d900664e65a","49a2e5bf56dfbc293a421a92c0cfd65f886bef81"],"28288370235ed02234a64753cdbf0c6ec096304a":["13d3c80f54bcf650ad014d5768f8cffcd8d6fe1a"],"60e6c4eb6f169ee828eabd776ced7d900664e65a":["e9867eacb5d128c5fab10ab78733980c33f16283","38b789f5691d565debde94e5cfce54e0f9b2d965"],"e9867eacb5d128c5fab10ab78733980c33f16283":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","b967cd91d9adf8137e96f0776fd2f2b63b05bd47"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"49a2e5bf56dfbc293a421a92c0cfd65f886bef81":["60e6c4eb6f169ee828eabd776ced7d900664e65a"],"38b789f5691d565debde94e5cfce54e0f9b2d965":["e9867eacb5d128c5fab10ab78733980c33f16283"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["3a7809d1d753b67f48b1a706e17034bf8b624ea3"],"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e3ee7308fb49e4d4f77d7a23584a2128a0d6921e","28288370235ed02234a64753cdbf0c6ec096304a","e9017cf144952056066919f1ebc7897ff9bd71b1"],"b967cd91d9adf8137e96f0776fd2f2b63b05bd47":["427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c"],"427b4ac9dcf2bb77dc0b79aba1ff396a4236f65c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}