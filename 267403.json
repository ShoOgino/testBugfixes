{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#getAutoScalingConfig(Watcher).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#getAutoScalingConfig(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    int version = -1;\n    try {\n      VersionedData data = getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher);\n      if (data != null && data.getData() != null && data.getData().length > 0) {\n        map = (Map<String, Object>) Utils.fromJSON(data.getData());\n        version = data.getVersion();\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    }\n    map.put(AutoScalingParams.ZK_VERSION, version);\n    return new AutoScalingConfig(map);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59506fa452342983f7cd1faf6d27274c658f3e09","date":1545397484,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#getAutoScalingConfig(Watcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#getAutoScalingConfig(Watcher).mjava","sourceNew":"  @Override\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    int version = 0;\n    try {\n      VersionedData data = getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher);\n      if (data != null && data.getData() != null && data.getData().length > 0) {\n        map = (Map<String, Object>) Utils.fromJSON(data.getData());\n        version = data.getVersion();\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    }\n    map.put(AutoScalingParams.ZK_VERSION, version);\n    return new AutoScalingConfig(map);\n  }\n\n","sourceOld":"  @Override\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    int version = -1;\n    try {\n      VersionedData data = getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher);\n      if (data != null && data.getData() != null && data.getData().length > 0) {\n        map = (Map<String, Object>) Utils.fromJSON(data.getData());\n        version = data.getVersion();\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    }\n    map.put(AutoScalingParams.ZK_VERSION, version);\n    return new AutoScalingConfig(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#getAutoScalingConfig(Watcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimDistribStateManager#getAutoScalingConfig(Watcher).mjava","sourceNew":"  @Override\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    int version = 0;\n    try {\n      VersionedData data = getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher);\n      if (data != null && data.getData() != null && data.getData().length > 0) {\n        map = (Map<String, Object>) Utils.fromJSON(data.getData());\n        version = data.getVersion();\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    }\n    map.put(AutoScalingParams.ZK_VERSION, version);\n    return new AutoScalingConfig(map);\n  }\n\n","sourceOld":"  @Override\n  public AutoScalingConfig getAutoScalingConfig(Watcher watcher) throws InterruptedException, IOException {\n    Map<String, Object> map = new HashMap<>();\n    int version = 0;\n    try {\n      VersionedData data = getData(ZkStateReader.SOLR_AUTOSCALING_CONF_PATH, watcher);\n      if (data != null && data.getData() != null && data.getData().length > 0) {\n        map = (Map<String, Object>) Utils.fromJSON(data.getData());\n        version = data.getVersion();\n      }\n    } catch (NoSuchElementException e) {\n      // ignore\n    }\n    map.put(AutoScalingParams.ZK_VERSION, version);\n    return new AutoScalingConfig(map);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["59506fa452342983f7cd1faf6d27274c658f3e09"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59506fa452342983f7cd1faf6d27274c658f3e09":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["59506fa452342983f7cd1faf6d27274c658f3e09"],"59506fa452342983f7cd1faf6d27274c658f3e09":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}