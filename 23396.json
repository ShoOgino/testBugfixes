{"path":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","commits":[{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List,int,List,List).mjava","sourceNew":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","sourceOld":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List shingle, int currentPermutationStartOffset, List currentPermutationRows, List currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight((Token) shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","pathOld":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/shingle/ShingleMatrixFilter#calculateShingleWeight(Token,List[Token],int,List[Row],List[Token]).mjava","sourceNew":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","sourceOld":"  /**\n   * Evaluates the new shingle token weight.\n   *\n   * for (shingle part token in shingle)\n   * weight +=  shingle part token weight * (1 / sqrt(all shingle part token weights summed))\n   *\n   * This algorithm gives a slightly greater score for longer shingles\n   * and is rather penalising to great shingle token part weights.\n   *\n   * @param shingleToken token returned to consumer\n   * @param shingle tokens the tokens used to produce the shingle token.\n   * @param currentPermutationStartOffset start offset in parameter currentPermutationRows and currentPermutationTokens.\n   * @param currentPermutationRows an index to what matrix row a token in parameter currentPermutationTokens exist.\n   * @param currentPermuationTokens all tokens in the current row permutation of the matrix. A sub list (parameter offset, parameter shingle.size) equals parameter shingle.\n   * @return weight to be set for parameter shingleToken\n   */\n  public float calculateShingleWeight(Token shingleToken, List<Token> shingle, int currentPermutationStartOffset, List<Row> currentPermutationRows, List<Token> currentPermuationTokens) {\n    double[] weights = new double[shingle.size()];\n\n    double total = 0f;\n    double top = 0d;\n\n\n    for (int i=0; i<weights.length; i++) {\n      weights[i] = settingsCodec.getWeight(shingle.get(i));\n\n      double tmp = weights[i];\n      if (tmp > top) {\n        top = tmp;\n      }\n      total += tmp;\n    }\n\n    double factor = 1d / Math.sqrt(total);\n\n    double weight = 0d;\n    for (double partWeight : weights) {\n      weight += partWeight * factor;\n    }\n\n    return (float) weight;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60cdc0e643184821eb066795a8791cd82559f46e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}