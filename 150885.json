{"path":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#decoding(BytesRef,IntsRef,IntDecoder).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#decoding(BytesRef,IntsRef,IntDecoder).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/encoding/EncodingTest#decoding(BytesRef,IntsRef,IntDecoder).mjava","sourceNew":"  private static void decoding(BytesRef bytes, IntsRef values, IntDecoder decoder) throws IOException {\n    int offset = 0;\n    if (random().nextBoolean()) { // randomly set the offset and length to other than 0,0\n      bytes.grow(bytes.length + 1); // ensure that we have enough capacity to shift values by 1\n      bytes.offset = 1; // bytes start at index 1 (must do that after grow)\n      System.arraycopy(bytes.bytes, 0, bytes.bytes, 1, bytes.length);\n      offset = 1;\n    }\n    decoder.decode(bytes, values);\n    assertEquals(offset, bytes.offset); // decoders should not mess with offsets\n  }\n\n","sourceOld":"  private static void decoding(BytesRef bytes, IntsRef values, IntDecoder decoder) throws IOException {\n    int offset = 0;\n    if (random().nextBoolean()) { // randomly set the offset and length to other than 0,0\n      bytes.grow(bytes.length + 1); // ensure that we have enough capacity to shift values by 1\n      bytes.offset = 1; // bytes start at index 1 (must do that after grow)\n      System.arraycopy(bytes.bytes, 0, bytes.bytes, 1, bytes.length);\n      offset = 1;\n    }\n    decoder.decode(bytes, values);\n    assertEquals(offset, bytes.offset); // decoders should not mess with offsets\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#decoding(BytesRef,IntsRef,IntDecoder).mjava","sourceNew":null,"sourceOld":"  private static void decoding(BytesRef bytes, IntsRef values, IntDecoder decoder) throws IOException {\n    int offset = 0;\n    if (random().nextBoolean()) { // randomly set the offset and length to other than 0,0\n      bytes.grow(bytes.length + 1); // ensure that we have enough capacity to shift values by 1\n      bytes.offset = 1; // bytes start at index 1 (must do that after grow)\n      System.arraycopy(bytes.bytes, 0, bytes.bytes, 1, bytes.length);\n      offset = 1;\n    }\n    decoder.decode(bytes, values);\n    assertEquals(offset, bytes.offset); // decoders should not mess with offsets\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/encoding/EncodingTest#decoding(BytesRef,IntsRef,IntDecoder).mjava","sourceNew":null,"sourceOld":"  private static void decoding(BytesRef bytes, IntsRef values, IntDecoder decoder) throws IOException {\n    int offset = 0;\n    if (random().nextBoolean()) { // randomly set the offset and length to other than 0,0\n      bytes.grow(bytes.length + 1); // ensure that we have enough capacity to shift values by 1\n      bytes.offset = 1; // bytes start at index 1 (must do that after grow)\n      System.arraycopy(bytes.bytes, 0, bytes.bytes, 1, bytes.length);\n      offset = 1;\n    }\n    decoder.decode(bytes, values);\n    assertEquals(offset, bytes.offset); // decoders should not mess with offsets\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}