{"path":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","commits":[{"id":"b29abed5661c7911e4b45d5a3d79a186268e28c4","date":1366675770,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreContainer#initZooKeeper(String,int).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  protected void initZooKeeper(String zkHost, int zkClientTimeout) {\n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(this, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    getCoreNames().size());\n                for (SolrCore core : getCores()) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb3cd1ddc29fa02c2ef8296ce92e6353a15e410","date":1366680092,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n\n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b9c2f673731eb874eddf5c503c3a8e6ed446bc6","date":1367988758,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n\n    // BEGIN: SOLR-4622: deprecated hardcoded defaults for hostPort & hostContext\n    if (null == hostPort) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostPort' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostPort' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_PORT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostPort = DEFAULT_HOST_PORT;\n    }\n    if (null == hostContext) {\n      // throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n      //               \"'hostContext' must be configured to run SolrCloud\");\n      log.warn(\"Solr 'hostContext' has not be explicitly configured, using hardcoded default of \" + DEFAULT_HOST_CONTEXT + \".  This default has been deprecated and will be removed in future versions of Solr, please configure this value explicitly\");\n      hostContext = DEFAULT_HOST_CONTEXT;\n    }\n    // END: SOLR-4622\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,boolean,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","sourceNew":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, boolean genericCoreNodeNames, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.genericCoreNodeNames = genericCoreNodeNames;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, genericCoreNodeNames, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":["06913e78cf7eba43ba25e73c01678f04f274dbb7","06913e78cf7eba43ba25e73c01678f04f274dbb7","06913e78cf7eba43ba25e73c01678f04f274dbb7","06913e78cf7eba43ba25e73c01678f04f274dbb7","d2c1938c9f5c1c27e65b3a92640108988277ee9b","d2c1938c9f5c1c27e65b3a92640108988277ee9b","d2c1938c9f5c1c27e65b3a92640108988277ee9b","d2c1938c9f5c1c27e65b3a92640108988277ee9b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/ZkContainer#initZooKeeper(CoreContainer,String,String,int,String,String,String,String,int,int).mjava","sourceNew":null,"sourceOld":"  public void initZooKeeper(final CoreContainer cc, String solrHome, String zkHost, int zkClientTimeout, String hostPort, String hostContext, String host, String leaderVoteWait, int distribUpdateConnTimeout, int distribUpdateSoTimeout) {\n    ZkController zkController = null;\n    \n    // if zkHost sys property is not set, we are not using ZooKeeper\n    String zookeeperHost;\n    if(zkHost == null) {\n      zookeeperHost = System.getProperty(\"zkHost\");\n    } else {\n      zookeeperHost = zkHost;\n    }\n\n    String zkRun = System.getProperty(\"zkRun\");\n    \n    this.zkClientTimeout = zkClientTimeout;\n    this.hostPort = hostPort;\n    this.hostContext = hostContext;\n    this.host = host;\n    this.leaderVoteWait = leaderVoteWait;\n    this.distribUpdateConnTimeout = distribUpdateConnTimeout;\n    this.distribUpdateSoTimeout = distribUpdateSoTimeout;\n    \n    if (zkRun == null && zookeeperHost == null)\n        return;  // not in zk mode\n\n    if (null == hostPort) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostPort' must be configured to run SolrCloud\");\n    }\n    if (null == hostContext) {\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n                   \"'hostContext' must be configured to run SolrCloud\");\n    }\n\n    // zookeeper in quorum mode currently causes a failure when trying to\n    // register log4j mbeans.  See SOLR-2369\n    // TODO: remove after updating to an slf4j based zookeeper\n    System.setProperty(\"zookeeper.jmx.log4j.disable\", \"true\");\n\n    if (zkRun != null) {\n      String zkDataHome = System.getProperty(\"zkServerDataDir\", solrHome + \"zoo_data\");\n      String zkConfHome = System.getProperty(\"zkServerConfDir\", solrHome);\n      zkServer = new SolrZkServer(zkRun, zookeeperHost, zkDataHome, zkConfHome, hostPort);\n      zkServer.parseConfig();\n      zkServer.start();\n      \n      // set client from server config if not already set\n      if (zookeeperHost == null) {\n        zookeeperHost = zkServer.getClientString();\n      }\n    }\n\n    int zkClientConnectTimeout = 15000;\n\n    if (zookeeperHost != null) {\n\n      // we are ZooKeeper enabled\n      try {\n        // If this is an ensemble, allow for a long connect time for other servers to come up\n        if (zkRun != null && zkServer.getServers().size() > 1) {\n          zkClientConnectTimeout = 24 * 60 * 60 * 1000;  // 1 day for embedded ensemble\n          log.info(\"Zookeeper client=\" + zookeeperHost + \"  Waiting for a quorum.\");\n        } else {\n          log.info(\"Zookeeper client=\" + zookeeperHost);          \n        }\n        String confDir = System.getProperty(\"bootstrap_confdir\");\n        boolean boostrapConf = Boolean.getBoolean(\"bootstrap_conf\");  \n        \n        if(!ZkController.checkChrootPath(zookeeperHost, (confDir!=null) || boostrapConf)) {\n          throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n              \"A chroot was specified in ZkHost but the znode doesn't exist. \");\n        }\n        zkController = new ZkController(cc, zookeeperHost, zkClientTimeout,\n            zkClientConnectTimeout, host, hostPort, hostContext,\n            leaderVoteWait, distribUpdateConnTimeout, distribUpdateSoTimeout,\n            new CurrentCoreDescriptorProvider() {\n\n              @Override\n              public List<CoreDescriptor> getCurrentDescriptors() {\n                List<CoreDescriptor> descriptors = new ArrayList<CoreDescriptor>(\n                    cc.getCoreNames().size());\n                Collection<SolrCore> cores = cc.getCores();\n                for (SolrCore core : cores) {\n                  descriptors.add(core.getCoreDescriptor());\n                }\n                return descriptors;\n              }\n            });\n\n\n        if (zkRun != null && zkServer.getServers().size() > 1 && confDir == null && boostrapConf == false) {\n          // we are part of an ensemble and we are not uploading the config - pause to give the config time\n          // to get up\n          Thread.sleep(10000);\n        }\n        \n        if(confDir != null) {\n          File dir = new File(confDir);\n          if(!dir.isDirectory()) {\n            throw new IllegalArgumentException(\"bootstrap_confdir must be a directory of configuration files\");\n          }\n          String confName = System.getProperty(ZkController.COLLECTION_PARAM_PREFIX+ZkController.CONFIGNAME_PROP, \"configuration1\");\n          zkController.uploadConfigDir(dir, confName);\n        }\n\n\n        \n        if(boostrapConf) {\n          ZkController.bootstrapConf(zkController.getZkClient(), cc.cfg, solrHome);\n        }\n        \n      } catch (InterruptedException e) {\n        // Restore the interrupted status\n        Thread.currentThread().interrupt();\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (TimeoutException e) {\n        log.error(\"Could not connect to ZooKeeper\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (IOException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      } catch (KeeperException e) {\n        log.error(\"\", e);\n        throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR,\n            \"\", e);\n      }\n      \n\n    }\n    this.zkController = zkController;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["9b9c2f673731eb874eddf5c503c3a8e6ed446bc6"],"9b9c2f673731eb874eddf5c503c3a8e6ed446bc6":["2bb3cd1ddc29fa02c2ef8296ce92e6353a15e410"],"2bb3cd1ddc29fa02c2ef8296ce92e6353a15e410":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["9b9c2f673731eb874eddf5c503c3a8e6ed446bc6","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["849494cf2f3a96af5c8c84995108ddd8456fcd04"]},"commit2Childs":{"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9b9c2f673731eb874eddf5c503c3a8e6ed446bc6":["849494cf2f3a96af5c8c84995108ddd8456fcd04","37a0f60745e53927c4c876cfe5b5a58170f0646c"],"2bb3cd1ddc29fa02c2ef8296ce92e6353a15e410":["9b9c2f673731eb874eddf5c503c3a8e6ed446bc6"],"b29abed5661c7911e4b45d5a3d79a186268e28c4":["2bb3cd1ddc29fa02c2ef8296ce92e6353a15e410"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b29abed5661c7911e4b45d5a3d79a186268e28c4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}