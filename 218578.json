{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(null);\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(null);\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(null);\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(null);\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3971a049eab9d119ba1497d7ee89abc1a9a96278","date":1363282186,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(null);\n    assertEquals(LogByteSizeMergePolicy.class, conf.getMergePolicy().getClass());\n  }\n\n","bugFix":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","7ab99e8c71442b92c320e218141dee04a9b91ce8","1ab42b0756bdd98ac6a6767b5a77d10d9ba12b4b","6c18273ea5b3974d2f30117f46f1ae416c28f727"],"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a45bec74b98f6fc05f52770cfb425739e6563960","date":1375119292,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    // Test setReaderTermsIndexDivisor\n    try {\n      conf.setReaderTermsIndexDivisor(0);\n      fail(\"should not have succeeded to set termsIndexDivisor to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Setting to -1 is ok\n    conf.setReaderTermsIndexDivisor(-1);\n    try {\n      conf.setReaderTermsIndexDivisor(-2);\n      fail(\"should not have succeeded to set termsIndexDivisor to < -1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1","date":1419400138,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that its not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b370563d1feb60615bfdbb35479a7cd75d03fb6f","date":1440011484,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    try {\n      conf.setIndexingChain(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDeleteTerms(0);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    try {\n      conf.setIndexDeletionPolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    try {\n      conf.setMergeScheduler(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    try {\n      conf.setSimilarity(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(2048);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to >= 2048\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    try {\n      conf.setRAMPerThreadHardLimitMB(0);\n      fail(\"should not have succeeded to set RAMPerThreadHardLimitMB to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    try {\n      conf.setMergePolicy(null);\n      fail();\n    } catch (IllegalArgumentException e) {\n      // ok\n    }\n  }\n\n","bugFix":["3971a049eab9d119ba1497d7ee89abc1a9a96278","84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","d2ed1b9b7b46829fe3199afe9a8bc203f201b175"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDeleteTerms(0);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDeleteTerms(0);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDeleteTerms(0);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6f8af01d9b3067b143bbdc0a492720e2af97cf","date":1600157724,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(new MockAnalyzer(random()));\n\n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setIndexDeletionPolicy(null);\n    });\n\n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergeScheduler(null);\n    });\n\n    // Test Similarity: \n    // we shouldnt assert what the default is, just that it's not null.\n    assertTrue(IndexSearcher.getDefaultSimilarity() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setSimilarity(null);\n    });\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriterPerThread.defaultIndexingChain == conf.getIndexingChain());\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMaxBufferedDocs(1);\n    });\n\n    expectThrows(IllegalArgumentException.class, () -> {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(2048);\n    });\n    \n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setRAMPerThreadHardLimitMB(0);\n    });\n    \n    // Test MergePolicy\n    assertEquals(TieredMergePolicy.class, conf.getMergePolicy().getClass());\n    conf.setMergePolicy(new LogDocMergePolicy());\n    assertEquals(LogDocMergePolicy.class, conf.getMergePolicy().getClass());\n    expectThrows(IllegalArgumentException.class, () -> {\n      conf.setMergePolicy(null);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b370563d1feb60615bfdbb35479a7cd75d03fb6f":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["28288370235ed02234a64753cdbf0c6ec096304a"],"a45bec74b98f6fc05f52770cfb425739e6563960":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["05fe562aa248790944d43cdd478f512572835ba0"],"05fe562aa248790944d43cdd478f512572835ba0":["b370563d1feb60615bfdbb35479a7cd75d03fb6f"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["05fe562aa248790944d43cdd478f512572835ba0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["05fe562aa248790944d43cdd478f512572835ba0","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"680b6449f09827f58fe987aff279e014c311d966":["28288370235ed02234a64753cdbf0c6ec096304a","7a6f8af01d9b3067b143bbdc0a492720e2af97cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["a45bec74b98f6fc05f52770cfb425739e6563960"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"3971a049eab9d119ba1497d7ee89abc1a9a96278":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"]},"commit2Childs":{"b370563d1feb60615bfdbb35479a7cd75d03fb6f":["05fe562aa248790944d43cdd478f512572835ba0"],"7a6f8af01d9b3067b143bbdc0a492720e2af97cf":["680b6449f09827f58fe987aff279e014c311d966"],"a45bec74b98f6fc05f52770cfb425739e6563960":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"05fe562aa248790944d43cdd478f512572835ba0":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["7a6f8af01d9b3067b143bbdc0a492720e2af97cf","680b6449f09827f58fe987aff279e014c311d966"],"8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1":["b370563d1feb60615bfdbb35479a7cd75d03fb6f"],"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["8aa2bb13f56a3ad540fd2dc5e882e1ed4bf799d1"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"3971a049eab9d119ba1497d7ee89abc1a9a96278":["a45bec74b98f6fc05f52770cfb425739e6563960","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3971a049eab9d119ba1497d7ee89abc1a9a96278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}