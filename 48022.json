{"path":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#calculateShortestDistance(Node).mjava","commits":[{"id":"05d36e0b328ec96237035fbcca240e73631396e5","date":1020520725,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#calculateShortestDistance(Node).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Description of the Method\n     *\n     * @param firstNode  Description of the Parameter\n     */\n    public void calculateShortestDistance(Node firstNode)\n    {\n        clearDistances();\n        firstNode.setDistance(0);\n        nodesToDo.addLast(firstNode);\n        int calculations = 0;\n        while (!nodesToDo.isEmpty())\n        {\n            if (calculations % 100000 == 0)\n            {\n                System.out.println(\"Calculations: \" + calculations + \"; nodes to go: \" + nodesToDo.size() + \" total Mem: \" + Runtime.getRuntime().totalMemory() + \"; free mem: \" + Runtime.getRuntime().freeMemory());\n            }\n            calculations++;\n\n            Node act = (Node) nodesToDo.removeFirst();\n            LinkedList outTrans = act.getOutgoing();\n            float distance = act.getDistance();\n            Iterator i = outTrans.iterator();\n            //distance++;\n\n            while (i.hasNext())\n            {\n                Transition t = (Transition) i.next();\n                float transDistance = t.getDistance();\n                /*if (t.isFrame())\n                {\n                    System.out.println(\"Frame from \" + t.from.getName() + \" to \" + t.to.getName());\n                }*/\n                float newDistance = distance + (t.isFrame() ? 0.25f : 1f);\n                if (transDistance > newDistance)\n                {\n                    t.setDistance(newDistance);\n                    Node to = t.getTo();\n                    if (to.distance > distance)\n                    {\n                        to.setDistance(newDistance);\n                        nodesToDo.addLast(to);\n                    }\n                }\n            }\n            /*\n             *  if(looksGood)\n             *  {\n             *  System.out.println(\"Node \" + act.id + \" looks good\");\n             *  }\n             */\n        }\n        System.out.println(\"Calculations: \" + calculations );\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21b526e3e9974b2651365fbae52a976e6fc77aa4","date":1022108962,"type":3,"author":"cmarschner","isMerge":false,"pathNew":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#calculateShortestDistance(Node).mjava","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#calculateShortestDistance(Node).mjava","sourceNew":"    /**\n     * Description of the Method\n     *\n     * @param firstNode  Description of the Parameter\n     */\n\n    public void calculateShortestDistance(Node firstNode)\n    {\n\n        clearDistances();\n\n        firstNode.setDistance(0);\n\n        nodesToDo.addLast(firstNode);\n\n        int calculations = 0;\n\n        while (!nodesToDo.isEmpty())\n        {\n\n            if (calculations % 100000 == 0)\n            {\n\n                System.out.println(\"Calculations: \" + calculations + \"; nodes to go: \" + nodesToDo.size() + \" total Mem: \" + Runtime.getRuntime().totalMemory() + \"; free mem: \" + Runtime.getRuntime().freeMemory());\n\n            }\n\n            calculations++;\n\n            Node act = (Node) nodesToDo.removeFirst();\n\n            LinkedList outTrans = act.getOutgoing();\n\n            float distance = act.getDistance();\n\n            Iterator i = outTrans.iterator();\n\n            //distance++;\n\n            while (i.hasNext())\n            {\n\n                Transition t = (Transition) i.next();\n\n                float transDistance = t.getDistance();\n\n                /*\n                 *  if (t.isFrame())\n                 *  {\n                 *  System.out.println(\"Frame from \" + t.from.getName() + \" to \" + t.to.getName());\n                 *  }\n                 */\n                float newDistance = distance + (t.isFrame() ? 0.25f : 1f);\n\n                if (transDistance > newDistance)\n                {\n\n                    t.setDistance(newDistance);\n\n                    Node to = t.getTo();\n\n                    if (to.distance > distance)\n                    {\n\n                        to.setDistance(newDistance);\n\n                        nodesToDo.addLast(to);\n\n                    }\n\n                }\n\n            }\n\n            /*\n             *  if(looksGood)\n             *  {\n             *  System.out.println(\"Node \" + act.id + \" looks good\");\n             *  }\n             */\n        }\n\n        System.out.println(\"Calculations: \" + calculations);\n\n    }\n\n","sourceOld":"    /**\n     * Description of the Method\n     *\n     * @param firstNode  Description of the Parameter\n     */\n    public void calculateShortestDistance(Node firstNode)\n    {\n        clearDistances();\n        firstNode.setDistance(0);\n        nodesToDo.addLast(firstNode);\n        int calculations = 0;\n        while (!nodesToDo.isEmpty())\n        {\n            if (calculations % 100000 == 0)\n            {\n                System.out.println(\"Calculations: \" + calculations + \"; nodes to go: \" + nodesToDo.size() + \" total Mem: \" + Runtime.getRuntime().totalMemory() + \"; free mem: \" + Runtime.getRuntime().freeMemory());\n            }\n            calculations++;\n\n            Node act = (Node) nodesToDo.removeFirst();\n            LinkedList outTrans = act.getOutgoing();\n            float distance = act.getDistance();\n            Iterator i = outTrans.iterator();\n            //distance++;\n\n            while (i.hasNext())\n            {\n                Transition t = (Transition) i.next();\n                float transDistance = t.getDistance();\n                /*if (t.isFrame())\n                {\n                    System.out.println(\"Frame from \" + t.from.getName() + \" to \" + t.to.getName());\n                }*/\n                float newDistance = distance + (t.isFrame() ? 0.25f : 1f);\n                if (transDistance > newDistance)\n                {\n                    t.setDistance(newDistance);\n                    Node to = t.getTo();\n                    if (to.distance > distance)\n                    {\n                        to.setDistance(newDistance);\n                        nodesToDo.addLast(to);\n                    }\n                }\n            }\n            /*\n             *  if(looksGood)\n             *  {\n             *  System.out.println(\"Node \" + act.id + \" looks good\");\n             *  }\n             */\n        }\n        System.out.println(\"Calculations: \" + calculations );\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"afc16d717d9ed1a8e45371668ca6de674164d624","date":1103345442,"type":4,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"/dev/null","pathOld":"sandbox/contributions/webcrawler-LARM/src/de/lanlab/larm/graph/DistanceCount#calculateShortestDistance(Node).mjava","sourceNew":null,"sourceOld":"    /**\n     * Description of the Method\n     *\n     * @param firstNode  Description of the Parameter\n     */\n\n    public void calculateShortestDistance(Node firstNode)\n    {\n\n        clearDistances();\n\n        firstNode.setDistance(0);\n\n        nodesToDo.addLast(firstNode);\n\n        int calculations = 0;\n\n        while (!nodesToDo.isEmpty())\n        {\n\n            if (calculations % 100000 == 0)\n            {\n\n                System.out.println(\"Calculations: \" + calculations + \"; nodes to go: \" + nodesToDo.size() + \" total Mem: \" + Runtime.getRuntime().totalMemory() + \"; free mem: \" + Runtime.getRuntime().freeMemory());\n\n            }\n\n            calculations++;\n\n            Node act = (Node) nodesToDo.removeFirst();\n\n            LinkedList outTrans = act.getOutgoing();\n\n            float distance = act.getDistance();\n\n            Iterator i = outTrans.iterator();\n\n            //distance++;\n\n            while (i.hasNext())\n            {\n\n                Transition t = (Transition) i.next();\n\n                float transDistance = t.getDistance();\n\n                /*\n                 *  if (t.isFrame())\n                 *  {\n                 *  System.out.println(\"Frame from \" + t.from.getName() + \" to \" + t.to.getName());\n                 *  }\n                 */\n                float newDistance = distance + (t.isFrame() ? 0.25f : 1f);\n\n                if (transDistance > newDistance)\n                {\n\n                    t.setDistance(newDistance);\n\n                    Node to = t.getTo();\n\n                    if (to.distance > distance)\n                    {\n\n                        to.setDistance(newDistance);\n\n                        nodesToDo.addLast(to);\n\n                    }\n\n                }\n\n            }\n\n            /*\n             *  if(looksGood)\n             *  {\n             *  System.out.println(\"Node \" + act.id + \" looks good\");\n             *  }\n             */\n        }\n\n        System.out.println(\"Calculations: \" + calculations);\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["05d36e0b328ec96237035fbcca240e73631396e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"afc16d717d9ed1a8e45371668ca6de674164d624":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"05d36e0b328ec96237035fbcca240e73631396e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["afc16d717d9ed1a8e45371668ca6de674164d624"]},"commit2Childs":{"21b526e3e9974b2651365fbae52a976e6fc77aa4":["afc16d717d9ed1a8e45371668ca6de674164d624"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05d36e0b328ec96237035fbcca240e73631396e5"],"afc16d717d9ed1a8e45371668ca6de674164d624":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05d36e0b328ec96237035fbcca240e73631396e5":["21b526e3e9974b2651365fbae52a976e6fc77aa4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}