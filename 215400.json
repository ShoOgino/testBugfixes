{"path":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next().mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\r\n    assert reusableToken != null;\r\n    if (thaiToken != null) {\r\n      int start = breaker.current();\r\n      int end = breaker.next();\r\n      if (end != BreakIterator.DONE) {\r\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\r\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\r\n        reusableToken.setEndOffset(thaiToken.endOffset()+end);\r\n        return reusableToken;\r\n      }\r\n      thaiToken = null;\r\n    }\r\n\r\n    Token nextToken = input.next(reusableToken);\r\n    if (nextToken == null || nextToken.termLength() == 0) {\r\n      return null;\r\n    }\r\n\r\n    String text = nextToken.term();\r\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\r\n      nextToken.setTermBuffer(text.toLowerCase());\r\n      return nextToken;\r\n    }\r\n\r\n    thaiToken = (Token) nextToken.clone();\r\n    breaker.setText(text);\r\n    int end = breaker.next();\r\n    if (end != BreakIterator.DONE) {\r\n      nextToken.setTermBuffer(text, 0, end);\r\n      nextToken.setEndOffset(nextToken.startOffset() + end);\r\n      return nextToken;\r\n    }\r\n    return null;\r\n  }\r\n\n","sourceOld":"  public Token next() throws IOException {\r\n    if (thaiToken != null) {\r\n      String text = thaiToken.termText();\r\n      int start = breaker.current();\r\n      int end = breaker.next();\r\n      if (end != BreakIterator.DONE) {\r\n        return new Token(text.substring(start, end), \r\n            thaiToken.startOffset()+start, thaiToken.startOffset()+end, thaiToken.type());\r\n      }\r\n      thaiToken = null;\r\n    }\r\n    Token tk = input.next();\r\n    if (tk == null) {\r\n      return null;\r\n    }\r\n    String text = tk.termText();\r\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\r\n      return new Token(text.toLowerCase(), tk.startOffset(), tk.endOffset(), tk.type());\r\n    }\r\n    thaiToken = tk;\r\n    breaker.setText(text);\r\n    int end = breaker.next();\r\n    if (end != BreakIterator.DONE) {\r\n      return new Token(text.substring(0, end), \r\n          thaiToken.startOffset(), thaiToken.startOffset()+end, thaiToken.type());\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a361a621b184d9b73c9c9a37323a9845b8f8260","date":1226370946,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (thaiToken != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\n        reusableToken.setEndOffset(thaiToken.endOffset()+end);\n        return reusableToken;\n      }\n      thaiToken = null;\n    }\n\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null || nextToken.termLength() == 0) {\n      return null;\n    }\n\n    String text = nextToken.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      nextToken.setTermBuffer(text.toLowerCase());\n      return nextToken;\n    }\n\n    thaiToken = (Token) nextToken.clone();\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      nextToken.setTermBuffer(text, 0, end);\n      nextToken.setEndOffset(nextToken.startOffset() + end);\n      return nextToken;\n    }\n    return null;\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\r\n    assert reusableToken != null;\r\n    if (thaiToken != null) {\r\n      int start = breaker.current();\r\n      int end = breaker.next();\r\n      if (end != BreakIterator.DONE) {\r\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\r\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\r\n        reusableToken.setEndOffset(thaiToken.endOffset()+end);\r\n        return reusableToken;\r\n      }\r\n      thaiToken = null;\r\n    }\r\n\r\n    Token nextToken = input.next(reusableToken);\r\n    if (nextToken == null || nextToken.termLength() == 0) {\r\n      return null;\r\n    }\r\n\r\n    String text = nextToken.term();\r\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\r\n      nextToken.setTermBuffer(text.toLowerCase());\r\n      return nextToken;\r\n    }\r\n\r\n    thaiToken = (Token) nextToken.clone();\r\n    breaker.setText(text);\r\n    int end = breaker.next();\r\n    if (end != BreakIterator.DONE) {\r\n      nextToken.setTermBuffer(text, 0, end);\r\n      nextToken.setEndOffset(nextToken.startOffset() + end);\r\n      return nextToken;\r\n    }\r\n    return null;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"673accc9b41e365926e68fc3a1d8c06240542492","date":1245426756,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (thaiToken != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\n        reusableToken.setEndOffset(thaiToken.startOffset()+end);\n        return reusableToken;\n      }\n      thaiToken = null;\n    }\n\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null || nextToken.termLength() == 0) {\n      return null;\n    }\n\n    String text = nextToken.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      nextToken.setTermBuffer(text.toLowerCase());\n      return nextToken;\n    }\n\n    thaiToken = (Token) nextToken.clone();\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      nextToken.setTermBuffer(text, 0, end);\n      nextToken.setEndOffset(nextToken.startOffset() + end);\n      return nextToken;\n    }\n    return null;\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (thaiToken != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\n        reusableToken.setEndOffset(thaiToken.endOffset()+end);\n        return reusableToken;\n      }\n      thaiToken = null;\n    }\n\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null || nextToken.termLength() == 0) {\n      return null;\n    }\n\n    String text = nextToken.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      nextToken.setTermBuffer(text.toLowerCase());\n      return nextToken;\n    }\n\n    thaiToken = (Token) nextToken.clone();\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      nextToken.setTermBuffer(text, 0, end);\n      nextToken.setEndOffset(nextToken.startOffset() + end);\n      return nextToken;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/th/ThaiWordFilter#next(Token).mjava","sourceNew":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (thaiToken != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\n        reusableToken.setEndOffset(thaiToken.startOffset()+end);\n        return reusableToken;\n      }\n      thaiToken = null;\n    }\n\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null || nextToken.termLength() == 0) {\n      return null;\n    }\n\n    String text = nextToken.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      nextToken.setTermBuffer(text.toLowerCase());\n      return nextToken;\n    }\n\n    thaiToken = (Token) nextToken.clone();\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      nextToken.setTermBuffer(text, 0, end);\n      nextToken.setEndOffset(nextToken.startOffset() + end);\n      return nextToken;\n    }\n    return null;\n  }\n\n","sourceOld":"  public Token next(final Token reusableToken) throws IOException {\n    assert reusableToken != null;\n    if (thaiToken != null) {\n      int start = breaker.current();\n      int end = breaker.next();\n      if (end != BreakIterator.DONE) {\n        reusableToken.reinit(thaiToken, thaiToken.termBuffer(), start, end - start);\n        reusableToken.setStartOffset(thaiToken.startOffset()+start);\n        reusableToken.setEndOffset(thaiToken.startOffset()+end);\n        return reusableToken;\n      }\n      thaiToken = null;\n    }\n\n    Token nextToken = input.next(reusableToken);\n    if (nextToken == null || nextToken.termLength() == 0) {\n      return null;\n    }\n\n    String text = nextToken.term();\n    if (UnicodeBlock.of(text.charAt(0)) != UnicodeBlock.THAI) {\n      nextToken.setTermBuffer(text.toLowerCase());\n      return nextToken;\n    }\n\n    thaiToken = (Token) nextToken.clone();\n    breaker.setText(text);\n    int end = breaker.next();\n    if (end != BreakIterator.DONE) {\n      nextToken.setTermBuffer(text, 0, end);\n      nextToken.setEndOffset(nextToken.startOffset() + end);\n      return nextToken;\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["673accc9b41e365926e68fc3a1d8c06240542492"],"673accc9b41e365926e68fc3a1d8c06240542492":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dd745d580729e528151b58aeda87ef82f1b95c9b"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["6a361a621b184d9b73c9c9a37323a9845b8f8260"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"673accc9b41e365926e68fc3a1d8c06240542492":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"6a361a621b184d9b73c9c9a37323a9845b8f8260":["673accc9b41e365926e68fc3a1d8c06240542492"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}