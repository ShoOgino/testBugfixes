{"path":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","commits":[{"id":"1e4014209b24e71d602e579a316f994355596012","date":1465717267,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"/dev/null","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new DistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"/dev/null","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new DistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new DistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new DistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new DistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new DistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Overseer.Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2789e82ce4665df9d4c9beceeda658d4db483db","date":1544401888,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS + 15; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(100);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 500; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(\"acoll: \" + acoll + \" bcoll: \" + bcoll, acoll > bcoll);\n    }\n\n  }\n\n","sourceOld":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS+5; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(10);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 100; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(acoll > bcoll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8041362ed381a99ea51bf974a22fe3638096848","date":1591306644,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/MultiThreadedOCPTest#testFillWorkQueue().mjava","sourceNew":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS + 15; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, Integer.toString(i),\n\n            // third task waits for a long time, and thus blocks the queue for all other tasks for A_COLL.\n            // Subsequent tasks as well as the first two only wait for 1ms\n            \"sleep\", (i == 2 ? \"10000\" : \"1\")\n        )));\n        log.info(\"MOCK task added {}\", i);\n      }\n\n      // Wait until we see the second A_COLL task getting processed (assuming the first got processed as well)\n      Long task1CollA = waitForTaskToCompleted(client, 1);\n\n      assertNotNull(\"Queue did not process first two tasks on A_COLL, can't run test\", task1CollA);\n\n      // Make sure the long running task did not finish, otherwise no way the B_COLL task can be tested to run in parallel with it\n      assertNull(\"Long running task finished too early, can't test\", checkTaskHasCompleted(client, 2));\n\n      // Enqueue a task on another collection not competing with the lock on A_COLL and see that it can be executed right away\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n      // We now check that either the B_COLL task has completed before the third (long running) task on A_COLL,\n      // Or if both have completed (if this check got significantly delayed for some reason), we verify B_COLL was first.\n      Long taskCollB = waitForTaskToCompleted(client, 200);\n\n      // We do not wait for the long running task to finish, that would be a waste of time.\n      Long task2CollA = checkTaskHasCompleted(client, 2);\n\n      // Given the wait delay (500 iterations of 100ms), the task has plenty of time to complete, so this is not expected.\n      assertNotNull(\"Task on  B_COLL did not complete, can't test\", taskCollB);\n      // We didn't wait for the 3rd A_COLL task to complete (test can run quickly) but if it did, we expect the B_COLL to have finished first.\n      assertTrue(\"task2CollA: \" + task2CollA + \" taskCollB: \" + taskCollB, task2CollA  == null || task2CollA > taskCollB);\n    }\n  }\n\n","sourceOld":"  private void testFillWorkQueue() throws Exception {\n    try (SolrClient client = createNewSolrClient(\"\", getBaseUrl((HttpSolrClient) clients.get(0)))) {\n      DistributedQueue distributedQueue = new ZkDistributedQueue(cloudClient.getZkStateReader().getZkClient(),\n          \"/overseer/collection-queue-work\", new Stats());\n      //fill the work queue with blocked tasks by adding more than the no:of parallel tasks\n      for (int i = 0; i < MAX_PARALLEL_TASKS + 15; i++) {\n        distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n            \"collection\", \"A_COLL\",\n            QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n            ASYNC, String.valueOf(i),\n\n            \"sleep\", (i == 0 ? \"1000\" : \"1\") //first task waits for 1 second, and thus blocking\n            // all other tasks. Subsequent tasks only wait for 1ms\n        )));\n        log.info(\"MOCK task added {}\", i);\n\n      }\n      Thread.sleep(100);//wait and post the next message\n\n      //this is not going to be blocked because it operates on another collection\n      distributedQueue.offer(Utils.toJSON(Utils.makeMap(\n          \"collection\", \"B_COLL\",\n          QUEUE_OPERATION, MOCK_COLL_TASK.toLower(),\n          ASYNC, \"200\",\n          \"sleep\", \"1\"\n      )));\n\n\n      Long acoll = null, bcoll = null;\n      for (int i = 0; i < 500; i++) {\n        if (bcoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"200\", client);\n          bcoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll == null) {\n          CollectionAdminResponse statusResponse = getStatusResponse(\"2\", client);\n          acoll = (Long) statusResponse.getResponse().get(\"MOCK_FINISHED\");\n        }\n        if (acoll != null && bcoll != null) break;\n        Thread.sleep(100);\n      }\n      assertTrue(acoll != null && bcoll != null);\n      assertTrue(\"acoll: \" + acoll + \" bcoll: \" + bcoll, acoll > bcoll);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f2789e82ce4665df9d4c9beceeda658d4db483db":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["1e4014209b24e71d602e579a316f994355596012"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"1e4014209b24e71d602e579a316f994355596012":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"b8041362ed381a99ea51bf974a22fe3638096848":["f2789e82ce4665df9d4c9beceeda658d4db483db"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["1e4014209b24e71d602e579a316f994355596012"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1e4014209b24e71d602e579a316f994355596012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b8041362ed381a99ea51bf974a22fe3638096848"]},"commit2Childs":{"f2789e82ce4665df9d4c9beceeda658d4db483db":["b8041362ed381a99ea51bf974a22fe3638096848"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"1e4014209b24e71d602e579a316f994355596012":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e4014209b24e71d602e579a316f994355596012","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["f2789e82ce4665df9d4c9beceeda658d4db483db"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b8041362ed381a99ea51bf974a22fe3638096848":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}