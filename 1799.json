{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","date":1341575807,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 200*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 15);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 10000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 200*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523c1863d7ec17e9a5067cef7e233c388f8ab263","date":1367931848,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, reader, EdgeNGramTokenizer.Side.FRONT, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(Version.LUCENE_43, reader, EdgeNGramTokenizer.Side.BACK, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.FRONT, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(reader, EdgeNGramTokenizer.Side.BACK, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7567347acd9579d742a2ffd4feb1a32062fb1bc3","date":1367935406,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, reader, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, reader, EdgeNGramTokenizer.Side.FRONT, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n    \n    Analyzer b = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(Version.LUCENE_43, reader, EdgeNGramTokenizer.Side.BACK, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), b, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), b, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb2c11bd0a5a7bef41cee10608d4429e976c528","date":1381463622,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = _TestUtil.nextInt(random(), 2, 10);\n      final int max = _TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, reader, min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, reader, 2, 4);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }    \n    };\n    checkRandomData(random(), a, 1000*RANDOM_MULTIPLIER, 20, false, false);\n    checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 8192, false, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = _TestUtil.nextInt(random(), 2, 10);\n      final int max = _TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = _TestUtil.nextInt(random(), 2, 10);\n      final int max = _TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, reader, min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = _TestUtil.nextInt(random(), 2, 10);\n      final int max = _TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(TEST_VERSION_CURRENT, min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e902c08baf3b883b738211276f135b9db68b4530","date":1417054381,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numIters = TEST_NIGHTLY ? 10 : 1;\n    for (int i = 0; i < numIters; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    for (int i = 0; i < 10; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numIters = TEST_NIGHTLY ? 10 : 1;\n    for (int i = 0; i < numIters; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numIters = TEST_NIGHTLY ? 10 : 1;\n    for (int i = 0; i < numIters; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/ngram/EdgeNGramTokenizerTest#testRandomStrings().mjava","sourceNew":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numIters = TEST_NIGHTLY ? 10 : 1;\n    for (int i = 0; i < numIters; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n      a.close();\n    }\n  }\n\n","sourceOld":"  /** blast some random strings through the analyzer */\n  public void testRandomStrings() throws Exception {\n    int numIters = TEST_NIGHTLY ? 10 : 1;\n    for (int i = 0; i < numIters; i++) {\n      final int min = TestUtil.nextInt(random(), 2, 10);\n      final int max = TestUtil.nextInt(random(), min, 20);\n      \n      Analyzer a = new Analyzer() {\n        @Override\n        protected TokenStreamComponents createComponents(String fieldName) {\n          Tokenizer tokenizer = new EdgeNGramTokenizer(min, max);\n          return new TokenStreamComponents(tokenizer, tokenizer);\n        }    \n      };\n      checkRandomData(random(), a, 100*RANDOM_MULTIPLIER, 20);\n      checkRandomData(random(), a, 10*RANDOM_MULTIPLIER, 8192);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e902c08baf3b883b738211276f135b9db68b4530":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"04e7f30683f53928b2fce016e6430c9795caff22":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"523c1863d7ec17e9a5067cef7e233c388f8ab263":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["523c1863d7ec17e9a5067cef7e233c388f8ab263"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["e902c08baf3b883b738211276f135b9db68b4530","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["6613659748fe4411a7dcf85266e55db1f95f7315"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["e902c08baf3b883b738211276f135b9db68b4530"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"]},"commit2Childs":{"e902c08baf3b883b738211276f135b9db68b4530":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"04e7f30683f53928b2fce016e6430c9795caff22":[],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["04e7f30683f53928b2fce016e6430c9795caff22","523c1863d7ec17e9a5067cef7e233c388f8ab263","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"523c1863d7ec17e9a5067cef7e233c388f8ab263":["7567347acd9579d742a2ffd4feb1a32062fb1bc3"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"9fb2c11bd0a5a7bef41cee10608d4429e976c528":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"7567347acd9579d742a2ffd4feb1a32062fb1bc3":["9fb2c11bd0a5a7bef41cee10608d4429e976c528"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04e7f30683f53928b2fce016e6430c9795caff22","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["e902c08baf3b883b738211276f135b9db68b4530"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}