{"path":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSchemaRegistryProvider().mjava","commits":[{"id":"e58bb31b4af6b8eeb1539849575c59df745bc6e6","date":1461874681,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSchemaRegistryProvider().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link SchemaRegistryProvider} for HTTP <b>clients</b> to use when communicating with servers \n   * which have been configured based on the settings of this object.  When {@link #isSSLMode} is true, this \n   * <code>SchemaRegistryProvider</code> will <i>only</i> support HTTPS (no HTTP scheme) using the \n   * appropriate certs.  When {@link #isSSLMode} is false, <i>only</i> HTTP (no HTTPS scheme) will be \n   * supported.\n   */\n  public SchemaRegistryProvider buildClientSchemaRegistryProvider() {\n    if (isSSLMode()) {\n      SSLConnectionSocketFactory sslConnectionFactory = buildClientSSLConnectionSocketFactory();\n      assert null != sslConnectionFactory;\n      return new SSLSchemaRegistryProvider(sslConnectionFactory);\n    } else {\n      return HTTP_ONLY_SCHEMA_PROVIDER;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b50463286869f584cf849d1587a0fcd54d1dfa","date":1462378517,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSchemaRegistryProvider().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a {@link SchemaRegistryProvider} for HTTP <b>clients</b> to use when communicating with servers \n   * which have been configured based on the settings of this object.  When {@link #isSSLMode} is true, this \n   * <code>SchemaRegistryProvider</code> will <i>only</i> support HTTPS (no HTTP scheme) using the \n   * appropriate certs.  When {@link #isSSLMode} is false, <i>only</i> HTTP (no HTTPS scheme) will be \n   * supported.\n   */\n  public SchemaRegistryProvider buildClientSchemaRegistryProvider() {\n    if (isSSLMode()) {\n      SSLConnectionSocketFactory sslConnectionFactory = buildClientSSLConnectionSocketFactory();\n      assert null != sslConnectionFactory;\n      return new SSLSchemaRegistryProvider(sslConnectionFactory);\n    } else {\n      return HTTP_ONLY_SCHEMA_PROVIDER;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e856e5ac973044540959acff90fa900278d2692","date":1585275350,"type":5,"author":"Andy Throgmorton","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSocketFactoryRegistryProvider().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/util/SSLTestConfig#buildClientSchemaRegistryProvider().mjava","sourceNew":"  /**\n   * Creates a {@link SocketFactoryRegistryProvider} for HTTP <b>clients</b> to use when communicating with servers \n   * which have been configured based on the settings of this object.  When {@link #isSSLMode} is true, this \n   * <code>SocketFactoryRegistryProvider</code> will <i>only</i> support HTTPS (no HTTP scheme) using the \n   * appropriate certs.  When {@link #isSSLMode} is false, <i>only</i> HTTP (no HTTPS scheme) will be \n   * supported.\n   */\n  public SocketFactoryRegistryProvider buildClientSocketFactoryRegistryProvider() {\n    if (isSSLMode()) {\n      SSLConnectionSocketFactory sslConnectionFactory = buildClientSSLConnectionSocketFactory();\n      assert null != sslConnectionFactory;\n      return new SSLSocketFactoryRegistryProvider(sslConnectionFactory);\n    } else {\n      return HTTP_ONLY_SCHEMA_PROVIDER;\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates a {@link SchemaRegistryProvider} for HTTP <b>clients</b> to use when communicating with servers \n   * which have been configured based on the settings of this object.  When {@link #isSSLMode} is true, this \n   * <code>SchemaRegistryProvider</code> will <i>only</i> support HTTPS (no HTTP scheme) using the \n   * appropriate certs.  When {@link #isSSLMode} is false, <i>only</i> HTTP (no HTTPS scheme) will be \n   * supported.\n   */\n  public SchemaRegistryProvider buildClientSchemaRegistryProvider() {\n    if (isSSLMode()) {\n      SSLConnectionSocketFactory sslConnectionFactory = buildClientSSLConnectionSocketFactory();\n      assert null != sslConnectionFactory;\n      return new SSLSchemaRegistryProvider(sslConnectionFactory);\n    } else {\n      return HTTP_ONLY_SCHEMA_PROVIDER;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9e856e5ac973044540959acff90fa900278d2692":["e58bb31b4af6b8eeb1539849575c59df745bc6e6"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e856e5ac973044540959acff90fa900278d2692"],"55b50463286869f584cf849d1587a0fcd54d1dfa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e58bb31b4af6b8eeb1539849575c59df745bc6e6"]},"commit2Childs":{"9e856e5ac973044540959acff90fa900278d2692":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e58bb31b4af6b8eeb1539849575c59df745bc6e6":["9e856e5ac973044540959acff90fa900278d2692","55b50463286869f584cf849d1587a0fcd54d1dfa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e58bb31b4af6b8eeb1539849575c59df745bc6e6","55b50463286869f584cf849d1587a0fcd54d1dfa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"55b50463286869f584cf849d1587a0fcd54d1dfa":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","55b50463286869f584cf849d1587a0fcd54d1dfa"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}