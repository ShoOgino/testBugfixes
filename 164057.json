{"path":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","commits":[{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(TermFreqPayloadIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_46, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(TermFreqPayloadIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_46, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bf41419d452997826ec5f17684993377be77f49","date":1386629618,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_46, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":["d0af0c31a687dd847212ae59f661152896c76516"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_46, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a645276cbaf5dc96a42fd473b9019bde352996c8","date":1391806699,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = Sort.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":["d0af0c31a687dd847212ae59f661152896c76516"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<Long>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b","date":1395588343,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"payloads are not supported\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(writer, reader);\n        } else {\n          IOUtils.closeWhileHandlingException(writer, reader);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_CURRENT, indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50","date":1407854805,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRef scratchInts = new IntsRef();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":["d0af0c31a687dd847212ae59f661152896c76516"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"33e00cab61b70cb98359f3195dc53d7dec318905","date":1408527648,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File tempIndexPath = Files.createTempDirectory(prefix + \".index.\").toFile();\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File directory = OfflineSorter.defaultTempDir();\n    // TODO: messy ... java7 has Files.createTempDirectory\n    // ... but 4.x is java6:\n    File tempIndexPath = null;\n    Random random = new Random();\n    while (true) {\n      tempIndexPath = new File(directory, prefix + \".index.\" + random.nextInt(Integer.MAX_VALUE));\n      if (tempIndexPath.mkdir()) {\n        break;\n      }\n    }\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File tempIndexPath = Files.createTempDirectory(prefix + \".index.\").toFile();\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File tempIndexPath = Files.createTempDirectory(prefix + \".index.\").toFile();\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer);\n        }\n      } finally {\n        for(String file : dir.listAll()) {\n          File path = new File(tempIndexPath, file);\n          if (path.delete() == false) {\n            throw new IllegalStateException(\"failed to remove \" + path);\n          }\n        }\n\n        if (tempIndexPath.delete() == false) {\n          throw new IllegalStateException(\"failed to remove \" + tempIndexPath);\n        }\n\n        dir.close();\n      }\n    }\n  }\n\n","bugFix":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","d0af0c31a687dd847212ae59f661152896c76516"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    File tempIndexPath = Files.createTempDirectory(prefix + \".index.\").toFile();\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator(null);\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a1862266772deb28cdcb7d996b64d2177022687","date":1453077824,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer, false);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer);\n\n      Terms terms = MultiTerms.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer);\n\n      Terms terms = MultiFields.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f5661e6a04d3172e262ad741b717924f2f1b6a5","date":1576244274,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer);\n\n      Terms terms = MultiTerms.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        fstCompiler.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = fstCompiler.compile();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer);\n\n      Terms terms = MultiTerms.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","date":1576247714,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","pathOld":"lucene/suggest/src/java/org/apache/lucene/search/suggest/analyzing/FreeTextSuggester#build(InputIterator,double).mjava","sourceNew":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer);\n\n      Terms terms = MultiTerms.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      FSTCompiler<Long> fstCompiler = new FSTCompiler<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        fstCompiler.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = fstCompiler.compile();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","sourceOld":"  /** Build the suggest index, using up to the specified\n   *  amount of temporary RAM while building.  Note that\n   *  the weights for the suggestions are ignored. */\n  public void build(InputIterator iterator, double ramBufferSizeMB) throws IOException {\n    if (iterator.hasPayloads()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support payloads\");\n    }\n    if (iterator.hasContexts()) {\n      throw new IllegalArgumentException(\"this suggester doesn't support contexts\");\n    }\n\n    String prefix = getClass().getSimpleName();\n    Path tempIndexPath = Files.createTempDirectory(prefix + \".index.\");\n\n    Directory dir = FSDirectory.open(tempIndexPath);\n\n    IndexWriterConfig iwc = new IndexWriterConfig(indexAnalyzer);\n    iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE);\n    iwc.setRAMBufferSizeMB(ramBufferSizeMB);\n    IndexWriter writer = new IndexWriter(dir, iwc);\n\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    // TODO: if only we had IndexOptions.TERMS_ONLY...\n    ft.setIndexOptions(IndexOptions.DOCS_AND_FREQS);\n    ft.setOmitNorms(true);\n    ft.freeze();\n\n    Document doc = new Document();\n    Field field = new Field(\"body\", \"\", ft);\n    doc.add(field);\n\n    totTokens = 0;\n    IndexReader reader = null;\n\n    boolean success = false;\n    count = 0;\n    try {\n      while (true) {\n        BytesRef surfaceForm = iterator.next();\n        if (surfaceForm == null) {\n          break;\n        }\n        field.setStringValue(surfaceForm.utf8ToString());\n        writer.addDocument(doc);\n        count++;\n      }\n      reader = DirectoryReader.open(writer);\n\n      Terms terms = MultiTerms.getTerms(reader, \"body\");\n      if (terms == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n\n      // Move all ngrams into an FST:\n      TermsEnum termsEnum = terms.iterator();\n\n      Outputs<Long> outputs = PositiveIntOutputs.getSingleton();\n      Builder<Long> builder = new Builder<>(FST.INPUT_TYPE.BYTE1, outputs);\n\n      IntsRefBuilder scratchInts = new IntsRefBuilder();\n      while (true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n        int ngramCount = countGrams(term);\n        if (ngramCount > grams) {\n          throw new IllegalArgumentException(\"tokens must not contain separator byte; got token=\" + term + \" but gramCount=\" + ngramCount + \", which is greater than expected max ngram size=\" + grams);\n        }\n        if (ngramCount == 1) {\n          totTokens += termsEnum.totalTermFreq();\n        }\n\n        builder.add(Util.toIntsRef(term, scratchInts), encodeWeight(termsEnum.totalTermFreq()));\n      }\n\n      fst = builder.finish();\n      if (fst == null) {\n        throw new IllegalArgumentException(\"need at least one suggestion\");\n      }\n      //System.out.println(\"FST: \" + fst.getNodeCount() + \" nodes\");\n\n      /*\n      PrintWriter pw = new PrintWriter(\"/x/tmp/out.dot\");\n      Util.toDot(fst, pw, true, true);\n      pw.close();\n      */\n\n      // Writer was only temporary, to count up bigrams,\n      // which we transferred to the FST, so now we\n      // rollback:\n      writer.rollback();\n      success = true;\n    } finally {\n      try {\n        if (success) {\n          IOUtils.close(reader, dir);\n        } else {\n          IOUtils.closeWhileHandlingException(reader, writer, dir);\n        }\n      } finally {\n        IOUtils.rm(tempIndexPath);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["f4abec28b874149a7223e32cc7a01704c27790de"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["0bf41419d452997826ec5f17684993377be77f49"],"33e00cab61b70cb98359f3195dc53d7dec318905":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"2a1862266772deb28cdcb7d996b64d2177022687":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0bf41419d452997826ec5f17684993377be77f49":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["33e00cab61b70cb98359f3195dc53d7dec318905"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a645276cbaf5dc96a42fd473b9019bde352996c8","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a645276cbaf5dc96a42fd473b9019bde352996c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7","0bf41419d452997826ec5f17684993377be77f49"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["2a1862266772deb28cdcb7d996b64d2177022687"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":["04e775de416dd2d8067b10db1c8af975a1d5017e","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f5661e6a04d3172e262ad741b717924f2f1b6a5"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["2a1862266772deb28cdcb7d996b64d2177022687"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b"],"58d0345a28bb6b4be59c38e6a77e2cc0e615ee4b":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["0bf41419d452997826ec5f17684993377be77f49","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50":["33e00cab61b70cb98359f3195dc53d7dec318905"],"f4abec28b874149a7223e32cc7a01704c27790de":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a645276cbaf5dc96a42fd473b9019bde352996c8":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"33e00cab61b70cb98359f3195dc53d7dec318905":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"0bf41419d452997826ec5f17684993377be77f49":["a645276cbaf5dc96a42fd473b9019bde352996c8","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"2a1862266772deb28cdcb7d996b64d2177022687":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["7dc6ea5fd38ce7aa8f36b3bac8b757da77f31d50"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","0f5661e6a04d3172e262ad741b717924f2f1b6a5"],"c5db9bff3aeb942c848a2ab8fa4b8b0737377deb":[],"0f5661e6a04d3172e262ad741b717924f2f1b6a5":["c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","c5db9bff3aeb942c848a2ab8fa4b8b0737377deb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}