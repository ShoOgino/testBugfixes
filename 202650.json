{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","commits":[{"id":"a55bf71f91aeded06b44ad1abea6666ea168b697","date":1435941127,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"/dev/null","sourceNew":"  private void testParallelExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8da9a71da64ce12a97dcfcdd912893aeb1fa2981","date":1437510515,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  private void testParallelExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  private void testParallelExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b940572a59da1b42b6c20ab5278155b12816807a","date":1462388874,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  private void testParallelExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd78ba595fa6cdd7fff930f26d154d13a823fa47","date":1462400514,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  private void testParallelExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"73450c0955930295d34703e7ddbfc6973b7a121a","date":1462431925,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  private void testParallelExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","date":1462576651,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  private void testParallelExceptionStream() throws Exception {\n\n    indexr(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\");\n    indexr(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\");\n    indexr(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\");\n    indexr(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\");\n    indexr(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\");\n    indexr(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\");\n    indexr(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\");\n    indexr(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\");\n    indexr(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\");\n    indexr(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\");\n\n    commit();\n\n    String zkHost = zkServer.getZkAddress();\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, \"collection1\", paramsA);\n    pstream = new ParallelStream(zkHost,\"collection1\", stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    Map paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    paramsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\",\"/export\", \"partitionKeys\",\"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, paramsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58bb411852ed0249bf624e9fc223b4973776d357","date":1479107017,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8243e301531f97de264740d6afa71de6781dd64","date":1479139589,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assert(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    assert(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assert(t.EOF);\n    assert(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assert(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTION);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTION, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTION, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233","date":1543335722,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamingTest#testParallelExceptionStream().mjava","sourceNew":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\", \"qt\", \"/export\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","sourceOld":"  @Test\n  @Ignore\n  public void testParallelExceptionStream() throws Exception {\n\n    new UpdateRequest()\n        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"1\")\n        .add(id, \"2\", \"a_s\", \"hello0\", \"a_i\", \"2\", \"a_f\", \"2\")\n        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n        .add(id, \"1\", \"a_s\", \"hello0\", \"a_i\", \"1\", \"a_f\", \"5\")\n        .add(id, \"5\", \"a_s\", \"hello3\", \"a_i\", \"10\", \"a_f\", \"6\")\n        .add(id, \"6\", \"a_s\", \"hello4\", \"a_i\", \"11\", \"a_f\", \"7\")\n        .add(id, \"7\", \"a_s\", \"hello3\", \"a_i\", \"12\", \"a_f\", \"8\")\n        .add(id, \"8\", \"a_s\", \"hello3\", \"a_i\", \"13\", \"a_f\", \"9\")\n        .add(id, \"9\", \"a_s\", \"hello0\", \"a_i\", \"14\", \"a_f\", \"10\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    SolrParams sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\");\n    CloudSolrStream stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    ParallelStream pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    ExceptionStream estream = new ExceptionStream(pstream);\n    Tuple t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //ParallelStream requires that partitionKeys be set.\n    assertTrue(t.getException().contains(\"When numWorkers > 1 partitionKeys must be set.\"));\n\n\n    //Test an error that originates from the /select handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,blah\", \"sort\", \"blah asc\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"blah\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    assertTrue(t.getException().contains(\"sort param field can't be found: blah\"));\n\n\n    //Test an error that originates from the /export handler\n    sParamsA = mapParams(\"q\", \"*:*\", \"fl\", \"a_s,a_i,a_f,score\", \"sort\", \"a_s asc\", \"qt\", \"/export\", \"partitionKeys\", \"a_s\");\n    stream = new CloudSolrStream(zkHost, COLLECTIONORALIAS, sParamsA);\n    pstream = new ParallelStream(zkHost, COLLECTIONORALIAS, stream, 2, new FieldComparator(\"a_s\", ComparatorOrder.ASCENDING));\n    estream = new ExceptionStream(pstream);\n    t = getTuple(estream);\n    assertTrue(t.EOF);\n    assertTrue(t.EXCEPTION);\n    //The /export handler will pass through a real exception.\n    assertTrue(t.getException().contains(\"undefined field:\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"73450c0955930295d34703e7ddbfc6973b7a121a":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981","b940572a59da1b42b6c20ab5278155b12816807a"],"b940572a59da1b42b6c20ab5278155b12816807a":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"58bb411852ed0249bf624e9fc223b4973776d357":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["73450c0955930295d34703e7ddbfc6973b7a121a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["bd78ba595fa6cdd7fff930f26d154d13a823fa47","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["73450c0955930295d34703e7ddbfc6973b7a121a","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981","b940572a59da1b42b6c20ab5278155b12816807a"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c8243e301531f97de264740d6afa71de6781dd64":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","58bb411852ed0249bf624e9fc223b4973776d357"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981","73450c0955930295d34703e7ddbfc6973b7a121a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["a8ed5da4b0191db6bc7f77f9feb35da6bd76f904","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"8c969f15cd04d31e520319c619a445ae21f02d72":["58bb411852ed0249bf624e9fc223b4973776d357"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["8c969f15cd04d31e520319c619a445ae21f02d72"]},"commit2Childs":{"73450c0955930295d34703e7ddbfc6973b7a121a":["826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"b940572a59da1b42b6c20ab5278155b12816807a":["73450c0955930295d34703e7ddbfc6973b7a121a","bd78ba595fa6cdd7fff930f26d154d13a823fa47"],"58bb411852ed0249bf624e9fc223b4973776d357":["c8243e301531f97de264740d6afa71de6781dd64","8c969f15cd04d31e520319c619a445ae21f02d72"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c8243e301531f97de264740d6afa71de6781dd64"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["58bb411852ed0249bf624e9fc223b4973776d357","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"bd78ba595fa6cdd7fff930f26d154d13a823fa47":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a55bf71f91aeded06b44ad1abea6666ea168b697":["8da9a71da64ce12a97dcfcdd912893aeb1fa2981"],"c8243e301531f97de264740d6afa71de6781dd64":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"a8ed5da4b0191db6bc7f77f9feb35da6bd76f904":["e66a459d38c1c4a2f97128433dab546f683a9fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a55bf71f91aeded06b44ad1abea6666ea168b697"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"8c969f15cd04d31e520319c619a445ae21f02d72":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233"],"8da9a71da64ce12a97dcfcdd912893aeb1fa2981":["73450c0955930295d34703e7ddbfc6973b7a121a","b940572a59da1b42b6c20ab5278155b12816807a","bd78ba595fa6cdd7fff930f26d154d13a823fa47","a8ed5da4b0191db6bc7f77f9feb35da6bd76f904"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b73cc5cc718a5ccdc940b7e3ecbf17e6c145d233":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}