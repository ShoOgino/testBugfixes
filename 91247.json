{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,int,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int).mjava","sourceNew":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","sourceOld":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState, int docUpto, \n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, mergeState, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = holder.docMap.map(docUpto);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,int,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int).mjava","sourceNew":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","sourceOld":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState, int docUpto, \n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, mergeState, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = holder.docMap.map(docUpto);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,int,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int).mjava","sourceNew":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","sourceOld":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState, int docUpto, \n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, mergeState, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = holder.docMap.map(docUpto);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,int,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int).mjava","sourceNew":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","sourceOld":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState, int docUpto, \n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, mergeState, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = holder.docMap.map(docUpto);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","sourceNew":null,"sourceOld":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","sourceNew":null,"sourceOld":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#maybeApplyMergedDVUpdates(MergePolicy.OneMerge,MergeState,MergedDeletesAndUpdates,String[],DocValuesFieldUpdates[],DocValuesFieldUpdates.Iterator[],int,int).mjava","sourceNew":null,"sourceOld":"  private void maybeApplyMergedDVUpdates(MergePolicy.OneMerge merge, MergeState mergeState,\n      MergedDeletesAndUpdates holder, String[] mergingFields, DocValuesFieldUpdates[] dvFieldUpdates,\n      DocValuesFieldUpdates.Iterator[] updatesIters, int segment, int curDoc) throws IOException {\n    int newDoc = -1;\n    for (int idx = 0; idx < mergingFields.length; idx++) {\n      DocValuesFieldUpdates.Iterator updatesIter = updatesIters[idx];\n      if (updatesIter.doc() == curDoc) { // document has an update\n        if (holder.mergedDeletesAndUpdates == null) {\n          holder.init(readerPool, merge, false);\n        }\n        if (newDoc == -1) { // map once per all field updates, but only if there are any updates\n          newDoc = mergeState.docMaps[segment].get(curDoc);\n        }\n        DocValuesFieldUpdates dvUpdates = dvFieldUpdates[idx];\n        dvUpdates.add(newDoc, updatesIter.value());\n        updatesIter.nextDoc(); // advance to next document\n      } else {\n        assert updatesIter.doc() > curDoc : \"field=\" + mergingFields[idx] + \" updateDoc=\" + updatesIter.doc() + \" curDoc=\" + curDoc;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["d470c8182e92b264680e34081b75e70a9f2b3c89","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["d470c8182e92b264680e34081b75e70a9f2b3c89","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}