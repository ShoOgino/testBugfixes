{"path":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","sourceNew":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","sourceNew":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","sourceNew":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","sourceNew":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer()).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/codecs/perfield/TestPerFieldPostingsFormat#testMergeUnusedPerFieldCodec().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPerFieldCodecSupport#testMergeUnusedPerFieldCodec().mjava","sourceNew":"  /*\n   * Test that heterogeneous index segments are merge successfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setCodec(new MockCodec());\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /*\n   * Test is hetrogenous index segements are merge sucessfully\n   */\n  @Test\n  public void testMergeUnusedPerFieldCodec() throws IOException {\n    Directory dir = newDirectory();\n    CodecProvider provider = new MockCodecProvider();\n    IndexWriterConfig iwconf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random)).setOpenMode(OpenMode.CREATE).setCodecProvider(\n        provider);\n    IndexWriter writer = newWriter(dir, iwconf);\n    addDocs(writer, 10);\n    writer.commit();\n    addDocs3(writer, 10);\n    writer.commit();\n    addDocs2(writer, 10);\n    writer.commit();\n    assertEquals(30, writer.maxDoc());\n    _TestUtil.checkIndex(dir, provider);\n    writer.optimize();\n    assertEquals(30, writer.maxDoc());\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["85a883878c0af761245ab048babc63d099f835f3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["7b91922b55d15444d554721b352861d028eb8278","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}