{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      writer.setMergePolicy(ldmp);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      writer.setMergePolicy(ldmp);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(2));\n      LogDocMergePolicy ldmp = new LogDocMergePolicy(writer);\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      writer.setMergePolicy(ldmp);\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = newDirectory(random);\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory(random);\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"215a93b44b17a4528f3899859ea5e2fdc63b2ccb","date":1289498306,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockRAMDirectory dir = new MockRAMDirectory();\n\n      final Document doc = new Document();\n      doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n\n        sis = new SegmentInfos();\n        ((ConcurrentMergeScheduler) writer.getConfig().getMergeScheduler()).sync();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":null,"sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":null,"sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriter#testOptimizeMaxNumSegments2().mjava","sourceNew":null,"sourceOld":"    public void testOptimizeMaxNumSegments2() throws IOException {\n      MockDirectoryWrapper dir = newDirectory();\n\n      final Document doc = new Document();\n      doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED));\n\n      LogDocMergePolicy ldmp = new LogDocMergePolicy();\n      ldmp.setMinMergeDocs(1);\n      ldmp.setMergeFactor(4);\n      IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(2).setMergePolicy(ldmp).setMergeScheduler(new ConcurrentMergeScheduler()));\n\n      for(int iter=0;iter<10;iter++) {\n        for(int i=0;i<19;i++)\n          writer.addDocument(doc);\n\n        writer.commit();\n        writer.waitForMerges();\n        writer.commit();\n\n        SegmentInfos sis = new SegmentInfos();\n        sis.read(dir);\n\n        final int segCount = sis.size();\n\n        writer.optimize(7);\n        writer.commit();\n        writer.waitForMerges();\n\n        sis = new SegmentInfos();\n        sis.read(dir);\n        final int optSegCount = sis.size();\n\n        if (segCount < 7)\n          assertEquals(segCount, optSegCount);\n        else\n          assertEquals(7, optSegCount);\n      }\n      writer.close();\n      dir.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"215a93b44b17a4528f3899859ea5e2fdc63b2ccb":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"85a883878c0af761245ab048babc63d099f835f3":["132903c28af3aa6f67284b78de91c0f0a99488c2","215a93b44b17a4528f3899859ea5e2fdc63b2ccb"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["85a883878c0af761245ab048babc63d099f835f3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","215a93b44b17a4528f3899859ea5e2fdc63b2ccb"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["215a93b44b17a4528f3899859ea5e2fdc63b2ccb"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["215a93b44b17a4528f3899859ea5e2fdc63b2ccb","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["d572389229127c297dd1fa5ce4758e1cec41e799"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"215a93b44b17a4528f3899859ea5e2fdc63b2ccb":["85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"85a883878c0af761245ab048babc63d099f835f3":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["215a93b44b17a4528f3899859ea5e2fdc63b2ccb","85a883878c0af761245ab048babc63d099f835f3"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":[],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["962d04139994fce5193143ef35615499a9a96d78","79c2cb24929f2649a8875fb629086171f914d5ce","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}