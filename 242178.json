{"path":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","commits":[{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42a270f0606309d514faa19e1d021eb7b42305a6","date":1296033006,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":["9b80ad3438ccc68d1ef441add711ed2143324f14","226abb667f503323e0d9473af1883fa03ef3a3fd","c55a660bceaf72068ba1fbf6856388430c0a7334","a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"    /**\n     * Override if you wish to change what is extracted\n     *\n     * @param sgmFile\n     */\n    protected void extractFile(File sgmFile)\n    {\n        try\n        {\n            BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n            StringBuilder buffer = new StringBuilder(1024);\n            StringBuilder outBuffer = new StringBuilder(1024);\n\n            String line = null;\n            int docNumber = 0;\n            while ((line = reader.readLine()) != null)\n            {\n                //when we see a closing reuters tag, flush the file\n\n                if (line.indexOf(\"</REUTERS\") == -1) {\n                    //Replace the SGM escape sequences\n\n                    buffer.append(line).append(' ');//accumulate the strings for now, then apply regular expression to get the pieces,\n                }\n                else\n                {\n                    //Extract the relevant pieces and write to a file in the output dir\n                    Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n                    while (matcher.find())\n                    {\n                        for (int i = 1; i <= matcher.groupCount(); i++)\n                        {\n                            if (matcher.group(i) != null)\n                            {\n                                outBuffer.append(matcher.group(i));\n                            }\n                        }\n                        outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n                    }\n                    String out = outBuffer.toString();\n                    for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++)\n                    {\n                        out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n                    }\n                    File outFile = new File(outputDir, sgmFile.getName() + \"-\" + (docNumber++) + \".txt\");\n                    //System.out.println(\"Writing \" + outFile);\n                    FileWriter writer = new FileWriter(outFile);\n                    writer.write(out);\n                    writer.close();\n                    outBuffer.setLength(0);\n                    buffer.setLength(0);\n                }\n            }\n            reader.close();\n        }\n\n        catch (\n                IOException e\n                )\n\n        {\n            throw new RuntimeException(e);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters#extractFile(File).mjava","sourceNew":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /**\n   * Override if you wish to change what is extracted\n   * \n   * @param sgmFile\n   */\n  protected void extractFile(File sgmFile) {\n    try {\n      BufferedReader reader = new BufferedReader(new FileReader(sgmFile));\n\n      StringBuilder buffer = new StringBuilder(1024);\n      StringBuilder outBuffer = new StringBuilder(1024);\n\n      String line = null;\n      int docNumber = 0;\n      while ((line = reader.readLine()) != null) {\n        // when we see a closing reuters tag, flush the file\n\n        if (line.indexOf(\"</REUTERS\") == -1) {\n          // Replace the SGM escape sequences\n\n          buffer.append(line).append(' ');// accumulate the strings for now,\n                                          // then apply regular expression to\n                                          // get the pieces,\n        } else {\n          // Extract the relevant pieces and write to a file in the output dir\n          Matcher matcher = EXTRACTION_PATTERN.matcher(buffer);\n          while (matcher.find()) {\n            for (int i = 1; i <= matcher.groupCount(); i++) {\n              if (matcher.group(i) != null) {\n                outBuffer.append(matcher.group(i));\n              }\n            }\n            outBuffer.append(LINE_SEPARATOR).append(LINE_SEPARATOR);\n          }\n          String out = outBuffer.toString();\n          for (int i = 0; i < META_CHARS_SERIALIZATIONS.length; i++) {\n            out = out.replaceAll(META_CHARS_SERIALIZATIONS[i], META_CHARS[i]);\n          }\n          File outFile = new File(outputDir, sgmFile.getName() + \"-\"\n              + (docNumber++) + \".txt\");\n          // System.out.println(\"Writing \" + outFile);\n          FileWriter writer = new FileWriter(outFile);\n          writer.write(out);\n          writer.close();\n          outBuffer.setLength(0);\n          buffer.setLength(0);\n        }\n      }\n      reader.close();\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["42a270f0606309d514faa19e1d021eb7b42305a6"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","42a270f0606309d514faa19e1d021eb7b42305a6"],"42a270f0606309d514faa19e1d021eb7b42305a6":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","42a270f0606309d514faa19e1d021eb7b42305a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","42a270f0606309d514faa19e1d021eb7b42305a6","868da859b43505d9d2a023bfeae6dd0c795f5295"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","868da859b43505d9d2a023bfeae6dd0c795f5295"],"42a270f0606309d514faa19e1d021eb7b42305a6":["b89678825b68eccaf09e6ab71675fc0b0af1e099","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}