{"path":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","commits":[{"id":"232d48b2fd10ac5189a0ac4480ace7421be9de93","date":1334848212,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      try {\n        Class<?> implClazz = Class.forName(implName);\n        if (!PreAnalyzedParser.class.isAssignableFrom(implClazz)) {\n          throw new Exception(\"must implement \" + PreAnalyzedParser.class.getName());\n        }\n        Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n        parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n      } catch (Exception e) {\n        LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName + \"' (\" +\n            e.getMessage() + \"), using default \" + DEFAULT_IMPL);\n        parser = new JsonPreAnalyzedParser();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6c7ac188e4a03a976c95993dc3cd292df966faa4","date":1365151572,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      try {\n        Class<?> implClazz = Class.forName(implName);\n        if (!PreAnalyzedParser.class.isAssignableFrom(implClazz)) {\n          throw new Exception(\"must implement \" + PreAnalyzedParser.class.getName());\n        }\n        Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n        parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n      } catch (Exception e) {\n        LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName + \"' (\" +\n            e.getMessage() + \"), using default \" + DEFAULT_IMPL);\n        parser = new JsonPreAnalyzedParser();\n      }\n    }\n  }\n\n","bugFix":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64618b89bf89407ea136da4c3c105afdb2edcd57","date":1395939316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e6076d5869e894e98558285d9c9be9179d93921","date":1404559951,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    analyzer = new SolrAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new PreAnalyzedTokenizer(parser));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n  }\n\n","bugFix":null,"bugIntro":["90092e3ad74adf68ec9507e7046fe5a39039964c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    analyzer = new SolrAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new PreAnalyzedTokenizer(parser));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    analyzer = new SolrAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new PreAnalyzedTokenizer(parser));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    analyzer = new SolrAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new PreAnalyzedTokenizer(parser));\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (\"json\".equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    analyzer = new SolrAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new PreAnalyzedTokenizer(parser));\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90092e3ad74adf68ec9507e7046fe5a39039964c","date":1453355496,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    preAnalyzer = new PreAnalyzedAnalyzer(parser);\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    analyzer = new SolrAnalyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        return new TokenStreamComponents(new PreAnalyzedTokenizer(parser));\n      }\n    };\n  }\n\n","bugFix":["6e6076d5869e894e98558285d9c9be9179d93921"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          log.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    preAnalyzer = new PreAnalyzedAnalyzer(parser);\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          LOG.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    preAnalyzer = new PreAnalyzedAnalyzer(parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9df8125ba9193a2e2e285ed92157810b1952a244","date":1587326330,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          log.warn(\"Can't use the configured PreAnalyzedParser class '{}', using defualt {}\"\n              , implName, DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    preAnalyzer = new PreAnalyzedAnalyzer(parser);\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          log.warn(\"Can't use the configured PreAnalyzedParser class '\" + implName +\n              \"', using default \" + DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    preAnalyzer = new PreAnalyzedAnalyzer(parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/PreAnalyzedField#init(IndexSchema,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getSolrClassLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          log.warn(\"Can't use the configured PreAnalyzedParser class '{}', using defualt {}\"\n              , implName, DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    preAnalyzer = new PreAnalyzedAnalyzer(parser);\n  }\n\n","sourceOld":"  @Override\n  public void init(IndexSchema schema, Map<String, String> args) {\n    super.init(schema, args);\n    String implName = args.get(PARSER_IMPL);\n    if (implName == null) {\n      parser = new JsonPreAnalyzedParser();\n    } else {\n      // short name\n      if (JSON.equalsIgnoreCase(implName)) {\n        parser = new JsonPreAnalyzedParser();\n      } else if (\"simple\".equalsIgnoreCase(implName)) {\n        parser = new SimplePreAnalyzedParser();\n      } else {\n        try {\n          Class<? extends PreAnalyzedParser> implClazz = schema.getResourceLoader().findClass(implName, PreAnalyzedParser.class);\n          Constructor<?> c = implClazz.getConstructor(new Class<?>[0]);\n          parser = (PreAnalyzedParser) c.newInstance(new Object[0]);\n        } catch (Exception e) {\n          log.warn(\"Can't use the configured PreAnalyzedParser class '{}', using defualt {}\"\n              , implName, DEFAULT_IMPL, e);\n          parser = new JsonPreAnalyzedParser();\n        }\n      }\n      args.remove(PARSER_IMPL);\n    }\n    // create Analyzer instance for reuse:\n    preAnalyzer = new PreAnalyzedAnalyzer(parser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["6c7ac188e4a03a976c95993dc3cd292df966faa4","64618b89bf89407ea136da4c3c105afdb2edcd57"],"90092e3ad74adf68ec9507e7046fe5a39039964c":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["9df8125ba9193a2e2e285ed92157810b1952a244"],"64618b89bf89407ea136da4c3c105afdb2edcd57":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"6e6076d5869e894e98558285d9c9be9179d93921":["64618b89bf89407ea136da4c3c105afdb2edcd57"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6e6076d5869e894e98558285d9c9be9179d93921"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["6e6076d5869e894e98558285d9c9be9179d93921","1390137e395d2f07f9ba5b8c43d293befe84d563"],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"9df8125ba9193a2e2e285ed92157810b1952a244":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["90092e3ad74adf68ec9507e7046fe5a39039964c"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"90092e3ad74adf68ec9507e7046fe5a39039964c":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"6c7ac188e4a03a976c95993dc3cd292df966faa4":["5eb2511ababf862ea11e10761c70ee560cd84510","64618b89bf89407ea136da4c3c105afdb2edcd57"],"64618b89bf89407ea136da4c3c105afdb2edcd57":["5eb2511ababf862ea11e10761c70ee560cd84510","6e6076d5869e894e98558285d9c9be9179d93921"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e6076d5869e894e98558285d9c9be9179d93921":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["90092e3ad74adf68ec9507e7046fe5a39039964c","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["232d48b2fd10ac5189a0ac4480ace7421be9de93"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"232d48b2fd10ac5189a0ac4480ace7421be9de93":["6c7ac188e4a03a976c95993dc3cd292df966faa4"],"9df8125ba9193a2e2e285ed92157810b1952a244":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9df8125ba9193a2e2e285ed92157810b1952a244"]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}