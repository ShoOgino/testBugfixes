{"path":"src/java/org/apache/lucene/index/MultiSegmentReader#doReopen(SegmentInfos).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#doReopen(SegmentInfos).mjava","pathOld":"/dev/null","sourceNew":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos) throws CorruptIndexException, IOException {\n    if (infos.size() == 1) {\n      // The index has only one segment now, so we can't refresh the MultiSegmentReader.\n      // Return a new SegmentReader instead\n      SegmentReader newReader = SegmentReader.get(infos, infos.info(0), false);\n      return newReader;\n    } else {\n      return new MultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache);\n    }            \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#doReopen(SegmentInfos).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#doReopen(SegmentInfos).mjava","sourceNew":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos) throws CorruptIndexException, IOException {\n    if (infos.size() == 1) {\n      // The index has only one segment now, so we can't refresh the MultiSegmentReader.\n      // Return a new [ReadOnly]SegmentReader instead\n      return SegmentReader.get(readOnly, infos, infos.info(0), false);\n    } else if (readOnly) {\n      return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache);\n    } else {\n      return new MultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache, false);\n    }            \n  }\n\n","sourceOld":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos) throws CorruptIndexException, IOException {\n    if (infos.size() == 1) {\n      // The index has only one segment now, so we can't refresh the MultiSegmentReader.\n      // Return a new SegmentReader instead\n      SegmentReader newReader = SegmentReader.get(infos, infos.info(0), false);\n      return newReader;\n    } else {\n      return new MultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache);\n    }            \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/MultiSegmentReader#doReopen(SegmentInfos,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/MultiSegmentReader#doReopen(SegmentInfos).mjava","sourceNew":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    if (infos.size() == 1) {\n      // The index has only one segment now, so we can't refresh the MultiSegmentReader.\n      // Return a new [ReadOnly]SegmentReader instead\n      return SegmentReader.get(openReadOnly, infos, infos.info(0), false);\n    } else if (openReadOnly) {\n      return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache, doClone);\n    } else {\n      return new MultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache, false, doClone);\n    }            \n  }\n\n","sourceOld":"  protected synchronized DirectoryIndexReader doReopen(SegmentInfos infos) throws CorruptIndexException, IOException {\n    if (infos.size() == 1) {\n      // The index has only one segment now, so we can't refresh the MultiSegmentReader.\n      // Return a new [ReadOnly]SegmentReader instead\n      return SegmentReader.get(readOnly, infos, infos.info(0), false);\n    } else if (readOnly) {\n      return new ReadOnlyMultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache);\n    } else {\n      return new MultiSegmentReader(directory, infos, closeDirectory, subReaders, starts, normsCache, false);\n    }            \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["5712975970a595c28f1988efd007e1b8a617a92f"],"5712975970a595c28f1988efd007e1b8a617a92f":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6db660b56f04fdb2853d25cdee8ee0d36559a521"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5712975970a595c28f1988efd007e1b8a617a92f":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["5712975970a595c28f1988efd007e1b8a617a92f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}