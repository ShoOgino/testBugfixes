{"path":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#getDocIdSet(LeafReaderContext).mjava","commits":[{"id":"b012914a8110b2ff1d075ed1ef72aa57084d4897","date":1414685177,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#getDocIdSet(LeafReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BitDocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    return (BitDocIdSet) filter.getDocIdSet(context, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#getDocIdSet(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#getDocIdSet(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BitDocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet == null) {\n      docIdSet = filter.getDocIdSet(context, null);\n      docIdSet = docIdSetToCache(docIdSet, reader);\n      if (docIdSet == null) {\n        // We use EMPTY as a sentinel for the empty set, which is cacheable\n        docIdSet = DocIdSet.EMPTY;\n      }\n      cache.put(key, docIdSet);\n    }\n    return docIdSet == DocIdSet.EMPTY ? null : (BitDocIdSet) docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public BitDocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    return (BitDocIdSet) filter.getDocIdSet(context, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#getDocIdSet(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#getDocIdSet(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BitDocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet == null) {\n      docIdSet = filter.getDocIdSet(context, null);\n      docIdSet = docIdSetToCache(docIdSet, reader);\n      if (docIdSet == null) {\n        // We use EMPTY as a sentinel for the empty set, which is cacheable\n        docIdSet = DocIdSet.EMPTY;\n      }\n      cache.put(key, docIdSet);\n    }\n    return docIdSet == DocIdSet.EMPTY ? null : (BitDocIdSet) docIdSet;\n  }\n\n","sourceOld":"  @Override\n  public BitDocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    return (BitDocIdSet) filter.getDocIdSet(context, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b3915945926c0bf7def01b0c504977709d3aed3","date":1436197708,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/QueryBitSetProducer#getBitSet(LeafReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/BitDocIdSetCachingWrapperFilter#getDocIdSet(LeafReaderContext).mjava","sourceNew":"  @Override\n  public BitSet getBitSet(LeafReaderContext context) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet == null) {\n      final IndexReaderContext topLevelContext = ReaderUtil.getTopLevelContext(context);\n      final IndexSearcher searcher = new IndexSearcher(topLevelContext);\n      searcher.setQueryCache(null);\n      final Weight weight = searcher.createNormalizedWeight(query, false);\n      final DocIdSetIterator it = weight.scorer(context);\n\n      BitDocIdSet.Builder builder = new BitDocIdSet.Builder(context.reader().maxDoc());\n      if (it != null) {\n        builder.or(it);\n      }\n      docIdSet = builder.build();\n      if (docIdSet == null) {\n        // We use EMPTY as a sentinel for the empty set, which is cacheable\n        docIdSet = DocIdSet.EMPTY;\n      }\n      cache.put(key, docIdSet);\n    }\n    return docIdSet == DocIdSet.EMPTY ? null : ((BitDocIdSet) docIdSet).bits();\n  }\n\n","sourceOld":"  @Override\n  public BitDocIdSet getDocIdSet(LeafReaderContext context) throws IOException {\n    final LeafReader reader = context.reader();\n    final Object key = reader.getCoreCacheKey();\n\n    DocIdSet docIdSet = cache.get(key);\n    if (docIdSet == null) {\n      docIdSet = filter.getDocIdSet(context, null);\n      docIdSet = docIdSetToCache(docIdSet, reader);\n      if (docIdSet == null) {\n        // We use EMPTY as a sentinel for the empty set, which is cacheable\n        docIdSet = DocIdSet.EMPTY;\n      }\n      cache.put(key, docIdSet);\n    }\n    return docIdSet == DocIdSet.EMPTY ? null : (BitDocIdSet) docIdSet;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["b012914a8110b2ff1d075ed1ef72aa57084d4897","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b3915945926c0bf7def01b0c504977709d3aed3":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4b3915945926c0bf7def01b0c504977709d3aed3"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b012914a8110b2ff1d075ed1ef72aa57084d4897":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4b3915945926c0bf7def01b0c504977709d3aed3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b012914a8110b2ff1d075ed1ef72aa57084d4897"],"4b3915945926c0bf7def01b0c504977709d3aed3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}