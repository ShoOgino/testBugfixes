{"path":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testCheckIndexIncludesPoints().mjava","commits":[{"id":"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","date":1457539417,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testCheckIndexIncludesPoints().mjava","pathOld":"/dev/null","sourceNew":"  public void testCheckIndexIncludesPoints() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int1\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int1\", 44));\n    doc.add(new IntPoint(\"int2\", -17));\n    w.addDocument(doc);\n    w.close();\n\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    CheckIndex.Status status = TestUtil.checkIndex(dir, false, true, output);\n    assertEquals(1, status.segmentInfos.size());\n    CheckIndex.Status.SegmentInfoStatus segStatus = status.segmentInfos.get(0);\n    // total 3 point values were index:\n    assertEquals(3, segStatus.pointsStatus.totalValuePoints);\n    // ... across 2 fields:\n    assertEquals(2, segStatus.pointsStatus.totalValueFields);\n\n    // Make sure CheckIndex in fact declares that it is testing points!\n    assertTrue(output.toString(IOUtils.UTF_8).contains(\"test: points...\"));\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d77dafd89756a5161d244985903e3487ca109182","date":1548679743,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testCheckIndexIncludesPoints().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPointValues#testCheckIndexIncludesPoints().mjava","sourceNew":"  public void testCheckIndexIncludesPoints() throws Exception {\n    Directory dir = new ByteBuffersDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int1\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int1\", 44));\n    doc.add(new IntPoint(\"int2\", -17));\n    w.addDocument(doc);\n    w.close();\n\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    CheckIndex.Status status = TestUtil.checkIndex(dir, false, true, output);\n    assertEquals(1, status.segmentInfos.size());\n    CheckIndex.Status.SegmentInfoStatus segStatus = status.segmentInfos.get(0);\n    // total 3 point values were index:\n    assertEquals(3, segStatus.pointsStatus.totalValuePoints);\n    // ... across 2 fields:\n    assertEquals(2, segStatus.pointsStatus.totalValueFields);\n\n    // Make sure CheckIndex in fact declares that it is testing points!\n    assertTrue(output.toString(IOUtils.UTF_8).contains(\"test: points...\"));\n    dir.close();\n  }\n\n","sourceOld":"  public void testCheckIndexIncludesPoints() throws Exception {\n    Directory dir = new RAMDirectory();\n    IndexWriter w = new IndexWriter(dir, new IndexWriterConfig(null));\n    Document doc = new Document();\n    doc.add(new IntPoint(\"int1\", 17));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new IntPoint(\"int1\", 44));\n    doc.add(new IntPoint(\"int2\", -17));\n    w.addDocument(doc);\n    w.close();\n\n    ByteArrayOutputStream output = new ByteArrayOutputStream();\n    CheckIndex.Status status = TestUtil.checkIndex(dir, false, true, output);\n    assertEquals(1, status.segmentInfos.size());\n    CheckIndex.Status.SegmentInfoStatus segStatus = status.segmentInfos.get(0);\n    // total 3 point values were index:\n    assertEquals(3, segStatus.pointsStatus.totalValuePoints);\n    // ... across 2 fields:\n    assertEquals(2, segStatus.pointsStatus.totalValueFields);\n\n    // Make sure CheckIndex in fact declares that it is testing points!\n    assertTrue(output.toString(IOUtils.UTF_8).contains(\"test: points...\"));\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d77dafd89756a5161d244985903e3487ca109182":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d77dafd89756a5161d244985903e3487ca109182"]},"commit2Childs":{"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["d77dafd89756a5161d244985903e3487ca109182"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"d77dafd89756a5161d244985903e3487ca109182":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}