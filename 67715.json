{"path":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set).mjava","commits":[{"id":"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584","date":1254399783,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer, infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set[SegmentInfo]).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/index/BalancedSegmentMergePolicy#findMergesForOptimize(SegmentInfos,int,Set).mjava","sourceNew":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set<SegmentInfo> segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer, infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findMergesForOptimize(SegmentInfos infos, int maxNumSegments, Set segmentsToOptimize) throws IOException {\n    \n    assert maxNumSegments > 0;\n\n    MergeSpecification spec = null;\n\n    if (!isOptimized(infos, writer, maxNumSegments, segmentsToOptimize)) {\n\n      // Find the newest (rightmost) segment that needs to\n      // be optimized (other segments may have been flushed\n      // since optimize started):\n      int last = infos.size();\n      while(last > 0) {\n\n        final SegmentInfo info = infos.info(--last);\n        if (segmentsToOptimize.contains(info)) {\n\n          last++;\n          break;\n        }\n      }\n\n      if (last > 0) {\n\n        if (maxNumSegments == 1) {\n\n          // Since we must optimize down to 1 segment, the\n          // choice is simple:\n          boolean useCompoundFile = getUseCompoundFile();\n          if (last > 1 || !isOptimized(writer, infos.info(0))) {\n\n            spec = new MergeSpecification();\n            spec.add(new OneMerge(infos.range(0, last), useCompoundFile));\n          }\n        } else if (last > maxNumSegments) {\n\n          // find most balanced merges\n          spec = findBalancedMerges(infos, last, maxNumSegments, _partialExpunge);\n        }\n      }\n    }\n    return spec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584"]},"commit2Childs":{"e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8c13adcc1a9fdfd6a4ac19cc83b46541d3d5584"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}