{"path":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#getSampleSet(ScoredDocIDs).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#getSampleSet(ScoredDocIDs).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/sampling/Sampler#getSampleSet(ScoredDocIDs).mjava","sourceNew":"  /**\n   * Compute a sample set out of the input set, based on the {@link SamplingParams#getSampleRatio()}\n   * in effect. Sub classes can override to alter how the sample set is\n   * computed.\n   * <p> \n   * If the input set is of size smaller than {@link SamplingParams#getMinSampleSize()}, \n   * the input set is returned (no sampling takes place).\n   * <p>\n   * Other than that, the returned set size will not be larger than {@link SamplingParams#getMaxSampleSize()} \n   * nor smaller than {@link SamplingParams#getMinSampleSize()}.  \n   * @param docids\n   *          full set of matching documents out of which a sample is needed.\n   */\n  public SampleResult getSampleSet(ScoredDocIDs docids) throws IOException {\n    if (!shouldSample(docids)) {\n      return new SampleResult(docids, 1d);\n    }\n\n    int actualSize = docids.size();\n    int sampleSetSize = (int) (actualSize * samplingParams.getSampleRatio());\n    sampleSetSize = Math.max(sampleSetSize, samplingParams.getMinSampleSize());\n    sampleSetSize = Math.min(sampleSetSize, samplingParams.getMaxSampleSize());\n\n    return createSample(docids, actualSize, sampleSetSize);\n  }\n\n","sourceOld":"  /**\n   * Compute a sample set out of the input set, based on the {@link SamplingParams#getSampleRatio()}\n   * in effect. Sub classes can override to alter how the sample set is\n   * computed.\n   * <p> \n   * If the input set is of size smaller than {@link SamplingParams#getMinSampleSize()}, \n   * the input set is returned (no sampling takes place).\n   * <p>\n   * Other than that, the returned set size will not be larger than {@link SamplingParams#getMaxSampleSize()} \n   * nor smaller than {@link SamplingParams#getMinSampleSize()}.  \n   * @param docids\n   *          full set of matching documents out of which a sample is needed.\n   */\n  public SampleResult getSampleSet(ScoredDocIDs docids) throws IOException {\n    if (!shouldSample(docids)) {\n      return new SampleResult(docids, 1d);\n    }\n\n    int actualSize = docids.size();\n    int sampleSetSize = (int) (actualSize * samplingParams.getSampleRatio());\n    sampleSetSize = Math.max(sampleSetSize, samplingParams.getMinSampleSize());\n    sampleSetSize = Math.min(sampleSetSize, samplingParams.getMaxSampleSize());\n\n    return createSample(docids, actualSize, sampleSetSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#getSampleSet(ScoredDocIDs).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute a sample set out of the input set, based on the {@link SamplingParams#getSampleRatio()}\n   * in effect. Sub classes can override to alter how the sample set is\n   * computed.\n   * <p> \n   * If the input set is of size smaller than {@link SamplingParams#getMinSampleSize()}, \n   * the input set is returned (no sampling takes place).\n   * <p>\n   * Other than that, the returned set size will not be larger than {@link SamplingParams#getMaxSampleSize()} \n   * nor smaller than {@link SamplingParams#getMinSampleSize()}.  \n   * @param docids\n   *          full set of matching documents out of which a sample is needed.\n   */\n  public SampleResult getSampleSet(ScoredDocIDs docids) throws IOException {\n    if (!shouldSample(docids)) {\n      return new SampleResult(docids, 1d);\n    }\n\n    int actualSize = docids.size();\n    int sampleSetSize = (int) (actualSize * samplingParams.getSampleRatio());\n    sampleSetSize = Math.max(sampleSetSize, samplingParams.getMinSampleSize());\n    sampleSetSize = Math.min(sampleSetSize, samplingParams.getMaxSampleSize());\n\n    return createSample(docids, actualSize, sampleSetSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/sampling/Sampler#getSampleSet(ScoredDocIDs).mjava","sourceNew":null,"sourceOld":"  /**\n   * Compute a sample set out of the input set, based on the {@link SamplingParams#getSampleRatio()}\n   * in effect. Sub classes can override to alter how the sample set is\n   * computed.\n   * <p> \n   * If the input set is of size smaller than {@link SamplingParams#getMinSampleSize()}, \n   * the input set is returned (no sampling takes place).\n   * <p>\n   * Other than that, the returned set size will not be larger than {@link SamplingParams#getMaxSampleSize()} \n   * nor smaller than {@link SamplingParams#getMinSampleSize()}.  \n   * @param docids\n   *          full set of matching documents out of which a sample is needed.\n   */\n  public SampleResult getSampleSet(ScoredDocIDs docids) throws IOException {\n    if (!shouldSample(docids)) {\n      return new SampleResult(docids, 1d);\n    }\n\n    int actualSize = docids.size();\n    int sampleSetSize = (int) (actualSize * samplingParams.getSampleRatio());\n    sampleSetSize = Math.max(sampleSetSize, samplingParams.getMinSampleSize());\n    sampleSetSize = Math.min(sampleSetSize, samplingParams.getMaxSampleSize());\n\n    return createSample(docids, actualSize, sampleSetSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["607428da722dcb3e86bbd11c63de8986e6275c36","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}