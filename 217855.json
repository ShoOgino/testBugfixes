{"path":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#merge(MergeState).mjava","commits":[{"id":"4522ffca5a1f420c6a02198c9332d7c596a30ca5","date":1457270822,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointsReader reader : mergeState.pointsReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointReader reader : mergeState.pointReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointsReader reader : mergeState.pointsReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDataDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointsReader reader : mergeState.pointsReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#merge(MergeState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/PointsWriter#merge(MergeState).mjava","sourceNew":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointsReader reader : mergeState.pointsReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","sourceOld":"  /** Default merge implementation to merge incoming points readers by visiting all their points and\n   *  adding to this writer */\n  public void merge(MergeState mergeState) throws IOException {\n    // check each incoming reader\n    for (PointsReader reader : mergeState.pointsReaders) {\n      if (reader != null) {\n        reader.checkIntegrity();\n      }\n    }\n    // merge field at a time\n    for (FieldInfo fieldInfo : mergeState.mergeFieldInfos) {\n      if (fieldInfo.getPointDataDimensionCount() != 0) {\n        mergeOneField(mergeState, fieldInfo);\n      }\n    }\n    finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"4522ffca5a1f420c6a02198c9332d7c596a30ca5":["f6652c943595e92c187ee904c382863013eae28f"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4522ffca5a1f420c6a02198c9332d7c596a30ca5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}