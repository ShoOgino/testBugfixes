{"path":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","pathOld":"modules/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","sourceNew":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.close();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.close();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","sourceNew":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.close();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","sourceNew":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.close();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.shutdown();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f78e5763f288fef7c1cc1ebd2530195ce46b5b28","date":1412245226,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","sourceNew":null,"sourceOld":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.close();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/test/org/apache/lucene/queries/ChainedFilterTest#testWithCachingFilter().mjava","sourceNew":null,"sourceOld":"  public void testWithCachingFilter() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    IndexReader reader = writer.getReader();\n    writer.close();\n  \n    IndexSearcher searcher = newSearcher(reader);\n  \n    Query query = new TermQuery(new Term(\"none\", \"none\"));\n  \n    QueryWrapperFilter queryFilter = new QueryWrapperFilter(query);\n    CachingWrapperFilter cachingFilter = new CachingWrapperFilter(queryFilter);\n  \n    searcher.search(query, cachingFilter, 1);\n  \n    CachingWrapperFilter cachingFilter2 = new CachingWrapperFilter(queryFilter);\n    Filter[] chain = new Filter[2];\n    chain[0] = cachingFilter;\n    chain[1] = cachingFilter2;\n    ChainedFilter cf = new ChainedFilter(chain);\n  \n    // throws java.lang.ClassCastException: org.apache.lucene.util.OpenBitSet cannot be cast to java.util.BitSet\n    searcher.search(new MatchAllDocsQuery(), cf, 1);\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["d0ef034a4f10871667ae75181537775ddcf8ade4","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f78e5763f288fef7c1cc1ebd2530195ce46b5b28"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["d9a47902d6207303f5ed3e7aaca62ca33433af66","f78e5763f288fef7c1cc1ebd2530195ce46b5b28"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"f78e5763f288fef7c1cc1ebd2530195ce46b5b28":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}