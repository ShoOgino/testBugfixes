{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      DistributedQueue inQueue = Overseer.getStateUpdateQueue(ocmh.zkStateReader.getZkClient());\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      inQueue.offer(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(5, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n      boolean removed = false;\n      while (!timeout.hasTimedOut()) {\n        timeout.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          timeout.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      DistributedQueue inQueue = Overseer.getStateUpdateQueue(ocmh.zkStateReader.getZkClient());\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      inQueue.offer(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(5, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n      boolean removed = false;\n      while (!timeout.hasTimedOut()) {\n        timeout.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          timeout.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      DistributedQueue inQueue = Overseer.getStateUpdateQueue(ocmh.zkStateReader.getZkClient());\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      inQueue.offer(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(5, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n      boolean removed = false;\n      while (!timeout.hasTimedOut()) {\n        timeout.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          timeout.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      DistributedQueue inQueue = Overseer.getStateUpdateQueue(ocmh.zkStateReader.getZkClient());\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      inQueue.offer(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(5, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n      boolean removed = false;\n      while (!timeout.hasTimedOut()) {\n        timeout.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          timeout.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (l, c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      DistributedQueue inQueue = Overseer.getStateUpdateQueue(ocmh.zkStateReader.getZkClient());\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      inQueue.offer(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(5, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n\n      // wait for a while until we don't see the shard\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS, timeSource);\n      boolean removed = false;\n      while (!timeout.hasTimedOut()) {\n        timeout.sleep(100);\n        DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n        removed = collection.getSlice(sliceId) == null;\n        if (removed) {\n          timeout.sleep(100); // just a bit of time so it's more likely other readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collectionName + \" shard: \" + sliceId);\n      }\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":["092c3ae5fefa024f6d0c427be5f23dd3bfbdd20c","04c8df3f10a676c3de5dbf390f17a2de2d45cacd","d76e8ac2404f9119d48b15059f36129cb99a56ce","dbf528c0e702c5cbd1339b2da1cdc823fd44a925","439c63ae5d22132fca810a0029a854e97d2c1a3e","1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","19498030e0adab22f604f935cae3c03dcf0952a6","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59bad1cc1e7f90125a140496e79b06afcedb68ec","date":1554915399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (l, c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String collectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (l, c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b366e7dd3172289251a86be96031af4002cd19c","date":1560790783,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (l, c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c","date":1562161956,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    String collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4abf821a41a2fdca2a1dea148999931d22e20529","date":1587749643,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        if (log.isInfoEnabled()) {\n          log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        }\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: {} , shard: {}\", collectionName, sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: \" + r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: \" + collectionName + \", shard: \" + sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86968c6cf51846df861b8f29bd85b6d9a7c9f19c","date":1591481497,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        if (log.isInfoEnabled()) {\n          log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: {} , shard: {}\", collectionName, sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void call(ClusterState clusterState, ZkNodeProps message, NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        if (log.isInfoEnabled()) {\n          log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        }\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: {} , shard: {}\", collectionName, sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        if (log.isInfoEnabled()) {\n          log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: {} , shard: {}\", collectionName, sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        if (log.isInfoEnabled()) {\n          log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: {} , shard: {}\", collectionName, sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/DeleteShardCmd#call(ClusterState,CloudConfig,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState clusterState, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        if (log.isInfoEnabled()) {\n          log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: {} , shard: {}\", collectionName, sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void call(ClusterState clusterState, CloudConfig cloudConfig, ZkNodeProps message, @SuppressWarnings({\"rawtypes\"})NamedList results) throws Exception {\n    String extCollectionName = message.getStr(ZkStateReader.COLLECTION_PROP);\n    String sliceId = message.getStr(ZkStateReader.SHARD_ID_PROP);\n\n    boolean followAliases = message.getBool(FOLLOW_ALIASES, false);\n    String collectionName;\n    if (followAliases) {\n      collectionName = ocmh.cloudManager.getClusterStateProvider().resolveSimpleAlias(extCollectionName);\n    } else {\n      collectionName = extCollectionName;\n    }\n\n    log.info(\"Delete shard invoked\");\n    Slice slice = clusterState.getCollection(collectionName).getSlice(sliceId);\n    if (slice == null) throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n        \"No shard with name \" + sliceId + \" exists for collection \" + collectionName);\n\n    // For now, only allow for deletions of Inactive slices or custom hashes (range==null).\n    // TODO: Add check for range gaps on Slice deletion\n    final Slice.State state = slice.getState();\n    if (!(slice.getRange() == null || state == Slice.State.INACTIVE || state == Slice.State.RECOVERY\n        || state == Slice.State.CONSTRUCTION) || state == Slice.State.RECOVERY_FAILED) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The slice: \" + slice.getName() + \" is currently \" + state\n          + \". Only non-active (or custom-hashed) slices can be deleted.\");\n    }\n\n    if (state == Slice.State.RECOVERY)  {\n      // mark the slice as 'construction' and only then try to delete the cores\n      // see SOLR-9455\n      Map<String, Object> propMap = new HashMap<>();\n      propMap.put(Overseer.QUEUE_OPERATION, OverseerAction.UPDATESHARDSTATE.toLower());\n      propMap.put(sliceId, Slice.State.CONSTRUCTION.toString());\n      propMap.put(ZkStateReader.COLLECTION_PROP, collectionName);\n      ZkNodeProps m = new ZkNodeProps(propMap);\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n    }\n\n    String asyncId = message.getStr(ASYNC);\n\n    try {\n      List<ZkNodeProps> replicas = getReplicasForSlice(collectionName, slice);\n      CountDownLatch cleanupLatch = new CountDownLatch(replicas.size());\n      for (ZkNodeProps r : replicas) {\n        final ZkNodeProps replica = r.plus(message.getProperties()).plus(\"parallel\", \"true\").plus(ASYNC, asyncId);\n        if (log.isInfoEnabled()) {\n          log.info(\"Deleting replica for collection={} shard={} on node={}\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(CoreAdminParams.NODE));\n        }\n        @SuppressWarnings({\"rawtypes\"})\n        NamedList deleteResult = new NamedList();\n        try {\n          ((DeleteReplicaCmd)ocmh.commandMap.get(DELETEREPLICA)).deleteReplica(clusterState, replica, deleteResult, () -> {\n            cleanupLatch.countDown();\n            if (deleteResult.get(\"failure\") != null) {\n              synchronized (results) {\n                results.add(\"failure\", String.format(Locale.ROOT, \"Failed to delete replica for collection=%s shard=%s\" +\n                    \" on node=%s\", replica.getStr(COLLECTION_PROP), replica.getStr(SHARD_ID_PROP), replica.getStr(NODE_NAME_PROP)));\n              }\n            }\n            @SuppressWarnings({\"rawtypes\"})\n            SimpleOrderedMap success = (SimpleOrderedMap) deleteResult.get(\"success\");\n            if (success != null) {\n              synchronized (results)  {\n                results.add(\"success\", success);\n              }\n            }\n          });\n        } catch (KeeperException e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n        } catch (Exception e) {\n          log.warn(\"Error deleting replica: {}\", r, e);\n          cleanupLatch.countDown();\n          throw e;\n        }\n      }\n      log.debug(\"Waiting for delete shard action to complete\");\n      cleanupLatch.await(1, TimeUnit.MINUTES);\n\n      ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, DELETESHARD.toLower(), ZkStateReader.COLLECTION_PROP,\n          collectionName, ZkStateReader.SHARD_ID_PROP, sliceId);\n      ZkStateReader zkStateReader = ocmh.zkStateReader;\n      ocmh.overseer.offerStateUpdate(Utils.toJSON(m));\n\n      zkStateReader.waitForState(collectionName, 45, TimeUnit.SECONDS, (c) -> c.getSlice(sliceId) == null);\n\n      log.info(\"Successfully deleted collection: {} , shard: {}\", collectionName, sliceId);\n    } catch (SolrException e) {\n      throw e;\n    } catch (Exception e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n          \"Error executing delete operation for collection: \" + collectionName + \" shard: \" + sliceId, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"4abf821a41a2fdca2a1dea148999931d22e20529":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b366e7dd3172289251a86be96031af4002cd19c":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["7b366e7dd3172289251a86be96031af4002cd19c"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b94236357aaa22b76c10629851fe4e376e0cea82":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"4abf821a41a2fdca2a1dea148999931d22e20529":["86968c6cf51846df861b8f29bd85b6d9a7c9f19c"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"86968c6cf51846df861b8f29bd85b6d9a7c9f19c":["c526352db87264a72a7a9ad68c1b769b81e54305"],"59bad1cc1e7f90125a140496e79b06afcedb68ec":["7b366e7dd3172289251a86be96031af4002cd19c"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["59bad1cc1e7f90125a140496e79b06afcedb68ec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"7b366e7dd3172289251a86be96031af4002cd19c":["d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c"],"d20dc32a40c1bd7b8b8e2354e6b0b9f956ef758c":["4abf821a41a2fdca2a1dea148999931d22e20529"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}