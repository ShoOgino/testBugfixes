{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","commits":[{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int numSuggestions = atLeast(20);\n    int numContexts = atLeast(5);\n\n    Set<Integer> seenWeights = new HashSet<>();\n    List<Entry> expectedEntries = new ArrayList<>();\n    List<CharSequence> contexts = new ArrayList<>();\n    for (int i = 1; i <= numContexts; i++) {\n      CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n      contexts.add(context);\n      for (int j = 1; j <= numSuggestions; j++) {\n        String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n        int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n        while (seenWeights.contains(weight)) {\n          weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n        }\n        seenWeights.add(weight);\n        Document document = new Document();\n        document.add(new ContextSuggestField(\"suggest_field\", Collections.singletonList(context), suggestion, weight));\n        iw.addDocument(document);\n        expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n      }\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n    Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n    ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n      @Override\n      public int compare(Entry o1, Entry o2) {\n        int cmp = Float.compare(o2.value, o1.value);\n        if (cmp != 0) {\n          return cmp;\n        } else {\n          return o1.output.compareTo(o2.output);\n        }\n      }\n    });\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n    ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n    for (int i = 0; i < contexts.size(); i++) {\n      query.addContext(contexts.get(i), i + 1);\n    }\n    TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4);\n    assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["13975b8f26b2a9600a5333689974923927b7b8ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13975b8f26b2a9600a5333689974923927b7b8ab","date":1432835215,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","sourceNew":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", Collections.singletonList(context), suggestion, weight));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"));\n    int numSuggestions = atLeast(20);\n    int numContexts = atLeast(5);\n\n    Set<Integer> seenWeights = new HashSet<>();\n    List<Entry> expectedEntries = new ArrayList<>();\n    List<CharSequence> contexts = new ArrayList<>();\n    for (int i = 1; i <= numContexts; i++) {\n      CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n      contexts.add(context);\n      for (int j = 1; j <= numSuggestions; j++) {\n        String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n        int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n        while (seenWeights.contains(weight)) {\n          weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n        }\n        seenWeights.add(weight);\n        Document document = new Document();\n        document.add(new ContextSuggestField(\"suggest_field\", Collections.singletonList(context), suggestion, weight));\n        iw.addDocument(document);\n        expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n      }\n      if (rarely()) {\n        iw.commit();\n      }\n    }\n    Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n    ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n      @Override\n      public int compare(Entry o1, Entry o2) {\n        int cmp = Float.compare(o2.value, o1.value);\n        if (cmp != 0) {\n          return cmp;\n        } else {\n          return o1.output.compareTo(o2.output);\n        }\n      }\n    });\n\n    DirectoryReader reader = iw.getReader();\n    SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n    ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n    for (int i = 0; i < contexts.size(); i++) {\n      query.addContext(contexts.get(i), i + 1);\n    }\n    TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4);\n    assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66756ce4574b3c2fdc15740945140daf28792f5f","date":1433261481,"type":3,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","sourceNew":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", Collections.singletonList(context), suggestion, weight));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"902a92b60648a8925bfd9bb53a78669cd2ea98fd","date":1487797466,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","sourceNew":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4, false);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","sourceNew":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4, false);\n        assertSuggestions(suggest, ArrayUtil.copyOfSubArray(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4, false);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","sourceNew":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4, false);\n        assertSuggestions(suggest, ArrayUtil.copyOfSubArray(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4, false);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestContextQuery#testRandomContextQueryScoring().mjava","sourceNew":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4, false);\n        assertSuggestions(suggest, ArrayUtil.copyOfSubArray(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testRandomContextQueryScoring() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    try(RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"suggest_field\"))) {\n      int numSuggestions = atLeast(20);\n      int numContexts = atLeast(5);\n\n      Set<Integer> seenWeights = new HashSet<>();\n      List<Entry> expectedEntries = new ArrayList<>();\n      List<CharSequence> contexts = new ArrayList<>();\n      for (int i = 1; i <= numContexts; i++) {\n        CharSequence context = TestUtil.randomSimpleString(random(), 10) + i;\n        contexts.add(context);\n        for (int j = 1; j <= numSuggestions; j++) {\n          String suggestion = \"sugg_\" + TestUtil.randomSimpleString(random(), 10) + j;\n          int weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          while (seenWeights.contains(weight)) {\n            weight = TestUtil.nextInt(random(), 1, 1000 * numContexts * numSuggestions);\n          }\n          seenWeights.add(weight);\n          Document document = new Document();\n          document.add(new ContextSuggestField(\"suggest_field\", suggestion, weight, context));\n          iw.addDocument(document);\n          expectedEntries.add(new Entry(suggestion, context.toString(), i * weight));\n        }\n        if (rarely()) {\n          iw.commit();\n        }\n      }\n      Entry[] expectedResults = expectedEntries.toArray(new Entry[expectedEntries.size()]);\n\n      ArrayUtil.introSort(expectedResults, new Comparator<Entry>() {\n        @Override\n        public int compare(Entry o1, Entry o2) {\n          int cmp = Float.compare(o2.value, o1.value);\n          if (cmp != 0) {\n            return cmp;\n          } else {\n            return o1.output.compareTo(o2.output);\n          }\n        }\n      });\n\n      try(DirectoryReader reader = iw.getReader()) {\n        SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n        ContextQuery query = new ContextQuery(new PrefixCompletionQuery(analyzer, new Term(\"suggest_field\", \"sugg\")));\n        for (int i = 0; i < contexts.size(); i++) {\n          query.addContext(contexts.get(i), i + 1);\n        }\n        TopSuggestDocs suggest = suggestIndexSearcher.suggest(query, 4, false);\n        assertSuggestions(suggest, Arrays.copyOfRange(expectedResults, 0, 4));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"66756ce4574b3c2fdc15740945140daf28792f5f":["13975b8f26b2a9600a5333689974923927b7b8ab"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["902a92b60648a8925bfd9bb53a78669cd2ea98fd","9798d0818e7a880546802b509792d3f3d57babd2"],"13975b8f26b2a9600a5333689974923927b7b8ab":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9798d0818e7a880546802b509792d3f3d57babd2":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["66756ce4574b3c2fdc15740945140daf28792f5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9798d0818e7a880546802b509792d3f3d57babd2"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["902a92b60648a8925bfd9bb53a78669cd2ea98fd","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"66756ce4574b3c2fdc15740945140daf28792f5f":["902a92b60648a8925bfd9bb53a78669cd2ea98fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c33f6677a2078739058f81eca1df69d12cd62b0"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"13975b8f26b2a9600a5333689974923927b7b8ab":["66756ce4574b3c2fdc15740945140daf28792f5f"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["13975b8f26b2a9600a5333689974923927b7b8ab"],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"902a92b60648a8925bfd9bb53a78669cd2ea98fd":["b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}