{"path":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","commits":[{"id":"b7ae2d1141dd79feb2c7fbf0ccb84c2ed09b3e21","date":1331894398,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"/dev/null","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DocValuesField(\"field\", b, DocValues.Type.BYTES_VAR_DEREF));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    DirectoryReader r = w.getReader();\n    Source s = r.getSequentialSubReaders()[0].docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DocValuesField(\"field\", b, DocValues.Type.BYTES_VAR_DEREF));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    DirectoryReader r = w.getReader();\n    Source s = r.getSequentialSubReaders()[0].docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DocValuesField(\"field\", b, DocValues.Type.BYTES_VAR_DEREF));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    DirectoryReader r = w.getReader();\n    Source s = r.getSequentialSubReaders()[0].docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","date":1336650316,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    DirectoryReader r = w.getReader();\n    Source s = r.getSequentialSubReaders()[0].docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DocValuesField(\"field\", b, DocValues.Type.BYTES_VAR_DEREF));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    DirectoryReader r = w.getReader();\n    Source s = r.getSequentialSubReaders()[0].docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":["b7ae2d1141dd79feb2c7fbf0ccb84c2ed09b3e21"],"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    Source s = getOnlySegmentReader(r).docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    DirectoryReader r = w.getReader();\n    Source s = r.getSequentialSubReaders()[0].docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    Source s = getOnlySegmentReader(r).docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddadc5a8439c906a65bfba5ce15166b5d5b58d82","date":1358287870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    assumeTrue(\"requires simple dv\", _TestUtil.canUseSimpleDV());\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"423d89a2b3cc419b647c07c2b3fdbc54311d07f9","date":1358836612,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new DerefBytesDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    Source s = getOnlySegmentReader(r).docValues(\"field\").getSource();\n\n    BytesRef bytes1 = s.getBytes(0, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.getBytes(1, new BytesRef());\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","b7ae2d1141dd79feb2c7fbf0ccb84c2ed09b3e21","4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\", false);\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\", false);\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\", false);\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\", false);\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\", false);\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = FieldCache.DEFAULT.getTerms(getOnlySegmentReader(r), \"field\", false);\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = new BytesRef();\n    s.get(0, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    s.get(1, bytes1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.shutdown();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlyLeafReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlySegmentReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getBinary(getOnlyLeafReader(r), \"field\");\n    assertEquals(0, s.nextDoc());\n    BytesRef bytes1 = s.binaryValue();\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    assertEquals(1, s.nextDoc());\n    bytes1 = s.binaryValue();\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlyLeafReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getBinary(getOnlyLeafReader(r), \"field\");\n    assertEquals(0, s.nextDoc());\n    BytesRef bytes1 = s.binaryValue();\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    assertEquals(1, s.nextDoc());\n    bytes1 = s.binaryValue();\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlyLeafReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDocValuesIndexing#testLengthPrefixAcrossTwoPages().mjava","sourceNew":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getBinary(getOnlyLeafReader(r), \"field\");\n    assertEquals(0, s.nextDoc());\n    BytesRef bytes1 = s.binaryValue();\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    assertEquals(1, s.nextDoc());\n    bytes1 = s.binaryValue();\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  // LUCENE-3870\n  public void testLengthPrefixAcrossTwoPages() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    Document doc = new Document();\n    byte[] bytes = new byte[32764];\n    BytesRef b = new BytesRef();\n    b.bytes = bytes;\n    b.length = bytes.length;\n    doc.add(new SortedDocValuesField(\"field\", b));\n    w.addDocument(doc);\n    bytes[0] = 1;\n    w.addDocument(doc);\n    w.forceMerge(1);\n    DirectoryReader r = w.getReader();\n    BinaryDocValues s = DocValues.getSorted(getOnlyLeafReader(r), \"field\");\n\n    BytesRef bytes1 = s.get(0);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 0;\n    assertEquals(b, bytes1);\n    \n    bytes1 = s.get(1);\n    assertEquals(bytes.length, bytes1.length);\n    bytes[0] = 1;\n    assertEquals(b, bytes1);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b7ae2d1141dd79feb2c7fbf0ccb84c2ed09b3e21":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"56572ec06f1407c066d6b7399413178b33176cd8":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","93dd449115a9247533e44bab47e8429e5dccbc6d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b7ae2d1141dd79feb2c7fbf0ccb84c2ed09b3e21"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b7ae2d1141dd79feb2c7fbf0ccb84c2ed09b3e21":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["d4d69c535930b5cce125cff868d40f6373dc27d4","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","56572ec06f1407c066d6b7399413178b33176cd8"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7ae2d1141dd79feb2c7fbf0ccb84c2ed09b3e21"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8","93dd449115a9247533e44bab47e8429e5dccbc6d"],"423d89a2b3cc419b647c07c2b3fdbc54311d07f9":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"cd659803551ebd8ca09b9e4ad7abd18d3d558f9d":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["423d89a2b3cc419b647c07c2b3fdbc54311d07f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["56572ec06f1407c066d6b7399413178b33176cd8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}