{"path":"backwards/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,T,T,boolean,boolean).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,T,T,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = StringHelper.intern(field);\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,T,T,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = StringHelper.intern(field);\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.field = StringHelper.intern(field);\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}