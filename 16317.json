{"path":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","commits":[{"id":"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","date":1297940445,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      w.updateDocument(new Term(\"id\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      w.updateDocument(new Term(\"id\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      w.updateDocument(new Term(\"id\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","date":1298618128,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      int mode = docIter % 3;\n      switch (mode) {\n        case 0: {\n          w.deleteDocuments(new Term(\"id\", myID));\n          w.addDocument(doc);\n          break;\n        }\n        case 1: {\n          w.deleteDocuments(new TermQuery(new Term(\"id\", myID)));\n          w.addDocument(doc);\n          break;\n        }\n        default : w.updateDocument(new Term(\"id\", myID), doc);\n      }\n\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      w.updateDocument(new Term(\"id\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      w.updateDocument(new Term(\"id\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      int mode = docIter % 3;\n      switch (mode) {\n        case 0: {\n          w.deleteDocuments(new Term(\"id\", myID));\n          w.addDocument(doc);\n          break;\n        }\n        case 1: {\n          w.deleteDocuments(new TermQuery(new Term(\"id\", myID)));\n          w.addDocument(doc);\n          break;\n        }\n        default : w.updateDocument(new Term(\"id\", myID), doc);\n      }\n\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      w.updateDocument(new Term(\"id\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"id\").setValue(myID);\n      w.updateDocument(new Term(\"id\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff6fd241dc6610f7f81b62e3ba4cedf105939623","date":1307331653,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"79c2cb24929f2649a8875fb629086171f914d5ce","date":1307332717,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = 200 * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = (TEST_NIGHTLY ? 200 : 20) * RANDOM_MULTIPLIER;\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if (random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["d19974432be9aed28ee7dca73bdf01d139e763a9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if (random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final Directory dir = newDirectory();\n\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if (random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if (random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      doc.getField(\"docid\").setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77d4998e63ada9336818d1ebaacc362168f473e8","date":1318620209,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if (random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if (random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f458fcb817a740e7906774b7ca2c54d37b34f24f","date":1319501743,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if ( (!\"PreFlex\".equals(provider.getDefaultFieldCodec())) && random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if (random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    CodecProvider provider = CodecProvider.getDefault();\n    //provider.register(new MemoryCodec());\n    if ( (!\"PreFlex\".equals(provider.getDefaultFieldCodec())) && random.nextBoolean()) {\n      provider.setFieldCodec(\"docid\", \"Memory\");\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setCodecProvider(provider));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    w.setInfoStream(VERBOSE ? System.out : null);\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"03e443f67b94d20fb697aa8a033fe43d3acb34ff","date":1324323602,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: numUpdates=\" + numUpdates);\n    }\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(TEST_NIGHTLY ? 100 : 20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a080cf54613fd058fc8e1d96f5a1dfc812202c47","date":1324324372,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+(TEST_NIGHTLY ? 200*random.nextDouble() : 5*random.nextDouble())));\n    if (VERBOSE) {\n      System.out.println(\"TEST: numUpdates=\" + numUpdates);\n    }\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+random.nextDouble()));\n    if (VERBOSE) {\n      System.out.println(\"TEST: numUpdates=\" + numUpdates);\n    }\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bd27945df2678ed67d34f79f52ef576002e32637","date":1328115715,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat(random.nextBoolean())));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+(TEST_NIGHTLY ? 200*random.nextDouble() : 5*random.nextDouble())));\n    if (VERBOSE) {\n      System.out.println(\"TEST: numUpdates=\" + numUpdates);\n    }\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat()));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+(TEST_NIGHTLY ? 200*random.nextDouble() : 5*random.nextDouble())));\n    if (VERBOSE) {\n      System.out.println(\"TEST: numUpdates=\" + numUpdates);\n    }\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestRollingUpdates#testRollingUpdates().mjava","sourceNew":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat(random.nextBoolean())));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+(TEST_NIGHTLY ? 200*random.nextDouble() : 5*random.nextDouble())));\n    if (VERBOSE) {\n      System.out.println(\"TEST: numUpdates=\" + numUpdates);\n    }\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testRollingUpdates() throws Exception {\n    final MockDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we use a custom codec provider\n    final LineFileDocs docs = new LineFileDocs(random);\n\n    //provider.register(new MemoryCodec());\n    if ( (!\"Lucene3x\".equals(Codec.getDefault().getName())) && random.nextBoolean()) {\n      Codec.setDefault(_TestUtil.alwaysPostingsFormat(new MemoryPostingsFormat(random.nextBoolean())));\n    }\n\n    final IndexWriter w = new IndexWriter(dir, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    final int SIZE = atLeast(20);\n    int id = 0;\n    IndexReader r = null;\n    final int numUpdates = (int) (SIZE * (2+(TEST_NIGHTLY ? 200*random.nextDouble() : 5*random.nextDouble())));\n    if (VERBOSE) {\n      System.out.println(\"TEST: numUpdates=\" + numUpdates);\n    }\n    for(int docIter=0;docIter<numUpdates;docIter++) {\n      final Document doc = docs.nextDoc();\n      final String myID = \"\"+id;\n      if (id == SIZE-1) {\n        id = 0;\n      } else {\n        id++;\n      }\n      ((Field) doc.getField(\"docid\")).setValue(myID);\n      w.updateDocument(new Term(\"docid\", myID), doc);\n\n      if (docIter >= SIZE && random.nextInt(50) == 17) {\n        if (r != null) {\n          r.close();\n        }\n        final boolean applyDeletions = random.nextBoolean();\n        r = w.getReader(applyDeletions);\n        assertTrue(\"applyDeletions=\" + applyDeletions + \" r.numDocs()=\" + r.numDocs() + \" vs SIZE=\" + SIZE, !applyDeletions || r.numDocs() == SIZE);\n      }\n    }\n\n    if (r != null) {\n      r.close();\n    }\n\n    w.commit();\n    assertEquals(SIZE, w.numDocs());\n\n    w.close();\n    docs.close();\n    \n    _TestUtil.checkIndex(dir);\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f83af14a2a8131b14d7aee6274c740334e0363d3":["ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"03e443f67b94d20fb697aa8a033fe43d3acb34ff":["06584e6e98d592b34e1329b384182f368d2025e8"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["bd27945df2678ed67d34f79f52ef576002e32637"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a3776dccca01c11e7046323cfad46a3b4a471233","ff6fd241dc6610f7f81b62e3ba4cedf105939623"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a080cf54613fd058fc8e1d96f5a1dfc812202c47":["03e443f67b94d20fb697aa8a033fe43d3acb34ff"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"bd27945df2678ed67d34f79f52ef576002e32637":["a080cf54613fd058fc8e1d96f5a1dfc812202c47"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["79c2cb24929f2649a8875fb629086171f914d5ce","f83af14a2a8131b14d7aee6274c740334e0363d3"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"06584e6e98d592b34e1329b384182f368d2025e8":["7b91922b55d15444d554721b352861d028eb8278"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["f1bdbf92da222965b46c0a942c3857ba56e5c638","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7b91922b55d15444d554721b352861d028eb8278":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["77d4998e63ada9336818d1ebaacc362168f473e8"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"77d4998e63ada9336818d1ebaacc362168f473e8":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"45669a651c970812a680841b97a77cce06af559f":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f83af14a2a8131b14d7aee6274c740334e0363d3":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"03e443f67b94d20fb697aa8a033fe43d3acb34ff":["a080cf54613fd058fc8e1d96f5a1dfc812202c47"],"f1bdbf92da222965b46c0a942c3857ba56e5c638":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3":["f1bdbf92da222965b46c0a942c3857ba56e5c638","01e5948db9a07144112d2f08f28ca2e3cd880348","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":[],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["ff6fd241dc6610f7f81b62e3ba4cedf105939623","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"79c2cb24929f2649a8875fb629086171f914d5ce":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","e69553ac9cbe3b2693b93c2fb0c211529b8ee4c3","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"a080cf54613fd058fc8e1d96f5a1dfc812202c47":["bd27945df2678ed67d34f79f52ef576002e32637"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["77d4998e63ada9336818d1ebaacc362168f473e8"],"bd27945df2678ed67d34f79f52ef576002e32637":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886"],"ff6fd241dc6610f7f81b62e3ba4cedf105939623":["f83af14a2a8131b14d7aee6274c740334e0363d3","79c2cb24929f2649a8875fb629086171f914d5ce"],"06584e6e98d592b34e1329b384182f368d2025e8":["03e443f67b94d20fb697aa8a033fe43d3acb34ff"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"962d04139994fce5193143ef35615499a9a96d78":[],"7b91922b55d15444d554721b352861d028eb8278":["06584e6e98d592b34e1329b384182f368d2025e8"],"a3776dccca01c11e7046323cfad46a3b4a471233":["79c2cb24929f2649a8875fb629086171f914d5ce"],"f458fcb817a740e7906774b7ca2c54d37b34f24f":["7b91922b55d15444d554721b352861d028eb8278"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"bfaa69f5e3b29a90ec41762bfbfa166a9e52eccf":["45669a651c970812a680841b97a77cce06af559f"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"77d4998e63ada9336818d1ebaacc362168f473e8":["f458fcb817a740e7906774b7ca2c54d37b34f24f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}