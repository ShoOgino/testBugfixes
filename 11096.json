{"path":"src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","commits":[{"id":"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b","date":1184336627,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * add a Failure object to the list of objects to be evaluated\n   * at every potential failure point\n   */\n  public void failOn(Failure fail) {\n    if (failures == null) {\n      failures = new ArrayList();\n    }\n    failures.add(fail);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83bbb041887bbef07b8a98d08a0e1713ce137039","date":1200330381,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","sourceNew":"  /**\n   * add a Failure object to the list of objects to be evaluated\n   * at every potential failure point\n   */\n  synchronized public void failOn(Failure fail) {\n    if (failures == null) {\n      failures = new ArrayList();\n    }\n    failures.add(fail);\n  }\n\n","sourceOld":"  /**\n   * add a Failure object to the list of objects to be evaluated\n   * at every potential failure point\n   */\n  public void failOn(Failure fail) {\n    if (failures == null) {\n      failures = new ArrayList();\n    }\n    failures.add(fail);\n  }\n\n","bugFix":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","sourceNew":"  /**\n   * add a Failure object to the list of objects to be evaluated\n   * at every potential failure point\n   */\n  synchronized public void failOn(Failure fail) {\n    if (failures == null) {\n      failures = new ArrayList<Failure>();\n    }\n    failures.add(fail);\n  }\n\n","sourceOld":"  /**\n   * add a Failure object to the list of objects to be evaluated\n   * at every potential failure point\n   */\n  synchronized public void failOn(Failure fail) {\n    if (failures == null) {\n      failures = new ArrayList();\n    }\n    failures.add(fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","pathOld":"src/test/org/apache/lucene/store/MockRAMDirectory#failOn(Failure).mjava","sourceNew":"  /**\n   * add a Failure object to the list of objects to be evaluated\n   * at every potential failure point\n   */\n  synchronized public void failOn(Failure fail) {\n    if (failures == null) {\n      failures = new ArrayList<Failure>();\n    }\n    failures.add(fail);\n  }\n\n","sourceOld":"  /**\n   * add a Failure object to the list of objects to be evaluated\n   * at every potential failure point\n   */\n  synchronized public void failOn(Failure fail) {\n    if (failures == null) {\n      failures = new ArrayList<Failure>();\n    }\n    failures.add(fail);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"]},"commit2Childs":{"83bbb041887bbef07b8a98d08a0e1713ce137039":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b"],"abd5d0ae26eed0e7cbbbbed19f6480fe16055e9b":["83bbb041887bbef07b8a98d08a0e1713ce137039"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}