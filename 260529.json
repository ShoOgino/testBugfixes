{"path":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testReloadLeak().mjava","commits":[{"id":"b8ae9fd09e7ac7192f47c81a085ef2113c66f905","date":1463582752,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testReloadLeak().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that's meant to be run with many iterations to expose a leak of SolrIndexSearcher when a core is closed\n   * due to a reload. Without the fix, this test fails with most iters=1000 runs.\n   */\n  @Test\n  public void testReloadLeak() throws Exception {\n    final ExecutorService executor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(1, new DefaultSolrThreadFactory(\"testReloadLeak\"));\n\n    // Continuously open new searcher while core is not closed, and reload core to try to reproduce searcher leak.\n    // While in practice we never continuously open new searchers, this is trying to make up for the fact that opening\n    // a searcher in this empty core is very fast by opening new searchers continuously to increase the likelihood\n    // for race.\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n    executor.execute(new NewSearcherRunnable(core));\n\n    // Since we called getCore() vs getCoreInc() and don't own a refCount, the container should decRef the core\n    // and close it when we call reload.\n    h.reload();\n\n    executor.shutdown();\n    executor.awaitTermination(1, TimeUnit.MINUTES);\n\n    // Check that all cores are closed and no searcher references are leaked.\n    assertTrue(\"SolrCore \" + core + \" is not closed\", core.isClosed());\n    assertTrue(core.areAllSearcherReferencesEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec6c8973bbd2cdccb14a19312531e17d30350349","date":1463618107,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testReloadLeak().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that's meant to be run with many iterations to expose a leak of SolrIndexSearcher when a core is closed\n   * due to a reload. Without the fix, this test fails with most iters=1000 runs.\n   */\n  @Test\n  public void testReloadLeak() throws Exception {\n    final ExecutorService executor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(1, new DefaultSolrThreadFactory(\"testReloadLeak\"));\n\n    // Continuously open new searcher while core is not closed, and reload core to try to reproduce searcher leak.\n    // While in practice we never continuously open new searchers, this is trying to make up for the fact that opening\n    // a searcher in this empty core is very fast by opening new searchers continuously to increase the likelihood\n    // for race.\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n    executor.execute(new NewSearcherRunnable(core));\n\n    // Since we called getCore() vs getCoreInc() and don't own a refCount, the container should decRef the core\n    // and close it when we call reload.\n    h.reload();\n\n    executor.shutdown();\n    executor.awaitTermination(1, TimeUnit.MINUTES);\n\n    // Check that all cores are closed and no searcher references are leaked.\n    assertTrue(\"SolrCore \" + core + \" is not closed\", core.isClosed());\n    assertTrue(core.areAllSearcherReferencesEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testReloadLeak().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that's meant to be run with many iterations to expose a leak of SolrIndexSearcher when a core is closed\n   * due to a reload. Without the fix, this test fails with most iters=1000 runs.\n   */\n  @Test\n  public void testReloadLeak() throws Exception {\n    final ExecutorService executor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(1, new DefaultSolrThreadFactory(\"testReloadLeak\"));\n\n    // Continuously open new searcher while core is not closed, and reload core to try to reproduce searcher leak.\n    // While in practice we never continuously open new searchers, this is trying to make up for the fact that opening\n    // a searcher in this empty core is very fast by opening new searchers continuously to increase the likelihood\n    // for race.\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n    executor.execute(new NewSearcherRunnable(core));\n\n    // Since we called getCore() vs getCoreInc() and don't own a refCount, the container should decRef the core\n    // and close it when we call reload.\n    h.reload();\n\n    executor.shutdown();\n    executor.awaitTermination(1, TimeUnit.MINUTES);\n\n    // Check that all cores are closed and no searcher references are leaked.\n    assertTrue(\"SolrCore \" + core + \" is not closed\", core.isClosed());\n    assertTrue(core.areAllSearcherReferencesEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testReloadLeak().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that's meant to be run with many iterations to expose a leak of SolrIndexSearcher when a core is closed\n   * due to a reload. Without the fix, this test fails with most iters=1000 runs.\n   */\n  @Test\n  public void testReloadLeak() throws Exception {\n    final ExecutorService executor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(1, new DefaultSolrThreadFactory(\"testReloadLeak\"));\n\n    // Continuously open new searcher while core is not closed, and reload core to try to reproduce searcher leak.\n    // While in practice we never continuously open new searchers, this is trying to make up for the fact that opening\n    // a searcher in this empty core is very fast by opening new searchers continuously to increase the likelihood\n    // for race.\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n    executor.execute(new NewSearcherRunnable(core));\n\n    // Since we called getCore() vs getCoreInc() and don't own a refCount, the container should decRef the core\n    // and close it when we call reload.\n    h.reload();\n\n    executor.shutdown();\n    executor.awaitTermination(1, TimeUnit.MINUTES);\n\n    // Check that all cores are closed and no searcher references are leaked.\n    assertTrue(\"SolrCore \" + core + \" is not closed\", core.isClosed());\n    assertTrue(core.areAllSearcherReferencesEmpty());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testReloadLeak().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/SolrCoreTest#testReloadLeak().mjava","sourceNew":"  /**\n   * Test that's meant to be run with many iterations to expose a leak of SolrIndexSearcher when a core is closed\n   * due to a reload. Without the fix, this test fails with most iters=1000 runs.\n   */\n  @Test\n  public void testReloadLeak() throws Exception {\n    final ExecutorService executor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(1, new SolrNamedThreadFactory(\"testReloadLeak\"));\n\n    // Continuously open new searcher while core is not closed, and reload core to try to reproduce searcher leak.\n    // While in practice we never continuously open new searchers, this is trying to make up for the fact that opening\n    // a searcher in this empty core is very fast by opening new searchers continuously to increase the likelihood\n    // for race.\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n    executor.execute(new NewSearcherRunnable(core));\n\n    // Since we called getCore() vs getCoreInc() and don't own a refCount, the container should decRef the core\n    // and close it when we call reload.\n    h.reload();\n\n    executor.shutdown();\n    executor.awaitTermination(1, TimeUnit.MINUTES);\n\n    // Check that all cores are closed and no searcher references are leaked.\n    assertTrue(\"SolrCore \" + core + \" is not closed\", core.isClosed());\n    assertTrue(core.areAllSearcherReferencesEmpty());\n  }\n\n","sourceOld":"  /**\n   * Test that's meant to be run with many iterations to expose a leak of SolrIndexSearcher when a core is closed\n   * due to a reload. Without the fix, this test fails with most iters=1000 runs.\n   */\n  @Test\n  public void testReloadLeak() throws Exception {\n    final ExecutorService executor =\n        ExecutorUtil.newMDCAwareFixedThreadPool(1, new DefaultSolrThreadFactory(\"testReloadLeak\"));\n\n    // Continuously open new searcher while core is not closed, and reload core to try to reproduce searcher leak.\n    // While in practice we never continuously open new searchers, this is trying to make up for the fact that opening\n    // a searcher in this empty core is very fast by opening new searchers continuously to increase the likelihood\n    // for race.\n    SolrCore core = h.getCore();\n    assertTrue(\"Refcount != 1\", core.getOpenCount() == 1);\n    executor.execute(new NewSearcherRunnable(core));\n\n    // Since we called getCore() vs getCoreInc() and don't own a refCount, the container should decRef the core\n    // and close it when we call reload.\n    h.reload();\n\n    executor.shutdown();\n    executor.awaitTermination(1, TimeUnit.MINUTES);\n\n    // Check that all cores are closed and no searcher references are leaked.\n    assertTrue(\"SolrCore \" + core + \" is not closed\", core.isClosed());\n    assertTrue(core.areAllSearcherReferencesEmpty());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8ae9fd09e7ac7192f47c81a085ef2113c66f905":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"ec6c8973bbd2cdccb14a19312531e17d30350349":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b8ae9fd09e7ac7192f47c81a085ef2113c66f905"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ec6c8973bbd2cdccb14a19312531e17d30350349"]},"commit2Childs":{"b8ae9fd09e7ac7192f47c81a085ef2113c66f905":["ec6c8973bbd2cdccb14a19312531e17d30350349"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b8ae9fd09e7ac7192f47c81a085ef2113c66f905","ec6c8973bbd2cdccb14a19312531e17d30350349","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec6c8973bbd2cdccb14a19312531e17d30350349":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["fb03700c9690d16b15fb4f56f6ec36b128fd894e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}