{"path":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#getChildren().mjava","commits":[{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#getChildren().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingChildren = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#getChildren().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingChildren = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"523cc6563c99a55527ef7993efc5413c6648852d","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingChildren = new ArrayList<>();\n    advanceAllTail();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingChildren = new ArrayList<>();\n    updateFreq();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#getChildren().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/WANDScorer#getChildren().mjava","sourceNew":"  @Override\n  public final Collection<ChildScorable> getChildren() throws IOException {\n    List<ChildScorable> matchingChildren = new ArrayList<>();\n    advanceAllTail();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorable(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","sourceOld":"  @Override\n  public final Collection<ChildScorer> getChildren() throws IOException {\n    List<ChildScorer> matchingChildren = new ArrayList<>();\n    advanceAllTail();\n    for (DisiWrapper s = lead; s != null; s = s.next) {\n      matchingChildren.add(new ChildScorer(s.scorer, \"SHOULD\"));\n    }\n    return matchingChildren;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["523cc6563c99a55527ef7993efc5413c6648852d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"523cc6563c99a55527ef7993efc5413c6648852d":["417142ff08fda9cf0b72d5133e63097a166c6458"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"523cc6563c99a55527ef7993efc5413c6648852d":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"417142ff08fda9cf0b72d5133e63097a166c6458":["523cc6563c99a55527ef7993efc5413c6648852d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}