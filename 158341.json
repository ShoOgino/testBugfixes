{"path":"solr/core/src/test/org/apache/solr/cloud/RouteFieldTest#routeFieldTest().mjava","commits":[{"id":"25726728867b518829d762aa00b696cbfa96818c","date":1595801885,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/RouteFieldTest#routeFieldTest().mjava","pathOld":"/dev/null","sourceNew":"  // Test for seeing if we actually respect the route field\n  // We should be able to create two collections, one using ID and one using\n  // a route field. We should then be able to index docs to each, using\n  // the route field and id field and find the same docs on the same shards.\n  @Test\n  public void routeFieldTest() throws Exception {\n    log.info(\"Starting routeFieldTest\");\n\n    assertEquals(\"Failed to  create collection routeFieldTest\",\n        0,\n        CollectionAdminRequest.createCollection(COLL_ROUTE, \"conf\", 2, 1)\n            .setRouterField(ROUTE_FIELD)\n            .process(cluster.getSolrClient()).getStatus());\n\n    List<SchemaRequest.Update> updateList = new ArrayList<>();\n    updateList.add(new SchemaRequest.AddField(makeMap(\"name\", ROUTE_FIELD, \"type\", \"string\", \"indexed\", \"true\", \"stored\", \"true\")));\n    updateList.add(new SchemaRequest.AddField(makeMap(\"name\", \"sorter\", \"type\", \"int\", \"indexed\", \"true\", \"stored\", \"true\")));\n    SchemaRequest.MultiUpdate multiUpdateRequest = new SchemaRequest.MultiUpdate(updateList);\n    UpdateResponse multipleUpdatesResponse = multiUpdateRequest.process(cluster.getSolrClient(), COLL_ROUTE);\n    assertNull(\"Error adding fields\", multipleUpdatesResponse.getResponse().get(\"errors\"));\n\n    assertEquals(\"Failed to  create collection routeIdTest\"\n        , 0\n        , CollectionAdminRequest.createCollection(COLL_ID, \"conf\", 2, 1)\n            .process(cluster.getSolrClient()).getStatus());\n\n    // We now have two collections, add the same docs to each with the proper\n    // fields so the id field is used in one collection and ROUTE_FIELD in the other..\n    List<SolrInputDocument> docsRoute = new ArrayList<>();\n    List<SolrInputDocument> docsId = new ArrayList<>();\n    int lim = random().nextInt(50) + 50;\n    for (int idx = 0; idx < lim; ++idx) {\n      SolrInputDocument doc = new SolrInputDocument();\n      // id should be irrelevant for routing, but we want to insure that\n      // if somehow we _do_ use id to route, we don't use the same ID\n      // as the docs we're adding to the collection routed by id.\n      doc.addField(\"id\", idx + 1_500_000);\n      doc.addField(ROUTE_FIELD, idx);\n      doc.addField(\"sorter\", idx);\n      docsRoute.add(doc);\n\n      doc = new SolrInputDocument();\n      doc.addField(\"id\", idx);\n      doc.addField(\"sorter\", idx);\n      docsId.add(doc);\n    }\n    cluster.getSolrClient().add(COLL_ROUTE, docsRoute);\n    cluster.getSolrClient().add(COLL_ID, docsId);\n\n    cluster.getSolrClient().commit(COLL_ROUTE, true, true);\n    cluster.getSolrClient().commit(COLL_ID, true, true);\n\n    checkShardsHaveSameDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"25726728867b518829d762aa00b696cbfa96818c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["25726728867b518829d762aa00b696cbfa96818c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["25726728867b518829d762aa00b696cbfa96818c"],"25726728867b518829d762aa00b696cbfa96818c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}