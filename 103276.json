{"path":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","commits":[{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/simple/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<Scorer>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<Scorer>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/search/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<Scorer>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<Scorer>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<Scorer>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26ae065817023d886f3de2bc162e9e1ad71c7a02","date":1485164116,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer s) throws IOException {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d88f2d3d3107907144cec6455db31ccebd65475a","date":1485171003,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer s) throws IOException {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c9e07c6618087aa30ff83c3a54818165e76c3a8","date":1487684665,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorer s) throws IOException {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer s) {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorable).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/AssertingSubDocsAtOnceCollector#setScorer(Scorer).mjava","sourceNew":"  @Override\n  public void setScorer(Scorable s) throws IOException {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (Scorable.ChildScorable sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void setScorer(Scorer s) throws IOException {\n    // Gathers all scorers, including s and \"under\":\n    allScorers = new ArrayList<>();\n    allScorers.add(s);\n    int upto = 0;\n    while(upto < allScorers.size()) {\n      s = allScorers.get(upto++);\n      for (ChildScorer sub : s.getChildren()) {\n        allScorers.add(sub.child);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["d88f2d3d3107907144cec6455db31ccebd65475a"],"21d36d0db865f7b84026b447bec653469a6e66df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","21d36d0db865f7b84026b447bec653469a6e66df"],"d88f2d3d3107907144cec6455db31ccebd65475a":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["26ae065817023d886f3de2bc162e9e1ad71c7a02"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["21d36d0db865f7b84026b447bec653469a6e66df","3cc728b07df73b197e6d940d27f9b08b63918f13"],"2c9e07c6618087aa30ff83c3a54818165e76c3a8":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"21d36d0db865f7b84026b447bec653469a6e66df":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d88f2d3d3107907144cec6455db31ccebd65475a":["2c9e07c6618087aa30ff83c3a54818165e76c3a8"],"26ae065817023d886f3de2bc162e9e1ad71c7a02":["d88f2d3d3107907144cec6455db31ccebd65475a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}