{"path":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","commits":[{"id":"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2","date":1331803866,"type":1,"author":"Martijn van Groningen","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/TermGroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        TermGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","pathOld":"modules/grouping/src/test/org/apache/lucene/search/grouping/GroupFacetCollectorTest#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n    Random random = random();\n    int numberOfRuns = _TestUtil.nextInt(random, 3, 6);\n    for (int indexIter = 0; indexIter < numberOfRuns; indexIter++) {\n      boolean multipleFacetsPerDocument = random.nextBoolean();\n      IndexContext context = createIndexContext(multipleFacetsPerDocument);\n      final IndexSearcher searcher = newSearcher(context.indexReader);\n\n      for (int searchIter = 0; searchIter < 100; searchIter++) {\n        boolean useDv = context.useDV && random.nextBoolean();\n        String searchTerm = context.contentStrings[random.nextInt(context.contentStrings.length)];\n        int limit = random.nextInt(context.facetValues.size());\n        int offset = random.nextInt(context.facetValues.size() - limit);\n        int size = offset + limit;\n        int minCount = random.nextBoolean() ? 0 : random.nextInt(1 + context.facetWithMostGroups / 10);\n        boolean orderByCount = random.nextBoolean();\n        String randomStr = getFromSet(context.facetValues, random.nextInt(context.facetValues.size()));\n        final String facetPrefix;\n        if (randomStr == null) {\n          facetPrefix = null;\n        } else {\n          int codePointLen = randomStr.codePointCount(0, randomStr.length());\n          int randomLen = random.nextInt(codePointLen);\n          if (codePointLen == randomLen - 1) {\n            facetPrefix = null;\n          } else {\n            int end = randomStr.offsetByCodePoints(0, randomLen);\n            facetPrefix = random.nextBoolean() ? null : randomStr.substring(end);\n          }\n        }\n\n        GroupedFacetResult expectedFacetResult = createExpectedFacetResult(searchTerm, context, offset, limit, minCount, orderByCount, facetPrefix);\n        AbstractGroupFacetCollector groupFacetCollector = createRandomCollector(\"group\", \"facet\", facetPrefix, multipleFacetsPerDocument, useDv);\n        searcher.search(new TermQuery(new Term(\"content\", searchTerm)), groupFacetCollector);\n        TermGroupFacetCollector.GroupedFacetResult actualFacetResult = groupFacetCollector.mergeSegmentResults(size, minCount, orderByCount);\n\n        List<TermGroupFacetCollector.FacetEntry> expectedFacetEntries = expectedFacetResult.getFacetEntries();\n        List<TermGroupFacetCollector.FacetEntry> actualFacetEntries = actualFacetResult.getFacetEntries(offset, limit);\n\n        if (VERBOSE) {\n          System.out.println(\"Collector: \" + groupFacetCollector.getClass().getSimpleName());\n          System.out.println(\"Num group: \" + context.numGroups);\n          System.out.println(\"Num doc: \" + context.numDocs);\n          System.out.println(\"Index iter: \" + indexIter);\n          System.out.println(\"multipleFacetsPerDocument: \" + multipleFacetsPerDocument);\n          System.out.println(\"Search iter: \" + searchIter);\n\n          System.out.println(\"Search term: \" + searchTerm);\n          System.out.println(\"Min count: \" + minCount);\n          System.out.println(\"Facet offset: \" + offset);\n          System.out.println(\"Facet limit: \" + limit);\n          System.out.println(\"Facet prefix: \" + facetPrefix);\n          System.out.println(\"Order by count: \" + orderByCount);\n\n          System.out.println(\"\\n=== Expected: \\n\");\n          System.out.println(\"Total count \" + expectedFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + expectedFacetResult.getTotalMissingCount());\n          int counter = 1;\n          for (TermGroupFacetCollector.FacetEntry expectedFacetEntry : expectedFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Expected facet value %s with count %d\",\n                    counter++, expectedFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getCount()\n                )\n            );\n          }\n\n          System.out.println(\"\\n=== Actual: \\n\");\n          System.out.println(\"Total count \" + actualFacetResult.getTotalCount());\n          System.out.println(\"Total missing count \" + actualFacetResult.getTotalMissingCount());\n          counter = 1;\n          for (TermGroupFacetCollector.FacetEntry actualFacetEntry : actualFacetEntries) {\n            System.out.println(\n                String.format(\n                    \"%d. Actual facet value %s with count %d\",\n                    counter++, actualFacetEntry.getValue().utf8ToString(), actualFacetEntry.getCount()\n                )\n            );\n          }\n          System.out.println(\"\\n===================================================================================\");\n        }\n\n        assertEquals(expectedFacetResult.getTotalCount(), actualFacetResult.getTotalCount());\n        assertEquals(expectedFacetResult.getTotalMissingCount(), actualFacetResult.getTotalMissingCount());\n        assertEquals(expectedFacetEntries.size(), actualFacetEntries.size());\n        for (int i = 0; i < expectedFacetEntries.size(); i++) {\n          TermGroupFacetCollector.FacetEntry expectedFacetEntry = expectedFacetEntries.get(i);\n          TermGroupFacetCollector.FacetEntry actualFacetEntry = actualFacetEntries.get(i);\n          assertEquals(expectedFacetEntry.getValue().utf8ToString() + \" != \" + actualFacetEntry.getValue().utf8ToString(), expectedFacetEntry.getValue(), actualFacetEntry.getValue());\n          assertEquals(expectedFacetEntry.getCount() + \" != \" + actualFacetEntry.getCount(), expectedFacetEntry.getCount(), actualFacetEntry.getCount());\n        }\n      }\n\n      context.indexReader.close();\n      context.dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2"],"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"8b89f8e2c44ce7efaf10978b9e5c6b95a31706b2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}