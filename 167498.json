{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70a5a9d222a882b030ff4a1d87e44b75403b893a","date":1487758607,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/commongrams/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n          // We must set this back to 1 (from e.g. 2 or higher) otherwise the token graph is disconnected:\n          posLengthAttribute.setPositionLength(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n      // We must set this back to 1 (from e.g. 2 or higher) otherwise the token graph is disconnected:\n      posLengthAttribute.setPositionLength(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (!exhausted && input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    exhausted = true;\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"70a5a9d222a882b030ff4a1d87e44b75403b893a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70a5a9d222a882b030ff4a1d87e44b75403b893a"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["70a5a9d222a882b030ff4a1d87e44b75403b893a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"70a5a9d222a882b030ff4a1d87e44b75403b893a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}