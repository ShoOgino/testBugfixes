{"path":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"faff74992839549208db29d95b9ad4a1d3846c79","date":1385672428,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":null,"sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ShardFieldSortedHitQueue[ShardDoc]#comparatorNatural(String).mjava","sourceNew":null,"sourceOld":"  // The lucene natural sort ordering corresponds to numeric\n  // and string natural sort orderings (ascending).  Since\n  // the PriorityQueue keeps the biggest elements by default,\n  // we need to reverse the natural compare ordering so that the\n  // smallest elements are kept instead of the largest... hence\n  // the negative sign on the final compareTo().\n  Comparator comparatorNatural(String fieldName) {\n    return new ShardComparator(fieldName) {\n      @Override\n      public final int compare(final Object o1, final Object o2) {\n        ShardDoc sd1 = (ShardDoc) o1;\n        ShardDoc sd2 = (ShardDoc) o2;\n        Comparable v1 = (Comparable)sortVal(sd1);\n        Comparable v2 = (Comparable)sortVal(sd2);\n        if (v1==v2)\n          return 0;\n        if (v1==null)\n          return 1;\n        if(v2==null)\n          return -1;\n        return -v1.compareTo(v2);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","faff74992839549208db29d95b9ad4a1d3846c79"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"faff74992839549208db29d95b9ad4a1d3846c79":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["faff74992839549208db29d95b9ad4a1d3846c79"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0","faff74992839549208db29d95b9ad4a1d3846c79"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"faff74992839549208db29d95b9ad4a1d3846c79":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}