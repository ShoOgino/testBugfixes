{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random.nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random.nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.hasPayload(), rightDocs.hasPayload());\n        if (leftDocs.hasPayload()) {\n          assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertPositionsSkippingEquals(String,IndexReader,int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertPositionsSkipping(int,DocsAndPositionsEnum,DocsAndPositionsEnum).mjava","sourceNew":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkippingEquals(String info, IndexReader leftReader, int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws IOException {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * checks advancing docs + positions\n   */\n  public void assertPositionsSkipping(int docFreq, DocsAndPositionsEnum leftDocs, DocsAndPositionsEnum rightDocs) throws Exception {\n    if (leftDocs == null || rightDocs == null) {\n      assertNull(leftDocs);\n      assertNull(rightDocs);\n      return;\n    }\n    \n    int docid = -1;\n    int averageGap = leftReader.maxDoc() / (1+docFreq);\n    int skipInterval = 16;\n\n    while (true) {\n      if (random().nextBoolean()) {\n        // nextDoc()\n        docid = leftDocs.nextDoc();\n        assertEquals(info, docid, rightDocs.nextDoc());\n      } else {\n        // advance()\n        int skip = docid + (int) Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));\n        docid = leftDocs.advance(skip);\n        assertEquals(info, docid, rightDocs.advance(skip));\n      }\n      \n      if (docid == DocIdSetIterator.NO_MORE_DOCS) {\n        return;\n      }\n      int freq = leftDocs.freq();\n      assertEquals(info, freq, rightDocs.freq());\n      for (int i = 0; i < freq; i++) {\n        assertEquals(info, leftDocs.nextPosition(), rightDocs.nextPosition());\n        assertEquals(info, leftDocs.getPayload(), rightDocs.getPayload());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","51c8450b3b616b6777f722ff4083c0bf946381a2","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c7869f64c874ebf7f317d22c00baf2b6857797a6","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}