{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","commits":[{"id":"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d","date":1541178922,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** static utility method to compare a bbox with a range of triangles (just the bbox of the triangle collection) */\n  protected static Relation compareBBoxToRangeBBox(final byte[] bbox,\n                                                   int minXOffset, int minYOffset, byte[] minTriangle,\n                                                   int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, BYTES, 2 * BYTES) < 0 ||\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 0, BYTES) < 0) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9feee35369998c08f5168e0808e67e09857d5bac","date":1544618795,"type":5,"author":"iverase","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShapeBoundingBoxQuery#compareBBoxToRangeBBox(byte[],int,int,byte[],int,int,byte[]).mjava","sourceNew":"  /** static utility method to compare a bbox with a range of triangles (just the bbox of the triangle collection) */\n  private static PointValues.Relation compareBBoxToRangeBBox(final byte[] bbox,\n                                                            int minXOffset, int minYOffset, byte[] minTriangle,\n                                                            int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, BYTES, 2 * BYTES) < 0 ||\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 0, BYTES) < 0) {\n      return PointValues.Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return PointValues.Relation.CELL_INSIDE_QUERY;\n    }\n    return PointValues.Relation.CELL_CROSSES_QUERY;\n  }\n\n","sourceOld":"  /** static utility method to compare a bbox with a range of triangles (just the bbox of the triangle collection) */\n  protected static Relation compareBBoxToRangeBBox(final byte[] bbox,\n                                                   int minXOffset, int minYOffset, byte[] minTriangle,\n                                                   int maxXOffset, int maxYOffset, byte[] maxTriangle) {\n    // check bounding box (DISJOINT)\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, BYTES, 2 * BYTES) < 0 ||\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) > 0 ||\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 0, BYTES) < 0) {\n      return Relation.CELL_OUTSIDE_QUERY;\n    }\n\n    if (FutureArrays.compareUnsigned(minTriangle, minXOffset, minXOffset + BYTES, bbox, BYTES, 2 * BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxXOffset, maxXOffset + BYTES, bbox, 3 * BYTES, 4 * BYTES) <= 0 &&\n        FutureArrays.compareUnsigned(minTriangle, minYOffset, minYOffset + BYTES, bbox, 0, BYTES) >= 0 &&\n        FutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 3 * BYTES) <= 0) {\n      return Relation.CELL_INSIDE_QUERY;\n    }\n    return Relation.CELL_CROSSES_QUERY;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9feee35369998c08f5168e0808e67e09857d5bac":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9feee35369998c08f5168e0808e67e09857d5bac"]},"commit2Childs":{"9feee35369998c08f5168e0808e67e09857d5bac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d":["9feee35369998c08f5168e0808e67e09857d5bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d85f0b2ceb48a48bf5a30d72b477bd21fdf9686d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}