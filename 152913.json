{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testRefCounts1().mjava","commits":[{"id":"6e09a3a223be07d75777515a717312813221fe58","date":1328908385,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testRefCounts1().mjava","pathOld":"/dev/null","sourceNew":"  public void testRefCounts1() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    AtomicReader ir1, ir2;\n    // close subreaders, ParallelReader will not change refCounts, but close on its own close\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n                                                       ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n                                                       \n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    pr.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testRefCounts1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testRefCounts1().mjava","sourceNew":"  public void testRefCounts1() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    AtomicReader ir1, ir2;\n    // close subreaders, ParallelReader will not change refCounts, but close on its own close\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n                                                       ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n                                                       \n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    pr.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","sourceOld":"  public void testRefCounts1() throws IOException {\n    Directory dir1 = getDir1(random);\n    Directory dir2 = getDir2(random);\n    AtomicReader ir1, ir2;\n    // close subreaders, ParallelReader will not change refCounts, but close on its own close\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n                                                       ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n                                                       \n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    pr.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testRefCounts1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testRefCounts1().mjava","sourceNew":"  public void testRefCounts1() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1, ir2;\n    // close subreaders, ParallelReader will not change refCounts, but close on its own close\n    ParallelLeafReader pr = new ParallelLeafReader(ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n                                                       ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n                                                       \n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    pr.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","sourceOld":"  public void testRefCounts1() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    AtomicReader ir1, ir2;\n    // close subreaders, ParallelReader will not change refCounts, but close on its own close\n    ParallelAtomicReader pr = new ParallelAtomicReader(ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n                                                       ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n                                                       \n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    pr.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9644a32526f2e2ae87543b00e8be543aa25f29c","date":1411548458,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelLeafReader#testRefCounts1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelAtomicReader#testRefCounts1().mjava","sourceNew":"  public void testRefCounts1() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1, ir2;\n    // close subreaders, ParallelReader will not change refCounts, but close on its own close\n    ParallelLeafReader pr = new ParallelLeafReader(ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n                                                       ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n                                                       \n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    pr.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","sourceOld":"  public void testRefCounts1() throws IOException {\n    Directory dir1 = getDir1(random());\n    Directory dir2 = getDir2(random());\n    LeafReader ir1, ir2;\n    // close subreaders, ParallelReader will not change refCounts, but close on its own close\n    ParallelLeafReader pr = new ParallelLeafReader(ir1 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir1)),\n                                                       ir2 = SlowCompositeReaderWrapper.wrap(DirectoryReader.open(dir2)));\n                                                       \n    // check RefCounts\n    assertEquals(1, ir1.getRefCount());\n    assertEquals(1, ir2.getRefCount());\n    pr.close();\n    assertEquals(0, ir1.getRefCount());\n    assertEquals(0, ir2.getRefCount());\n    dir1.close();\n    dir2.close();    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6e09a3a223be07d75777515a717312813221fe58"],"6e09a3a223be07d75777515a717312813221fe58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9644a32526f2e2ae87543b00e8be543aa25f29c"]},"commit2Childs":{"c9644a32526f2e2ae87543b00e8be543aa25f29c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6e09a3a223be07d75777515a717312813221fe58"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"6e09a3a223be07d75777515a717312813221fe58":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["c9644a32526f2e2ae87543b00e8be543aa25f29c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}