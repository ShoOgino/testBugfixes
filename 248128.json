{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MarkovChainEvaluator.MarkovChain#MarkovChain(Matrix,int).mjava","commits":[{"id":"46bf3bdc31412342491895b3209b5dd622aeb489","date":1509735643,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MarkovChainEvaluator.MarkovChain#MarkovChain(Matrix,int).mjava","pathOld":"/dev/null","sourceNew":"    public MarkovChain(Matrix matrix, int state) throws IOException {\n      double[][] data = matrix.getData();\n\n      if(data.length != data[0].length) {\n        throw new IOException(\"Markov chain must be initialized with a square matrix.\");\n      }\n\n      this.distributions = new EnumeratedIntegerDistribution[data.length];\n\n      if(state > -1) {\n        this.state = state;\n      } else {\n        this.state = new Random().nextInt(data.length);\n      }\n\n      for(int i=0; i<data.length; i++) {\n        double[] probabilities = data[i];\n\n        //Create the states array needed by the enumerated distribution\n        int[] states = MathArrays.sequence(data.length, 0, 1);\n        distributions[i] = new EnumeratedIntegerDistribution(states, probabilities);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8c5e58e88072db16e2a636f1738f87c1df207bd","date":1510101986,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MarkovChainEvaluator.MarkovChain#MarkovChain(Matrix,int).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MarkovChainEvaluator.MarkovChain#MarkovChain(Matrix,int).mjava","sourceNew":"    public MarkovChain(Matrix matrix, int state) throws IOException {\n      double[][] data = matrix.getData();\n\n      if(data.length != data[0].length) {\n        throw new IOException(\"markovChain must be initialized with a square matrix.\");\n      }\n\n      this.distributions = new EnumeratedIntegerDistribution[data.length];\n\n      if(state > -1) {\n        this.state = state;\n      } else {\n        this.state = new Random().nextInt(data.length);\n      }\n\n      for(int i=0; i<data.length; i++) {\n        double[] probabilities = data[i];\n\n        //Create the states array needed by the enumerated distribution\n        int[] states = MathArrays.sequence(data.length, 0, 1);\n        distributions[i] = new EnumeratedIntegerDistribution(states, probabilities);\n      }\n    }\n\n","sourceOld":"    public MarkovChain(Matrix matrix, int state) throws IOException {\n      double[][] data = matrix.getData();\n\n      if(data.length != data[0].length) {\n        throw new IOException(\"Markov chain must be initialized with a square matrix.\");\n      }\n\n      this.distributions = new EnumeratedIntegerDistribution[data.length];\n\n      if(state > -1) {\n        this.state = state;\n      } else {\n        this.state = new Random().nextInt(data.length);\n      }\n\n      for(int i=0; i<data.length; i++) {\n        double[] probabilities = data[i];\n\n        //Create the states array needed by the enumerated distribution\n        int[] states = MathArrays.sequence(data.length, 0, 1);\n        distributions[i] = new EnumeratedIntegerDistribution(states, probabilities);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/MarkovChainEvaluator.MarkovChain#MarkovChain(Matrix,int).mjava","pathOld":"/dev/null","sourceNew":"    public MarkovChain(Matrix matrix, int state) throws IOException {\n      double[][] data = matrix.getData();\n\n      if(data.length != data[0].length) {\n        throw new IOException(\"markovChain must be initialized with a square matrix.\");\n      }\n\n      this.distributions = new EnumeratedIntegerDistribution[data.length];\n\n      if(state > -1) {\n        this.state = state;\n      } else {\n        this.state = new Random().nextInt(data.length);\n      }\n\n      for(int i=0; i<data.length; i++) {\n        double[] probabilities = data[i];\n\n        //Create the states array needed by the enumerated distribution\n        int[] states = MathArrays.sequence(data.length, 0, 1);\n        distributions[i] = new EnumeratedIntegerDistribution(states, probabilities);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8c5e58e88072db16e2a636f1738f87c1df207bd":["46bf3bdc31412342491895b3209b5dd622aeb489"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a8c5e58e88072db16e2a636f1738f87c1df207bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46bf3bdc31412342491895b3209b5dd622aeb489":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"a8c5e58e88072db16e2a636f1738f87c1df207bd":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d523b8189b211dd1630166aa77b8c88bb48b3fcc","46bf3bdc31412342491895b3209b5dd622aeb489"],"46bf3bdc31412342491895b3209b5dd622aeb489":["a8c5e58e88072db16e2a636f1738f87c1df207bd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}