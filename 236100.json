{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","commits":[{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    assertEquals(collectionExceptedToBeCreated, underTest.lastProcessMessageResult);\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode);\n    \n    waitForEmptyQueue(10000);\n    \n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          liveNodes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    assertEquals(collectionExceptedToBeCreated, underTest.lastProcessMessageResult);\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c986b1ea9768aff3c903f05a2c85b7b672b5c225","date":1359126891,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    assertEquals(collectionExceptedToBeCreated, underTest.lastProcessMessageResult);\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd45d4a2ee01a1932d33eec42f5272c2402da679","date":1359316912,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    assertEquals(collectionExceptedToBeCreated, underTest.lastProcessMessageResult);\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n\n    log.info(\"clusterstate \" +clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n\n    log.info(\"clusterstate \" +clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n\n    log.info(\"clusterstate \" +clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n\n    log.info(\"clusterstate \" +clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n\n    log.info(\"clusterstate \" +clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n\n    log.info(\"clusterstate \" +clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(underTest.lastProcessMessageResult.getResponse().toString(), underTest.lastProcessMessageResult);\n    }\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08b22329006608bd6b95aeba7a59f28092cd7a5e","date":1419362789,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionProcessor.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionProcessor.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    if (random().nextBoolean()) Collections.shuffle(createNodeList, OverseerCollectionMessageHandler.RANDOM);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerFactoryMock);\n    replay(shardHandlerMock);\n\n\n    log.info(\"clusterstate \" + clusterStateMock.hashCode());\n\n    startComponentUnderTest();\n    \n    final List<String> createNodeListToSend = ((createNodeListOption != CreateNodeListOptions.SEND_NULL) ? createNodeList : null);\n    final boolean sendCreateNodeList = (createNodeListOption != CreateNodeListOptions.DONT_SEND);\n    final boolean dontShuffleCreateNodeSet = (createNodeListToSend != null) && sendCreateNodeList && random().nextBoolean();\n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, createNodeListToSend, sendCreateNodeList, !dontShuffleCreateNodeSet);\n    waitForEmptyQueue(10000);\n    \n    if (collectionExceptedToBeCreated) {\n      assertNotNull(lastProcessMessageResult.getResponse().toString(), lastProcessMessageResult);\n    }\n    verify(shardHandlerFactoryMock);\n    verify(shardHandlerMock);\n\n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList, dontShuffleCreateNodeSet);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1eeda7e62e149f90eee8895af874c74efa7d4852"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c986b1ea9768aff3c903f05a2c85b7b672b5c225","1eeda7e62e149f90eee8895af874c74efa7d4852"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"b7605579001505896d48b07160075a5c8b8e128e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","6f26f74e4969851a019d28f10315cb1c77786f22"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["6f26f74e4969851a019d28f10315cb1c77786f22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["dd45d4a2ee01a1932d33eec42f5272c2402da679"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd45d4a2ee01a1932d33eec42f5272c2402da679":[],"b7605579001505896d48b07160075a5c8b8e128e":[],"1eeda7e62e149f90eee8895af874c74efa7d4852":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","c986b1ea9768aff3c903f05a2c85b7b672b5c225"],"c986b1ea9768aff3c903f05a2c85b7b672b5c225":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","dd45d4a2ee01a1932d33eec42f5272c2402da679","1eeda7e62e149f90eee8895af874c74efa7d4852"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"6f26f74e4969851a019d28f10315cb1c77786f22":["b7605579001505896d48b07160075a5c8b8e128e","08b22329006608bd6b95aeba7a59f28092cd7a5e"],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","dd45d4a2ee01a1932d33eec42f5272c2402da679","b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}