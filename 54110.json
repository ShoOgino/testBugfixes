{"path":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new Field(\"id\", \"id1\", StringField.TYPE_STORED);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new Field(\"keyword\", \"test\", StringField.TYPE_STORED));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    field.setValue(\"id2\");\n    writer.addDocument(doc);\n    field.setValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new Field(\"id\", \"id1\", StringField.TYPE_STORED);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new Field(\"keyword\", \"test\", StringField.TYPE_STORED));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    field.setValue(\"id2\");\n    writer.addDocument(doc);\n    field.setValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new Field(\"id\", \"id1\", StringField.TYPE_STORED);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new Field(\"keyword\", \"test\", StringField.TYPE_STORED));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new Field(\"id\", \"id1\", StringField.TYPE_STORED);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new Field(\"keyword\", \"test\", StringField.TYPE_STORED));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    field.setValue(\"id2\");\n    writer.addDocument(doc);\n    field.setValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":["c084e47df29de3330311d69dabf515ceaa989512"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new Field(\"id\", \"id1\", StringField.TYPE_STORED);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new Field(\"keyword\", \"test\", StringField.TYPE_STORED));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new Field(\"id\", \"id1\", StringField.TYPE_STORED);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new Field(\"keyword\", \"test\", StringField.TYPE_STORED));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04f07771a2a7dd3a395700665ed839c3dae2def2","date":1339350139,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new Field(\"id\", \"id1\", StringField.TYPE_STORED);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new Field(\"keyword\", \"test\", StringField.TYPE_STORED));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":["7e4db59c6b6c10e25322cfb41c4c19d78b4298bd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","date":1341839195,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.shutdown();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.shutdown();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/document/TestDocument#testFieldSetValue().mjava","sourceNew":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      Document doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","sourceOld":"  public void testFieldSetValue() throws Exception {\n    \n    Field field = new StringField(\"id\", \"id1\", Field.Store.YES);\n    Document doc = new Document();\n    doc.add(field);\n    doc.add(new StringField(\"keyword\", \"test\", Field.Store.YES));\n    \n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    writer.addDocument(doc);\n    field.setStringValue(\"id2\");\n    writer.addDocument(doc);\n    field.setStringValue(\"id3\");\n    writer.addDocument(doc);\n    \n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    \n    Query query = new TermQuery(new Term(\"keyword\", \"test\"));\n    \n    // ensure that queries return expected results without DateFilter first\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n    assertEquals(3, hits.length);\n    int result = 0;\n    for (int i = 0; i < 3; i++) {\n      StoredDocument doc2 = searcher.doc(hits[i].doc);\n      Field f = (Field) doc2.getField(\"id\");\n      if (f.stringValue().equals(\"id1\")) result |= 1;\n      else if (f.stringValue().equals(\"id2\")) result |= 2;\n      else if (f.stringValue().equals(\"id3\")) result |= 4;\n      else fail(\"unexpected id field\");\n    }\n    writer.close();\n    reader.close();\n    dir.close();\n    assertEquals(\"did not see all IDs\", 7, result);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"1d028314cced5858683a1bb4741423d0f934257b":["04f07771a2a7dd3a395700665ed839c3dae2def2","8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["1d028314cced5858683a1bb4741423d0f934257b"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"04f07771a2a7dd3a395700665ed839c3dae2def2":["8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4","1d028314cced5858683a1bb4741423d0f934257b"],"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"8f0e28f2a7f0f3f0fca1a2ffedaa10c7ac9536c4":["1d028314cced5858683a1bb4741423d0f934257b"],"1d028314cced5858683a1bb4741423d0f934257b":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}