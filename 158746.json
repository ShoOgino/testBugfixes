{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","sourceNew":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5de502b5478255493125e7e801411ba17a6682ec","date":1490974101,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","sourceNew":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < MINIMUM_PREFIX_LENGTH) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f20fd35e3055a0c5b387df0b986a68d65d86441","date":1491045405,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","sourceNew":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < MINIMUM_PREFIX_LENGTH) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < minimumPrefixLength) {\n        {if (true) throw new ParseException(truncationErrorMessage + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4bf8c857cdf9b9be903cae84ef15985ad090a05","date":1600342158,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser#SimpleTerm().mjava","sourceNew":"  final public SrndQuery SimpleTerm() throws ParseException {Token term;\n    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {\n    case TERM:{\n      term = jj_consume_token(TERM);\n{if (\"\" != null) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n      }\n    case QUOTED:{\n      term = jj_consume_token(QUOTED);\n{if (\"\" != null) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n      }\n    case SUFFIXTERM:{\n      term = jj_consume_token(SUFFIXTERM);\n/* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (\"\" != null) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n      }\n    case TRUNCTERM:{\n      term = jj_consume_token(TRUNCTERM);\n/* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (\"\" != null) return getTruncQuery(term.image);}\n      break;\n      }\n    case TRUNCQUOTED:{\n      term = jj_consume_token(TRUNCQUOTED);\n/* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < MINIMUM_PREFIX_LENGTH) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (\"\" != null) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n      }\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n}\n\n","sourceOld":"  final public SrndQuery SimpleTerm() throws ParseException {\n  Token term;\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case TERM:\n      term = jj_consume_token(TERM);\n     {if (true) return getTermQuery(term.image, false /* not quoted */);}\n      break;\n    case QUOTED:\n      term = jj_consume_token(QUOTED);\n     {if (true) return getTermQuery(term.image.substring(1, term.image.length()-1), true /* quoted */);}\n      break;\n    case SUFFIXTERM:\n      term = jj_consume_token(SUFFIXTERM);\n                        /* ending in * */\n      if (! allowedSuffix(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(0, term.image.length()-1), false /* not quoted */);}\n      break;\n    case TRUNCTERM:\n      term = jj_consume_token(TRUNCTERM);\n                       /* with at least one * or ? */\n      if (! allowedTruncation(term.image)) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getTruncQuery(term.image);}\n      break;\n    case TRUNCQUOTED:\n      term = jj_consume_token(TRUNCQUOTED);\n                         /* eg. \"9b-b,m\"* */\n      if ((term.image.length() - 3) < MINIMUM_PREFIX_LENGTH) {\n        {if (true) throw new ParseException(TRUNCATION_ERROR_MESSAGE + term.image);}\n      }\n      {if (true) return getPrefixQuery(term.image.substring(1, term.image.length()-2), true /* quoted */);}\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5de502b5478255493125e7e801411ba17a6682ec":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["5de502b5478255493125e7e801411ba17a6682ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["5de502b5478255493125e7e801411ba17a6682ec","6f20fd35e3055a0c5b387df0b986a68d65d86441"],"5de502b5478255493125e7e801411ba17a6682ec":["c4bf8c857cdf9b9be903cae84ef15985ad090a05"],"6f20fd35e3055a0c5b387df0b986a68d65d86441":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c4bf8c857cdf9b9be903cae84ef15985ad090a05":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6f20fd35e3055a0c5b387df0b986a68d65d86441","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}