{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ResidualsEvaluator#doWork(Object...).mjava","commits":[{"id":"ba1e7de64990e3928b90142a52fb92eeff556475","date":1503713257,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ResidualsEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n    if(3 != values.length){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - three values expected but found %d\",toExpression(constructingFactory), values.length));\n    }\n    \n    if(Arrays.stream(values).filter(value -> null == value).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null value found\",toExpression(constructingFactory)));\n    }\n\n    if(!(values[0] instanceof RegressionEvaluator.RegressionTuple)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\",toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n    if(!(values[1] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n    }\n    if(!(values[2] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the third value, expecting a list\",toExpression(constructingFactory), values[2].getClass().getSimpleName()));\n    }\n    if(((List<?>)values[1]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the second value\",toExpression(constructingFactory)));\n    }\n    if(((List<?>)values[2]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the third value\",toExpression(constructingFactory)));\n    }    \n    \n    RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple)values[0];\n    List<?> l1 = (List<?>)values[1];\n    List<?> l2 = (List<?>)values[2];\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n    \n    List<Number> residuals = new ArrayList<>();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      double value1 = ((Number)l1.get(idx)).doubleValue();\n      double value2 = ((Number)l2.get(idx)).doubleValue();\n      \n      double prediction = regressedTuple.predict(value1);\n      double residual = value2 - prediction;\n      \n      residuals.add(residual);\n    }\n    \n    return residuals;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45c28dbb559366e1f4ef8077346552bfb3f7ecf6","date":1503738439,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ResidualsEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n    if(3 != values.length){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - three values expected but found %d\",toExpression(constructingFactory), values.length));\n    }\n    \n    if(Arrays.stream(values).filter(value -> null == value).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null value found\",toExpression(constructingFactory)));\n    }\n\n    if(!(values[0] instanceof RegressionEvaluator.RegressionTuple)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\",toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n    if(!(values[1] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n    }\n    if(!(values[2] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the third value, expecting a list\",toExpression(constructingFactory), values[2].getClass().getSimpleName()));\n    }\n    if(((List<?>)values[1]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the second value\",toExpression(constructingFactory)));\n    }\n    if(((List<?>)values[2]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the third value\",toExpression(constructingFactory)));\n    }    \n    \n    RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple)values[0];\n    List<?> l1 = (List<?>)values[1];\n    List<?> l2 = (List<?>)values[2];\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n    \n    List<Number> residuals = new ArrayList<>();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      double value1 = ((Number)l1.get(idx)).doubleValue();\n      double value2 = ((Number)l2.get(idx)).doubleValue();\n      \n      double prediction = regressedTuple.predict(value1);\n      double residual = value2 - prediction;\n      \n      residuals.add(residual);\n    }\n    \n    return residuals;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a7809d1d753b67f48b1a706e17034bf8b624ea3","date":1504366927,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ResidualsEvaluator#doWork(Object...).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n    if(3 != values.length){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - three values expected but found %d\",toExpression(constructingFactory), values.length));\n    }\n    \n    if(Arrays.stream(values).filter(value -> null == value).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null value found\",toExpression(constructingFactory)));\n    }\n\n    if(!(values[0] instanceof RegressionEvaluator.RegressionTuple)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\",toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n    if(!(values[1] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n    }\n    if(!(values[2] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the third value, expecting a list\",toExpression(constructingFactory), values[2].getClass().getSimpleName()));\n    }\n    if(((List<?>)values[1]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the second value\",toExpression(constructingFactory)));\n    }\n    if(((List<?>)values[2]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the third value\",toExpression(constructingFactory)));\n    }    \n    \n    RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple)values[0];\n    List<?> l1 = (List<?>)values[1];\n    List<?> l2 = (List<?>)values[2];\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n    \n    List<Number> residuals = new ArrayList<>();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      double value1 = ((Number)l1.get(idx)).doubleValue();\n      double value2 = ((Number)l2.get(idx)).doubleValue();\n      \n      double prediction = regressedTuple.predict(value1);\n      double residual = value2 - prediction;\n      \n      residuals.add(residual);\n    }\n    \n    return residuals;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54","date":1512439781,"type":4,"author":"Joel Bernstein","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/ResidualsEvaluator#doWork(Object...).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Object doWork(Object ... values) throws IOException{\n    if(3 != values.length){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - three values expected but found %d\",toExpression(constructingFactory), values.length));\n    }\n    \n    if(Arrays.stream(values).filter(value -> null == value).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - null value found\",toExpression(constructingFactory)));\n    }\n\n    if(!(values[0] instanceof RegressionEvaluator.RegressionTuple)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the first value, expecting a RegressionTuple\",toExpression(constructingFactory), values[0].getClass().getSimpleName()));\n    }\n    if(!(values[1] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the second value, expecting a list\",toExpression(constructingFactory), values[1].getClass().getSimpleName()));\n    }\n    if(!(values[2] instanceof List<?>)){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - found type %s for the third value, expecting a list\",toExpression(constructingFactory), values[2].getClass().getSimpleName()));\n    }\n    if(((List<?>)values[1]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the second value\",toExpression(constructingFactory)));\n    }\n    if(((List<?>)values[2]).stream().filter(value -> !(value instanceof Number)).count() > 0){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting a list of numbers for the third value\",toExpression(constructingFactory)));\n    }    \n    \n    RegressionEvaluator.RegressionTuple regressedTuple = (RegressionEvaluator.RegressionTuple)values[0];\n    List<?> l1 = (List<?>)values[1];\n    List<?> l2 = (List<?>)values[2];\n    \n    if(l2.size() < l1.size()){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - first list (%d) has more values than the second list (%d)\",toExpression(constructingFactory), l1.size(), l2.size()));      \n    }\n    \n    List<Number> residuals = new ArrayList<>();\n    for(int idx = 0; idx < l1.size(); ++idx){\n      double value1 = ((Number)l1.get(idx)).doubleValue();\n      double value2 = ((Number)l2.get(idx)).doubleValue();\n      \n      double prediction = regressedTuple.predict(value1);\n      double residual = value2 - prediction;\n      \n      residuals.add(residual);\n    }\n    \n    return residuals;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ba1e7de64990e3928b90142a52fb92eeff556475"],"ba1e7de64990e3928b90142a52fb92eeff556475":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"]},"commit2Childs":{"3a7809d1d753b67f48b1a706e17034bf8b624ea3":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","45c28dbb559366e1f4ef8077346552bfb3f7ecf6","ba1e7de64990e3928b90142a52fb92eeff556475"],"bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"45c28dbb559366e1f4ef8077346552bfb3f7ecf6":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","bbe7f5e9d90420c7fc8cd235dd8fb33fa9befe54"],"ba1e7de64990e3928b90142a52fb92eeff556475":["45c28dbb559366e1f4ef8077346552bfb3f7ecf6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3a7809d1d753b67f48b1a706e17034bf8b624ea3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}