{"path":"src/test/org/apache/solr/TestTrie#testTrieLongRangeSearch().mjava","commits":[{"id":"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0","date":1236796963,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/TestTrie#testTrieLongRangeSearch().mjava","pathOld":"/dev/null","sourceNew":"  public void testTrieLongRangeSearch() throws Exception {\n    for (long i = Integer.MAX_VALUE, c = 0; i < (long) Integer.MAX_VALUE + 10l; i++) {\n      assertU(adoc(\"id\", String.valueOf(c++), \"tlong\", String.valueOf(i)));\n    }\n    assertU(commit());\n    String fq = \"tlong:[\" + Integer.MAX_VALUE + \" TO \" + (5l + Integer.MAX_VALUE) + \"]\";\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"fq\", fq);\n    assertQ(\"Range filter must match only 5 documents\", req, \"//*[@numFound='6']\");\n    assertQ(\"Range filter tlong:[* to *] must match 10 documents\", req(\"q\", \"*:*\", \"fq\", \"tlong:[* TO *]\"), \"//*[@numFound='10']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d72e3710bede9618eb9b2b5c6936369f3d3f9579","date":1239534189,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/TestTrie#testTrieLongRangeSearch().mjava","pathOld":"src/test/org/apache/solr/TestTrie#testTrieLongRangeSearch().mjava","sourceNew":"  public void testTrieLongRangeSearch() throws Exception {\n    for (long i = Integer.MAX_VALUE, c = 0; i < (long) Integer.MAX_VALUE + 10l; i++) {\n      assertU(adoc(\"id\", String.valueOf(c++), \"tlong\", String.valueOf(i)));\n    }\n    assertU(commit());\n    String fq = \"tlong:[\" + Integer.MAX_VALUE + \" TO \" + (5l + Integer.MAX_VALUE) + \"]\";\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"fq\", fq);\n    assertQ(\"Range filter must match only 5 documents\", req, \"//*[@numFound='6']\");\n    assertQ(\"Range filter tlong:[* to *] must match 10 documents\", req(\"q\", \"*:*\", \"fq\", \"tlong:[* TO *]\"), \"//*[@numFound='10']\");\n\n    // Sorting\n    assertQ(\"Sort descending does not work correctly on tlong fields\", req(\"q\", \"*:*\", \"sort\", \"tlong desc\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483656']\");\n    assertQ(\"Sort ascending does not work correctly on tlong fields\", req(\"q\", \"*:*\", \"sort\", \"tlong asc\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483647']\");\n\n    // Function queries\n    assertQ(\"Function queries does not work correctly on tlong fields\", req(\"q\", \"_val_:\\\"sum(tlong,1.0)\\\"\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483656']\");\n  }\n\n","sourceOld":"  public void testTrieLongRangeSearch() throws Exception {\n    for (long i = Integer.MAX_VALUE, c = 0; i < (long) Integer.MAX_VALUE + 10l; i++) {\n      assertU(adoc(\"id\", String.valueOf(c++), \"tlong\", String.valueOf(i)));\n    }\n    assertU(commit());\n    String fq = \"tlong:[\" + Integer.MAX_VALUE + \" TO \" + (5l + Integer.MAX_VALUE) + \"]\";\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"fq\", fq);\n    assertQ(\"Range filter must match only 5 documents\", req, \"//*[@numFound='6']\");\n    assertQ(\"Range filter tlong:[* to *] must match 10 documents\", req(\"q\", \"*:*\", \"fq\", \"tlong:[* TO *]\"), \"//*[@numFound='10']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/TestTrie#testTrieLongRangeSearch().mjava","pathOld":"src/test/org/apache/solr/TestTrie#testTrieLongRangeSearch().mjava","sourceNew":"  public void testTrieLongRangeSearch() throws Exception {\n    for (long i = Integer.MAX_VALUE, c = 0; i < (long) Integer.MAX_VALUE + 10l; i++) {\n      assertU(adoc(\"id\", String.valueOf(c++), \"tlong\", String.valueOf(i)));\n    }\n    assertU(commit());\n    String fq = \"tlong:[\" + Integer.MAX_VALUE + \" TO \" + (5l + Integer.MAX_VALUE) + \"]\";\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"fq\", fq);\n    assertQ(\"Range filter must match only 5 documents\", req, \"//*[@numFound='6']\");\n    assertQ(\"Range filter tlong:[* to *] must match 10 documents\", req(\"q\", \"*:*\", \"fq\", \"tlong:[* TO *]\"), \"//*[@numFound='10']\");\n\n    // Sorting\n    assertQ(\"Sort descending does not work correctly on tlong fields\", req(\"q\", \"*:*\", \"sort\", \"tlong desc\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483656']\");\n    assertQ(\"Sort ascending does not work correctly on tlong fields\", req(\"q\", \"*:*\", \"sort\", \"tlong asc\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483647']\");\n\n    // Function queries\n    assertQ(\"Function queries does not work correctly on tlong fields\", req(\"q\", \"_val_:\\\"sum(tlong,1.0)\\\"\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483656']\");\n  }\n\n","sourceOld":"  public void testTrieLongRangeSearch() throws Exception {\n    for (long i = Integer.MAX_VALUE, c = 0; i < (long) Integer.MAX_VALUE + 10l; i++) {\n      assertU(adoc(\"id\", String.valueOf(c++), \"tlong\", String.valueOf(i)));\n    }\n    assertU(commit());\n    String fq = \"tlong:[\" + Integer.MAX_VALUE + \" TO \" + (5l + Integer.MAX_VALUE) + \"]\";\n    SolrQueryRequest req = req(\"q\", \"*:*\", \"fq\", fq);\n    assertQ(\"Range filter must match only 5 documents\", req, \"//*[@numFound='6']\");\n    assertQ(\"Range filter tlong:[* to *] must match 10 documents\", req(\"q\", \"*:*\", \"fq\", \"tlong:[* TO *]\"), \"//*[@numFound='10']\");\n\n    // Sorting\n    assertQ(\"Sort descending does not work correctly on tlong fields\", req(\"q\", \"*:*\", \"sort\", \"tlong desc\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483656']\");\n    assertQ(\"Sort ascending does not work correctly on tlong fields\", req(\"q\", \"*:*\", \"sort\", \"tlong asc\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483647']\");\n\n    // Function queries\n    assertQ(\"Function queries does not work correctly on tlong fields\", req(\"q\", \"_val_:\\\"sum(tlong,1.0)\\\"\"), \"//*[@numFound='10']\", \"//long[@name='tlong'][.='2147483656']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d72e3710bede9618eb9b2b5c6936369f3d3f9579":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0"],"1d6ca4f6b8a27a0523251c56d0abeb659ef5c1b0":["d72e3710bede9618eb9b2b5c6936369f3d3f9579"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}