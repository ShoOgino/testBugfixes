{"path":"src/java/org/apache/solr/core/SolrResourceLoader#createClassLoader(File,ClassLoader).mjava","commits":[{"id":"048361614025800e582bfc7a7b0329dc6fd6a95e","date":1196999392,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrResourceLoader#createClassLoader(File,ClassLoader).mjava","pathOld":"/dev/null","sourceNew":"  static ClassLoader createClassLoader(File f, ClassLoader loader) {\n    if( loader == null ) {\n      loader = Thread.currentThread().getContextClassLoader();\n    }\n    if (f.canRead() && f.isDirectory()) {\n      File[] jarFiles = f.listFiles();\n      URL[] jars = new URL[jarFiles.length];\n      try {\n        for (int j = 0; j < jarFiles.length; j++) {\n          jars[j] = jarFiles[j].toURI().toURL();\n          log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n        }\n        return URLClassLoader.newInstance(jars, loader);\n      } catch (MalformedURLException e) {\n        SolrException.log(log,\"Can't construct solr lib class loader\", e);\n      }\n    }\n    log.info(\"Reusing parent classloader\");\n    return loader;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5dc524639edfdfa4edfb67ae889c2b6029f9314c","date":1255358511,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/SolrResourceLoader#createClassLoader(File,ClassLoader).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#createClassLoader(File,ClassLoader).mjava","sourceNew":"  /**\n   * Convenience method for getting a new ClassLoader using all files found\n   * in the specified lib directory.\n   */\n  static URLClassLoader createClassLoader(final File libDir, ClassLoader parent) {\n    if ( null == parent ) {\n      parent = Thread.currentThread().getContextClassLoader();\n    }\n    return replaceClassLoader(URLClassLoader.newInstance(new URL[0], parent),\n                              libDir, null);\n  }\n\n","sourceOld":"  static ClassLoader createClassLoader(File f, ClassLoader loader) {\n    if( loader == null ) {\n      loader = Thread.currentThread().getContextClassLoader();\n    }\n    if (f.canRead() && f.isDirectory()) {\n      File[] jarFiles = f.listFiles();\n      URL[] jars = new URL[jarFiles.length];\n      try {\n        for (int j = 0; j < jarFiles.length; j++) {\n          jars[j] = jarFiles[j].toURI().toURL();\n          log.info(\"Adding '\" + jars[j].toString() + \"' to Solr classloader\");\n        }\n        return URLClassLoader.newInstance(jars, loader);\n      } catch (MalformedURLException e) {\n        SolrException.log(log,\"Can't construct solr lib class loader\", e);\n      }\n    }\n    log.info(\"Reusing parent classloader\");\n    return loader;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/core/SolrResourceLoader#createClassLoader(File,ClassLoader).mjava","pathOld":"src/java/org/apache/solr/core/SolrResourceLoader#createClassLoader(File,ClassLoader).mjava","sourceNew":"  /**\n   * Convenience method for getting a new ClassLoader using all files found\n   * in the specified lib directory.\n   */\n  static URLClassLoader createClassLoader(final File libDir, ClassLoader parent) {\n    if ( null == parent ) {\n      parent = Thread.currentThread().getContextClassLoader();\n    }\n    return replaceClassLoader(URLClassLoader.newInstance(new URL[0], parent),\n                              libDir, null);\n  }\n\n","sourceOld":"  /**\n   * Convenience method for getting a new ClassLoader using all files found\n   * in the specified lib directory.\n   */\n  static URLClassLoader createClassLoader(final File libDir, ClassLoader parent) {\n    if ( null == parent ) {\n      parent = Thread.currentThread().getContextClassLoader();\n    }\n    return replaceClassLoader(URLClassLoader.newInstance(new URL[0], parent),\n                              libDir, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"048361614025800e582bfc7a7b0329dc6fd6a95e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"ad94625fb8d088209f46650c8097196fec67f00c":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"048361614025800e582bfc7a7b0329dc6fd6a95e":["5dc524639edfdfa4edfb67ae889c2b6029f9314c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["048361614025800e582bfc7a7b0329dc6fd6a95e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5dc524639edfdfa4edfb67ae889c2b6029f9314c":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}