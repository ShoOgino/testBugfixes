{"path":"src/common/org/apache/solr/common/util/DOMUtil#getText(Node,StringBuilder).mjava","commits":[{"id":"e3602d5eab954caecc726ab136ad580ac1ceb917","date":1228676831,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/common/org/apache/solr/common/util/DOMUtil#getText(Node,StringBuilder).mjava","pathOld":"src/java/org/apache/solr/common/util/DOMUtil#getText(Node,StringBuilder).mjava","sourceNew":"  /** @see #getText(Node) */\n  private static void getText(Node nd, StringBuilder buf) {\n\n    short type = nd.getNodeType();\n\n    switch (type) {\n\n    case Node.ELEMENT_NODE: /* fall through */\n    case Node.ENTITY_NODE: /* fall through */\n    case Node.ENTITY_REFERENCE_NODE: /* fall through */\n    case Node.DOCUMENT_FRAGMENT_NODE:\n      NodeList childs = nd.getChildNodes();\n      for (int i = 0; i < childs.getLength(); i++) {\n        Node child = childs.item(i);\n        short childType = child.getNodeType();\n        if (childType != Node.COMMENT_NODE &&\n            childType != Node.PROCESSING_INSTRUCTION_NODE) {\n          getText(child, buf);\n        }\n      }\n      break;\n\n    case Node.ATTRIBUTE_NODE: /* fall through */\n      /* Putting Attribute nodes in this section does not exactly\n         match the definition of how textContent should behave\n         according to the DOM Level-3 Core documentation - which\n         specifies that the Attr's children should have their\n         textContent concated (Attr's can have a single child which\n         is either Text node or an EntityRefrence).  In practice,\n         DOM implementations do not seem to use child nodes of\n         Attributes, storing the \"text\" directly as the nodeValue.\n         Fortunately, the DOM Spec indicates that when Attr.nodeValue\n         is read, it should return the nodeValue from the child Node,\n         so this approach should work both for strict implementations,\n         and implementations actually encountered.\n      */\n    case Node.TEXT_NODE: /* fall through */\n    case Node.CDATA_SECTION_NODE: /* fall through */\n    case Node.COMMENT_NODE: /* fall through */\n    case Node.PROCESSING_INSTRUCTION_NODE: /* fall through */\n      buf.append(nd.getNodeValue());\n      break;\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n    default:\n      /* :NOOP: */\n\n    }\n  }\n\n","sourceOld":"  /** @see #getText(Node) */\n  private static void getText(Node nd, StringBuilder buf) {\n\n    short type = nd.getNodeType();\n\n    switch (type) {\n\n    case Node.ELEMENT_NODE: /* fall through */\n    case Node.ENTITY_NODE: /* fall through */\n    case Node.ENTITY_REFERENCE_NODE: /* fall through */\n    case Node.DOCUMENT_FRAGMENT_NODE:\n      NodeList childs = nd.getChildNodes();\n      for (int i = 0; i < childs.getLength(); i++) {\n        Node child = childs.item(i);\n        short childType = child.getNodeType();\n        if (childType != Node.COMMENT_NODE &&\n            childType != Node.PROCESSING_INSTRUCTION_NODE) {\n          getText(child, buf);\n        }\n      }\n      break;\n\n    case Node.ATTRIBUTE_NODE: /* fall through */\n      /* Putting Attribute nodes in this section does not exactly\n         match the definition of how textContent should behave\n         according to the DOM Level-3 Core documentation - which\n         specifies that the Attr's children should have their\n         textContent concated (Attr's can have a single child which\n         is either Text node or an EntityRefrence).  In practice,\n         DOM implementations do not seem to use child nodes of\n         Attributes, storing the \"text\" directly as the nodeValue.\n         Fortunately, the DOM Spec indicates that when Attr.nodeValue\n         is read, it should return the nodeValue from the child Node,\n         so this approach should work both for strict implementations,\n         and implementations actually encountered.\n      */\n    case Node.TEXT_NODE: /* fall through */\n    case Node.CDATA_SECTION_NODE: /* fall through */\n    case Node.COMMENT_NODE: /* fall through */\n    case Node.PROCESSING_INSTRUCTION_NODE: /* fall through */\n      buf.append(nd.getNodeValue());\n      break;\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n    default:\n      /* :NOOP: */\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/common/org/apache/solr/common/util/DOMUtil#getText(Node,StringBuilder).mjava","pathOld":"src/common/org/apache/solr/common/util/DOMUtil#getText(Node,StringBuilder).mjava","sourceNew":"  /** @see #getText(Node) */\n  private static void getText(Node nd, StringBuilder buf) {\n\n    short type = nd.getNodeType();\n\n    switch (type) {\n\n    case Node.ELEMENT_NODE: /* fall through */\n    case Node.ENTITY_NODE: /* fall through */\n    case Node.ENTITY_REFERENCE_NODE: /* fall through */\n    case Node.DOCUMENT_FRAGMENT_NODE:\n      NodeList childs = nd.getChildNodes();\n      for (int i = 0; i < childs.getLength(); i++) {\n        Node child = childs.item(i);\n        short childType = child.getNodeType();\n        if (childType != Node.COMMENT_NODE &&\n            childType != Node.PROCESSING_INSTRUCTION_NODE) {\n          getText(child, buf);\n        }\n      }\n      break;\n\n    case Node.ATTRIBUTE_NODE: /* fall through */\n      /* Putting Attribute nodes in this section does not exactly\n         match the definition of how textContent should behave\n         according to the DOM Level-3 Core documentation - which\n         specifies that the Attr's children should have their\n         textContent concated (Attr's can have a single child which\n         is either Text node or an EntityRefrence).  In practice,\n         DOM implementations do not seem to use child nodes of\n         Attributes, storing the \"text\" directly as the nodeValue.\n         Fortunately, the DOM Spec indicates that when Attr.nodeValue\n         is read, it should return the nodeValue from the child Node,\n         so this approach should work both for strict implementations,\n         and implementations actually encountered.\n      */\n    case Node.TEXT_NODE: /* fall through */\n    case Node.CDATA_SECTION_NODE: /* fall through */\n    case Node.COMMENT_NODE: /* fall through */\n    case Node.PROCESSING_INSTRUCTION_NODE: /* fall through */\n      buf.append(nd.getNodeValue());\n      break;\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n    default:\n      /* :NOOP: */\n\n    }\n  }\n\n","sourceOld":"  /** @see #getText(Node) */\n  private static void getText(Node nd, StringBuilder buf) {\n\n    short type = nd.getNodeType();\n\n    switch (type) {\n\n    case Node.ELEMENT_NODE: /* fall through */\n    case Node.ENTITY_NODE: /* fall through */\n    case Node.ENTITY_REFERENCE_NODE: /* fall through */\n    case Node.DOCUMENT_FRAGMENT_NODE:\n      NodeList childs = nd.getChildNodes();\n      for (int i = 0; i < childs.getLength(); i++) {\n        Node child = childs.item(i);\n        short childType = child.getNodeType();\n        if (childType != Node.COMMENT_NODE &&\n            childType != Node.PROCESSING_INSTRUCTION_NODE) {\n          getText(child, buf);\n        }\n      }\n      break;\n\n    case Node.ATTRIBUTE_NODE: /* fall through */\n      /* Putting Attribute nodes in this section does not exactly\n         match the definition of how textContent should behave\n         according to the DOM Level-3 Core documentation - which\n         specifies that the Attr's children should have their\n         textContent concated (Attr's can have a single child which\n         is either Text node or an EntityRefrence).  In practice,\n         DOM implementations do not seem to use child nodes of\n         Attributes, storing the \"text\" directly as the nodeValue.\n         Fortunately, the DOM Spec indicates that when Attr.nodeValue\n         is read, it should return the nodeValue from the child Node,\n         so this approach should work both for strict implementations,\n         and implementations actually encountered.\n      */\n    case Node.TEXT_NODE: /* fall through */\n    case Node.CDATA_SECTION_NODE: /* fall through */\n    case Node.COMMENT_NODE: /* fall through */\n    case Node.PROCESSING_INSTRUCTION_NODE: /* fall through */\n      buf.append(nd.getNodeValue());\n      break;\n\n    case Node.DOCUMENT_NODE: /* fall through */\n    case Node.DOCUMENT_TYPE_NODE: /* fall through */\n    case Node.NOTATION_NODE: /* fall through */\n    default:\n      /* :NOOP: */\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e3602d5eab954caecc726ab136ad580ac1ceb917":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["e3602d5eab954caecc726ab136ad580ac1ceb917"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}