{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","commits":[{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,NormMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","sourceNew":"  // encodes values as sparse array: keys[] and values[]\n  // access is log(N) where N = keys.length (slow!)\n  // so this is only appropriate as an exception table for patched, or when common value is 0 (wont be accessed by searching) \n  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {\n    int commonCount = uniqueValues.maxFreq();\n    final long commonValue = uniqueValues.getDecodeTable()[uniqueValues.maxOrd()];\n    \n    meta.writeVInt(count - commonCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    \n    // write docs with value\n    writeDocsWithValue(values, commonValue);\n    \n    // write actual values\n    writeNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != commonValue;\n          }\n        };\n      }\n    }, 1);\n  }\n\n","sourceOld":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e15c57be968dbcac6fd3f87af0bd26a8f023e069","date":1413564565,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, long commonValue) throws IOException {\n    data.writeLong(commonValue);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != commonValue) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,NormMap).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","sourceNew":"  // encodes values as sparse array: keys[] and values[]\n  // access is log(N) where N = keys.length (slow!)\n  // so this is only appropriate as an exception table for patched, or when common value is 0 (wont be accessed by searching) \n  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, NormMap uniqueValues) throws IOException {\n    int commonCount = uniqueValues.maxFreq();\n    final long commonValue = uniqueValues.getDecodeTable()[uniqueValues.maxOrd()];\n    \n    meta.writeVInt(count - commonCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    \n    // write docs with value\n    writeDocsWithValue(values, commonValue);\n    \n    // write actual values\n    writeNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != commonValue;\n          }\n        };\n      }\n    }, 1);\n  }\n\n","sourceOld":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#writeDocsWithValue(Iterable[Number],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer#addIndirect(FieldInfo,Iterable[Number],int,int).mjava","sourceNew":"  private void writeDocsWithValue(final Iterable<Number> values, long commonValue) throws IOException {\n    data.writeLong(commonValue);\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != commonValue) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n  }\n\n","sourceOld":"  private void addIndirect(FieldInfo field, final Iterable<Number> values, int count, int missingCount) throws IOException {\n    meta.writeVInt(count - missingCount);\n    meta.writeByte(INDIRECT);\n    meta.writeLong(data.getFilePointer());\n    data.writeVInt(PackedInts.VERSION_CURRENT);\n    data.writeVInt(BLOCK_SIZE);\n    \n    // write docs with value\n    final MonotonicBlockPackedWriter writer = new MonotonicBlockPackedWriter(data, BLOCK_SIZE);\n    int doc = 0;\n    for (Number n : values) {\n      long v = n.longValue();\n      if (v != 0) {\n        writer.add(doc);\n      }\n      doc++;\n    }\n    writer.finish();\n    \n    // write actual values\n    addNormsField(field, new Iterable<Number>() {\n      @Override\n      public Iterator<Number> iterator() {\n        return new FilterIterator<Number,Number>(values.iterator()) {\n          @Override\n          protected boolean predicateFunction(Number value) {\n            return value.longValue() != 0;\n          }\n        };\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bc8f80fee115148a0e4a0574560be06b494de821":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f80fee115148a0e4a0574560be06b494de821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["bc8f80fee115148a0e4a0574560be06b494de821"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a","e15c57be968dbcac6fd3f87af0bd26a8f023e069"],"9bb9a29a5e71a90295f175df8919802993142c9a":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"e15c57be968dbcac6fd3f87af0bd26a8f023e069":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}