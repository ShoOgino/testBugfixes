{"path":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","commits":[{"id":"2c30e4c1cee08b3b229a77991882594fe7250b66","date":1344448871,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/FullSolrCloudTest#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccd3bef8f535158b50b5de3fce7ec9d84d4793e2","date":1385396751,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"471597fb2dea984680dede169da7902044b554a1","date":1385402980,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    controlClient.add(doc);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a018990398b6f88e3770ee15e67c5ec6b1bb0b23","date":1398614730,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // HttpSolrServer client = (HttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // HttpSolrServer client = (HttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // CommonsHttpSolrServer client = (CommonsHttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase#indexDoc(SolrInputDocument).mjava","sourceNew":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n\n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n\n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n\n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // HttpSolrServer client = (HttpSolrServer)\n    // clients.get(which);\n\n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","sourceOld":"  @Override\n  protected void indexDoc(SolrInputDocument doc) throws IOException,\n      SolrServerException {\n    \n    UpdateRequest req = new UpdateRequest();\n    req.add(doc);\n    req.setParam(\"CONTROL\", \"TRUE\");\n    req.process(controlClient);\n    \n    // if we wanted to randomly pick a client - but sometimes they may be\n    // down...\n    \n    // boolean pick = random.nextBoolean();\n    //\n    // int which = (doc.getField(id).toString().hashCode() & 0x7fffffff) %\n    // sliceCount;\n    //\n    // if (pick && sliceCount > 1) {\n    // which = which + ((shardCount / sliceCount) *\n    // random.nextInt(sliceCount-1));\n    // }\n    //\n    // HttpSolrServer client = (HttpSolrServer)\n    // clients.get(which);\n    \n    UpdateRequest ureq = new UpdateRequest();\n    ureq.add(doc);\n    // ureq.setParam(UpdateParams.UPDATE_CHAIN, DISTRIB_UPDATE_CHAIN);\n    ureq.process(cloudClient);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["471597fb2dea984680dede169da7902044b554a1","a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"abb23fcc2461782ab204e61213240feb77d355aa":["a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c30e4c1cee08b3b229a77991882594fe7250b66"],"471597fb2dea984680dede169da7902044b554a1":["ccd3bef8f535158b50b5de3fce7ec9d84d4793e2"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["2c30e4c1cee08b3b229a77991882594fe7250b66","471597fb2dea984680dede169da7902044b554a1"],"ccd3bef8f535158b50b5de3fce7ec9d84d4793e2":["2c30e4c1cee08b3b229a77991882594fe7250b66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"],"a018990398b6f88e3770ee15e67c5ec6b1bb0b23":["471597fb2dea984680dede169da7902044b554a1"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","2c30e4c1cee08b3b229a77991882594fe7250b66"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"471597fb2dea984680dede169da7902044b554a1":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","74f45af4339b0daf7a95c820ab88c1aea74fbce0","a018990398b6f88e3770ee15e67c5ec6b1bb0b23"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"ccd3bef8f535158b50b5de3fce7ec9d84d4793e2":["471597fb2dea984680dede169da7902044b554a1"],"a018990398b6f88e3770ee15e67c5ec6b1bb0b23":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","abb23fcc2461782ab204e61213240feb77d355aa"],"2c30e4c1cee08b3b229a77991882594fe7250b66":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","ccd3bef8f535158b50b5de3fce7ec9d84d4793e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}