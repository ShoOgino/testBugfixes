{"path":"src/java/org/apache/solr/request/NumberedTermEnum[UnInvertedField]#skipTo(Term).mjava","commits":[{"id":"9a70797e2ad3b67325d3043155af4baf6445fdd9","date":1227585729,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/NumberedTermEnum[UnInvertedField]#skipTo(Term).mjava","pathOld":"/dev/null","sourceNew":"  public boolean skipTo(Term target) throws IOException {\n    // already here\n    if (t != null && t.equals(target)) return true;\n\n    int startIdx = Arrays.binarySearch(tindex.index,target.text());\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      tenum = reader.terms(target);\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n\n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      tenum = reader.terms(target);\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && t != null && t.text().compareTo(target.text())<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      tenum = reader.terms(target.createTerm(tindex.index[startIdx]));\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be true since it's in the index\n    }\n\n\n    while (t != null && t.text().compareTo(target.text()) < 0) {\n      next();\n    }\n\n    return t != null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa89a35683d73665c61d7af1d16f41649c25e5a7","date":1228684315,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/request/NumberedTermEnum[UnInvertedField]#skipTo(Term).mjava","pathOld":"src/java/org/apache/solr/request/NumberedTermEnum[UnInvertedField]#skipTo(Term).mjava","sourceNew":"  public boolean skipTo(Term target) throws IOException {\n    // already here\n    if (t != null && t.equals(target)) return true;\n\n    int startIdx = Arrays.binarySearch(tindex.index,target.text());\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n\n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && t != null && t.text().compareTo(target.text())<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      if (tenum != null) tenum.close();            \n      tenum = reader.terms(target.createTerm(tindex.index[startIdx]));\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be true since it's in the index\n    }\n\n\n    while (t != null && t.text().compareTo(target.text()) < 0) {\n      next();\n    }\n\n    return t != null;\n  }\n\n","sourceOld":"  public boolean skipTo(Term target) throws IOException {\n    // already here\n    if (t != null && t.equals(target)) return true;\n\n    int startIdx = Arrays.binarySearch(tindex.index,target.text());\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      tenum = reader.terms(target);\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n\n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      tenum = reader.terms(target);\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && t != null && t.text().compareTo(target.text())<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      tenum = reader.terms(target.createTerm(tindex.index[startIdx]));\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be true since it's in the index\n    }\n\n\n    while (t != null && t.text().compareTo(target.text()) < 0) {\n      next();\n    }\n\n    return t != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/request/NumberedTermEnum[UnInvertedField]#skipTo(Term).mjava","pathOld":"src/java/org/apache/solr/request/NumberedTermEnum[UnInvertedField]#skipTo(Term).mjava","sourceNew":"  public boolean skipTo(Term target) throws IOException {\n    // already here\n    if (t != null && t.equals(target)) return true;\n\n    int startIdx = Arrays.binarySearch(tindex.index,target.text());\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n\n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && t != null && t.text().compareTo(target.text())<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      if (tenum != null) tenum.close();            \n      tenum = reader.terms(target.createTerm(tindex.index[startIdx]));\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be true since it's in the index\n    }\n\n\n    while (t != null && t.text().compareTo(target.text()) < 0) {\n      next();\n    }\n\n    return t != null;\n  }\n\n","sourceOld":"  public boolean skipTo(Term target) throws IOException {\n    // already here\n    if (t != null && t.equals(target)) return true;\n\n    int startIdx = Arrays.binarySearch(tindex.index,target.text());\n\n    if (startIdx >= 0) {\n      // we hit the term exactly... lucky us!\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = startIdx << tindex.intervalBits;\n      return setTerm();\n    }\n\n    // we didn't hit the term exactly\n    startIdx=-startIdx-1;\n\n    if (startIdx == 0) {\n      // our target occurs *before* the first term\n      if (tenum != null) tenum.close();\n      tenum = reader.terms(target);\n      pos = 0;\n      return setTerm();\n    }\n\n    // back up to the start of the block\n    startIdx--;\n\n    if ((pos >> tindex.intervalBits) == startIdx && t != null && t.text().compareTo(target.text())<=0) {\n      // we are already in the right block and the current term is before the term we want,\n      // so we don't need to seek.\n    } else {\n      // seek to the right block\n      if (tenum != null) tenum.close();            \n      tenum = reader.terms(target.createTerm(tindex.index[startIdx]));\n      pos = startIdx << tindex.intervalBits;\n      setTerm();  // should be true since it's in the index\n    }\n\n\n    while (t != null && t.text().compareTo(target.text()) < 0) {\n      next();\n    }\n\n    return t != null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fa89a35683d73665c61d7af1d16f41649c25e5a7":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fa89a35683d73665c61d7af1d16f41649c25e5a7":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["9a70797e2ad3b67325d3043155af4baf6445fdd9"],"9a70797e2ad3b67325d3043155af4baf6445fdd9":["fa89a35683d73665c61d7af1d16f41649c25e5a7"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}