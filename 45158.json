{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer,ZkController).mjava","commits":[{"id":"5b8cffee0b9c10b78bd087c71485b482217fe84f","date":1505950827,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer,ZkController).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer).mjava","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container, ZkController zkController) {\n    super(zkController.getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.zkController = zkController;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(zkController.getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container) {\n    super(container.getZkController().getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(container.getZkController().getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer,ZkController).mjava","pathOld":"/dev/null","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container, ZkController zkController) {\n    super(zkController.getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.zkController = zkController;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(zkController.getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer,ZkController).mjava","pathOld":"/dev/null","sourceNew":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container, ZkController zkController) {\n    super(zkController.getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.zkController = zkController;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(zkController.getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/NodeAddedTrigger#NodeAddedTrigger(String,Map[String,Object],CoreContainer,ZkController).mjava","sourceNew":null,"sourceOld":"  public NodeAddedTrigger(String name, Map<String, Object> properties,\n                          CoreContainer container, ZkController zkController) {\n    super(zkController.getZkClient());\n    this.name = name;\n    this.properties = properties;\n    this.container = container;\n    this.zkController = zkController;\n    this.timeSource = TimeSource.CURRENT_TIME;\n    this.processorRef = new AtomicReference<>();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = container.getResourceLoader().newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n    lastLiveNodes = new HashSet<>(zkController.getZkStateReader().getClusterState().getLiveNodes());\n    log.debug(\"Initial livenodes: {}\", lastLiveNodes);\n    this.enabled = Boolean.parseBoolean(String.valueOf(properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Long) properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    this.eventType = TriggerEventType.valueOf(properties.get(\"event\").toString().toUpperCase(Locale.ROOT));\n    log.debug(\"NodeAddedTrigger {} instantiated with properties: {}\", name, properties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8cffee0b9c10b78bd087c71485b482217fe84f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","5b8cffee0b9c10b78bd087c71485b482217fe84f","560c18d71dad43d675158783c3840f8c80d6d39c"],"5b8cffee0b9c10b78bd087c71485b482217fe84f":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}