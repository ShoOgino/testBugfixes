{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getChildrenArrays().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getChildrenArrays().mjava","pathOld":"/dev/null","sourceNew":"  public ChildrenArrays getChildrenArrays() {\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getChildrenArrays().mjava","pathOld":"/dev/null","sourceNew":"  public ChildrenArrays getChildrenArrays() {\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getChildrenArrays().mjava","pathOld":"/dev/null","sourceNew":"  public ChildrenArrays getChildrenArrays() {\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fea68ff83c1db2f720597dfcea5bee943a35f35","date":1317817445,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getChildrenArrays().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getChildrenArrays().mjava","sourceNew":"  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","sourceOld":"  public ChildrenArrays getChildrenArrays() {\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader#getChildrenArrays().mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/LuceneTaxonomyReader#getChildrenArrays().mjava","sourceNew":"  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","sourceOld":"  public ChildrenArrays getChildrenArrays() {\n    ensureOpen();\n    // Check if the taxonomy grew since we built the array, and if it\n    // did, create new (and larger) arrays and fill them as required.\n    // We do all this under a lock, two prevent to concurrent calls to\n    // needlessly do the same array building at the same time.\n    synchronized(childrenArraysRebuild) {\n      int num = getSize();\n      int first;\n      if (childrenArrays==null) {\n        first = 0;\n      } else {\n        first = childrenArrays.getYoungestChildArray().length;\n      }\n      // If the taxonomy hasn't grown, we can return the existing object\n      // immediately\n      if (first == num) {\n        return childrenArrays;\n      }\n      // Otherwise, build new arrays for a new ChildrenArray object.\n      // These arrays start with an enlarged copy of the previous arrays,\n      // and then are modified to take into account the new categories:\n      int[] newYoungestChildArray = new int[num];\n      int[] newOlderSiblingArray = new int[num];\n      // In Java 6, we could just do Arrays.copyOf()...\n      if (childrenArrays!=null) {\n        System.arraycopy(childrenArrays.getYoungestChildArray(), 0,\n            newYoungestChildArray, 0, childrenArrays.getYoungestChildArray().length);\n        System.arraycopy(childrenArrays.getOlderSiblingArray(), 0,\n            newOlderSiblingArray, 0, childrenArrays.getOlderSiblingArray().length);\n      }\n      int[] parents = getParentArray();\n      for (int i=first; i<num; i++) {\n        newYoungestChildArray[i] = INVALID_ORDINAL;\n      }\n      // In the loop below we can ignore the root category (0) because\n      // it has no parent\n      if (first==0) {\n        first = 1;\n        newOlderSiblingArray[0] = INVALID_ORDINAL;\n      }\n      for (int i=first; i<num; i++) {\n        // Note that parents[i] is always < i, so the right-hand-side of\n        // the following line is already set when we get here.\n        newOlderSiblingArray[i] = newYoungestChildArray[parents[i]];\n        newYoungestChildArray[parents[i]] = i;\n      }\n      // Finally switch to the new arrays\n      childrenArrays = new ChildrenArraysImpl(newYoungestChildArray,\n          newOlderSiblingArray);\n      return childrenArrays;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["7fea68ff83c1db2f720597dfcea5bee943a35f35"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"]},"commit2Childs":{"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7fea68ff83c1db2f720597dfcea5bee943a35f35":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7fea68ff83c1db2f720597dfcea5bee943a35f35","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}