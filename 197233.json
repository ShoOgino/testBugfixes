{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final String val) {\n        return (val.charAt(0)-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final String val) {\n        return (float) Math.sqrt( val.charAt(0) );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final String val) {\n        return (val.charAt(0)-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final String val) {\n        return Math.pow( val.charAt(0), (val.charAt(0)-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final String val) {\n        return (byte) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final String val) {\n        return (short) (val.charAt(0)-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testCustomFieldParserSort().mjava","sourceNew":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","sourceOld":"  /** \n   * test sorts where the type of field is specified and a custom field parser \n   * is used, that uses a simple char encoding. The sorted string contains a \n   * character beginning from 'A' that is mapped to a numeric value using some \n   * \"funny\" algorithm to be different for each data type.\n   */\n  public void testCustomFieldParserSort() throws Exception {\n    // since tests explicilty uses different parsers on the same fieldname\n    // we explicitly check/purge the FieldCache between each assertMatch\n    FieldCache fc = FieldCache.DEFAULT;\n\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.IntParser(){\n      public final int parseInt(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 123456;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" IntParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.FloatParser(){\n      public final float parseFloat(final BytesRef term) {\n        return (float) Math.sqrt( term.bytes[term.offset] );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" FloatParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.LongParser(){\n      public final long parseLong(final BytesRef term) {\n        return (term.bytes[term.offset]-'A') * 1234567890L;\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" LongParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.DoubleParser(){\n      public final double parseDouble(final BytesRef term) {\n        return Math.pow( term.bytes[term.offset], (term.bytes[term.offset]-'A') );\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" DoubleParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ByteParser(){\n      public final byte parseByte(final BytesRef term) {\n        return (byte) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ByteParser\");\n    fc.purgeAllCaches();\n\n    sort.setSort (new SortField (\"parser\", new FieldCache.ShortParser(){\n      public final short parseShort(final BytesRef term) {\n        return (short) (term.bytes[term.offset]-'A');\n      }\n    }), SortField.FIELD_DOC );\n    assertMatches (full, queryA, sort, \"JIHGFEDCBA\");\n    assertSaneFieldCaches(getName() + \" ShortParser\");\n    fc.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}