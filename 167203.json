{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","commits":[{"id":"251550f5d19b526a76f8c5126ae7bb2d22cf8935","date":1315202008,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"lucene/contrib/xml-query-parser/src/test/org/apache/lucene/xmlparser/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","date":1323050351,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir, true);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new NumericField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      NumericField numericField = new NumericField(\"date2\");\n      numericField.setIntValue(Integer.valueOf(date));\n      doc.add(numericField);\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":["b68b0aeb05de4dd5b24fc5ffd51e2fbd5d571df2"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a78a90fc9701e511308346ea29f4f5e548bb39fe","date":1329489995,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new NumericField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":["fa0f44f887719e97183771e977cfc4bfb485b766"],"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random, MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/xml/TestParser#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // TODO: rewrite test (this needs to set QueryParser.enablePositionIncrements, too, for work with CURRENT):\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.WHITESPACE, true, MockTokenFilter.ENGLISH_STOPSET, false);\n    //initialize the parser\n    builder = new CorePlusExtensionsParser(\"contents\", analyzer);\n\n    BufferedReader d = new BufferedReader(new InputStreamReader(TestParser.class.getResourceAsStream(\"reuters21578.txt\")));\n    dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(Version.LUCENE_40, analyzer));\n    String line = d.readLine();\n    while (line != null) {\n      int endOfDate = line.indexOf('\\t');\n      String date = line.substring(0, endOfDate).trim();\n      String content = line.substring(endOfDate).trim();\n      Document doc = new Document();\n      doc.add(newField(\"date\", date, TextField.TYPE_STORED));\n      doc.add(newField(\"contents\", content, TextField.TYPE_STORED));\n      doc.add(new IntField(\"date2\", Integer.valueOf(date)));\n      writer.addDocument(doc);\n      line = d.readLine();\n    }\n    d.close();\n    writer.close();\n    reader = IndexReader.open(dir);\n    searcher = newSearcher(reader);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["fa0f44f887719e97183771e977cfc4bfb485b766"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["251550f5d19b526a76f8c5126ae7bb2d22cf8935","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["251550f5d19b526a76f8c5126ae7bb2d22cf8935","9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"a78a90fc9701e511308346ea29f4f5e548bb39fe":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["251550f5d19b526a76f8c5126ae7bb2d22cf8935"],"fa0f44f887719e97183771e977cfc4bfb485b766":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"251550f5d19b526a76f8c5126ae7bb2d22cf8935":["9f2f1c6050eb49fa5cb22fbdf977c76e65ea3caf","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","fa0f44f887719e97183771e977cfc4bfb485b766"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}