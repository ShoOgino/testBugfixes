{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testFileListShouldReportErrorsWhenTheyOccur().mjava","commits":[{"id":"5cb65c1c2f90852e718f86c8be09beb1c4dba408","date":1543785784,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testFileListShouldReportErrorsWhenTheyOccur().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFileListShouldReportErrorsWhenTheyOccur() throws Exception {\n    SolrQuery q = new SolrQuery();\n    q.add(\"qt\", \"/replication\")\n        .add(\"wt\", \"json\")\n        .add(\"command\", \"filelist\")\n        .add(\"generation\", \"-1\"); // A 'generation' value not matching any commit point should cause error.\n    QueryResponse response = slaveClient.query(q);\n    NamedList<Object> resp = response.getResponse();\n    assertNotNull(resp);\n    assertEquals(\"ERROR\", resp.get(\"status\"));\n    assertEquals(\"invalid index generation\", resp.get(\"message\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d505b8f51b856e1b7e9dd377f5050c337b797a","date":1549455307,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testFileListShouldReportErrorsWhenTheyOccur().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testFileListShouldReportErrorsWhenTheyOccur().mjava","sourceNew":"  @Test\n  public void testFileListShouldReportErrorsWhenTheyOccur() throws Exception {\n    SolrQuery q = new SolrQuery();\n    q.add(\"qt\", \"/replication\")\n        .add(\"wt\", \"json\")\n        .add(\"command\", \"filelist\")\n        .add(\"generation\", \"-2\"); // A 'generation' value not matching any commit point should cause error.\n    QueryResponse response = slaveClient.query(q);\n    NamedList<Object> resp = response.getResponse();\n    assertNotNull(resp);\n    assertEquals(\"ERROR\", resp.get(\"status\"));\n    assertEquals(\"invalid index generation\", resp.get(\"message\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFileListShouldReportErrorsWhenTheyOccur() throws Exception {\n    SolrQuery q = new SolrQuery();\n    q.add(\"qt\", \"/replication\")\n        .add(\"wt\", \"json\")\n        .add(\"command\", \"filelist\")\n        .add(\"generation\", \"-1\"); // A 'generation' value not matching any commit point should cause error.\n    QueryResponse response = slaveClient.query(q);\n    NamedList<Object> resp = response.getResponse();\n    assertNotNull(resp);\n    assertEquals(\"ERROR\", resp.get(\"status\"));\n    assertEquals(\"invalid index generation\", resp.get(\"message\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testFileListShouldReportErrorsWhenTheyOccur().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testFileListShouldReportErrorsWhenTheyOccur().mjava","sourceNew":"  @Test\n  public void testFileListShouldReportErrorsWhenTheyOccur() throws Exception {\n    SolrQuery q = new SolrQuery();\n    q.add(\"qt\", \"/replication\")\n        .add(\"wt\", \"json\")\n        .add(\"command\", \"filelist\")\n        .add(\"generation\", \"-2\"); // A 'generation' value not matching any commit point should cause error.\n    QueryResponse response = followerClient.query(q);\n    NamedList<Object> resp = response.getResponse();\n    assertNotNull(resp);\n    assertEquals(\"ERROR\", resp.get(\"status\"));\n    assertEquals(\"invalid index generation\", resp.get(\"message\"));\n  }\n\n","sourceOld":"  @Test\n  public void testFileListShouldReportErrorsWhenTheyOccur() throws Exception {\n    SolrQuery q = new SolrQuery();\n    q.add(\"qt\", \"/replication\")\n        .add(\"wt\", \"json\")\n        .add(\"command\", \"filelist\")\n        .add(\"generation\", \"-2\"); // A 'generation' value not matching any commit point should cause error.\n    QueryResponse response = slaveClient.query(q);\n    NamedList<Object> resp = response.getResponse();\n    assertNotNull(resp);\n    assertEquals(\"ERROR\", resp.get(\"status\"));\n    assertEquals(\"invalid index generation\", resp.get(\"message\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5cb65c1c2f90852e718f86c8be09beb1c4dba408"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"5cb65c1c2f90852e718f86c8be09beb1c4dba408":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}