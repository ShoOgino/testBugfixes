{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","commits":[{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"/dev/null","sourceNew":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n      \n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n\n    // TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:\n    //state.docs.grow(count);\n    int docID = 0;\n    for(int i=0;i<count;i++) {\n      docID += in.readVInt();\n      visitor.visit(docID);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n      \n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    // TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:\n    //state.docs.grow(count);\n    for(int i=0;i<count;i++) {\n      visitor.visit(in.readInt());\n    }\n  }\n\n","sourceOld":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n      \n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n\n    // TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:\n    //state.docs.grow(count);\n    int docID = 0;\n    for(int i=0;i<count;i++) {\n      docID += in.readVInt();\n      visitor.visit(docID);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7","date":1447172780,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n      \n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    for(int i=0;i<count;i++) {\n      visitor.visit(in.readInt());\n    }\n  }\n\n","sourceOld":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n      \n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    // TODO: especially for the 1D case, this was a decent speedup, because caller could know it should budget for around XXX docs:\n    //state.docs.grow(count);\n    for(int i=0;i<count;i++) {\n      visitor.visit(in.readInt());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","date":1467616421,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","sourceOld":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n      \n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    for(int i=0;i<count;i++) {\n      visitor.visit(in.readInt());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","sourceOld":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n      \n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    for(int i=0;i<count;i++) {\n      visitor.visit(in.readInt());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  private void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","sourceOld":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  private void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","sourceOld":"  protected void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d31002d4824498d05fb6c4676a515b1fef8f41ce","date":1486389627,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  private void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    // No need to call grow(), it has been called up-front\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","sourceOld":"  private void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    visitor.grow(count);\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDReader#visitDocIDs(IndexInput,long,IntersectVisitor).mjava","sourceNew":"  private void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    // No need to call grow(), it has been called up-front\n\n    DocIdsWriter.readInts(in, count, visitor);\n  }\n\n","sourceOld":"  private void visitDocIDs(IndexInput in, long blockFP, IntersectVisitor visitor) throws IOException {\n    // Leaf node\n    in.seek(blockFP);\n\n    // How many points are stored in this leaf cell:\n    int count = in.readVInt();\n    // No need to call grow(), it has been called up-front\n\n    if (version < BKDWriter.VERSION_COMPRESSED_DOC_IDS) {\n      DocIdsWriter.readInts32(in, count, visitor);\n    } else {\n      DocIdsWriter.readInts(in, count, visitor);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["d31002d4824498d05fb6c4676a515b1fef8f41ce"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee"],"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7"],"d31002d4824498d05fb6c4676a515b1fef8f41ce":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7","adc24e961ba2d17d4cc061a9fde65e9059b7f1ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0e7448656541edc407546460641f47950451b16"],"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["d31002d4824498d05fb6c4676a515b1fef8f41ce","9856095f7afb5a607bf5e65077615ed91273508c"],"adc24e961ba2d17d4cc061a9fde65e9059b7f1ee":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"d31002d4824498d05fb6c4676a515b1fef8f41ce":["c0e7448656541edc407546460641f47950451b16"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"dbb73ab0a8ba4f44fac803beb5bf0a0cc182f0e7":["adc24e961ba2d17d4cc061a9fde65e9059b7f1ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}