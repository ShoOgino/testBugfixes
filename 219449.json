{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","commits":[{"id":"d0af0c31a687dd847212ae59f661152896c76516","date":1380727430,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"/dev/null","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new TermFreqArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ada2f7352a7f964fe49bccd13227c4ec38563d39","date":1381659982,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new TermFreqPayloadArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<TermFreq> keys = shuffle(\n        new TermFreq(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new TermFreqArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"41aee74b5f91a096e3fd950f4a336bc763f0e7a7","date":1381772070,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<TermFreqPayload> keys = shuffle(\n        new TermFreqPayload(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new TermFreqPayloadArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field, Reader reader) {\n          Tokenizer tokenizer = new MockTokenizer(reader);\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"374870f2181bf8cd93a47df5d988855dfab6f7cd","date":1395589518,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(\"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(\"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(\"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, \"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(TEST_VERSION_CURRENT, tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(\"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n    a.close();\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(\"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestFreeTextSuggester#testEndingHole().mjava","sourceNew":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(\"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n    a.close();\n  }\n\n","sourceOld":"  // With one ending hole, ShingleFilter produces \"of _\" and\n  // we should properly predict from that:\n  public void testEndingHole() throws Exception {\n    // Just deletes \"of\"\n    Analyzer a = new Analyzer() {\n        @Override\n        public TokenStreamComponents createComponents(String field) {\n          Tokenizer tokenizer = new MockTokenizer();\n          CharArraySet stopSet = StopFilter.makeStopSet(\"of\");\n          return new TokenStreamComponents(tokenizer, new StopFilter(tokenizer, stopSet));\n        }\n      };\n\n    Iterable<Input> keys = AnalyzingSuggesterTest.shuffle(\n        new Input(\"wizard of oz\", 50)\n    );\n    FreeTextSuggester sug = new FreeTextSuggester(a, a, 3, (byte) 0x20);\n    sug.build(new InputArrayIterator(keys));\n    assertEquals(\"wizard _ oz/1.00\",\n                 toString(sug.lookup(\"wizard of\", 10)));\n\n    // Falls back to unigram model, with backoff 0.4 times\n    // prop 0.5:\n    assertEquals(\"oz/0.20\",\n                 toString(sug.lookup(\"wizard o\", 10)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"d0af0c31a687dd847212ae59f661152896c76516":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["d0af0c31a687dd847212ae59f661152896c76516"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"41aee74b5f91a096e3fd950f4a336bc763f0e7a7":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["374870f2181bf8cd93a47df5d988855dfab6f7cd"],"d0af0c31a687dd847212ae59f661152896c76516":["ada2f7352a7f964fe49bccd13227c4ec38563d39"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0af0c31a687dd847212ae59f661152896c76516"],"374870f2181bf8cd93a47df5d988855dfab6f7cd":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"ada2f7352a7f964fe49bccd13227c4ec38563d39":["41aee74b5f91a096e3fd950f4a336bc763f0e7a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}