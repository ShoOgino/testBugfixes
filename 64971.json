{"path":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","commits":[{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList,String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"/dev/null","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"/dev/null","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","pathOld":"solr/src/java/org/apache/solr/handler/ReplicationHandler#addVal(NamedList[Object],String,Properties,Class).mjava","sourceNew":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","sourceOld":"  private void addVal(NamedList<Object> nl, String key, Properties props, Class clzz) {\n    String s = props.getProperty(key);\n    if (s == null || s.trim().length() == 0) return;\n    if (clzz == Date.class) {\n      try {\n        Long l = Long.parseLong(s);\n        nl.add(key, new Date(l).toString());\n      } catch (NumberFormatException e) {/*no op*/ }\n    } else if (clzz == List.class) {\n      String ss[] = s.split(\",\");\n      List<String> l = new ArrayList<String>();\n      for (int i = 0; i < ss.length; i++) {\n        l.add(new Date(Long.valueOf(ss[i])).toString());\n      }\n      nl.add(key, l);\n    } else {\n      nl.add(key, s);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5f7137bd9491c6596681b1f56e481e17964e581":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["b5f7137bd9491c6596681b1f56e481e17964e581"],"c26f00b574427b55127e869b935845554afde1fa":["b5f7137bd9491c6596681b1f56e481e17964e581","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5f7137bd9491c6596681b1f56e481e17964e581"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b5f7137bd9491c6596681b1f56e481e17964e581"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5f7137bd9491c6596681b1f56e481e17964e581"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"b5f7137bd9491c6596681b1f56e481e17964e581":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5f7137bd9491c6596681b1f56e481e17964e581","29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}