{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    if (fisVersion != (fieldInfosVersion = getFieldInfos().getVersion())) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    if (fisVersion != (fieldInfosVersion = getFieldInfos().getVersion())) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    // nocommit: fix this once we detangle\n    if (true /* fisVersion != (fieldInfosVersion = getFieldInfos().getVersion()) */) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    if (fisVersion != (fieldInfosVersion = getFieldInfos().getVersion())) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87a2736c3060d15fd81420b05f93969ecab4f759","date":1337138793,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    // nocommit\n    FieldInfos infos = getFieldInfos();\n    if (infos instanceof MutableFieldInfos && fisVersion != (fieldInfosVersion = ((MutableFieldInfos)infos).getVersion())) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    // nocommit: fix this once we detangle\n    if (true /* fisVersion != (fieldInfosVersion = getFieldInfos().getVersion()) */) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2dee33619431ada2a7a07f5fe2dbd94bac6a460","date":1337274029,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n    if (files == null) {\n      // nocommit maybe don't cache...?\n      // Cache\n      final Set<String> fileSet = new HashSet<String>();\n      codec.files(this, fileSet);\n      files = findMatchingFiles(dir, fileSet);\n    }\n\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    // nocommit\n    FieldInfos infos = getFieldInfos();\n    if (infos instanceof MutableFieldInfos && fisVersion != (fieldInfosVersion = ((MutableFieldInfos)infos).getVersion())) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc834f3412d287003cc04691da380b69ab983239","date":1337276089,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n    final Set<String> fileSet = new HashSet<String>();\n    codec.files(this, fileSet);\n    return findMatchingFiles(dir, fileSet);\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    if (files == null) {\n      // nocommit maybe don't cache...?\n      // Cache\n      final Set<String> fileSet = new HashSet<String>();\n      codec.files(this, fileSet);\n      files = findMatchingFiles(dir, fileSet);\n    }\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a8b14bc4241c302311422d5c6f7627f8febb86e","date":1337291675,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public List<String> files() throws IOException {\n    if (files == null) {\n      // nocommit can we remove this again....?\n      final Set<String> fileSet = new HashSet<String>();\n      codec.files(this, fileSet);\n      files = findMatchingFiles(name, dir, fileSet);\n    }\n    return files;\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    final Set<String> fileSet = new HashSet<String>();\n    codec.files(this, fileSet);\n    return findMatchingFiles(dir, fileSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1494abe5dc85557ec2e2772f87660d48f831c3a5","date":1337614370,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public Collection<String> files() throws IOException {\n    // nocommit make sure when we are called we really have\n    // files set ...\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n\n    Set<String> files = new HashSet<String>(setFiles);\n\n    // nocommit make this take list instead...?\n    // Must separately add any live docs files:\n    codec.liveDocsFormat().files(this, files);\n\n    return new ArrayList<String>(files);\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    if (files == null) {\n      // nocommit can we remove this again....?\n      final Set<String> fileSet = new HashSet<String>();\n      codec.files(this, fileSet);\n      files = findMatchingFiles(name, dir, fileSet);\n    }\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  // nocommit remove this temporarily to see who is calling\n  // it ...  very dangerous having this one AND SIPC.files()\n  public Collection<String> files() throws IOException {\n    // nocommit make sure when we are called we really have\n    // files set ...\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return setFiles;\n  }\n\n","sourceOld":"  public Collection<String> files() throws IOException {\n    // nocommit make sure when we are called we really have\n    // files set ...\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n\n    Set<String> files = new HashSet<String>(setFiles);\n\n    // nocommit make this take list instead...?\n    // Must separately add any live docs files:\n    codec.liveDocsFormat().files(this, files);\n\n    return new ArrayList<String>(files);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5728b83dbb3e002cdd22adfe6caf103a96ef15","date":1337791289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public Set<String> files() throws IOException {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  // nocommit remove this temporarily to see who is calling\n  // it ...  very dangerous having this one AND SIPC.files()\n  public Collection<String> files() throws IOException {\n    // nocommit make sure when we are called we really have\n    // files set ...\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return setFiles;\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public Set<String> files() throws IOException {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  public List<String> files() throws IOException {\n    final long fisVersion = fieldInfosVersion;\n    if (fisVersion != (fieldInfosVersion = getFieldInfos().getVersion())) {\n      clearFilesCache(); // FIS has modifications - need to recompute\n    } else if (files != null) {\n      // Already cached:\n      return files;\n    }\n    final Set<String> fileSet = new HashSet<String>();\n\n    codec.files(this, fileSet);\n\n    files = new ArrayList<String>(fileSet);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  public Set<String> files() throws IOException {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","bugFix":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  public Set<String> files() throws IOException {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  /** Return all files referenced by this SegmentInfo. */\n  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  /** Return all files referenced by this SegmentInfo. */\n  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet; segment=\" + name + \" maxDoc=\" + maxDoc);\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  /** Return all files referenced by this SegmentInfo. */\n  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  /** Return all files referenced by this SegmentInfo. */\n  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet; segment=\" + name + \" maxDoc=\" + maxDoc);\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  /** Return all files referenced by this SegmentInfo. */\n  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfo#files().mjava","sourceNew":"  /** Return all files referenced by this SegmentInfo. */\n  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet; segment=\" + name + \" maxDoc=\" + maxDoc);\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","sourceOld":"  /** Return all files referenced by this SegmentInfo. */\n  public Set<String> files() {\n    if (setFiles == null) {\n      throw new IllegalStateException(\"files were not computed yet\");\n    }\n    return Collections.unmodifiableSet(setFiles);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["fc834f3412d287003cc04691da380b69ab983239"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"fc834f3412d287003cc04691da380b69ab983239":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["c14aed69f37b57db63b1fccc0740b17060a08f2b","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"28288370235ed02234a64753cdbf0c6ec096304a":["c14aed69f37b57db63b1fccc0740b17060a08f2b","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"87a2736c3060d15fd81420b05f93969ecab4f759":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["87a2736c3060d15fd81420b05f93969ecab4f759"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"4a8b14bc4241c302311422d5c6f7627f8febb86e":["1494abe5dc85557ec2e2772f87660d48f831c3a5"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"fc834f3412d287003cc04691da380b69ab983239":["4a8b14bc4241c302311422d5c6f7627f8febb86e"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["87a2736c3060d15fd81420b05f93969ecab4f759"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1494abe5dc85557ec2e2772f87660d48f831c3a5":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"87a2736c3060d15fd81420b05f93969ecab4f759":["d2dee33619431ada2a7a07f5fe2dbd94bac6a460"],"d2dee33619431ada2a7a07f5fe2dbd94bac6a460":["fc834f3412d287003cc04691da380b69ab983239"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c14aed69f37b57db63b1fccc0740b17060a08f2b"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}