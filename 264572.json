{"path":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","commits":[{"id":"1edabd582609f54032bad1c31dc5efe38070127e","date":1404739071,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"BoostedScorer\\n\" +\n          \"    BOOSTED TermScorer body:nutch\", summary);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f","date":1421314520,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","sourceNew":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery2 query = new BooleanQuery2();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"BoostedScorer\\n\" +\n          \"    BOOSTED TermScorer body:nutch\", summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery query = new BooleanQuery();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"BoostedScorer\\n\" +\n          \"    BOOSTED TermScorer body:nutch\", summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","sourceNew":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    scorerSearcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"BoostedScorer\\n\" +\n          \"    BOOSTED TermScorer body:nutch\", summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery2 query = new BooleanQuery2();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    searcher.search(query, collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"BoostedScorer\\n\" +\n          \"    BOOSTED TermScorer body:nutch\", summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","sourceNew":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    scorerSearcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"TermScorer body:nutch\", summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    scorerSearcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"BoostedScorer\\n\" +\n          \"    BOOSTED TermScorer body:nutch\", summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQueryVisitSubscorers#testGetChildrenBoosterScorer().mjava","sourceNew":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    scorerSearcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"TermScorer body:nutch\", summary);\n    }\n  }\n\n","sourceOld":"  public void testGetChildrenBoosterScorer() throws IOException {\n    final BooleanQuery.Builder query = new BooleanQuery.Builder();\n    query.add(new TermQuery(new Term(F2, \"nutch\")), Occur.SHOULD);\n    query.add(new TermQuery(new Term(F2, \"miss\")), Occur.SHOULD);\n    ScorerSummarizingCollector collector = new ScorerSummarizingCollector();\n    scorerSearcher.search(query.build(), collector);\n    assertEquals(1, collector.getNumHits());\n    assertFalse(collector.getSummaries().isEmpty());\n    for (String summary : collector.getSummaries()) {\n      assertEquals(\n          \"BoostedScorer\\n\" +\n          \"    BOOSTED TermScorer body:nutch\", summary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"1edabd582609f54032bad1c31dc5efe38070127e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["1edabd582609f54032bad1c31dc5efe38070127e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"1edabd582609f54032bad1c31dc5efe38070127e":["f582f18c13d4852b01d4fe0a0196432c5c6f2b7f"],"f582f18c13d4852b01d4fe0a0196432c5c6f2b7f":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1edabd582609f54032bad1c31dc5efe38070127e"],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}