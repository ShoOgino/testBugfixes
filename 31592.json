{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","commits":[{"id":"a4d374b2bebd0d52acaa61038fbf23068620fba7","date":1353240004,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getDirectNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getDirectNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6837aa82c41dc48163e43628d0c3d29d47915b0","date":1353334604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7178a82d1134111f4511f28bb9ad57573a57d93","date":1354112608,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            // nocommit bounds check docID?  spooky\n            // because if we don't you can maybe get\n            // value from the wrong field ...\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // This can happen, in exceptional cases, where the\n      // only doc containing a field hit a non-aborting\n      // exception.  The field then appears in FieldInfos,\n      // marked as indexed and !omitNorms, and then merging\n      // will try to retrieve it:\n      // nocommit can we somehow avoid this ...?\n      if (field == null) {\n        return null;\n      }\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2899ae5069a2533466ac842042478e67263e1f43","date":1354624628,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // This can happen, in exceptional cases, where the\n      // only doc containing a field hit a non-aborting\n      // exception.  The field then appears in FieldInfos,\n      // marked as indexed and !omitNorms, and then merging\n      // will try to retrieve it:\n      // nocommit can we somehow avoid this ...?\n      if (field == null) {\n        return null;\n      }\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data;\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // This can happen, in exceptional cases, where the\n      // only doc containing a field hit a non-aborting\n      // exception.  The field then appears in FieldInfos,\n      // marked as indexed and !omitNorms, and then merging\n      // will try to retrieve it:\n      // nocommit can we somehow avoid this ...?\n      if (field == null) {\n        return null;\n      }\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30664cb1b9c7d634d5001fa13052e8adb962ea7c","date":1355178731,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data;\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n\n      // This can happen, in exceptional cases, where the\n      // only doc containing a field hit a non-aborting\n      // exception.  The field then appears in FieldInfos,\n      // marked as indexed and !omitNorms, and then merging\n      // will try to retrieve it:\n      // nocommit can we somehow avoid this ...?\n      if (field == null) {\n        return null;\n      }\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data;\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ed00c8118962f490744732ab611c595c91b80d1c","date":1356020966,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data;\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32fb848e256860b63adc9c2b068f386032c77b67","date":1357587205,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public long minValue() {\n          return field.minValue;\n        }\n\n        @Override\n        public long maxValue() {\n          return field.maxValue;\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a","date":1357739321,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n\n        @Override\n        public int size() {\n          return maxDoc;\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextSimpleDocValuesFormat.SimpleTextDocValuesReader#getNumeric(FieldInfo).mjava","sourceNew":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public NumericDocValues getNumeric(FieldInfo fieldInfo) throws IOException {\n      final OneField field = fields.get(fieldInfo.name);\n      assert field != null;\n\n      // SegmentCoreReaders already verifies this field is\n      // valid:\n      assert field != null: \"field=\" + fieldInfo.name + \" fields=\" + fields;\n\n      final IndexInput in = data.clone();\n      final BytesRef scratch = new BytesRef();\n      final DecimalFormat decoder = new DecimalFormat(field.pattern, new DecimalFormatSymbols(Locale.ROOT));\n\n      decoder.setParseBigDecimal(true);\n\n      return new NumericDocValues() {\n        @Override\n        public long get(int docID) {\n          try {\n            //System.out.println(Thread.currentThread().getName() + \": get docID=\" + docID + \" in=\" + in);\n            if (docID < 0 || docID >= maxDoc) {\n              throw new IndexOutOfBoundsException(\"docID must be 0 .. \" + (maxDoc-1) + \"; got \" + docID);\n            }\n            in.seek(field.dataStartFilePointer + (1+field.pattern.length())*docID);\n            SimpleTextUtil.readLine(in, scratch);\n            //System.out.println(\"parsing delta: \" + scratch.utf8ToString());\n            BigDecimal bd;\n            try {\n              bd = (BigDecimal) decoder.parse(scratch.utf8ToString());\n            } catch (ParseException pe) {\n              CorruptIndexException e = new CorruptIndexException(\"failed to parse BigDecimal value\");\n              e.initCause(pe);\n              throw e;\n            }\n            return BigInteger.valueOf(field.minValue).add(bd.toBigIntegerExact()).longValue();\n          } catch (IOException ioe) {\n            throw new RuntimeException(ioe);\n          }\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"ed00c8118962f490744732ab611c595c91b80d1c":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"2899ae5069a2533466ac842042478e67263e1f43":["55eeb2534cd53d2a985669829df942468ebf5314"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["b6837aa82c41dc48163e43628d0c3d29d47915b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"32fb848e256860b63adc9c2b068f386032c77b67":["ed00c8118962f490744732ab611c595c91b80d1c"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["2899ae5069a2533466ac842042478e67263e1f43"],"55eeb2534cd53d2a985669829df942468ebf5314":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["32fb848e256860b63adc9c2b068f386032c77b67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6837aa82c41dc48163e43628d0c3d29d47915b0":["a4d374b2bebd0d52acaa61038fbf23068620fba7"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":[],"ed00c8118962f490744732ab611c595c91b80d1c":["32fb848e256860b63adc9c2b068f386032c77b67"],"2899ae5069a2533466ac842042478e67263e1f43":["30664cb1b9c7d634d5001fa13052e8adb962ea7c"],"f7178a82d1134111f4511f28bb9ad57573a57d93":["55eeb2534cd53d2a985669829df942468ebf5314"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4d374b2bebd0d52acaa61038fbf23068620fba7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"32fb848e256860b63adc9c2b068f386032c77b67":["32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a"],"a4d374b2bebd0d52acaa61038fbf23068620fba7":["b6837aa82c41dc48163e43628d0c3d29d47915b0"],"30664cb1b9c7d634d5001fa13052e8adb962ea7c":["ed00c8118962f490744732ab611c595c91b80d1c"],"55eeb2534cd53d2a985669829df942468ebf5314":["2899ae5069a2533466ac842042478e67263e1f43"],"32608e0a08e76fe8668cd1dcca0e7a8f6d7f3f0a":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"b6837aa82c41dc48163e43628d0c3d29d47915b0":["f7178a82d1134111f4511f28bb9ad57573a57d93"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}