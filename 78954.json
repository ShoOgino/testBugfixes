{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    this.a = null;\n    a.determinize();\n    //System.out.println(\"AFTER DET tableize=\" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    //System.out.println(\"  states=\" + states.length);\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    this.a = null;\n    a.determinize();\n    //System.out.println(\"AFTER DET tableize=\" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    //System.out.println(\"  states=\" + states.length);\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(LightAutomaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = Operations.determinize(a);\n    this.automaton = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(LightAutomaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = BasicOperations.determinize(a);\n    this.automaton = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1","date":1403000163,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a);\n    this.automaton = a;\n    points = a.getStartPoints();\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    //System.out.println(\"before det a=\" + a.getNumStates());\n    a = Operations.determinize(a);\n    this.automaton = a;\n    //System.out.println(\"AFTER DET tableize= \" + tableize + \": \");\n    //System.out.println(a.toDot());\n    points = a.getStartPoints();\n    //System.out.println(\"  points=\" + Arrays.toString(points));\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    //System.out.println(\"RA: size=\" + size + \" points.length=\" + points.length + \" total=\" + (size * points.length));\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      //System.out.println(\"n=\" + n + \" acc=\" + accept[n] + \" size=\" + size);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        //System.out.println(\"  step from point=\" + c + \" n=\" + n + \" label=\" + (char) points[c] + \" -> \" + dest);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n        //System.out.println(\"  trans label=\" + points[c] + \" dest=\" + transitions[n * points.length + c]);\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n        //System.out.println(\"classmap[\" + (char) j + \"]=\" + i);\n      }\n      //System.out.println(\"  after classmap i=\" + i + \" maxInterval=\" + maxInterval);\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a);\n    this.automaton = a;\n    points = a.getStartPoints();\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a.determinize();\n    points = a.getStartPoints();\n    final State[] states = a.getNumberedStates();\n    initial = a.initial.number;\n    size = states.length;\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    for (int n = 0; n < size * points.length; n++)\n      transitions[n] = -1;\n    for (State s : states) {\n      int n = s.number;\n      accept[n] = s.accept;\n      for (int c = 0; c < points.length; c++) {\n        State q = s.step(points[c]);\n        if (q != null) transitions[n * points.length + c] = q.number;\n      }\n    }\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1])\n          i++;\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this(a, maxInterval, tableize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this.maxInterval = maxInterval;\n    a = Operations.determinize(a);\n    this.automaton = a;\n    points = a.getStartPoints();\n    initial = 0;\n    size = Math.max(1,a.getNumStates());\n    accept = new boolean[size];\n    transitions = new int[size * points.length];\n    Arrays.fill(transitions, -1);\n    for (int n=0;n<size;n++) {\n      accept[n] = a.isAccept(n);\n      for (int c = 0; c < points.length; c++) {\n        int dest = a.step(n, points[c]);\n        assert dest == -1 || dest < size;\n        transitions[n * points.length + c] = dest;\n      }\n    }\n\n    /*\n     * Set alphabet table for optimal run performance.\n     */\n    if (tableize) {\n      classmap = new int[maxInterval + 1];\n      int i = 0;\n      for (int j = 0; j <= maxInterval; j++) {\n        if (i + 1 < points.length && j == points[i + 1]) {\n          i++;\n        }\n        classmap[j] = i;\n      }\n    } else {\n      classmap = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ddee54b1c3df60fd6198e3aa64c78038a1be8df","date":1487008231,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize) {\n    this(a, alphabetSize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this(a, maxInterval, tableize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"022a4de90e0479b604264ca9c2e134c996454ab3","date":1487118265,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize) {\n    this(a, alphabetSize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this(a, maxInterval, tableize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96","date":1487122334,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this(a, maxInterval, tableize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize) {\n    this(a, alphabetSize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897b06b1364bd1f658a8be7591e43f0851458e7f","date":1487123008,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/RunAutomaton#RunAutomaton(Automaton,int,boolean).mjava","sourceNew":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  protected RunAutomaton(Automaton a, int alphabetSize) {\n    this(a, alphabetSize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","sourceOld":"  /**\n   * Constructs a new <code>RunAutomaton</code> from a deterministic\n   * <code>Automaton</code>.\n   * \n   * @param a an automaton\n   */\n  public RunAutomaton(Automaton a, int maxInterval, boolean tableize) {\n    this(a, maxInterval, tableize, Operations.DEFAULT_MAX_DETERMINIZED_STATES);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["022a4de90e0479b604264ca9c2e134c996454ab3"],"dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"022a4de90e0479b604264ca9c2e134c996454ab3":["8b316f82baae88f5e279893a9cb7eee51fd8902f","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"897b06b1364bd1f658a8be7591e43f0851458e7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["022a4de90e0479b604264ca9c2e134c996454ab3","5ddee54b1c3df60fd6198e3aa64c78038a1be8df"],"b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96":["897b06b1364bd1f658a8be7591e43f0851458e7f"],"022a4de90e0479b604264ca9c2e134c996454ab3":["b49c0eb9ef7bc25609a89e7986ce7e6eeb9c9d96"],"dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1":["5c84485629d80d203608e8975a1139de9933cc38"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["dece2a6aa33295eda8cfdd44c17b30f2b5a68cd1"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"5ddee54b1c3df60fd6198e3aa64c78038a1be8df":["022a4de90e0479b604264ca9c2e134c996454ab3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}