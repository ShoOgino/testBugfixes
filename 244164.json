{"path":"lucene/backwards/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","pathOld":"backwards/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/TestSearchForDuplicates#testRun().mjava","sourceNew":null,"sourceOld":"  /** This test compares search results when using and not using compound\n   *  files.\n   *\n   *  TODO: There is rudimentary search result validation as well, but it is\n   *        simply based on asserting the output observed in the old test case,\n   *        without really knowing if the output is correct. Someone needs to\n   *        validate this output and make any changes to the checkHits method.\n   */\n  public void testRun() throws Exception {\n      StringWriter sw = new StringWriter();\n      PrintWriter pw = new PrintWriter(sw, true);\n      doTest(pw, false);\n      pw.close();\n      sw.close();\n      String multiFileOutput = sw.getBuffer().toString();\n      //System.out.println(multiFileOutput);\n\n      sw = new StringWriter();\n      pw = new PrintWriter(sw, true);\n      doTest(pw, true);\n      pw.close();\n      sw.close();\n      String singleFileOutput = sw.getBuffer().toString();\n\n      assertEquals(multiFileOutput, singleFileOutput);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}