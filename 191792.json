{"path":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4612a1625257c97ec7983c15cbc6289689e42fed","date":1358010116,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8917bfede3b4ca30f4305c1e391e9218959cd723","date":1358189662,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/NodeHash#nodesEqual(Builder.UnCompiledNode[T],int,FST.BytesReader).mjava","sourceNew":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, long address) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","sourceOld":"  private boolean nodesEqual(Builder.UnCompiledNode<T> node, int address, FST.BytesReader in) throws IOException {\n    fst.readFirstRealTargetArc(address, scratchArc, in);\n    if (scratchArc.bytesPerArc != 0 && node.numArcs != scratchArc.numArcs) {\n      return false;\n    }\n    for(int arcUpto=0;arcUpto<node.numArcs;arcUpto++) {\n      final Builder.Arc<T> arc = node.arcs[arcUpto];\n      if (arc.label != scratchArc.label ||\n          !arc.output.equals(scratchArc.output) ||\n          ((Builder.CompiledNode) arc.target).node != scratchArc.target ||\n          !arc.nextFinalOutput.equals(scratchArc.nextFinalOutput) ||\n          arc.isFinal != scratchArc.isFinal()) {\n        return false;\n      }\n\n      if (scratchArc.isLast()) {\n        if (arcUpto == node.numArcs-1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      fst.readNextRealArc(scratchArc, in);\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4612a1625257c97ec7983c15cbc6289689e42fed":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8917bfede3b4ca30f4305c1e391e9218959cd723":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4612a1625257c97ec7983c15cbc6289689e42fed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4612a1625257c97ec7983c15cbc6289689e42fed"]},"commit2Childs":{"4612a1625257c97ec7983c15cbc6289689e42fed":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["4612a1625257c97ec7983c15cbc6289689e42fed","8917bfede3b4ca30f4305c1e391e9218959cd723"],"8917bfede3b4ca30f4305c1e391e9218959cd723":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8917bfede3b4ca30f4305c1e391e9218959cd723","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}