{"path":"contrib/wordnetlc/src/java/org/apache/lucene/wordnet/Syns2Index#isDecent(String).mjava","commits":[{"id":"b4d1f544536b6c6ad3f1d34803c651c019795f51","date":1115339471,"type":1,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/wordnetlc/src/java/org/apache/lucene/wordnet/Syns2Index#isDecent(String).mjava","pathOld":"contrib/WordNet/src/java/org/apache/lucene/wordnet/Syns2Index#isDecent(String).mjava","sourceNew":"    /**\n     * Checks to see if a word contains only alphabetic characters by\n     * checking it one character at a time.\n     *\n     * @param s string to check\n     * @return <code>true</code> if the string is decent\n     */\n    private static boolean isDecent(String s)\n    {\n        int len = s.length();\n        for (int i = 0; i < len; i++)\n        {\n            if (!Character.isLetter(s.charAt(i)))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n","sourceOld":"    /**\n     * Checks to see if a word contains only alphabetic characters by\n     * checking it one character at a time.\n     *\n     * @param s string to check\n     * @return <code>true</code> if the string is decent\n     */\n    private static boolean isDecent(String s)\n    {\n        int len = s.length();\n        for (int i = 0; i < len; i++)\n        {\n            if (!Character.isLetter(s.charAt(i)))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02a71af6b0525092e8cdc9e3649fa77150cc7814","date":1115339520,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/wordnet/src/java/org/apache/lucene/wordnet/Syns2Index#isDecent(String).mjava","pathOld":"contrib/wordnetlc/src/java/org/apache/lucene/wordnet/Syns2Index#isDecent(String).mjava","sourceNew":"    /**\n     * Checks to see if a word contains only alphabetic characters by\n     * checking it one character at a time.\n     *\n     * @param s string to check\n     * @return <code>true</code> if the string is decent\n     */\n    private static boolean isDecent(String s)\n    {\n        int len = s.length();\n        for (int i = 0; i < len; i++)\n        {\n            if (!Character.isLetter(s.charAt(i)))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n","sourceOld":"    /**\n     * Checks to see if a word contains only alphabetic characters by\n     * checking it one character at a time.\n     *\n     * @param s string to check\n     * @return <code>true</code> if the string is decent\n     */\n    private static boolean isDecent(String s)\n    {\n        int len = s.length();\n        for (int i = 0; i < len; i++)\n        {\n            if (!Character.isLetter(s.charAt(i)))\n            {\n                return false;\n            }\n        }\n        return true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"02a71af6b0525092e8cdc9e3649fa77150cc7814":["b4d1f544536b6c6ad3f1d34803c651c019795f51"],"b4d1f544536b6c6ad3f1d34803c651c019795f51":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02a71af6b0525092e8cdc9e3649fa77150cc7814"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b4d1f544536b6c6ad3f1d34803c651c019795f51"],"02a71af6b0525092e8cdc9e3649fa77150cc7814":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b4d1f544536b6c6ad3f1d34803c651c019795f51":["02a71af6b0525092e8cdc9e3649fa77150cc7814"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}