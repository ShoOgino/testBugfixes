{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","pathOld":"src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","sourceNew":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","sourceOld":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","sourceNew":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","sourceOld":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe8474c4e5a03f0ca187f99c062af83e092717f3","date":1269253267,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#indexRandom(int,int,int,Directory,int).mjava","sourceNew":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates,\n                                          boolean doReaderPooling) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates)\n               .setReaderPooling(doReaderPooling));\n      LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","sourceOld":"  public Map<String,Document> indexRandom(int nThreads, int iterations, int range, Directory dir, int maxThreadStates) throws IOException, InterruptedException {\n    Map<String,Document> docs = new HashMap<String,Document>();\n    for(int iter=0;iter<3;iter++) {\n      IndexWriter w = new MockIndexWriter(dir, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(OpenMode.CREATE)\n               .setRAMBufferSizeMB(0.1).setMaxBufferedDocs(maxBufferedDocs).setMaxThreadStates(maxThreadStates));\n      LogMergePolicy lmp = (LogMergePolicy) w.getConfig().getMergePolicy();\n      lmp.setUseCompoundFile(false);\n      lmp.setUseCompoundDocStore(false);\n      lmp.setMergeFactor(mergeFactor);\n\n      threads = new IndexingThread[nThreads];\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = new IndexingThread();\n        th.w = w;\n        th.base = 1000000*i;\n        th.range = range;\n        th.iterations = iterations;\n        threads[i] = th;\n      }\n\n      for (int i=0; i<threads.length; i++) {\n        threads[i].start();\n      }\n      for (int i=0; i<threads.length; i++) {\n        threads[i].join();\n      }\n\n      // w.optimize();\n      w.close();    \n\n      for (int i=0; i<threads.length; i++) {\n        IndexingThread th = threads[i];\n        synchronized(th) {\n          docs.putAll(th.docs);\n        }\n      }\n    }\n\n    _TestUtil.checkIndex(dir);\n\n    return docs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fe8474c4e5a03f0ca187f99c062af83e092717f3":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fe8474c4e5a03f0ca187f99c062af83e092717f3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["fe8474c4e5a03f0ca187f99c062af83e092717f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}