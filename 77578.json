{"path":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","commits":[{"id":"01f60198ece724a6e96cd0b45f289cf42ff83d4f","date":1286864103,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for(int i=lastDocID+1;i<docID;i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","sourceNew":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for (int i = lastDocID + 1; i < docID; i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for(int i=lastDocID+1;i<docID;i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for (int i = lastDocID + 1; i < docID; i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","pathOld":"/dev/null","sourceNew":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for (int i = lastDocID + 1; i < docID; i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b7a068f550e13e49517c6899cc3b94c8eeb72e5","date":1309354772,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","sourceNew":null,"sourceOld":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for (int i = lastDocID + 1; i < docID; i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","sourceNew":null,"sourceOld":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for (int i = lastDocID + 1; i < docID; i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/values/FixedStraightBytesImpl.Writer#fill(int).mjava","sourceNew":null,"sourceOld":"    // Fills up to but not including this docID\n    private void fill(int docID) throws IOException {\n      assert size >= 0;\n      for (int i = lastDocID + 1; i < docID; i++) {\n        datOut.writeBytes(oneRecord, size);\n      }\n      lastDocID = docID;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2e8d7ba2175f47e280231533f7d3016249cea88b"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["01f60198ece724a6e96cd0b45f289cf42ff83d4f","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["2e8d7ba2175f47e280231533f7d3016249cea88b","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b7a068f550e13e49517c6899cc3b94c8eeb72e5"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3b7a068f550e13e49517c6899cc3b94c8eeb72e5","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","2e8d7ba2175f47e280231533f7d3016249cea88b","ab5cb6a74aefb78aa0569857970b9151dfe2e787","01f60198ece724a6e96cd0b45f289cf42ff83d4f"],"3b7a068f550e13e49517c6899cc3b94c8eeb72e5":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"01f60198ece724a6e96cd0b45f289cf42ff83d4f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}