{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor,int).mjava","commits":[{"id":"a678060dc71c218831c2b3b18d0064573c6a968d","date":1455918109,"type":1,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n                        String shardId, ZkNodeProps leaderProps, CoreDescriptor cd,\n                        int nUpdates) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName(), nUpdates);\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n      String shardId, ZkNodeProps leaderProps, CoreDescriptor cd) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName());\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor,int).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n                        String shardId, ZkNodeProps leaderProps, CoreDescriptor cd,\n                        int nUpdates) {\n    \n    if (isClosed) {\n      log.info(\"We have been closed, won't sync replicas to me.\");\n      return;\n    }\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName(), nUpdates);\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n                        String shardId, ZkNodeProps leaderProps, CoreDescriptor cd,\n                        int nUpdates) {\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName(), nUpdates);\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#syncToMe(ZkController,String,String,ZkNodeProps,CoreDescriptor,int).mjava","sourceNew":"  private void syncToMe(ZkController zkController, String collection,\n                        String shardId, ZkNodeProps leaderProps, CoreDescriptor cd,\n                        int nUpdates) {\n    \n    if (isClosed) {\n      log.info(\"We have been closed, won't sync replicas to me.\");\n      return;\n    }\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      if (log.isInfoEnabled()) {\n        log.info(\"{} has no replicas\", ZkCoreNodeProps.getCoreUrl(leaderProps));\n      }\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        if (log.isInfoEnabled()) {\n          log.info(\"{}: try and ask {} to sync\", ZkCoreNodeProps.getCoreUrl(leaderProps), node.getCoreUrl());\n        }\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName(), nUpdates);\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        if (log.isInfoEnabled()) {\n          log.info(\"{}: Sync failed - we will ask replica ({}) to recover.\"\n              , ZkCoreNodeProps.getCoreUrl(leaderProps), srsp.getShardAddress());\n        }\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        if (log.isInfoEnabled()) {\n          log.info(\"{}: sync completed with {}\", ZkCoreNodeProps.getCoreUrl(leaderProps), srsp.getShardAddress());\n        }\n      }\n      \n    }\n\n  }\n\n","sourceOld":"  private void syncToMe(ZkController zkController, String collection,\n                        String shardId, ZkNodeProps leaderProps, CoreDescriptor cd,\n                        int nUpdates) {\n    \n    if (isClosed) {\n      log.info(\"We have been closed, won't sync replicas to me.\");\n      return;\n    }\n    \n    // sync everyone else\n    // TODO: we should do this in parallel at least\n    List<ZkCoreNodeProps> nodes = zkController\n        .getZkStateReader()\n        .getReplicaProps(collection, shardId,\n            cd.getCloudDescriptor().getCoreNodeName());\n    if (nodes == null) {\n      log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \" has no replicas\");\n      return;\n    }\n\n    ZkCoreNodeProps zkLeader = new ZkCoreNodeProps(leaderProps);\n    for (ZkCoreNodeProps node : nodes) {\n      try {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": try and ask \" + node.getCoreUrl() + \" to sync\");\n        \n        requestSync(node.getBaseUrl(), node.getCoreUrl(), zkLeader.getCoreUrl(), node.getCoreName(), nUpdates);\n        \n      } catch (Exception e) {\n        SolrException.log(log, \"Error syncing replica to leader\", e);\n      }\n    }\n    \n    \n    for(;;) {\n      ShardResponse srsp = shardHandler.takeCompletedOrError();\n      if (srsp == null) break;\n      boolean success = handleResponse(srsp);\n      if (srsp.getException() != null) {\n        SolrException.log(log, \"Sync request error: \" + srsp.getException());\n      }\n      \n      if (!success) {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": Sync failed - we will ask replica (\" + srsp.getShardAddress()\n            + \") to recover.\");\n        if (isClosed) {\n          log.info(\"We have been closed, don't request that a replica recover\");\n        } else {\n          RecoveryRequest rr = new RecoveryRequest();\n          rr.leaderProps = leaderProps;\n          rr.baseUrl = ((ShardCoreRequest) srsp.getShardRequest()).baseUrl;\n          rr.coreName = ((ShardCoreRequest) srsp.getShardRequest()).coreName;\n          recoveryRequests.add(rr);\n        }\n      } else {\n        log.info(ZkCoreNodeProps.getCoreUrl(leaderProps) + \": \" + \" sync completed with \" + srsp.getShardAddress());\n      }\n      \n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a678060dc71c218831c2b3b18d0064573c6a968d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"],"a678060dc71c218831c2b3b18d0064573c6a968d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["ad4957cde742defe6db19689abdc267c5d948066"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a678060dc71c218831c2b3b18d0064573c6a968d"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a678060dc71c218831c2b3b18d0064573c6a968d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}