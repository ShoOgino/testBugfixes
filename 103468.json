{"path":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilter#incrementToken().mjava","commits":[{"id":"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c","date":1310389132,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * Need to worry about multiple scenarios:\n   *  - need to go for the longest match\n   *    a b => foo      #shouldn't match if \"a b\" is followed by \"c d\"\n   *    a b c d => bar\n   *  - need to backtrack - retry matches for tokens already read\n   *     a b c d => foo\n   *       b c => bar\n   *     If the input stream is \"a b c x\", one will consume \"a b c d\"\n   *     trying to match the first rule... all but \"a\" should be\n   *     pushed back so a match may be made on \"b c\".\n   *  - don't try and match generated tokens (thus need separate queue)\n   *    matching is not recursive.\n   *  - handle optional generation of original tokens in all these cases,\n   *    merging token streams to preserve token positions.\n   *  - preserve original positionIncrement of first matched token\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (true) {\n      // if there are any generated tokens, return them... don't try any\n      // matches against them, as we specifically don't want recursion.\n      if (replacement!=null && replacement.hasNext()) {\n        copy(this, replacement.next());\n        return true;\n      }\n\n      // common case fast-path of first token not matching anything\n      AttributeSource firstTok = nextTok();\n      if (firstTok == null) return false;\n      CharTermAttribute termAtt = firstTok.addAttribute(CharTermAttribute.class);\n      SlowSynonymMap result = map.submap!=null ? map.submap.get(termAtt.buffer(), 0, termAtt.length()) : null;\n      if (result == null) {\n        copy(this, firstTok);\n        return true;\n      }\n\n      // fast-path failed, clone ourselves if needed\n      if (firstTok == this)\n        firstTok = cloneAttributes();\n      // OK, we matched a token, so find the longest match.\n\n      matched = new LinkedList<AttributeSource>();\n\n      result = match(result);\n\n      if (result==null) {\n        // no match, simply return the first token read.\n        copy(this, firstTok);\n        return true;\n      }\n\n      // reuse, or create new one each time?\n      ArrayList<AttributeSource> generated = new ArrayList<AttributeSource>(result.synonyms.length + matched.size() + 1);\n\n      //\n      // there was a match... let's generate the new tokens, merging\n      // in the matched tokens (position increments need adjusting)\n      //\n      AttributeSource lastTok = matched.isEmpty() ? firstTok : matched.getLast();\n      boolean includeOrig = result.includeOrig();\n\n      AttributeSource origTok = includeOrig ? firstTok : null;\n      PositionIncrementAttribute firstPosIncAtt = firstTok.addAttribute(PositionIncrementAttribute.class);\n      int origPos = firstPosIncAtt.getPositionIncrement();  // position of origTok in the original stream\n      int repPos=0; // curr position in replacement token stream\n      int pos=0;  // current position in merged token stream\n\n      for (int i=0; i<result.synonyms.length; i++) {\n        Token repTok = result.synonyms[i];\n        AttributeSource newTok = firstTok.cloneAttributes();\n        CharTermAttribute newTermAtt = newTok.addAttribute(CharTermAttribute.class);\n        OffsetAttribute newOffsetAtt = newTok.addAttribute(OffsetAttribute.class);\n        PositionIncrementAttribute newPosIncAtt = newTok.addAttribute(PositionIncrementAttribute.class);\n\n        OffsetAttribute lastOffsetAtt = lastTok.addAttribute(OffsetAttribute.class);\n\n        newOffsetAtt.setOffset(newOffsetAtt.startOffset(), lastOffsetAtt.endOffset());\n        newTermAtt.copyBuffer(repTok.buffer(), 0, repTok.length());\n        repPos += repTok.getPositionIncrement();\n        if (i==0) repPos=origPos;  // make position of first token equal to original\n\n        // if necessary, insert original tokens and adjust position increment\n        while (origTok != null && origPos <= repPos) {\n          PositionIncrementAttribute origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n          origPosInc.setPositionIncrement(origPos-pos);\n          generated.add(origTok);\n          pos += origPosInc.getPositionIncrement();\n          origTok = matched.isEmpty() ? null : matched.removeFirst();\n          if (origTok != null) {\n            origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n            origPos += origPosInc.getPositionIncrement();\n          }\n        }\n\n        newPosIncAtt.setPositionIncrement(repPos - pos);\n        generated.add(newTok);\n        pos += newPosIncAtt.getPositionIncrement();\n      }\n\n      // finish up any leftover original tokens\n      while (origTok!=null) {\n        PositionIncrementAttribute origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n        origPosInc.setPositionIncrement(origPos-pos);\n        generated.add(origTok);\n        pos += origPosInc.getPositionIncrement();\n        origTok = matched.isEmpty() ? null : matched.removeFirst();\n        if (origTok != null) {\n          origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n          origPos += origPosInc.getPositionIncrement();\n        }\n      }\n\n      // what if we replaced a longer sequence with a shorter one?\n      // a/0 b/5 =>  foo/0\n      // should I re-create the gap on the next buffered token?\n\n      replacement = generated.iterator();\n      // Now return to the top of the loop to read and return the first\n      // generated token.. The reason this is done is that we may have generated\n      // nothing at all, and may need to continue with more matching logic.\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/analysis/SlowSynonymFilter#incrementToken().mjava","sourceNew":null,"sourceOld":"  /*\n   * Need to worry about multiple scenarios:\n   *  - need to go for the longest match\n   *    a b => foo      #shouldn't match if \"a b\" is followed by \"c d\"\n   *    a b c d => bar\n   *  - need to backtrack - retry matches for tokens already read\n   *     a b c d => foo\n   *       b c => bar\n   *     If the input stream is \"a b c x\", one will consume \"a b c d\"\n   *     trying to match the first rule... all but \"a\" should be\n   *     pushed back so a match may be made on \"b c\".\n   *  - don't try and match generated tokens (thus need separate queue)\n   *    matching is not recursive.\n   *  - handle optional generation of original tokens in all these cases,\n   *    merging token streams to preserve token positions.\n   *  - preserve original positionIncrement of first matched token\n   */\n  @Override\n  public boolean incrementToken() throws IOException {\n    while (true) {\n      // if there are any generated tokens, return them... don't try any\n      // matches against them, as we specifically don't want recursion.\n      if (replacement!=null && replacement.hasNext()) {\n        copy(this, replacement.next());\n        return true;\n      }\n\n      // common case fast-path of first token not matching anything\n      AttributeSource firstTok = nextTok();\n      if (firstTok == null) return false;\n      CharTermAttribute termAtt = firstTok.addAttribute(CharTermAttribute.class);\n      SlowSynonymMap result = map.submap!=null ? map.submap.get(termAtt.buffer(), 0, termAtt.length()) : null;\n      if (result == null) {\n        copy(this, firstTok);\n        return true;\n      }\n\n      // fast-path failed, clone ourselves if needed\n      if (firstTok == this)\n        firstTok = cloneAttributes();\n      // OK, we matched a token, so find the longest match.\n\n      matched = new LinkedList<AttributeSource>();\n\n      result = match(result);\n\n      if (result==null) {\n        // no match, simply return the first token read.\n        copy(this, firstTok);\n        return true;\n      }\n\n      // reuse, or create new one each time?\n      ArrayList<AttributeSource> generated = new ArrayList<AttributeSource>(result.synonyms.length + matched.size() + 1);\n\n      //\n      // there was a match... let's generate the new tokens, merging\n      // in the matched tokens (position increments need adjusting)\n      //\n      AttributeSource lastTok = matched.isEmpty() ? firstTok : matched.getLast();\n      boolean includeOrig = result.includeOrig();\n\n      AttributeSource origTok = includeOrig ? firstTok : null;\n      PositionIncrementAttribute firstPosIncAtt = firstTok.addAttribute(PositionIncrementAttribute.class);\n      int origPos = firstPosIncAtt.getPositionIncrement();  // position of origTok in the original stream\n      int repPos=0; // curr position in replacement token stream\n      int pos=0;  // current position in merged token stream\n\n      for (int i=0; i<result.synonyms.length; i++) {\n        Token repTok = result.synonyms[i];\n        AttributeSource newTok = firstTok.cloneAttributes();\n        CharTermAttribute newTermAtt = newTok.addAttribute(CharTermAttribute.class);\n        OffsetAttribute newOffsetAtt = newTok.addAttribute(OffsetAttribute.class);\n        PositionIncrementAttribute newPosIncAtt = newTok.addAttribute(PositionIncrementAttribute.class);\n\n        OffsetAttribute lastOffsetAtt = lastTok.addAttribute(OffsetAttribute.class);\n\n        newOffsetAtt.setOffset(newOffsetAtt.startOffset(), lastOffsetAtt.endOffset());\n        newTermAtt.copyBuffer(repTok.buffer(), 0, repTok.length());\n        repPos += repTok.getPositionIncrement();\n        if (i==0) repPos=origPos;  // make position of first token equal to original\n\n        // if necessary, insert original tokens and adjust position increment\n        while (origTok != null && origPos <= repPos) {\n          PositionIncrementAttribute origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n          origPosInc.setPositionIncrement(origPos-pos);\n          generated.add(origTok);\n          pos += origPosInc.getPositionIncrement();\n          origTok = matched.isEmpty() ? null : matched.removeFirst();\n          if (origTok != null) {\n            origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n            origPos += origPosInc.getPositionIncrement();\n          }\n        }\n\n        newPosIncAtt.setPositionIncrement(repPos - pos);\n        generated.add(newTok);\n        pos += newPosIncAtt.getPositionIncrement();\n      }\n\n      // finish up any leftover original tokens\n      while (origTok!=null) {\n        PositionIncrementAttribute origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n        origPosInc.setPositionIncrement(origPos-pos);\n        generated.add(origTok);\n        pos += origPosInc.getPositionIncrement();\n        origTok = matched.isEmpty() ? null : matched.removeFirst();\n        if (origTok != null) {\n          origPosInc = origTok.addAttribute(PositionIncrementAttribute.class);\n          origPos += origPosInc.getPositionIncrement();\n        }\n      }\n\n      // what if we replaced a longer sequence with a shorter one?\n      // a/0 b/5 =>  foo/0\n      // should I re-create the gap on the next buffered token?\n\n      replacement = generated.iterator();\n      // Now return to the top of the loop to read and return the first\n      // generated token.. The reason this is done is that we may have generated\n      // nothing at all, and may need to continue with more matching logic.\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44d6f0ab53c1962856b9f48dedb7a2a6cc18905c"],"44d6f0ab53c1962856b9f48dedb7a2a6cc18905c":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}