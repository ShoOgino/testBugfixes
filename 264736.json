{"path":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"/dev/null","sourceNew":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestMultiTermConstantScore#testBooleanOrderUnAffected().mjava","sourceNew":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","sourceOld":"  public void testBooleanOrderUnAffected() throws IOException {\n    // NOTE: uses index build in *this* setUp\n\n    IndexReader reader = IndexReader.open(small, true);\n    IndexSearcher search = new IndexSearcher(reader);\n\n    // first do a regular TermRangeQuery which uses term expansion so\n    // docs with more terms in range get higher scores\n\n    Query rq = new TermRangeQuery(\"data\", \"1\", \"4\", T, T);\n\n    ScoreDoc[] expected = search.search(rq, null, 1000).scoreDocs;\n    int numHits = expected.length;\n\n    // now do a boolean where which also contains a\n    // ConstantScoreRangeQuery and make sure hte order is the same\n\n    BooleanQuery q = new BooleanQuery();\n    q.add(rq, BooleanClause.Occur.MUST);// T, F);\n    q.add(csrq(\"data\", \"1\", \"6\", T, T), BooleanClause.Occur.MUST);// T, F);\n\n    ScoreDoc[] actual = search.search(q, null, 1000).scoreDocs;\n\n    assertEquals(\"wrong numebr of hits\", numHits, actual.length);\n    for (int i = 0; i < numHits; i++) {\n      assertEquals(\"mismatch in docid for hit#\" + i, expected[i].doc,\n          actual[i].doc);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}