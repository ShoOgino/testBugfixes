{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","commits":[{"id":"08b22329006608bd6b95aeba7a59f28092cd7a5e","date":1419362789,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList) {\n    ZkNodeProps props;\n    if (sendCreateNodeList) {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          CollectionParams.CollectionAction.CREATE.toLower(),\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString(),\n          OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n    } else {\n      props = new ZkNodeProps(Overseer.QUEUE_OPERATION,\n          CollectionParams.CollectionAction.CREATE.toLower(),\n          ZkStateReader.REPLICATION_FACTOR,\n          replicationFactor.toString(), \"name\", COLLECTION_NAME,\n          \"collection.configName\", CONFIG_NAME,\n          OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n          ZkStateReader.MAX_SHARDS_PER_NODE,\n          maxShardsPerNode.toString());\n    }\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = ZkNodeProps.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", ZkStateReader.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionProcessor.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionProcessor.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#issueCreateJob(Integer,Integer,Integer,List[String],boolean,boolean).mjava","sourceNew":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","sourceOld":"  protected void issueCreateJob(Integer numberOfSlices,\n      Integer replicationFactor, Integer maxShardsPerNode, List<String> createNodeList, boolean sendCreateNodeList, boolean createNodeSetShuffle) {\n    Map<String,Object> propMap = Utils.makeMap(\n        Overseer.QUEUE_OPERATION, CollectionParams.CollectionAction.CREATE.toLower(),\n        ZkStateReader.REPLICATION_FACTOR, replicationFactor.toString(),\n        \"name\", COLLECTION_NAME,\n        \"collection.configName\", CONFIG_NAME,\n        OverseerCollectionMessageHandler.NUM_SLICES, numberOfSlices.toString(),\n        ZkStateReader.MAX_SHARDS_PER_NODE, maxShardsPerNode.toString()\n    );\n    if (sendCreateNodeList) {\n      propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET,\n          (createNodeList != null)?StrUtils.join(createNodeList, ','):null);\n      if (OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE_DEFAULT != createNodeSetShuffle || random().nextBoolean()) {\n        propMap.put(OverseerCollectionMessageHandler.CREATE_NODE_SET_SHUFFLE, createNodeSetShuffle);\n      }\n    }\n\n    ZkNodeProps props = new ZkNodeProps(propMap);\n    QueueEvent qe = new QueueEvent(\"id\", Utils.toJSON(props), null){\n      @Override\n      public void setBytes(byte[] bytes) {\n        lastProcessMessageResult = SolrResponse.deserialize( bytes);\n      }\n    };\n    queue.add(qe);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b693a83132c9e45afcd564fd65a25b60ed80388b":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2209af2c265d2258ec4b29c8cc78622d36994a15"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["08b22329006608bd6b95aeba7a59f28092cd7a5e"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"08b22329006608bd6b95aeba7a59f28092cd7a5e":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}