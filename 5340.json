{"path":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestWindowsFS#testDeleteOpenFile().mjava","commits":[{"id":"0570a6b8fbda74e4718ba36c70fd1953103a3dcb","date":1429616032,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestWindowsFS#testDeleteOpenFile().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestMockFilesystems#testDeleteOpenFile().mjava","sourceNew":"  /** Test Files.delete fails if a file has an open inputstream against it */\n  public void testDeleteOpenFile() throws IOException {\n    Path dir = wrap(createTempDir());\n    \n    OutputStream file = Files.newOutputStream(dir.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(dir.resolve(\"stillopen\"));\n    try {\n      Files.delete(dir.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","sourceOld":"  public void testDeleteOpenFile() throws IOException {\n    assumeFalse(\"windows is not supported\", Constants.WINDOWS);\n    Path dir = FilterPath.unwrap(createTempDir());\n    FileSystem fs = new WindowsFS(dir.getFileSystem()).getFileSystem(URI.create(\"file:///\"));\n    Path wrapped = new FilterPath(dir, fs);\n    \n    OutputStream file = Files.newOutputStream(wrapped.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(wrapped.resolve(\"stillopen\"));\n    try {\n      Files.delete(wrapped.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd8a7e622c1138188be79e193b1dc52f3f0889a5","date":1564419078,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestWindowsFS#testDeleteOpenFile().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestWindowsFS#testDeleteOpenFile().mjava","sourceNew":"  /** Test Files.delete fails if a file has an open inputstream against it */\n  public void testDeleteOpenFile() throws IOException {\n    Path dir = wrap(createTempDir());\n    \n    OutputStream file = Files.newOutputStream(dir.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(dir.resolve(\"stillopen\"));\n\n    IOException e = expectThrows(IOException.class, () -> Files.delete(dir.resolve(\"stillopen\")));\n    assertTrue(e.getMessage().contains(\"access denied\"));\n    is.close();\n  }\n\n","sourceOld":"  /** Test Files.delete fails if a file has an open inputstream against it */\n  public void testDeleteOpenFile() throws IOException {\n    Path dir = wrap(createTempDir());\n    \n    OutputStream file = Files.newOutputStream(dir.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(dir.resolve(\"stillopen\"));\n    try {\n      Files.delete(dir.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestWindowsFS#testDeleteOpenFile().mjava","pathOld":"lucene/test-framework/src/test/org/apache/lucene/mockfile/TestWindowsFS#testDeleteOpenFile().mjava","sourceNew":"  /** Test Files.delete fails if a file has an open inputstream against it */\n  public void testDeleteOpenFile() throws IOException {\n    Path dir = wrap(createTempDir());\n    \n    OutputStream file = Files.newOutputStream(dir.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(dir.resolve(\"stillopen\"));\n\n    IOException e = expectThrows(IOException.class, () -> Files.delete(dir.resolve(\"stillopen\")));\n    assertTrue(e.getMessage().contains(\"access denied\"));\n    is.close();\n  }\n\n","sourceOld":"  /** Test Files.delete fails if a file has an open inputstream against it */\n  public void testDeleteOpenFile() throws IOException {\n    Path dir = wrap(createTempDir());\n    \n    OutputStream file = Files.newOutputStream(dir.resolve(\"stillopen\"));\n    file.write(5);\n    file.close();\n    InputStream is = Files.newInputStream(dir.resolve(\"stillopen\"));\n    try {\n      Files.delete(dir.resolve(\"stillopen\"));\n      fail(\"should have gotten exception\");\n    } catch (IOException e) {\n      assertTrue(e.getMessage().contains(\"access denied\"));\n    }\n    is.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"],"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb","cd8a7e622c1138188be79e193b1dc52f3f0889a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd8a7e622c1138188be79e193b1dc52f3f0889a5"]},"commit2Childs":{"cd8a7e622c1138188be79e193b1dc52f3f0889a5":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0570a6b8fbda74e4718ba36c70fd1953103a3dcb":["cd8a7e622c1138188be79e193b1dc52f3f0889a5","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0570a6b8fbda74e4718ba36c70fd1953103a3dcb"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}