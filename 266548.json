{"path":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","commits":[{"id":"ae9af5b558165dc1e47e5670872957f1034cf0a9","date":1428330169,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","pathOld":"/dev/null","sourceNew":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator(null);\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03f665d0b9240c1ee79baeac03a20def3275d816","date":1428405689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","sourceNew":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator(null);\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator(null);\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","sourceNew":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator();\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator(null);\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","date":1497408244,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","sourceNew":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.terms(\"field\").iterator();\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator();\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","sourceNew":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.terms(\"field\").iterator();\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator();\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","pathOld":"lucene/memory/src/test/org/apache/lucene/index/memory/TestMemoryIndex#testSeekByTermOrd().mjava","sourceNew":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.terms(\"field\").iterator();\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","sourceOld":"  public void testSeekByTermOrd() throws IOException {\n    MemoryIndex mi = new MemoryIndex();\n    mi.addField(\"field\", \"some terms be here\", analyzer);\n    IndexSearcher searcher = mi.createSearcher();\n    LeafReader reader = (LeafReader) searcher.getIndexReader();\n    TermsEnum terms = reader.fields().terms(\"field\").iterator();\n    terms.seekExact(0);\n    assertEquals(\"be\", terms.term().utf8ToString());\n    TestUtil.checkReader(reader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["03f665d0b9240c1ee79baeac03a20def3275d816"],"ae9af5b558165dc1e47e5670872957f1034cf0a9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"03f665d0b9240c1ee79baeac03a20def3275d816":["ae9af5b558165dc1e47e5670872957f1034cf0a9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28288370235ed02234a64753cdbf0c6ec096304a":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"ae9af5b558165dc1e47e5670872957f1034cf0a9":["03f665d0b9240c1ee79baeac03a20def3275d816"],"e588e8c82e32e29ef3837c0b06a2ad34f3c51a2b":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"03f665d0b9240c1ee79baeac03a20def3275d816":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae9af5b558165dc1e47e5670872957f1034cf0a9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}