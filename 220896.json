{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","pathOld":"/dev/null","sourceNew":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) throws IOException {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) throws IOException {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4be02f443776ae742dcb83b754e143e9ed0bc0d","date":1510662086,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","sourceNew":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) throws IOException {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) throws IOException {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) throws IOException {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) throws IOException {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","sourceNew":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) throws IOException {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) throws IOException {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) throws IOException {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) throws IOException {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33ae23947c41339ea2b352422bb762dfb4a17077","date":1524235117,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","sourceNew":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() throws IOException {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) throws IOException {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) throws IOException {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27639bb5e041490ce599065875dd2f6d8beef62a","date":1532829373,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","sourceNew":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","sourceOld":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterState) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterState);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"536bafb7a33a91ae703a78de9f6bd5c7e32471d9","date":1538395209,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","sourceNew":"  static SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterS) {\n    return getSolrCloudManager(nodeValues,(Map) Utils.fromJSONString(clusterS));\n\n  }\n\n","sourceOld":"  private SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterS) {\n    return new SolrCloudManager() {\n      ObjectCache objectCache = new ObjectCache();\n\n      @Override\n      public ObjectCache getObjectCache() {\n        return objectCache;\n      }\n\n      @Override\n      public TimeSource getTimeSource() {\n        return TimeSource.NANO_TIME;\n      }\n\n      @Override\n      public void close() {\n\n      }\n\n      @Override\n      public ClusterStateProvider getClusterStateProvider() {\n        return new DelegatingClusterStateProvider(null) {\n          @Override\n          public Set<String> getLiveNodes() {\n            return nodeValues.keySet();\n          }\n\n        };\n      }\n\n      @Override\n      public NodeStateProvider getNodeStateProvider() {\n        return new DelegatingNodeStateProvider(null) {\n          @Override\n          public Map<String, Object> getNodeValues(String node, Collection<String> tags) {\n            Map<String, Object> result = new LinkedHashMap<>();\n            tags.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n            return result;\n          }\n\n          @Override\n          public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n            return getReplicaDetails(node, clusterS);\n          }\n        };\n      }\n\n      @Override\n      public DistribStateManager getDistribStateManager() {\n        return null;\n      }\n\n      @Override\n      public DistributedQueueFactory getDistributedQueueFactory() {\n        return null;\n      }\n\n      @Override\n      public SolrResponse request(SolrRequest req) {\n        return null;\n      }\n\n      @Override\n      public byte[] httpRequest(String url, SolrRequest.METHOD method, Map<String, String> headers, String payload, int timeout, boolean followRedirects) {\n        return new byte[0];\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  static SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterS) {\n    return getSolrCloudManager(nodeValues,(Map) Utils.fromJSONString(clusterS));\n\n  }\n\n","sourceOld":"  static SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterS) {\n    return getSolrCloudManager(nodeValues,(Map) Utils.fromJSONString(clusterS));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#getSolrCloudManager(Map[String,Map],String).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings({\"rawtypes\"})\n  static SolrCloudManager getSolrCloudManager(final Map<String, Map> nodeValues, String clusterS) {\n    return getSolrCloudManager(nodeValues,(Map) Utils.fromJSONString(clusterS));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["27639bb5e041490ce599065875dd2f6d8beef62a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"33ae23947c41339ea2b352422bb762dfb4a17077":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d4be02f443776ae742dcb83b754e143e9ed0bc0d"],"d4be02f443776ae742dcb83b754e143e9ed0bc0d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"27639bb5e041490ce599065875dd2f6d8beef62a":["33ae23947c41339ea2b352422bb762dfb4a17077"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"536bafb7a33a91ae703a78de9f6bd5c7e32471d9":["9ba1b632c041956c93c41aa1143d16a567014891"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["d4be02f443776ae742dcb83b754e143e9ed0bc0d"],"33ae23947c41339ea2b352422bb762dfb4a17077":["27639bb5e041490ce599065875dd2f6d8beef62a"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["33ae23947c41339ea2b352422bb762dfb4a17077"],"d4be02f443776ae742dcb83b754e143e9ed0bc0d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"27639bb5e041490ce599065875dd2f6d8beef62a":["536bafb7a33a91ae703a78de9f6bd5c7e32471d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}