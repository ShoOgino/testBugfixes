{"path":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    assertFalse(\"test infra is broken!\", LuceneTestCase.OLD_FORMAT_IMPERSONATION_IS_ACTIVE);\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      Path dir = createTempDir(name);\n      Path dataFile = Paths.get(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      File dir = createTempDir(name);\n      File dataFile = new File(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee","date":1410650745,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      Path dir = createTempDir(name);\n      TestUtil.unzip(TestBackwardsCompatibility.class.getResourceAsStream(\"index.\" + name + \".zip\"), dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      Path dir = createTempDir(name);\n      Path dataFile = Paths.get(TestBackwardsCompatibility.class.getResource(\"index.\" + name + \".zip\").toURI());\n      TestUtil.unzip(dataFile, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7","date":1411591737,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/index/TestBackwardsCompatibility#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      Path dir = createTempDir(name);\n      InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"index.\" + name + \".zip\");\n      assertNotNull(\"Index name \" + name + \" not found\", resource);\n      TestUtil.unzip(resource, dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    List<String> names = new ArrayList<>(oldNames.length + oldSingleSegmentNames.length);\n    names.addAll(Arrays.asList(oldNames));\n    names.addAll(Arrays.asList(oldSingleSegmentNames));\n    oldIndexDirs = new HashMap<>();\n    for (String name : names) {\n      Path dir = createTempDir(name);\n      TestUtil.unzip(TestBackwardsCompatibility.class.getResourceAsStream(\"index.\" + name + \".zip\"), dir);\n      oldIndexDirs.put(name, newFSDirectory(dir));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["f4abec28b874149a7223e32cc7a01704c27790de"],"f4abec28b874149a7223e32cc7a01704c27790de":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2daae254c28b627693692fbf8f14d2f36c3591c1"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"509b34c7d48bc90eb4ec5e8757e0f879a19f22ee":["ec8882143e40fbd4aaa2cc02fc4abb1217eb24c7"],"f4abec28b874149a7223e32cc7a01704c27790de":["509b34c7d48bc90eb4ec5e8757e0f879a19f22ee"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}