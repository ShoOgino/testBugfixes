{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","commits":[{"id":"205aef5699265d604dfe3d79dac03c0cfe5bdcdf","date":1355255369,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(new DefaultHttpClient(), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(new DefaultHttpClient(), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(new DefaultHttpClient(), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(new DefaultHttpClient(), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10034129a9d9aaaeba391901f4be8f100b21eb7c","date":1360791957,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(new DefaultHttpClient(), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(new DefaultHttpClient(), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b41f996b22bd5518650f897d050088ff808ec03","date":1360969107,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(new DefaultHttpClient(), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(new DefaultHttpClient(), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrClientTest#testLBHttpSolrClientHttpClientResponseParserStringArray().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/impl/LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray().mjava","sourceNew":"  /**\n   * Test method for {@link LBHttpSolrClient#LBHttpSolrClient(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrClient</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrClientHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrClient testClient = new LBHttpSolrClient(HttpClientUtil.createClient(new ModifiableSolrParams()), (ResponseParser) null);\n    HttpSolrClient httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpSolrClient.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testClient = new LBHttpSolrClient(HttpClientUtil.createClient(new ModifiableSolrParams()), parser);\n    httpSolrClient = testClient.makeSolrClient(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpSolrClient.getParser());\n  }\n\n","sourceOld":"  /**\n   * Test method for {@link org.apache.solr.client.solrj.impl.LBHttpSolrServer#LBHttpSolrServer(org.apache.http.client.HttpClient, org.apache.solr.client.solrj.ResponseParser, java.lang.String[])}.\n   * \n   * Validate that the parser passed in is used in the <code>HttpSolrServer</code> instances created.\n   * \n   * @throws MalformedURLException If URL is invalid, no URL passed, so won't happen.\n   */\n  @Test\n  public void testLBHttpSolrServerHttpClientResponseParserStringArray() throws MalformedURLException {\n    LBHttpSolrServer testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), (ResponseParser) null);\n    HttpSolrServer httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertNull(\"Generated server should have null parser.\", httpServer.getParser());\n\n    ResponseParser parser = new BinaryResponseParser();\n    testServer = new LBHttpSolrServer(HttpClientUtil.createClient(new ModifiableSolrParams()), parser);\n    httpServer = testServer.makeServer(\"http://127.0.0.1:8080\");\n    assertEquals(\"Invalid parser passed to generated server.\", parser, httpServer.getParser());\n  }\n\n","bugFix":null,"bugIntro":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","205aef5699265d604dfe3d79dac03c0cfe5bdcdf"],"10034129a9d9aaaeba391901f4be8f100b21eb7c":["205aef5699265d604dfe3d79dac03c0cfe5bdcdf"],"3b41f996b22bd5518650f897d050088ff808ec03":["205aef5699265d604dfe3d79dac03c0cfe5bdcdf","10034129a9d9aaaeba391901f4be8f100b21eb7c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bafca15d8e408346a67f4282ad1143b88023893b":["10034129a9d9aaaeba391901f4be8f100b21eb7c"],"205aef5699265d604dfe3d79dac03c0cfe5bdcdf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"10034129a9d9aaaeba391901f4be8f100b21eb7c":["3b41f996b22bd5518650f897d050088ff808ec03","bafca15d8e408346a67f4282ad1143b88023893b"],"3b41f996b22bd5518650f897d050088ff808ec03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","205aef5699265d604dfe3d79dac03c0cfe5bdcdf"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"205aef5699265d604dfe3d79dac03c0cfe5bdcdf":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","10034129a9d9aaaeba391901f4be8f100b21eb7c","3b41f996b22bd5518650f897d050088ff808ec03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","3b41f996b22bd5518650f897d050088ff808ec03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}