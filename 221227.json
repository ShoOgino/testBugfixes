{"path":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","commits":[{"id":"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","date":1377955248,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","pathOld":"/dev/null","sourceNew":"  // Creates a minimal conf dir. Optionally adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, Charsets.UTF_8.toString());\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fd44bec977a26a118d9e809e2de6f7edb5ca0f39","date":1421673929,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","sourceNew":"  // Creates a minimal conf dir, adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    Files.createFile(dstRoot.toPath().resolve(\"core.properties\"));\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, Charsets.UTF_8.toString());\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","sourceOld":"  // Creates a minimal conf dir. Optionally adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, Charsets.UTF_8.toString());\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","sourceNew":"  // Creates a minimal conf dir, adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    Files.createFile(dstRoot.toPath().resolve(\"core.properties\"));\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, StandardCharsets.UTF_8);\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","sourceOld":"  // Creates a minimal conf dir, adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    Files.createFile(dstRoot.toPath().resolve(\"core.properties\"));\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, Charsets.UTF_8.toString());\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","bugFix":null,"bugIntro":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","sourceNew":"  // Creates a minimal conf dir, adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    Files.createFile(dstRoot.toPath().resolve(\"core.properties\"));\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, StandardCharsets.UTF_8);\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","sourceOld":"  // Creates a minimal conf dir, adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    Files.createFile(dstRoot.toPath().resolve(\"core.properties\"));\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, Charsets.UTF_8.toString());\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbdd035c502312d32111b9642ba3dbd5c52ee64f","date":1488346355,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#copyMinConf(File,String).mjava","sourceNew":"  // Creates a minimal conf dir, adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n    copyMinConf(dstRoot, propertiesContent, \"solrconfig-minimal.xml\");\n  }\n\n","sourceOld":"  // Creates a minimal conf dir, adding in a core.properties file from the string passed in\n  // the string to write to the core.properties file may be null in which case nothing is done with it.\n  // propertiesContent may be an empty string, which will actually work.\n  public static void copyMinConf(File dstRoot, String propertiesContent) throws IOException {\n\n    File subHome = new File(dstRoot, \"conf\");\n    if (! dstRoot.exists()) {\n      assertTrue(\"Failed to make subdirectory \", dstRoot.mkdirs());\n    }\n    Files.createFile(dstRoot.toPath().resolve(\"core.properties\"));\n    if (propertiesContent != null) {\n      FileUtils.writeStringToFile(new File(dstRoot, \"core.properties\"), propertiesContent, StandardCharsets.UTF_8);\n    }\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    FileUtils.copyFile(new File(top, \"schema-tiny.xml\"), new File(subHome, \"schema.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig-minimal.xml\"), new File(subHome, \"solrconfig.xml\"));\n    FileUtils.copyFile(new File(top, \"solrconfig.snippet.randomindexconfig.xml\"), new File(subHome, \"solrconfig.snippet.randomindexconfig.xml\"));\n  }\n\n","bugFix":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"320888923ec13b91f53082558f01f4c9960dd226":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bbdd035c502312d32111b9642ba3dbd5c52ee64f"]},"commit2Childs":{"83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0":["fd44bec977a26a118d9e809e2de6f7edb5ca0f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83fbfcaab6a6cd5daf32752c0c35f0e0c15380e0"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["bbdd035c502312d32111b9642ba3dbd5c52ee64f","320888923ec13b91f53082558f01f4c9960dd226"],"fd44bec977a26a118d9e809e2de6f7edb5ca0f39":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"bbdd035c502312d32111b9642ba3dbd5c52ee64f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"320888923ec13b91f53082558f01f4c9960dd226":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}