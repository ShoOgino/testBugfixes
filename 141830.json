{"path":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","commits":[{"id":"498e168d849b4dbc097ac7b31f6db170d6f55725","date":1286807836,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected boolean acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c925a1f2801303835dcd229e7f21bcd280746332","date":1289846486,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","sourceNew":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","sourceOld":"  @Override\n  protected boolean acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","sourceNew":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","sourceOld":"  @Override\n  protected boolean acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return true;\n        } else {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/SpanNearPayloadCheckQuery#acceptPosition(Spans).mjava","sourceNew":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","sourceOld":"  @Override\n  protected AcceptStatus acceptPosition(Spans spans) throws IOException {\n    boolean result = spans.isPayloadAvailable();\n    if (result == true) {\n      Collection<byte[]> candidate = spans.getPayload();\n      if (candidate.size() == payloadToMatch.size()) {\n        //TODO: check the byte arrays are the same\n        //hmm, can't rely on order here\n        int matches = 0;\n        for (byte[] candBytes : candidate) {\n          //Unfortunately, we can't rely on order, so we need to compare all\n          for (byte[] payBytes : payloadToMatch) {\n            if (Arrays.equals(candBytes, payBytes) == true) {\n              matches++;\n              break;\n            }\n          }\n        }\n        if (matches == payloadToMatch.size()){\n          //we've verified all the bytes\n          return AcceptStatus.YES;\n        } else {\n          return AcceptStatus.NO;\n        }\n      } else {\n        return AcceptStatus.NO;\n      }\n    }\n    return AcceptStatus.NO;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c925a1f2801303835dcd229e7f21bcd280746332":["498e168d849b4dbc097ac7b31f6db170d6f55725"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["498e168d849b4dbc097ac7b31f6db170d6f55725","c925a1f2801303835dcd229e7f21bcd280746332"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c925a1f2801303835dcd229e7f21bcd280746332"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c925a1f2801303835dcd229e7f21bcd280746332"],"498e168d849b4dbc097ac7b31f6db170d6f55725":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c925a1f2801303835dcd229e7f21bcd280746332":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","498e168d849b4dbc097ac7b31f6db170d6f55725"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"498e168d849b4dbc097ac7b31f6db170d6f55725":["c925a1f2801303835dcd229e7f21bcd280746332","9ab1f5591dc05f1f2b5407d809c9699f75554a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}