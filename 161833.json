{"path":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","commits":[{"id":"622a708571e534680618b3c5e0c28ac539a47776","date":1517406892,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap, NormsProducer norms) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a801a0efdddea4f823c56104babbbc8c52382cf","date":1600074666,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap, NormsProducer norms) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap, NormsProducer norms) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"680b6449f09827f58fe987aff279e014c311d966","date":1600247985,"type":3,"author":"noblepaul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermVectorsConsumer#flush(Map[String,TermsHashPerField],SegmentWriteState,Sorter.DocMap,NormsProducer).mjava","sourceNew":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap, NormsProducer norms) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  void flush(Map<String, TermsHashPerField> fieldsToFlush, final SegmentWriteState state, Sorter.DocMap sortMap, NormsProducer norms) throws IOException {\n    if (writer != null) {\n      int numDocs = state.segmentInfo.maxDoc();\n      assert numDocs > 0;\n      // At least one doc in this run had term vectors enabled\n      try {\n        fill(numDocs);\n        assert state.segmentInfo != null;\n        writer.finish(state.fieldInfos, numDocs);\n      } finally {\n        IOUtils.close(writer);\n        writer = null;\n        lastDocID = 0;\n        hasVectors = false;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"680b6449f09827f58fe987aff279e014c311d966":["622a708571e534680618b3c5e0c28ac539a47776","5a801a0efdddea4f823c56104babbbc8c52382cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"622a708571e534680618b3c5e0c28ac539a47776":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["680b6449f09827f58fe987aff279e014c311d966"],"5a801a0efdddea4f823c56104babbbc8c52382cf":["622a708571e534680618b3c5e0c28ac539a47776"]},"commit2Childs":{"680b6449f09827f58fe987aff279e014c311d966":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["622a708571e534680618b3c5e0c28ac539a47776"],"622a708571e534680618b3c5e0c28ac539a47776":["680b6449f09827f58fe987aff279e014c311d966","5a801a0efdddea4f823c56104babbbc8c52382cf"],"5a801a0efdddea4f823c56104babbbc8c52382cf":["680b6449f09827f58fe987aff279e014c311d966"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}