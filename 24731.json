{"path":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","commits":[{"id":"30578d159793027c293771de0d9c0fdc7ffe9ea0","date":1332540859,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new ReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d17ffdbce80d3dce181982a9cd16f4f90bc8619a","date":1357583592,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new ReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new ReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecd75942508378ccc92c3a26f71db6cba9f25784","date":1450708761,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.add(\"response\", list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","date":1474893506,"type":4,"author":"Christine Poerschke","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSONSolrDocument().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSONSolrDocument().mjava","sourceNew":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSONSolrDocument() throws IOException {\n    SolrQueryRequest req = req(CommonParams.WT,\"json\",\n                               CommonParams.FL,\"id,score\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    ReturnFields returnFields = new SolrReturnFields(req);\n    rsp.setReturnFields(returnFields);\n\n    StringWriter buf = new StringWriter();\n\n    SolrDocument solrDoc = new SolrDocument();\n    solrDoc.addField(\"id\", \"1\");\n    solrDoc.addField(\"subject\", \"hello2\");\n    solrDoc.addField(\"title\", \"hello3\");\n    solrDoc.addField(\"score\", \"0.7\");\n\n    SolrDocumentList list = new SolrDocumentList();\n    list.setNumFound(1);\n    list.setStart(0);\n    list.setMaxScore(0.7f);\n    list.add(solrDoc);\n\n    rsp.addResponse(list);\n\n    w.write(buf, req, rsp);\n    String result = buf.toString();\n    assertFalse(\"response contains unexpected fields: \" + result, \n                result.contains(\"hello\") || \n                result.contains(\"\\\"subject\\\"\") || \n                result.contains(\"\\\"title\\\"\"));\n    assertTrue(\"response doesn't contain expected fields: \" + result, \n               result.contains(\"\\\"id\\\"\") &&\n               result.contains(\"\\\"score\\\"\"));\n\n\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["ecd75942508378ccc92c3a26f71db6cba9f25784"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["30578d159793027c293771de0d9c0fdc7ffe9ea0","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["30578d159793027c293771de0d9c0fdc7ffe9ea0"],"30578d159793027c293771de0d9c0fdc7ffe9ea0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ecd75942508378ccc92c3a26f71db6cba9f25784","b564b6c464f1c4b1f8e676b2b9b1558c34634b3a"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["ecd75942508378ccc92c3a26f71db6cba9f25784","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b564b6c464f1c4b1f8e676b2b9b1558c34634b3a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d17ffdbce80d3dce181982a9cd16f4f90bc8619a":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ecd75942508378ccc92c3a26f71db6cba9f25784"],"30578d159793027c293771de0d9c0fdc7ffe9ea0":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d17ffdbce80d3dce181982a9cd16f4f90bc8619a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30578d159793027c293771de0d9c0fdc7ffe9ea0"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecd75942508378ccc92c3a26f71db6cba9f25784":["b564b6c464f1c4b1f8e676b2b9b1558c34634b3a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}