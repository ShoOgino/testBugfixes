{"path":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","commits":[{"id":"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","date":1464795186,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<T> comparator) {\n    if (k < from) {\n      throw new IllegalArgumentException(\"k must be >= from\");\n    }\n    if (k >= to) {\n      throw new IllegalArgumentException(\"k must be < to\");\n    }\n    final int maxDepth = 2 * MathUtil.log(to - from, 2);\n    quickSelect(arr, from, to, k, comparator, maxDepth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b8ee93140fd0efef7e101786e3ed5160a700b5f","date":1464820111,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<T> comparator) {\n    if (k < from) {\n      throw new IllegalArgumentException(\"k must be >= from\");\n    }\n    if (k >= to) {\n      throw new IllegalArgumentException(\"k must be < to\");\n    }\n    final int maxDepth = 2 * MathUtil.log(to - from, 2);\n    quickSelect(arr, from, to, k, comparator, maxDepth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","date":1464821470,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<T> comparator) {\n    if (k < from) {\n      throw new IllegalArgumentException(\"k must be >= from\");\n    }\n    if (k >= to) {\n      throw new IllegalArgumentException(\"k must be < to\");\n    }\n    final int maxDepth = 2 * MathUtil.log(to - from, 2);\n    quickSelect(arr, from, to, k, comparator, maxDepth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f69e96b07e265f3e18957be540909b01fae36f8","date":1464859090,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","pathOld":"/dev/null","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<T> comparator) {\n    if (k < from) {\n      throw new IllegalArgumentException(\"k must be >= from\");\n    }\n    if (k >= to) {\n      throw new IllegalArgumentException(\"k must be < to\");\n    }\n    final int maxDepth = 2 * MathUtil.log(to - from, 2);\n    quickSelect(arr, from, to, k, comparator, maxDepth);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","sourceNew":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<? super T> comparator) {\n    new IntroSelector() {\n\n      T pivot;\n\n      @Override\n      protected void swap(int i, int j) {\n        ArrayUtil.swap(arr, i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        pivot = arr[i];\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        return comparator.compare(pivot, arr[j]);\n      }\n    }.select(from, to, k);\n  }\n\n","sourceOld":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<T> comparator) {\n    if (k < from) {\n      throw new IllegalArgumentException(\"k must be >= from\");\n    }\n    if (k >= to) {\n      throw new IllegalArgumentException(\"k must be < to\");\n    }\n    final int maxDepth = 2 * MathUtil.log(to - from, 2);\n    quickSelect(arr, from, to, k, comparator, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_select(T[],int,int,int,Comparator[T]).mjava","sourceNew":null,"sourceOld":"  /** Reorganize {@code arr[from:to[} so that the element at offset k is at the\n   *  same position as if {@code arr[from:to[} was sorted, and all elements on\n   *  its left are less than or equal to it, and all elements on its right are\n   *  greater than or equal to it.\n   *  This runs in linear time on average and in {@code n log(n)} time in the\n   *  worst case.*/\n  public static <T> void select(T[] arr, int from, int to, int k, Comparator<T> comparator) {\n    if (k < from) {\n      throw new IllegalArgumentException(\"k must be >= from\");\n    }\n    if (k >= to) {\n      throw new IllegalArgumentException(\"k must be < to\");\n    }\n    final int maxDepth = 2 * MathUtil.log(to - from, 2);\n    quickSelect(arr, from, to, k, comparator, maxDepth);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1f69e96b07e265f3e18957be540909b01fae36f8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e533fe5a9b29e5ca780ca7611d1500dc9eddf04b"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["1f69e96b07e265f3e18957be540909b01fae36f8"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["1f69e96b07e265f3e18957be540909b01fae36f8","d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"]},"commit2Childs":{"e533fe5a9b29e5ca780ca7611d1500dc9eddf04b":["1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e533fe5a9b29e5ca780ca7611d1500dc9eddf04b","1f69e96b07e265f3e18957be540909b01fae36f8","5b8ee93140fd0efef7e101786e3ed5160a700b5f","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"1f69e96b07e265f3e18957be540909b01fae36f8":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"5b8ee93140fd0efef7e101786e3ed5160a700b5f":["b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3b013574eedcdbac35dc7e35b0ee616ffc38895d","b40b1a0adcc6bdcda63b0fbd75dfa2ddd8777e77","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}