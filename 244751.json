{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#populateFileStreamData(String).mjava","commits":[{"id":"4e7e81cd6c3e108547bc12beb23ba00ae90448b9","date":1564060380,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#populateFileStreamData(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a tree of files underneath a provided data-directory.\n   *\n   * The filetree created looks like:\n   *\n   * dataDir\n   *   |- topLevel1.txt\n   *   |- topLevel2.txt\n   *   |- directory1\n   *        |- secondLevel1.txt\n   *        |- secondLevel2.txt\n   *\n   * Each file contains 4 lines.  Each line looks like: \"<filename> line <linenumber>\"\n   */\n  private static void populateFileStreamData(String dataDir) throws Exception {\n    final File baseDataDir = new File(dataDir);\n    if (! baseDataDir.exists()) baseDataDir.mkdir();\n    final File directory1 = new File(Paths.get(dataDir, \"directory1\").toString());\n    directory1.mkdir();\n\n    final File topLevel1 = new File(Paths.get(dataDir, \"topLevel1.txt\").toString());\n    final File topLevel2 = new File(Paths.get(dataDir, \"topLevel2.txt\").toString());\n    final File secondLevel1 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel1.txt\").toString());\n    final File secondLevel2 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel2.txt\").toString());\n    populateFileWithData(topLevel1);\n    populateFileWithData(topLevel2);\n    populateFileWithData(secondLevel1);\n    populateFileWithData(secondLevel2);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0a64689513b45b25612694fffa76be8d4a9a3ad","date":1568507952,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#populateFileStreamData(String).mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#populateFileStreamData(String).mjava","sourceNew":"  /**\n   * Creates a tree of files underneath a provided data-directory.\n   *\n   * The filetree created looks like:\n   *\n   * dataDir\n   *   |- topLevel1.txt\n   *   |- topLevel2.txt\n   *   |- topLevel-empty.txt\n   *   |- directory1\n   *        |- secondLevel1.txt\n   *        |- secondLevel2.txt\n   *\n   * Each file contains 4 lines.  Each line looks like: \"<filename> line <linenumber>\"\n   */\n  private static void populateFileStreamData(String dataDir) throws Exception {\n    final File baseDataDir = new File(dataDir);\n    if (! baseDataDir.exists()) baseDataDir.mkdir();\n    final File directory1 = new File(Paths.get(dataDir, \"directory1\").toString());\n    directory1.mkdir();\n\n    final File topLevel1 = new File(Paths.get(dataDir, \"topLevel1.txt\").toString());\n    final File topLevel2 = new File(Paths.get(dataDir, \"topLevel2.txt\").toString());\n    final File topLevelEmpty = new File(Paths.get(dataDir, \"topLevel-empty.txt\").toString());\n    final File secondLevel1 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel1.txt\").toString());\n    final File secondLevel2 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel2.txt\").toString());\n    populateFileWithData(topLevel1);\n    populateFileWithData(topLevel2);\n    topLevelEmpty.createNewFile();\n    populateFileWithData(secondLevel1);\n    populateFileWithData(secondLevel2);\n  }\n\n","sourceOld":"  /**\n   * Creates a tree of files underneath a provided data-directory.\n   *\n   * The filetree created looks like:\n   *\n   * dataDir\n   *   |- topLevel1.txt\n   *   |- topLevel2.txt\n   *   |- directory1\n   *        |- secondLevel1.txt\n   *        |- secondLevel2.txt\n   *\n   * Each file contains 4 lines.  Each line looks like: \"<filename> line <linenumber>\"\n   */\n  private static void populateFileStreamData(String dataDir) throws Exception {\n    final File baseDataDir = new File(dataDir);\n    if (! baseDataDir.exists()) baseDataDir.mkdir();\n    final File directory1 = new File(Paths.get(dataDir, \"directory1\").toString());\n    directory1.mkdir();\n\n    final File topLevel1 = new File(Paths.get(dataDir, \"topLevel1.txt\").toString());\n    final File topLevel2 = new File(Paths.get(dataDir, \"topLevel2.txt\").toString());\n    final File secondLevel1 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel1.txt\").toString());\n    final File secondLevel2 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel2.txt\").toString());\n    populateFileWithData(topLevel1);\n    populateFileWithData(topLevel2);\n    populateFileWithData(secondLevel1);\n    populateFileWithData(secondLevel2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8c36bc16f489634a3fcf14294704824192273df","date":1593058738,"type":4,"author":"David Smiley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#populateFileStreamData(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates a tree of files underneath a provided data-directory.\n   *\n   * The filetree created looks like:\n   *\n   * dataDir\n   *   |- topLevel1.txt\n   *   |- topLevel2.txt\n   *   |- topLevel-empty.txt\n   *   |- directory1\n   *        |- secondLevel1.txt\n   *        |- secondLevel2.txt\n   *\n   * Each file contains 4 lines.  Each line looks like: \"<filename> line <linenumber>\"\n   */\n  private static void populateFileStreamData(String dataDir) throws Exception {\n    final File baseDataDir = new File(dataDir);\n    if (! baseDataDir.exists()) baseDataDir.mkdir();\n    final File directory1 = new File(Paths.get(dataDir, \"directory1\").toString());\n    directory1.mkdir();\n\n    final File topLevel1 = new File(Paths.get(dataDir, \"topLevel1.txt\").toString());\n    final File topLevel2 = new File(Paths.get(dataDir, \"topLevel2.txt\").toString());\n    final File topLevelEmpty = new File(Paths.get(dataDir, \"topLevel-empty.txt\").toString());\n    final File secondLevel1 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel1.txt\").toString());\n    final File secondLevel2 = new File(Paths.get(dataDir, \"directory1\", \"secondLevel2.txt\").toString());\n    populateFileWithData(topLevel1);\n    populateFileWithData(topLevel2);\n    topLevelEmpty.createNewFile();\n    populateFileWithData(secondLevel1);\n    populateFileWithData(secondLevel2);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e8c36bc16f489634a3fcf14294704824192273df":["a0a64689513b45b25612694fffa76be8d4a9a3ad"],"a0a64689513b45b25612694fffa76be8d4a9a3ad":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e8c36bc16f489634a3fcf14294704824192273df"]},"commit2Childs":{"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["a0a64689513b45b25612694fffa76be8d4a9a3ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"e8c36bc16f489634a3fcf14294704824192273df":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0a64689513b45b25612694fffa76be8d4a9a3ad":["e8c36bc16f489634a3fcf14294704824192273df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}