{"path":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","commits":[{"id":"9d153abcf92dc5329d98571a8c3035df9bd80648","date":1337702630,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","pathOld":"/dev/null","sourceNew":"  public Collection<String> files() throws IOException {\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // nocommit make this take list instead...?\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb5728b83dbb3e002cdd22adfe6caf103a96ef15","date":1337791289,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","sourceNew":"  public Collection<String> files() throws IOException {\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","sourceOld":"  public Collection<String> files() throws IOException {\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // nocommit make this take list instead...?\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","pathOld":"/dev/null","sourceNew":"  public Collection<String> files() throws IOException {\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c14aed69f37b57db63b1fccc0740b17060a08f2b","date":1348227091,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","sourceNew":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","sourceOld":"  public Collection<String> files() throws IOException {\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9eae2a56dc810a17cf807d831f720dec931a03de","date":1349262073,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","sourceNew":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    // Start from the wrapped info's files:\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","sourceOld":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","sourceNew":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    // Start from the wrapped info's files:\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // TODO we could rely on TrackingDir.getCreatedFiles() (like we do for\n    // updates) and then maybe even be able to remove LiveDocsFormat.files().\n    \n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    // Must separately add any field updates files\n    files.addAll(updatesFiles);\n    \n    return files;\n  }\n\n","sourceOld":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    // Start from the wrapped info's files:\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    return files;\n  }\n\n","bugFix":null,"bugIntro":["0567bdc5c86c94ced64201187cfcef2417d76dda"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f13fb377f9b5df46af44bf90a2e507a884f2c30","date":1380476222,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","sourceNew":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    // Start from the wrapped info's files:\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // TODO we could rely on TrackingDir.getCreatedFiles() (like we do for\n    // updates) and then maybe even be able to remove LiveDocsFormat.files().\n    \n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    // Must separately add any field updates files\n    for (Set<String> updateFiles : genUpdatesFiles.values()) {\n      files.addAll(updateFiles);\n    }\n    \n    return files;\n  }\n\n","sourceOld":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    // Start from the wrapped info's files:\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // TODO we could rely on TrackingDir.getCreatedFiles() (like we do for\n    // updates) and then maybe even be able to remove LiveDocsFormat.files().\n    \n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    // Must separately add any field updates files\n    files.addAll(updatesFiles);\n    \n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0","date":1383367127,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SegmentCommitInfo#files().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SegmentInfoPerCommit#files().mjava","sourceNew":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    // Start from the wrapped info's files:\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // TODO we could rely on TrackingDir.getCreatedFiles() (like we do for\n    // updates) and then maybe even be able to remove LiveDocsFormat.files().\n    \n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    // Must separately add any field updates files\n    for (Set<String> updateFiles : genUpdatesFiles.values()) {\n      files.addAll(updateFiles);\n    }\n    \n    return files;\n  }\n\n","sourceOld":"  /** Returns all files in use by this segment. */\n  public Collection<String> files() throws IOException {\n    // Start from the wrapped info's files:\n    Collection<String> files = new HashSet<String>(info.files());\n\n    // TODO we could rely on TrackingDir.getCreatedFiles() (like we do for\n    // updates) and then maybe even be able to remove LiveDocsFormat.files().\n    \n    // Must separately add any live docs files:\n    info.getCodec().liveDocsFormat().files(this, files);\n\n    // Must separately add any field updates files\n    for (Set<String> updateFiles : genUpdatesFiles.values()) {\n      files.addAll(updateFiles);\n    }\n    \n    return files;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["9eae2a56dc810a17cf807d831f720dec931a03de"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["9d153abcf92dc5329d98571a8c3035df9bd80648"],"9eae2a56dc810a17cf807d831f720dec931a03de":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d153abcf92dc5329d98571a8c3035df9bd80648":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["2f13fb377f9b5df46af44bf90a2e507a884f2c30"],"73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["c14aed69f37b57db63b1fccc0740b17060a08f2b"],"fb5728b83dbb3e002cdd22adfe6caf103a96ef15":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"9eae2a56dc810a17cf807d831f720dec931a03de":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["615ddbd81799980d0fdd95e0238e1c498b6f47b0","9d153abcf92dc5329d98571a8c3035df9bd80648"],"9d153abcf92dc5329d98571a8c3035df9bd80648":["fb5728b83dbb3e002cdd22adfe6caf103a96ef15"],"2f13fb377f9b5df46af44bf90a2e507a884f2c30":["73b0a97ef3bd519a5e43398ea9eabe6eed97f6b0"],"c14aed69f37b57db63b1fccc0740b17060a08f2b":["9eae2a56dc810a17cf807d831f720dec931a03de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}