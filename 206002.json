{"path":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#RegExp(String,int).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#RegExp(String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs new <code>RegExp</code> from a string.\n   * \n   * @param s regexp string\n   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n   *          enabled\n   * @exception IllegalArgumentException if an error occured while parsing the\n   *              regular expression\n   */\n  public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n    b = s;\n    flags = syntax_flags;\n    RegExp e;\n    if (s.length() == 0) e = makeString(\"\");\n    else {\n      e = parseUnionExp();\n      if (pos < b.length()) throw new IllegalArgumentException(\n          \"end-of-string expected at position \" + pos);\n    }\n    kind = e.kind;\n    exp1 = e.exp1;\n    exp2 = e.exp2;\n    this.s = e.s;\n    c = e.c;\n    min = e.min;\n    max = e.max;\n    digits = e.digits;\n    from = e.from;\n    to = e.to;\n    b = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#RegExp(String,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#RegExp(String,int).mjava","sourceNew":"  /**\n   * Constructs new <code>RegExp</code> from a string.\n   * \n   * @param s regexp string\n   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n   *          enabled\n   * @exception IllegalArgumentException if an error occured while parsing the\n   *              regular expression\n   */\n  public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n    b = s;\n    flags = syntax_flags;\n    RegExp e;\n    if (s.length() == 0) e = makeString(\"\");\n    else {\n      e = parseUnionExp();\n      if (pos < b.length()) throw new IllegalArgumentException(\n          \"end-of-string expected at position \" + pos);\n    }\n    kind = e.kind;\n    exp1 = e.exp1;\n    exp2 = e.exp2;\n    this.s = e.s;\n    c = e.c;\n    min = e.min;\n    max = e.max;\n    digits = e.digits;\n    from = e.from;\n    to = e.to;\n    b = null;\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>RegExp</code> from a string.\n   * \n   * @param s regexp string\n   * @param syntax_flags boolean 'or' of optional syntax constructs to be\n   *          enabled\n   * @exception IllegalArgumentException if an error occured while parsing the\n   *              regular expression\n   */\n  public RegExp(String s, int syntax_flags) throws IllegalArgumentException {\n    b = s;\n    flags = syntax_flags;\n    RegExp e;\n    if (s.length() == 0) e = makeString(\"\");\n    else {\n      e = parseUnionExp();\n      if (pos < b.length()) throw new IllegalArgumentException(\n          \"end-of-string expected at position \" + pos);\n    }\n    kind = e.kind;\n    exp1 = e.exp1;\n    exp2 = e.exp2;\n    this.s = e.s;\n    c = e.c;\n    min = e.min;\n    max = e.max;\n    digits = e.digits;\n    from = e.from;\n    to = e.to;\n    b = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}