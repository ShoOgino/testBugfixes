{"path":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","sourceNew":"  protected void checkAllowLeadingWildcards() {\n    boolean allow = false;\n    for (Entry<String, FieldType> e : schema.getFieldTypes().entrySet()) {\n      Analyzer a = e.getValue().getAnalyzer();\n      if (a instanceof TokenizerChain) {\n        // examine the indexing analysis chain if it supports leading wildcards\n        TokenizerChain tc = (TokenizerChain)a;\n        TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n        for (TokenFilterFactory factory : factories) {\n          if (factory instanceof ReversedWildcardFilterFactory) {\n            allow = true;\n            leadingWildcards.put(e.getKey(), (ReversedWildcardFilterFactory)factory);\n          }\n        }\n      }\n    }\n    // XXX should be enabled on a per-field basis\n    if (allow) {\n      setAllowLeadingWildcard(true);\n    }\n  }\n\n","sourceOld":"  protected void checkAllowLeadingWildcards() {\n    boolean allow = false;\n    for (Entry<String, FieldType> e : schema.getFieldTypes().entrySet()) {\n      Analyzer a = e.getValue().getAnalyzer();\n      if (a instanceof TokenizerChain) {\n        // examine the indexing analysis chain if it supports leading wildcards\n        TokenizerChain tc = (TokenizerChain)a;\n        TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n        for (TokenFilterFactory factory : factories) {\n          if (factory instanceof ReversedWildcardFilterFactory) {\n            allow = true;\n            leadingWildcards.put(e.getKey(), (ReversedWildcardFilterFactory)factory);\n          }\n        }\n      }\n    }\n    // XXX should be enabled on a per-field basis\n    if (allow) {\n      setAllowLeadingWildcard(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","sourceNew":"  protected void checkAllowLeadingWildcards() {\n    boolean allow = false;\n    for (Entry<String, FieldType> e : schema.getFieldTypes().entrySet()) {\n      Analyzer a = e.getValue().getAnalyzer();\n      if (a instanceof TokenizerChain) {\n        // examine the indexing analysis chain if it supports leading wildcards\n        TokenizerChain tc = (TokenizerChain)a;\n        TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n        for (TokenFilterFactory factory : factories) {\n          if (factory instanceof ReversedWildcardFilterFactory) {\n            allow = true;\n            leadingWildcards.put(e.getKey(), (ReversedWildcardFilterFactory)factory);\n          }\n        }\n      }\n    }\n    // XXX should be enabled on a per-field basis\n    if (allow) {\n      setAllowLeadingWildcard(true);\n    }\n  }\n\n","sourceOld":"  protected void checkAllowLeadingWildcards() {\n    boolean allow = false;\n    for (Entry<String, FieldType> e : schema.getFieldTypes().entrySet()) {\n      Analyzer a = e.getValue().getAnalyzer();\n      if (a instanceof TokenizerChain) {\n        // examine the indexing analysis chain if it supports leading wildcards\n        TokenizerChain tc = (TokenizerChain)a;\n        TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n        for (TokenFilterFactory factory : factories) {\n          if (factory instanceof ReversedWildcardFilterFactory) {\n            allow = true;\n            leadingWildcards.put(e.getKey(), (ReversedWildcardFilterFactory)factory);\n          }\n        }\n      }\n    }\n    // XXX should be enabled on a per-field basis\n    if (allow) {\n      setAllowLeadingWildcard(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","pathOld":"solr/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","sourceNew":"  protected void checkAllowLeadingWildcards() {\n    boolean allow = false;\n    for (Entry<String, FieldType> e : schema.getFieldTypes().entrySet()) {\n      Analyzer a = e.getValue().getAnalyzer();\n      if (a instanceof TokenizerChain) {\n        // examine the indexing analysis chain if it supports leading wildcards\n        TokenizerChain tc = (TokenizerChain)a;\n        TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n        for (TokenFilterFactory factory : factories) {\n          if (factory instanceof ReversedWildcardFilterFactory) {\n            allow = true;\n            leadingWildcards.put(e.getKey(), (ReversedWildcardFilterFactory)factory);\n          }\n        }\n      }\n    }\n    // XXX should be enabled on a per-field basis\n    if (allow) {\n      setAllowLeadingWildcard(true);\n    }\n  }\n\n","sourceOld":"  protected void checkAllowLeadingWildcards() {\n    boolean allow = false;\n    for (Entry<String, FieldType> e : schema.getFieldTypes().entrySet()) {\n      Analyzer a = e.getValue().getAnalyzer();\n      if (a instanceof TokenizerChain) {\n        // examine the indexing analysis chain if it supports leading wildcards\n        TokenizerChain tc = (TokenizerChain)a;\n        TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n        for (TokenFilterFactory factory : factories) {\n          if (factory instanceof ReversedWildcardFilterFactory) {\n            allow = true;\n            leadingWildcards.put(e.getKey(), (ReversedWildcardFilterFactory)factory);\n          }\n        }\n      }\n    }\n    // XXX should be enabled on a per-field basis\n    if (allow) {\n      setAllowLeadingWildcard(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15795b2193a8dd132f374975d4243687bee9351","date":1322413478,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/SolrQueryParser#checkAllowLeadingWildcards().mjava","sourceNew":null,"sourceOld":"  protected void checkAllowLeadingWildcards() {\n    boolean allow = false;\n    for (Entry<String, FieldType> e : schema.getFieldTypes().entrySet()) {\n      Analyzer a = e.getValue().getAnalyzer();\n      if (a instanceof TokenizerChain) {\n        // examine the indexing analysis chain if it supports leading wildcards\n        TokenizerChain tc = (TokenizerChain)a;\n        TokenFilterFactory[] factories = tc.getTokenFilterFactories();\n        for (TokenFilterFactory factory : factories) {\n          if (factory instanceof ReversedWildcardFilterFactory) {\n            allow = true;\n            leadingWildcards.put(e.getKey(), (ReversedWildcardFilterFactory)factory);\n          }\n        }\n      }\n    }\n    // XXX should be enabled on a per-field basis\n    if (allow) {\n      setAllowLeadingWildcard(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f15795b2193a8dd132f374975d4243687bee9351":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f15795b2193a8dd132f374975d4243687bee9351"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["f15795b2193a8dd132f374975d4243687bee9351"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"f15795b2193a8dd132f374975d4243687bee9351":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}