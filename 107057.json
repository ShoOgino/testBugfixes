{"path":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","commits":[{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n    \n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n    \n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        \n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n        \n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n    \n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n    \n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        \n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n        \n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n    \n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n    \n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        \n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n        \n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n    \n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n    \n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        \n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n        \n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":1,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n    \n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n    \n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        \n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n        \n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n    \n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n    \n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        \n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n        \n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n    \n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n    \n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n        \n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n        \n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efb7a19703a037c29e30440260d393500febc1f4","date":1306648116,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f, lf));\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49c9cd7b6155a692974306c2f859c8b1ddb874e0","date":1307117530,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e7c99bd45fa88a3d93a03fdd773053bef72268e","date":1307218088,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase#newFSDirectory(File,LockFactory).mjava","sourceNew":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** Returns a new FSDirectory instance over the given file, which must be a folder. */\n  public static MockDirectoryWrapper newFSDirectory(File f, LockFactory lf) throws IOException {\n    String fsdirClass = TEST_DIRECTORY;\n    if (fsdirClass.equals(\"random\")) {\n      fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n    }\n\n    if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n      fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n    }\n\n    Class<? extends FSDirectory> clazz;\n    try {\n      try {\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      } catch (ClassCastException e) {\n        // TEST_DIRECTORY is not a sub-class of FSDirectory, so draw one at random\n        fsdirClass = FS_DIRECTORIES[random.nextInt(FS_DIRECTORIES.length)];\n\n        if (fsdirClass.indexOf(\".\") == -1) {// if not fully qualified, assume .store\n          fsdirClass = \"org.apache.lucene.store.\" + fsdirClass;\n        }\n\n        clazz = Class.forName(fsdirClass).asSubclass(FSDirectory.class);\n      }\n      MockDirectoryWrapper dir = new MockDirectoryWrapper(random, newFSDirectoryImpl(clazz, f));\n      if (lf != null) {\n        dir.setLockFactory(lf);\n      }\n      stores.put(dir, Thread.currentThread().getStackTrace());\n      dir.setThrottling(TEST_THROTTLING);\n      return dir;\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"efb7a19703a037c29e30440260d393500febc1f4":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"c715a0f99152be7566591f323c6c5a25725a1bcb":["2e10cb22a8bdb44339e282925a29182bb2f3174d","49c9cd7b6155a692974306c2f859c8b1ddb874e0"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","49c9cd7b6155a692974306c2f859c8b1ddb874e0"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b91922b55d15444d554721b352861d028eb8278":["49c9cd7b6155a692974306c2f859c8b1ddb874e0"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","efb7a19703a037c29e30440260d393500febc1f4"],"a3776dccca01c11e7046323cfad46a3b4a471233":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"49c9cd7b6155a692974306c2f859c8b1ddb874e0":["efb7a19703a037c29e30440260d393500febc1f4"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["135621f3a0670a9394eb563224a3b76cc4dddc0f","efb7a19703a037c29e30440260d393500febc1f4"]},"commit2Childs":{"efb7a19703a037c29e30440260d393500febc1f4":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","49c9cd7b6155a692974306c2f859c8b1ddb874e0","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["2e10cb22a8bdb44339e282925a29182bb2f3174d"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["efb7a19703a037c29e30440260d393500febc1f4","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"1e7c99bd45fa88a3d93a03fdd773053bef72268e":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["b3e06be49006ecac364d39d12b9c9f74882f9b9f","a3776dccca01c11e7046323cfad46a3b4a471233","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["1e7c99bd45fa88a3d93a03fdd773053bef72268e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"49c9cd7b6155a692974306c2f859c8b1ddb874e0":["c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e","7b91922b55d15444d554721b352861d028eb8278"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["c715a0f99152be7566591f323c6c5a25725a1bcb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","1e7c99bd45fa88a3d93a03fdd773053bef72268e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}