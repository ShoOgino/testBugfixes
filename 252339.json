{"path":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","commits":[{"id":"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8","date":1195335263,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","pathOld":"/dev/null","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n      // clone reader\n    SegmentReader clone = new SegmentReader();\n    boolean success = false;\n    try {\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      \n      // we have to open a new FieldsReader, because it is not thread-safe\n      // and can thus not be shared among multiple SegmentReaders\n      // TODO: Change this in case FieldsReader becomes thread-safe in the future\n      final String fieldsSegment;\n      final Directory dir;\n  \n      Directory storeDir = directory();\n      \n      if (si.getDocStoreOffset() != -1) {\n        fieldsSegment = si.getDocStoreSegment();\n        if (storeCFSReader != null) {\n          storeDir = storeCFSReader;\n        }\n      } else {\n        fieldsSegment = segment;\n        if (cfsReader != null) {\n          storeDir = cfsReader;\n        }\n      }\n  \n      if (fieldsReader != null) {\n        clone.fieldsReader = new FieldsReader(storeDir, fieldsSegment, fieldInfos, readBufferSize,\n                                        si.getDocStoreOffset(), si.docCount);\n      }\n      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7a119dd14350e2cfe6ba6b5e71d48ee6c356482","date":1196863177,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n      // clone reader\n    SegmentReader clone = new SegmentReader();\n    boolean success = false;\n    try {\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      \n      // we have to open a new FieldsReader, because it is not thread-safe\n      // and can thus not be shared among multiple SegmentReaders\n      // TODO: Change this in case FieldsReader becomes thread-safe in the future\n      final String fieldsSegment;\n  \n      Directory storeDir = directory();\n      \n      if (si.getDocStoreOffset() != -1) {\n        fieldsSegment = si.getDocStoreSegment();\n        if (storeCFSReader != null) {\n          storeDir = storeCFSReader;\n        }\n      } else {\n        fieldsSegment = segment;\n        if (cfsReader != null) {\n          storeDir = cfsReader;\n        }\n      }\n  \n      if (fieldsReader != null) {\n        clone.fieldsReader = new FieldsReader(storeDir, fieldsSegment, fieldInfos, readBufferSize,\n                                        si.getDocStoreOffset(), si.docCount);\n      }\n      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n      // clone reader\n    SegmentReader clone = new SegmentReader();\n    boolean success = false;\n    try {\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      \n      // we have to open a new FieldsReader, because it is not thread-safe\n      // and can thus not be shared among multiple SegmentReaders\n      // TODO: Change this in case FieldsReader becomes thread-safe in the future\n      final String fieldsSegment;\n      final Directory dir;\n  \n      Directory storeDir = directory();\n      \n      if (si.getDocStoreOffset() != -1) {\n        fieldsSegment = si.getDocStoreSegment();\n        if (storeCFSReader != null) {\n          storeDir = storeCFSReader;\n        }\n      } else {\n        fieldsSegment = segment;\n        if (cfsReader != null) {\n          storeDir = cfsReader;\n        }\n      }\n  \n      if (fieldsReader != null) {\n        clone.fieldsReader = new FieldsReader(storeDir, fieldsSegment, fieldInfos, readBufferSize,\n                                        si.getDocStoreOffset(), si.docCount);\n      }\n      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5712975970a595c28f1988efd007e1b8a617a92f","date":1219499238,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n      // clone reader\n    SegmentReader clone;\n    if (readOnly) \n      clone = new ReadOnlySegmentReader();\n    else\n      clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      clone.readOnly = readOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      \n      // we have to open a new FieldsReader, because it is not thread-safe\n      // and can thus not be shared among multiple SegmentReaders\n      // TODO: Change this in case FieldsReader becomes thread-safe in the future\n      final String fieldsSegment;\n  \n      Directory storeDir = directory();\n      \n      if (si.getDocStoreOffset() != -1) {\n        fieldsSegment = si.getDocStoreSegment();\n        if (storeCFSReader != null) {\n          storeDir = storeCFSReader;\n        }\n      } else {\n        fieldsSegment = segment;\n        if (cfsReader != null) {\n          storeDir = cfsReader;\n        }\n      }\n  \n      if (fieldsReader != null) {\n        clone.fieldsReader = new FieldsReader(storeDir, fieldsSegment, fieldInfos, readBufferSize,\n                                        si.getDocStoreOffset(), si.docCount);\n      }\n      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n      // clone reader\n    SegmentReader clone = new SegmentReader();\n    boolean success = false;\n    try {\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      \n      // we have to open a new FieldsReader, because it is not thread-safe\n      // and can thus not be shared among multiple SegmentReaders\n      // TODO: Change this in case FieldsReader becomes thread-safe in the future\n      final String fieldsSegment;\n  \n      Directory storeDir = directory();\n      \n      if (si.getDocStoreOffset() != -1) {\n        fieldsSegment = si.getDocStoreSegment();\n        if (storeCFSReader != null) {\n          storeDir = storeCFSReader;\n        }\n      } else {\n        fieldsSegment = segment;\n        if (cfsReader != null) {\n          storeDir = cfsReader;\n        }\n      }\n  \n      if (fieldsReader != null) {\n        clone.fieldsReader = new FieldsReader(storeDir, fieldsSegment, fieldInfos, readBufferSize,\n                                        si.getDocStoreOffset(), si.docCount);\n      }\n      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de9999a287e59e079489cd445c376fa0dab501ba","date":1229510190,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n    // clone reader\n    SegmentReader clone;\n    if (readOnly) \n      clone = new ReadOnlySegmentReader();\n    else\n      clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      clone.readOnly = readOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n      // clone reader\n    SegmentReader clone;\n    if (readOnly) \n      clone = new ReadOnlySegmentReader();\n    else\n      clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      clone.readOnly = readOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      \n      // we have to open a new FieldsReader, because it is not thread-safe\n      // and can thus not be shared among multiple SegmentReaders\n      // TODO: Change this in case FieldsReader becomes thread-safe in the future\n      final String fieldsSegment;\n  \n      Directory storeDir = directory();\n      \n      if (si.getDocStoreOffset() != -1) {\n        fieldsSegment = si.getDocStoreSegment();\n        if (storeCFSReader != null) {\n          storeDir = storeCFSReader;\n        }\n      } else {\n        fieldsSegment = segment;\n        if (cfsReader != null) {\n          storeDir = cfsReader;\n        }\n      }\n  \n      if (fieldsReader != null) {\n        clone.fieldsReader = new FieldsReader(storeDir, fieldsSegment, fieldInfos, readBufferSize,\n                                        si.getDocStoreOffset(), si.docCount);\n      }\n      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6db660b56f04fdb2853d25cdee8ee0d36559a521","date":1233313968,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo,boolean,boolean).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#reopenSegment(SegmentInfo).mjava","sourceNew":"  synchronized SegmentReader reopenSegment(SegmentInfo si, boolean doClone, boolean openReadOnly) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    final int fieldCount = fieldInfos.size();\n    for (int i = 0; i < fieldCount; i++) {\n      if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n        normsUpToDate = false;\n        fieldNormsChanged[i] = true;\n      }\n    }\n\n    // if we're cloning we need to run through the reopenSegment logic\n    if (normsUpToDate && deletionsUpToDate && !doClone && openReadOnly == readOnly) {\n      return this;\n    }    \n\n    // clone reader\n    SegmentReader clone;\n    try {\n      if (openReadOnly)\n        clone = (SegmentReader) READONLY_IMPL.newInstance();\n      else\n        clone = (SegmentReader) IMPL.newInstance();\n    } catch (Exception e) {\n      throw new RuntimeException(\"cannot load SegmentReader class: \" + e, e);\n    }\n\n    boolean success = false;\n    try {\n      clone.readOnly = openReadOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n\n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (deletedDocsRef != null) {\n        deletedDocsRef.incRef();\n      }\n      if (doClone) {\n        clone.deletedDocs = deletedDocs;\n        clone.deletedDocsRef = deletedDocsRef;\n      } else {\n        if (!deletionsUpToDate) {\n          // load deleted docs\n          clone.deletedDocs = null;\n          clone.deletedDocsRef = null;\n          clone.loadDeletedDocs();\n        } else {\n          clone.deletedDocs = deletedDocs;\n          clone.deletedDocsRef = deletedDocsRef;\n        }\n      }\n\n      clone.norms = new HashMap();\n\n      // Clone norms\n      for (int i = 0; i < fieldNormsChanged.length; i++) {\n\n        // Clone unchanged norms to the cloned reader\n        if (doClone || !fieldNormsChanged[i]) {\n          final String curField = fieldInfos.fieldInfo(i).name;\n          Norm norm = (Norm) this.norms.get(curField);\n          clone.norms.put(curField, norm.clone());\n        }\n      }\n      \n      // If we are not cloning, then this will open anew\n      // any norms that have changed:\n      clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n\n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // This reader shares resources with another SegmentReader,\n        // so we increment the other reader's refCount.\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n      } else {\n        // We are the original SegmentReader\n        clone.referencedSegmentReader = this;\n      }\n      clone.referencedSegmentReader.incRefReaderNotNorms();\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","sourceOld":"  synchronized SegmentReader reopenSegment(SegmentInfo si) throws CorruptIndexException, IOException {\n    boolean deletionsUpToDate = (this.si.hasDeletions() == si.hasDeletions()) \n                                  && (!si.hasDeletions() || this.si.getDelFileName().equals(si.getDelFileName()));\n    boolean normsUpToDate = true;\n\n    \n    boolean[] fieldNormsChanged = new boolean[fieldInfos.size()];\n    if (normsUpToDate) {\n      for (int i = 0; i < fieldInfos.size(); i++) {\n        if (!this.si.getNormFileName(i).equals(si.getNormFileName(i))) {\n          normsUpToDate = false;\n          fieldNormsChanged[i] = true;\n        }\n      }\n    }\n\n    if (normsUpToDate && deletionsUpToDate) {\n      return this;\n    }    \n    \n\n    // clone reader\n    SegmentReader clone;\n    if (readOnly) \n      clone = new ReadOnlySegmentReader();\n    else\n      clone = new SegmentReader();\n\n    boolean success = false;\n    try {\n      clone.readOnly = readOnly;\n      clone.directory = directory;\n      clone.si = si;\n      clone.segment = segment;\n      clone.readBufferSize = readBufferSize;\n      clone.cfsReader = cfsReader;\n      clone.storeCFSReader = storeCFSReader;\n  \n      clone.fieldInfos = fieldInfos;\n      clone.tis = tis;\n      clone.freqStream = freqStream;\n      clone.proxStream = proxStream;\n      clone.termVectorsReaderOrig = termVectorsReaderOrig;\n  \n      if (fieldsReaderOrig != null) {\n        clone.fieldsReaderOrig = (FieldsReader) fieldsReaderOrig.clone();\n      }      \n      \n      if (!deletionsUpToDate) {\n        // load deleted docs\n        clone.deletedDocs = null;\n        clone.loadDeletedDocs();\n      } else {\n        clone.deletedDocs = this.deletedDocs;\n      }\n  \n      clone.norms = new HashMap();\n      if (!normsUpToDate) {\n        // load norms\n        for (int i = 0; i < fieldNormsChanged.length; i++) {\n          // copy unchanged norms to the cloned reader and incRef those norms\n          if (!fieldNormsChanged[i]) {\n            String curField = fieldInfos.fieldInfo(i).name;\n            Norm norm = (Norm) this.norms.get(curField);\n            norm.incRef();\n            clone.norms.put(curField, norm);\n          }\n        }\n        \n        clone.openNorms(si.getUseCompoundFile() ? cfsReader : directory(), readBufferSize);\n      } else {\n        Iterator it = norms.keySet().iterator();\n        while (it.hasNext()) {\n          String field = (String) it.next();\n          Norm norm = (Norm) norms.get(field);\n          norm.incRef();\n          clone.norms.put(field, norm);\n        }\n      }\n  \n      if (clone.singleNormStream == null) {\n        for (int i = 0; i < fieldInfos.size(); i++) {\n          FieldInfo fi = fieldInfos.fieldInfo(i);\n          if (fi.isIndexed && !fi.omitNorms) {\n            Directory d = si.getUseCompoundFile() ? cfsReader : directory();\n            String fileName = si.getNormFileName(fi.number);\n            if (si.hasSeparateNorms(fi.number)) {\n              continue;\n            }  \n  \n            if (fileName.endsWith(\".\" + IndexFileNames.NORMS_EXTENSION)) {\n              clone.singleNormStream = d.openInput(fileName, readBufferSize);    \n              break;\n            }\n          }\n        }  \n      }    \n  \n      success = true;\n    } finally {\n      if (this.referencedSegmentReader != null) {\n        // this reader shares resources with another SegmentReader,\n        // so we increment the other readers refCount. We don't\n        // increment the refCount of the norms because we did\n        // that already for the shared norms\n        clone.referencedSegmentReader = this.referencedSegmentReader;\n        referencedSegmentReader.incRefReaderNotNorms();\n      } else {\n        // this reader wasn't reopened, so we increment this\n        // readers refCount\n        clone.referencedSegmentReader = this;\n        incRefReaderNotNorms();\n      }\n      \n      if (!success) {\n        // An exception occured during reopen, we have to decRef the norms\n        // that we incRef'ed already and close singleNormsStream and FieldsReader\n        clone.decRef();\n      }\n    }\n    \n    return clone;\n  }\n\n","bugFix":null,"bugIntro":["f55685835776d0aadf522e7988dc8ddf78db8245"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["de9999a287e59e079489cd445c376fa0dab501ba"],"5712975970a595c28f1988efd007e1b8a617a92f":["d7a119dd14350e2cfe6ba6b5e71d48ee6c356482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de9999a287e59e079489cd445c376fa0dab501ba":["5712975970a595c28f1988efd007e1b8a617a92f"],"d7a119dd14350e2cfe6ba6b5e71d48ee6c356482":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6db660b56f04fdb2853d25cdee8ee0d36559a521"]},"commit2Childs":{"6db660b56f04fdb2853d25cdee8ee0d36559a521":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5712975970a595c28f1988efd007e1b8a617a92f":["de9999a287e59e079489cd445c376fa0dab501ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3b9d7142a399ac70a71ce5b40ee66695eda5b7e8"],"de9999a287e59e079489cd445c376fa0dab501ba":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"d7a119dd14350e2cfe6ba6b5e71d48ee6c356482":["5712975970a595c28f1988efd007e1b8a617a92f"],"3b9d7142a399ac70a71ce5b40ee66695eda5b7e8":["d7a119dd14350e2cfe6ba6b5e71d48ee6c356482"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}