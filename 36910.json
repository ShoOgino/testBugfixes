{"path":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8IntEncoder#encode(IntsRef,BytesRef).mjava","commits":[{"id":"ad883775f8b169218a8da5ffeb7ae26459443936","date":1358342713,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8IntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    buf.offset = buf.length = 0;\n    int maxBytesNeeded = 5 * values.length; // at most 5 bytes per VInt\n    if (buf.bytes.length < maxBytesNeeded) {\n      buf.grow(maxBytesNeeded);\n    }\n    \n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = values.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8IntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    buf.offset = buf.length = 0;\n    int maxBytesNeeded = 5 * values.length; // at most 5 bytes per VInt\n    if (buf.bytes.length < maxBytesNeeded) {\n      buf.grow(maxBytesNeeded);\n    }\n    \n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = values.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/encoding/VInt8IntEncoder#encode(IntsRef,BytesRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/VInt8IntEncoder#encode(IntsRef,BytesRef).mjava","sourceNew":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    buf.offset = buf.length = 0;\n    int maxBytesNeeded = 5 * values.length; // at most 5 bytes per VInt\n    if (buf.bytes.length < maxBytesNeeded) {\n      buf.grow(maxBytesNeeded);\n    }\n    \n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = values.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void encode(IntsRef values, BytesRef buf) {\n    buf.offset = buf.length = 0;\n    int maxBytesNeeded = 5 * values.length; // at most 5 bytes per VInt\n    if (buf.bytes.length < maxBytesNeeded) {\n      buf.grow(maxBytesNeeded);\n    }\n    \n    int upto = values.offset + values.length;\n    for (int i = values.offset; i < upto; i++) {\n      // it is better if the encoding is inlined like so, and not e.g.\n      // in a utility method\n      int value = values.ints[i];\n      if ((value & ~0x7F) == 0) {\n        buf.bytes[buf.length] = (byte) value;\n        buf.length++;\n      } else if ((value & ~0x3FFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 1] = (byte) (value & 0x7F);\n        buf.length += 2;\n      } else if ((value & ~0x1FFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 2] = (byte) (value & 0x7F);\n        buf.length += 3;\n      } else if ((value & ~0xFFFFFFF) == 0) {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 3] = (byte) (value & 0x7F);\n        buf.length += 4;\n      } else {\n        buf.bytes[buf.length] = (byte) (0x80 | ((value & 0xF0000000) >> 28));\n        buf.bytes[buf.length + 1] = (byte) (0x80 | ((value & 0xFE00000) >> 21));\n        buf.bytes[buf.length + 2] = (byte) (0x80 | ((value & 0x1FC000) >> 14));\n        buf.bytes[buf.length + 3] = (byte) (0x80 | ((value & 0x3F80) >> 7));\n        buf.bytes[buf.length + 4] = (byte) (value & 0x7F);\n        buf.length += 5;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["ad883775f8b169218a8da5ffeb7ae26459443936"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ad883775f8b169218a8da5ffeb7ae26459443936"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"],"ad883775f8b169218a8da5ffeb7ae26459443936":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","ad883775f8b169218a8da5ffeb7ae26459443936"],"ad883775f8b169218a8da5ffeb7ae26459443936":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}