{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","commits":[{"id":"db6dfac30d1553e9356900c2b76b768139483a62","date":1230619368,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute(String).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute(String docName) {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().getDocumentByName(docName);\n    if (document == null)\n      return;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66fbc600d2a14957d20cd4b21074414a3cc4dde9","date":1231419136,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":["00e13feee5c0e49640da959c282367763b8bdbde"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ccee48063b079e427df62dab801f6d8eeeb115c","date":1232906741,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if(delQuery == null) delQuery=\"*:*\";\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        doDelta();\n\n      } else {\n        doFullDump();\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a34404b887b0a516a7a2f55f82ef14a6a85ff72a","date":1232959501,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if(delQuery == null) delQuery=\"*:*\";\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"40ad2411c3b1f9d7d8a35803b60a3987ec34e428","date":1233042562,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean)  {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0)  {\n          commit();\n        }\n      } else  {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Finished operation normally, commit now\n      commit();\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3f89819f2d2ba23f608c6d0ea155524f95a29aa4","date":1234350104,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean)  {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0)  {\n          commit();\n        }\n      } else  {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean)  {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0)  {\n          commit();\n        }\n      } else  {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":["5ae0b84776ced5de47caece796c75a4ec5185288"],"bugIntro":["00e13feee5c0e49640da959c282367763b8bdbde"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35d71c83578c6e08733e7a584ca744c7c66d60a6","date":1235022186,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          commit();\n        }\n      } else {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery , fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if(delQuery != null)  {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean)  {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0)  {\n          commit();\n        }\n      } else  {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00e13feee5c0e49640da959c282367763b8bdbde","date":1235044794,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          commit();\n        }\n      } else {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      if (DataImporter.ABORT_CMD.equals(requestParameters.command)) {\n        // Dont commit if aborted using command=abort\n        statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n        rollback();\n      } else if (requestParameters.commit) {\n        // Debug mode, commit if commit=true was specified\n        commit();\n        if (document.onImportEnd != null) {\n          invokeEventListener(document.onImportEnd);\n        }\n      }\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          commit();\n        }\n      } else {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":["5ae0b84776ced5de47caece796c75a4ec5185288","3f89819f2d2ba23f608c6d0ea155524f95a29aa4","66fbc600d2a14957d20cd4b21074414a3cc4dde9","4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d","date":1235123016,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          commit(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        commit(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          commit();\n        }\n      } else {\n        // Finished operation normally, commit now\n        commit();\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":["178aff34c3fa746242ad3ce5d169f680f3865b4b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"178aff34c3fa746242ad3ce5d169f680f3865b4b","date":1248188879,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          commit(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        commit(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":["5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b5db3b8a7775d857a35cc9b2add1be359fa7648","date":1253186595,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee2d03087a1d5477a3ee9ce02e08967f4a979766","date":1254306923,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP\n              && dataImporter.getLastIndexTime() != null) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DocBuilder#execute().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  public void execute() {\n    dataImporter.store(DataImporter.STATUS_MSGS, statusMessages);\n    document = dataImporter.getConfig().document;\n    final AtomicLong startTime = new AtomicLong(System.currentTimeMillis());\n    statusMessages.put(TIME_ELAPSED, new Object() {\n      public String toString() {\n        return getTimeElapsedSince(startTime.get());\n      }\n    });\n\n    statusMessages.put(DataImporter.MSG.TOTAL_QUERIES_EXECUTED,\n            importStatistics.queryCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_ROWS_EXECUTED,\n            importStatistics.rowsCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED,\n            importStatistics.docCount);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOCS_SKIPPED,\n            importStatistics.skipDocCount);\n\n    List<String> entities = requestParameters.entities;\n\n    // Trigger onImportStart\n    if (document.onImportStart != null) {\n      invokeEventListener(document.onImportStart);\n    }\n    AtomicBoolean fullCleanDone = new AtomicBoolean(false);\n    //we must not do a delete of *:* multiple times if there are multiple root entities to be run\n    Properties lastIndexTimeProps = new Properties();\n    lastIndexTimeProps.setProperty(LAST_INDEX_KEY,\n            DataImporter.DATE_TIME_FORMAT.get().format(dataImporter.getIndexStartTime()));\n    for (DataConfig.Entity e : document.entities) {\n      if (entities != null && !entities.contains(e.name))\n        continue;\n      lastIndexTimeProps.setProperty(e.name + \".\" + LAST_INDEX_KEY,\n              DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      root = e;\n      String delQuery = e.allAttributes.get(\"preImportDeleteQuery\");\n      if (dataImporter.getStatus() == DataImporter.Status.RUNNING_DELTA_DUMP) {\n        cleanByQuery(delQuery, fullCleanDone);\n        doDelta();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      } else {\n        cleanByQuery(delQuery, fullCleanDone);\n        doFullDump();\n        delQuery = e.allAttributes.get(\"postImportDeleteQuery\");\n        if (delQuery != null) {\n          fullCleanDone.set(false);\n          cleanByQuery(delQuery, fullCleanDone);\n        }\n      }\n      statusMessages.remove(DataImporter.MSG.TOTAL_DOC_PROCESSED);\n    }\n\n    if (stop.get()) {\n      // Dont commit if aborted using command=abort\n      statusMessages.put(\"Aborted\", DataImporter.DATE_TIME_FORMAT.get().format(new Date()));\n      rollback();\n    } else {\n      // Do not commit unnecessarily if this is a delta-import and no documents were created or deleted\n      if (!requestParameters.clean) {\n        if (importStatistics.docCount.get() > 0 || importStatistics.deletedDocCount.get() > 0) {\n          finish(lastIndexTimeProps);\n        }\n      } else {\n        // Finished operation normally, commit now\n        finish(lastIndexTimeProps);\n      }\n      if (document.onImportEnd != null) {\n        invokeEventListener(document.onImportEnd);\n      }\n    }\n\n    statusMessages.remove(TIME_ELAPSED);\n    statusMessages.put(DataImporter.MSG.TOTAL_DOC_PROCESSED, \"\"+ importStatistics.docCount.get());\n    if(importStatistics.failedDocCount.get() > 0)\n      statusMessages.put(DataImporter.MSG.TOTAL_FAILED_DOCS, \"\"+ importStatistics.failedDocCount.get());\n\n    statusMessages.put(\"Time taken \", getTimeElapsedSince(startTime.get()));\n    LOG.info(\"Time taken = \" + getTimeElapsedSince(startTime.get()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d":["00e13feee5c0e49640da959c282367763b8bdbde"],"66fbc600d2a14957d20cd4b21074414a3cc4dde9":["db6dfac30d1553e9356900c2b76b768139483a62"],"4ccee48063b079e427df62dab801f6d8eeeb115c":["66fbc600d2a14957d20cd4b21074414a3cc4dde9"],"00e13feee5c0e49640da959c282367763b8bdbde":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"40ad2411c3b1f9d7d8a35803b60a3987ec34e428":["a34404b887b0a516a7a2f55f82ef14a6a85ff72a"],"7b5db3b8a7775d857a35cc9b2add1be359fa7648":["178aff34c3fa746242ad3ce5d169f680f3865b4b"],"a34404b887b0a516a7a2f55f82ef14a6a85ff72a":["4ccee48063b079e427df62dab801f6d8eeeb115c"],"ee2d03087a1d5477a3ee9ce02e08967f4a979766":["7b5db3b8a7775d857a35cc9b2add1be359fa7648"],"178aff34c3fa746242ad3ce5d169f680f3865b4b":["5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3f89819f2d2ba23f608c6d0ea155524f95a29aa4":["40ad2411c3b1f9d7d8a35803b60a3987ec34e428"],"ad94625fb8d088209f46650c8097196fec67f00c":["ee2d03087a1d5477a3ee9ce02e08967f4a979766"],"db6dfac30d1553e9356900c2b76b768139483a62":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d":["178aff34c3fa746242ad3ce5d169f680f3865b4b"],"66fbc600d2a14957d20cd4b21074414a3cc4dde9":["4ccee48063b079e427df62dab801f6d8eeeb115c"],"4ccee48063b079e427df62dab801f6d8eeeb115c":["a34404b887b0a516a7a2f55f82ef14a6a85ff72a"],"00e13feee5c0e49640da959c282367763b8bdbde":["5850c9b195a2c8b5a2ef6d4775d905dfcd1eca1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["db6dfac30d1553e9356900c2b76b768139483a62"],"40ad2411c3b1f9d7d8a35803b60a3987ec34e428":["3f89819f2d2ba23f608c6d0ea155524f95a29aa4"],"7b5db3b8a7775d857a35cc9b2add1be359fa7648":["ee2d03087a1d5477a3ee9ce02e08967f4a979766"],"a34404b887b0a516a7a2f55f82ef14a6a85ff72a":["40ad2411c3b1f9d7d8a35803b60a3987ec34e428"],"ee2d03087a1d5477a3ee9ce02e08967f4a979766":["ad94625fb8d088209f46650c8097196fec67f00c"],"35d71c83578c6e08733e7a584ca744c7c66d60a6":["00e13feee5c0e49640da959c282367763b8bdbde"],"178aff34c3fa746242ad3ce5d169f680f3865b4b":["7b5db3b8a7775d857a35cc9b2add1be359fa7648"],"3f89819f2d2ba23f608c6d0ea155524f95a29aa4":["35d71c83578c6e08733e7a584ca744c7c66d60a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"db6dfac30d1553e9356900c2b76b768139483a62":["66fbc600d2a14957d20cd4b21074414a3cc4dde9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}