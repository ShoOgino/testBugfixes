{"path":"lucene/core/src/test/org/apache/lucene/search/TestNormsFieldExistsQuery#testApproximation().mjava","commits":[{"id":"15f32396dcc39bfd47f2ed60d428afd03580c399","date":1507126854,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNormsFieldExistsQuery#testApproximation().mjava","pathOld":"/dev/null","sourceNew":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final boolean hasValue = random().nextBoolean();\n        if (hasValue) {\n          doc.add(new TextField(\"text1\", \"value\", Store.NO));\n          doc.add(new StringField(\"has_value\", \"yes\", Store.NO));\n        }\n        doc.add(new StringField(\"f\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(new Term(\"f\", \"no\")));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      BooleanQuery.Builder ref = new BooleanQuery.Builder();\n      ref.add(new TermQuery(new Term(\"f\", \"yes\")), Occur.MUST);\n      ref.add(new TermQuery(new Term(\"has_value\", \"yes\")), Occur.FILTER);\n\n      BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n      bq1.add(new TermQuery(new Term(\"f\", \"yes\")), Occur.MUST);\n      bq1.add(new NormsFieldExistsQuery(\"text1\"), Occur.FILTER);\n      assertSameMatches(searcher, ref.build(), bq1.build(), true);\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7859b8e6a469429413db808a609e8468be14c03","date":1507222263,"type":0,"author":"tballison","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNormsFieldExistsQuery#testApproximation().mjava","pathOld":"/dev/null","sourceNew":"  public void testApproximation() throws IOException {\n    final int iters = atLeast(10);\n    for (int iter = 0; iter < iters; ++iter) {\n      Directory dir = newDirectory();\n      RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n      final int numDocs = atLeast(100);\n      for (int i = 0; i < numDocs; ++i) {\n        Document doc = new Document();\n        final boolean hasValue = random().nextBoolean();\n        if (hasValue) {\n          doc.add(new TextField(\"text1\", \"value\", Store.NO));\n          doc.add(new StringField(\"has_value\", \"yes\", Store.NO));\n        }\n        doc.add(new StringField(\"f\", random().nextBoolean() ? \"yes\" : \"no\", Store.NO));\n        iw.addDocument(doc);\n      }\n      if (random().nextBoolean()) {\n        iw.deleteDocuments(new TermQuery(new Term(\"f\", \"no\")));\n      }\n      iw.commit();\n      final IndexReader reader = iw.getReader();\n      final IndexSearcher searcher = newSearcher(reader);\n      iw.close();\n\n      BooleanQuery.Builder ref = new BooleanQuery.Builder();\n      ref.add(new TermQuery(new Term(\"f\", \"yes\")), Occur.MUST);\n      ref.add(new TermQuery(new Term(\"has_value\", \"yes\")), Occur.FILTER);\n\n      BooleanQuery.Builder bq1 = new BooleanQuery.Builder();\n      bq1.add(new TermQuery(new Term(\"f\", \"yes\")), Occur.MUST);\n      bq1.add(new NormsFieldExistsQuery(\"text1\"), Occur.FILTER);\n      assertSameMatches(searcher, ref.build(), bq1.build(), true);\n\n      reader.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7859b8e6a469429413db808a609e8468be14c03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","15f32396dcc39bfd47f2ed60d428afd03580c399"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15f32396dcc39bfd47f2ed60d428afd03580c399":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15f32396dcc39bfd47f2ed60d428afd03580c399"]},"commit2Childs":{"d7859b8e6a469429413db808a609e8468be14c03":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7859b8e6a469429413db808a609e8468be14c03","15f32396dcc39bfd47f2ed60d428afd03580c399"],"15f32396dcc39bfd47f2ed60d428afd03580c399":["d7859b8e6a469429413db808a609e8468be14c03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d7859b8e6a469429413db808a609e8468be14c03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}