{"path":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,int,int).mjava","commits":[{"id":"2c705a0d590cf911e7c942df49563ca2ea176e22","date":1526916174,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    // TODO: Ideally this is where we should check fgQ/bgQ for 'null' and apply defaults...\n    //\n    // we want to walk up the fcontext and inherit the queries from any ancestor SKGAgg\n    // with the same \"key\" that we have in our own context -- and as a last resort use\n    // \"$q\" for the foreground and \"*:*\" for the bgQ (if no ancestors)\n    // (Hmmm... or maybe we should use the \"Domain\" of our FacetRequest as the default bg?)\n    //\n    // How do we find our what key we have in the current context?\n    // loop over all the stats in the current context until we find one that's '==' to this???\n    \n    List<Query> fgFilters = new ArrayList<Query>(3);\n    fgFilters.add(fgQ);\n    for (FacetContext ctx = fcontext; ctx != null; ctx = ctx.parent) {\n      if (null != ctx.filter) {\n        fgFilters.add(ctx.filter);\n      } else {\n        // sanity check...\n        // the only way the filter on the current context should be null is...\n        assert (// 1) it's the actual top most context,\n                //    (ie: the func is directly used w/o being nested under a facet)\n                (null == ctx.parent && fcontext == ctx) ||\n                // 2) it's a child of the top most context\n                //    (ie: the context of a top level facet)\n                (null == ctx.parent.parent && null == ctx.parent.filter));\n        // either way, no reason to keep looping up the (0 or 1) remaining ancestors\n        // (which is why #1 can assert '&& fcontext == ctx')\n        break;\n      }\n    }\n    \n    return new SKGSlotAcc(fcontext, numSlots, fgFilters, bgQ);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f77f7d9a57c791efb2e6f8720dc5b3bf9a620f19","date":1527010911,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    // TODO: Ideally this is where we should check fgQ/bgQ for 'null' and apply defaults...\n    //\n    // we want to walk up the fcontext and inherit the queries from any ancestor SKGAgg\n    // with the same \"key\" that we have in our own context -- and as a last resort use\n    // \"$q\" for the foreground and \"*:*\" for the bgQ (if no ancestors)\n    // (Hmmm... or maybe we should use the \"Domain\" of our FacetRequest as the default bg?)\n    //\n    // How do we find our what key we have in the current context?\n    // loop over all the stats in the current context until we find one that's '==' to this???\n    \n    List<Query> fgFilters = new ArrayList<Query>(3);\n    fgFilters.add(fgQ);\n    for (FacetContext ctx = fcontext; ctx != null; ctx = ctx.parent) {\n      if (null != ctx.filter) {\n        fgFilters.add(ctx.filter);\n      } else {\n        // sanity check...\n        // the only way the filter on the current context should be null is...\n        assert (// 1) it's the actual top most context,\n                //    (ie: the func is directly used w/o being nested under a facet)\n                (null == ctx.parent && fcontext == ctx) ||\n                // 2) it's a child of the top most context\n                //    (ie: the context of a top level facet)\n                (null == ctx.parent.parent && null == ctx.parent.filter));\n        // either way, no reason to keep looping up the (0 or 1) remaining ancestors\n        // (which is why #1 can assert '&& fcontext == ctx')\n        break;\n      }\n    }\n    \n    DocSet fgSet = fcontext.searcher.getDocSet(fgFilters);\n    DocSet bgSet = fcontext.searcher.getDocSet(bgQ);\n    return new SKGSlotAcc(fcontext, numSlots, fgSet, bgSet);\n  }\n\n","sourceOld":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    // TODO: Ideally this is where we should check fgQ/bgQ for 'null' and apply defaults...\n    //\n    // we want to walk up the fcontext and inherit the queries from any ancestor SKGAgg\n    // with the same \"key\" that we have in our own context -- and as a last resort use\n    // \"$q\" for the foreground and \"*:*\" for the bgQ (if no ancestors)\n    // (Hmmm... or maybe we should use the \"Domain\" of our FacetRequest as the default bg?)\n    //\n    // How do we find our what key we have in the current context?\n    // loop over all the stats in the current context until we find one that's '==' to this???\n    \n    List<Query> fgFilters = new ArrayList<Query>(3);\n    fgFilters.add(fgQ);\n    for (FacetContext ctx = fcontext; ctx != null; ctx = ctx.parent) {\n      if (null != ctx.filter) {\n        fgFilters.add(ctx.filter);\n      } else {\n        // sanity check...\n        // the only way the filter on the current context should be null is...\n        assert (// 1) it's the actual top most context,\n                //    (ie: the func is directly used w/o being nested under a facet)\n                (null == ctx.parent && fcontext == ctx) ||\n                // 2) it's a child of the top most context\n                //    (ie: the context of a top level facet)\n                (null == ctx.parent.parent && null == ctx.parent.filter));\n        // either way, no reason to keep looping up the (0 or 1) remaining ancestors\n        // (which is why #1 can assert '&& fcontext == ctx')\n        break;\n      }\n    }\n    \n    return new SKGSlotAcc(fcontext, numSlots, fgFilters, bgQ);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"42009f1fefcc8f4d9e07b158e9415cbd6ca7247c","date":1532538390,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    // TODO: Ideally this is where we should check fgQ/bgQ for 'null' and apply defaults...\n    //\n    // we want to walk up the fcontext and inherit the queries from any ancestor SKGAgg\n    // with the same \"key\" that we have in our own context -- and as a last resort use\n    // \"$q\" for the foreground and \"*:*\" for the bgQ (if no ancestors)\n    // (Hmmm... or maybe we should use the \"Domain\" of our FacetRequest as the default bg?)\n    //\n    // How do we find our what key we have in the current context?\n    // loop over all the stats in the current context until we find one that's '==' to this???\n    \n    List<Query> fgFilters = new ArrayList<Query>(3);\n    fgFilters.add(fgQ);\n    for (FacetContext ctx = fcontext; ctx != null; ctx = ctx.parent) {\n      if (null != ctx.filter) {\n        fgFilters.add(ctx.filter);\n      } else {\n        // sanity check...\n        // the only way the filter on the current context should be null is...\n        assert (// 1) it's the actual top most context,\n                //    (ie: the func is directly used w/o being nested under a facet)\n                (null == ctx.parent && fcontext == ctx) ||\n                // 2) it's a child of the top most context\n                //    (ie: the context of a top level facet)\n                (null == ctx.parent.parent && null == ctx.parent.filter));\n        // either way, no reason to keep looping up the (0 or 1) remaining ancestors\n        // (which is why #1 can assert '&& fcontext == ctx')\n        break;\n      }\n    }\n    \n    DocSet fgSet = fcontext.searcher.getDocSet(fgFilters);\n    DocSet bgSet = fcontext.searcher.getDocSet(bgQ);\n    return new SKGSlotAcc(this, fcontext, numSlots, fgSet, bgSet);\n  }\n\n","sourceOld":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    // TODO: Ideally this is where we should check fgQ/bgQ for 'null' and apply defaults...\n    //\n    // we want to walk up the fcontext and inherit the queries from any ancestor SKGAgg\n    // with the same \"key\" that we have in our own context -- and as a last resort use\n    // \"$q\" for the foreground and \"*:*\" for the bgQ (if no ancestors)\n    // (Hmmm... or maybe we should use the \"Domain\" of our FacetRequest as the default bg?)\n    //\n    // How do we find our what key we have in the current context?\n    // loop over all the stats in the current context until we find one that's '==' to this???\n    \n    List<Query> fgFilters = new ArrayList<Query>(3);\n    fgFilters.add(fgQ);\n    for (FacetContext ctx = fcontext; ctx != null; ctx = ctx.parent) {\n      if (null != ctx.filter) {\n        fgFilters.add(ctx.filter);\n      } else {\n        // sanity check...\n        // the only way the filter on the current context should be null is...\n        assert (// 1) it's the actual top most context,\n                //    (ie: the func is directly used w/o being nested under a facet)\n                (null == ctx.parent && fcontext == ctx) ||\n                // 2) it's a child of the top most context\n                //    (ie: the context of a top level facet)\n                (null == ctx.parent.parent && null == ctx.parent.filter));\n        // either way, no reason to keep looping up the (0 or 1) remaining ancestors\n        // (which is why #1 can assert '&& fcontext == ctx')\n        break;\n      }\n    }\n    \n    DocSet fgSet = fcontext.searcher.getDocSet(fgFilters);\n    DocSet bgSet = fcontext.searcher.getDocSet(bgQ);\n    return new SKGSlotAcc(fcontext, numSlots, fgSet, bgSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/RelatednessAgg#createSlotAcc(FacetContext,int,int).mjava","sourceNew":"  public SlotAcc createSlotAcc(FacetContext fcontext, long numDocs, int numSlots) throws IOException {\n    // TODO: Ideally this is where we should check fgQ/bgQ for 'null' and apply defaults...\n    //\n    // we want to walk up the fcontext and inherit the queries from any ancestor SKGAgg\n    // with the same \"key\" that we have in our own context -- and as a last resort use\n    // \"$q\" for the foreground and \"*:*\" for the bgQ (if no ancestors)\n    // (Hmmm... or maybe we should use the \"Domain\" of our FacetRequest as the default bg?)\n    //\n    // How do we find our what key we have in the current context?\n    // loop over all the stats in the current context until we find one that's '==' to this???\n    \n    List<Query> fgFilters = new ArrayList<Query>(3);\n    fgFilters.add(fgQ);\n    for (FacetContext ctx = fcontext; ctx != null; ctx = ctx.parent) {\n      if (null != ctx.filter) {\n        fgFilters.add(ctx.filter);\n      } else {\n        // sanity check...\n        // the only way the filter on the current context should be null is...\n        assert (// 1) it's the actual top most context,\n                //    (ie: the func is directly used w/o being nested under a facet)\n                (null == ctx.parent && fcontext == ctx) ||\n                // 2) it's a child of the top most context\n                //    (ie: the context of a top level facet)\n                (null == ctx.parent.parent && null == ctx.parent.filter));\n        // either way, no reason to keep looping up the (0 or 1) remaining ancestors\n        // (which is why #1 can assert '&& fcontext == ctx')\n        break;\n      }\n    }\n    \n    DocSet fgSet = fcontext.searcher.getDocSet(fgFilters);\n    DocSet bgSet = fcontext.searcher.getDocSet(bgQ);\n    return new SKGSlotAcc(this, fcontext, numSlots, fgSet, bgSet);\n  }\n\n","sourceOld":"  public SlotAcc createSlotAcc(FacetContext fcontext, int numDocs, int numSlots) throws IOException {\n    // TODO: Ideally this is where we should check fgQ/bgQ for 'null' and apply defaults...\n    //\n    // we want to walk up the fcontext and inherit the queries from any ancestor SKGAgg\n    // with the same \"key\" that we have in our own context -- and as a last resort use\n    // \"$q\" for the foreground and \"*:*\" for the bgQ (if no ancestors)\n    // (Hmmm... or maybe we should use the \"Domain\" of our FacetRequest as the default bg?)\n    //\n    // How do we find our what key we have in the current context?\n    // loop over all the stats in the current context until we find one that's '==' to this???\n    \n    List<Query> fgFilters = new ArrayList<Query>(3);\n    fgFilters.add(fgQ);\n    for (FacetContext ctx = fcontext; ctx != null; ctx = ctx.parent) {\n      if (null != ctx.filter) {\n        fgFilters.add(ctx.filter);\n      } else {\n        // sanity check...\n        // the only way the filter on the current context should be null is...\n        assert (// 1) it's the actual top most context,\n                //    (ie: the func is directly used w/o being nested under a facet)\n                (null == ctx.parent && fcontext == ctx) ||\n                // 2) it's a child of the top most context\n                //    (ie: the context of a top level facet)\n                (null == ctx.parent.parent && null == ctx.parent.filter));\n        // either way, no reason to keep looping up the (0 or 1) remaining ancestors\n        // (which is why #1 can assert '&& fcontext == ctx')\n        break;\n      }\n    }\n    \n    DocSet fgSet = fcontext.searcher.getDocSet(fgFilters);\n    DocSet bgSet = fcontext.searcher.getDocSet(bgQ);\n    return new SKGSlotAcc(this, fcontext, numSlots, fgSet, bgSet);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["42009f1fefcc8f4d9e07b158e9415cbd6ca7247c"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"42009f1fefcc8f4d9e07b158e9415cbd6ca7247c":["f77f7d9a57c791efb2e6f8720dc5b3bf9a620f19"],"f77f7d9a57c791efb2e6f8720dc5b3bf9a620f19":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c705a0d590cf911e7c942df49563ca2ea176e22":["f77f7d9a57c791efb2e6f8720dc5b3bf9a620f19"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c705a0d590cf911e7c942df49563ca2ea176e22"],"42009f1fefcc8f4d9e07b158e9415cbd6ca7247c":["1c841e27891873cab110ebeb89f124a8ec470176"],"f77f7d9a57c791efb2e6f8720dc5b3bf9a620f19":["42009f1fefcc8f4d9e07b158e9415cbd6ca7247c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}