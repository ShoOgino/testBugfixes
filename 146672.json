{"path":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","commits":[{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(context.reader, true) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a4965b25e439626b575c2281b39ad875f89d891","date":1321132400,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n        \n        query.incTotalNumberOfTerms(termCount);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator() throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        int termCount = 0;\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n            termCount++;\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d55536a3153c541924af58559781c36228d25420","date":1322184113,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      final int maxDoc = context.reader.maxDoc();\n      return new FieldCacheRangeFilter.FieldCacheDocIdSet(maxDoc, acceptDocs) {\n        @Override\n        boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6fff8f4b218bd0626afcdce82027bafeb84a50a4","date":1327229950,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader, query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader.maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/FieldCacheRewriteMethod.MultiTermQueryFieldCacheWrapperFilter#getDocIdSet(AtomicReaderContext,Bits).mjava","sourceNew":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","sourceOld":"    /**\n     * Returns a DocIdSet with documents that should be permitted in search\n     * results.\n     */\n    @Override\n    public DocIdSet getDocIdSet(AtomicReaderContext context, final Bits acceptDocs) throws IOException {\n      final FieldCache.DocTermsIndex fcsi = FieldCache.DEFAULT.getTermsIndex(context.reader(), query.field);\n      // Cannot use FixedBitSet because we require long index (ord):\n      final OpenBitSet termSet = new OpenBitSet(fcsi.numOrd());\n      TermsEnum termsEnum = query.getTermsEnum(new Terms() {\n        \n        @Override\n        public Comparator<BytesRef> getComparator() throws IOException {\n          return BytesRef.getUTF8SortedAsUnicodeComparator();\n        }\n        \n        @Override\n        public TermsEnum iterator(TermsEnum reuse) throws IOException {\n          return fcsi.getTermsEnum();\n        }\n\n        @Override\n        public long getSumTotalTermFreq() {\n          return -1;\n        }\n\n        @Override\n        public long getSumDocFreq() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public int getDocCount() throws IOException {\n          return -1;\n        }\n\n        @Override\n        public long getUniqueTermCount() throws IOException {\n          return -1;\n        }\n      });\n      \n      assert termsEnum != null;\n      if (termsEnum.next() != null) {\n        // fill into a OpenBitSet\n        do {\n          long ord = termsEnum.ord();\n          if (ord > 0) {\n            termSet.set(ord);\n          }\n        } while (termsEnum.next() != null);\n      } else {\n        return DocIdSet.EMPTY_DOCIDSET;\n      }\n      \n      return new FieldCacheDocIdSet(context.reader().maxDoc(), acceptDocs) {\n        @Override\n        protected final boolean matchDoc(int doc) throws ArrayIndexOutOfBoundsException {\n          return termSet.get(fcsi.getOrd(doc));\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["d55536a3153c541924af58559781c36228d25420"],"2a4965b25e439626b575c2281b39ad875f89d891":["6620df8541b174097b1133a4fc370adb2e570524"],"3cc749c053615f5871f3b95715fe292f34e70a53":["2a4965b25e439626b575c2281b39ad875f89d891"],"d55536a3153c541924af58559781c36228d25420":["3cc749c053615f5871f3b95715fe292f34e70a53"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["d55536a3153c541924af58559781c36228d25420","6fff8f4b218bd0626afcdce82027bafeb84a50a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["2a4965b25e439626b575c2281b39ad875f89d891"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6620df8541b174097b1133a4fc370adb2e570524"],"6fff8f4b218bd0626afcdce82027bafeb84a50a4":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"2a4965b25e439626b575c2281b39ad875f89d891":["3cc749c053615f5871f3b95715fe292f34e70a53"],"3cc749c053615f5871f3b95715fe292f34e70a53":["d55536a3153c541924af58559781c36228d25420"],"d55536a3153c541924af58559781c36228d25420":["6fff8f4b218bd0626afcdce82027bafeb84a50a4","5cab9a86bd67202d20b6adc463008c8e982b070a"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}