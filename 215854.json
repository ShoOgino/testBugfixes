{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b55cd711a129fb7fc4c3c4672d652149c9a4faa","date":1528813320,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","sourceNew":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    if (liveNodesSet.isEmpty()) {\n      // remove handlers\n      if (metricsHistoryHandler != null) {\n        IOUtils.closeQuietly(metricsHistoryHandler);\n        metricsHistoryHandler = null;\n      }\n      if (metricsHandler != null) {\n        metricsHandler = null;\n      }\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","sourceOld":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","sourceNew":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    if (liveNodesSet.isEmpty()) {\n      // remove handlers\n      if (metricsHistoryHandler != null) {\n        IOUtils.closeQuietly(metricsHistoryHandler);\n        metricsHistoryHandler = null;\n      }\n      if (metricsHandler != null) {\n        metricsHandler = null;\n      }\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","sourceOld":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","sourceNew":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    if (liveNodesSet.isEmpty()) {\n      // remove handlers\n      if (metricsHistoryHandler != null) {\n        IOUtils.closeQuietly(metricsHistoryHandler);\n        metricsHistoryHandler = null;\n      }\n      if (metricsHandler != null) {\n        metricsHandler = null;\n      }\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","sourceOld":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","sourceNew":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    if (liveNodesSet.isEmpty()) {\n      // remove handlers\n      if (metricsHistoryHandler != null) {\n        IOUtils.closeQuietly(metricsHistoryHandler);\n        metricsHistoryHandler = null;\n      }\n      if (metricsHandler != null) {\n        metricsHandler = null;\n      }\n    }\n    log.trace(\"-- removed node \" + nodeId);\n  }\n\n","sourceOld":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    if (liveNodesSet.isEmpty()) {\n      // remove handlers\n      if (metricsHistoryHandler != null) {\n        IOUtils.closeQuietly(metricsHistoryHandler);\n        metricsHistoryHandler = null;\n      }\n      if (metricsHandler != null) {\n        metricsHandler = null;\n      }\n    }\n    LOG.trace(\"-- removed node \" + nodeId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimCloudManager#simRemoveNode(String,boolean).mjava","sourceNew":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    if (liveNodesSet.isEmpty()) {\n      // remove handlers\n      if (metricsHistoryHandler != null) {\n        IOUtils.closeQuietly(metricsHistoryHandler);\n        metricsHistoryHandler = null;\n      }\n      if (metricsHandler != null) {\n        metricsHandler = null;\n      }\n    }\n    log.trace(\"-- removed node \" + nodeId);\n  }\n\n","sourceOld":"  /**\n   * Remove a node from the cluster. This simulates a node lost scenario.\n   * Node id is removed from the /live_nodes list.\n   * @param nodeId node id\n   * @param withValues when true, remove also simulated node values. If false\n   *                   then node values are retained to later simulate\n   *                   a node that comes back up\n   */\n  public void simRemoveNode(String nodeId, boolean withValues) throws Exception {\n    clusterStateProvider.simRemoveNode(nodeId);\n    if (withValues) {\n      nodeStateProvider.simRemoveNodeValues(nodeId);\n    }\n    if (liveNodesSet.isEmpty()) {\n      // remove handlers\n      if (metricsHistoryHandler != null) {\n        IOUtils.closeQuietly(metricsHistoryHandler);\n        metricsHistoryHandler = null;\n      }\n      if (metricsHandler != null) {\n        metricsHandler = null;\n      }\n    }\n    log.trace(\"-- removed node \" + nodeId);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6b55cd711a129fb7fc4c3c4672d652149c9a4faa"]},"commit2Childs":{"6b55cd711a129fb7fc4c3c4672d652149c9a4faa":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["6b55cd711a129fb7fc4c3c4672d652149c9a4faa","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}