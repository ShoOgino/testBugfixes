{"path":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#doTestWithSamping(boolean).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#doTestWithSamping(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  private void doTestWithSamping(boolean complement) throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      // try several times in case of failure, because the test has a chance to fail \n      // if the top K facets are not sufficiently common with the sample set\n      for (int n=RETRIES; n>0; n--) {\n        FacetsCollector samplingFC = samplingCollector(complement, sampler,  samplingSearchParams);\n        \n        searcher.search(q, samplingFC);\n        List<FacetResult> sampledResults = samplingFC.getFacetResults();\n        \n        try {\n          assertSameResults(expectedResults, sampledResults);\n          break; // succeeded\n        } catch (Exception e) {\n          if (n<=1) { // otherwise try again\n            throw e; \n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["99b17503f4e360f8140fe80a593268486cd718b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#doTestWithSamping(boolean).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#doTestWithSamping(boolean).mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  private void doTestWithSamping(boolean complement) throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      // try several times in case of failure, because the test has a chance to fail \n      // if the top K facets are not sufficiently common with the sample set\n      for (int n=RETRIES; n>0; n--) {\n        FacetsCollector samplingFC = samplingCollector(complement, sampler,  samplingSearchParams);\n        \n        searcher.search(q, samplingFC);\n        List<FacetResult> sampledResults = samplingFC.getFacetResults();\n        \n        try {\n          assertSameResults(expectedResults, sampledResults);\n          break; // succeeded\n        } catch (Exception e) {\n          if (n<=1) { // otherwise try again\n            throw e; \n          }\n        }\n      }\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  private void doTestWithSamping(boolean complement) throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      // try several times in case of failure, because the test has a chance to fail \n      // if the top K facets are not sufficiently common with the sample set\n      for (int n=RETRIES; n>0; n--) {\n        FacetsCollector samplingFC = samplingCollector(complement, sampler,  samplingSearchParams);\n        \n        searcher.search(q, samplingFC);\n        List<FacetResult> sampledResults = samplingFC.getFacetResults();\n        \n        try {\n          assertSameResults(expectedResults, sampledResults);\n          break; // succeeded\n        } catch (Exception e) {\n          if (n<=1) { // otherwise try again\n            throw e; \n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["99b17503f4e360f8140fe80a593268486cd718b4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"95535508327351a4c38a0dc7711075dfabe5941f","date":1309882395,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#testCountUsingSamping().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/sampling/BaseSampleTestTopK#doTestWithSamping(boolean).mjava","sourceNew":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  public void testCountUsingSamping() throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, false);\n      assertSampling(expectedResults, q, sampler, samplingSearchParams, true);\n\n      closeAll();\n    }\n  }\n\n","sourceOld":"  /**\n   * Try out faceted search with sampling enabled and complements either disabled or enforced\n   * Lots of randomly generated data is being indexed, and later on a \"90% docs\" faceted search\n   * is performed. The results are compared to non-sampled ones.\n   */\n  private void doTestWithSamping(boolean complement) throws Exception, IOException {\n    for (int partitionSize : partitionSizes) {\n      initIndex(partitionSize);\n      \n      // Get all of the documents and run the query, then do different\n      // facet counts and compare to control\n      Query q = new TermQuery(new Term(CONTENT_FIELD, BETA)); // 90% of the docs\n      ScoredDocIdCollector docCollector = ScoredDocIdCollector.create(searcher.maxDoc(), false);\n      \n      FacetSearchParams expectedSearchParams = searchParamsWithRequests(K, partitionSize); \n      FacetsCollector fc = new FacetsCollector(expectedSearchParams, indexReader, taxoReader);\n      \n      searcher.search(q, MultiCollector.wrap(docCollector, fc));\n      \n      List<FacetResult> expectedResults = fc.getFacetResults();\n      \n      // complement with sampling!\n      final Sampler sampler = createSampler(docCollector.getScoredDocIDs());\n      \n      FacetSearchParams samplingSearchParams = searchParamsWithRequests(K, partitionSize); \n\n      // try several times in case of failure, because the test has a chance to fail \n      // if the top K facets are not sufficiently common with the sample set\n      for (int n=RETRIES; n>0; n--) {\n        FacetsCollector samplingFC = samplingCollector(complement, sampler,  samplingSearchParams);\n        \n        searcher.search(q, samplingFC);\n        List<FacetResult> sampledResults = samplingFC.getFacetResults();\n        \n        try {\n          assertSameResults(expectedResults, sampledResults);\n          break; // succeeded\n        } catch (Exception e) {\n          if (n<=1) { // otherwise try again\n            throw e; \n          }\n        }\n      }\n      closeAll();\n    }\n  }\n\n","bugFix":null,"bugIntro":["99b17503f4e360f8140fe80a593268486cd718b4","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"95535508327351a4c38a0dc7711075dfabe5941f":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95535508327351a4c38a0dc7711075dfabe5941f"]},"commit2Childs":{"95535508327351a4c38a0dc7711075dfabe5941f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["95535508327351a4c38a0dc7711075dfabe5941f"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}