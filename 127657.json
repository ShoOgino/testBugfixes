{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#merge(IndexOutput,List[MergeState.DocMap],List[SimpleTextBKDReader]).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#merge(IndexOutput,List[MergeState.DocMap],List[SimpleTextBKDReader]).mjava","pathOld":"/dev/null","sourceNew":"  /** More efficient bulk-add for incoming {@link SimpleTextBKDReader}s.  This does a merge sort of the already\n   *  sorted values and currently only works when numDims==1.  This returns -1 if all documents containing\n   *  dimensional values were deleted. */\n  public long merge(IndexOutput out, List<MergeState.DocMap> docMaps, List<SimpleTextBKDReader> readers) throws IOException {\n    assert docMaps == null || readers.size() == docMaps.size();\n\n    BKDMergeQueue queue = new BKDMergeQueue(bytesPerDim, readers.size());\n\n    for(int i=0;i<readers.size();i++) {\n      SimpleTextBKDReader bkd = readers.get(i);\n      MergeState.DocMap docMap;\n      if (docMaps == null) {\n        docMap = null;\n      } else {\n        docMap = docMaps.get(i);\n      }\n      MergeReader reader = new MergeReader(bkd, docMap);\n      if (reader.next()) {\n        queue.add(reader);\n      }\n    }\n\n    OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    while (queue.size() != 0) {\n      MergeReader reader = queue.top();\n      // System.out.println(\"iter reader=\" + reader);\n\n      // NOTE: doesn't work with subclasses (e.g. SimpleText!)\n      oneDimWriter.add(reader.state.scratchPackedValue, reader.docID);\n\n      if (reader.next()) {\n        queue.updateTop();\n      } else {\n        // This segment was exhausted\n        queue.pop();\n      }\n    }\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#merge(IndexOutput,List[MergeState.DocMap],List[SimpleTextBKDReader]).mjava","pathOld":"/dev/null","sourceNew":"  /** More efficient bulk-add for incoming {@link SimpleTextBKDReader}s.  This does a merge sort of the already\n   *  sorted values and currently only works when numDims==1.  This returns -1 if all documents containing\n   *  dimensional values were deleted. */\n  public long merge(IndexOutput out, List<MergeState.DocMap> docMaps, List<SimpleTextBKDReader> readers) throws IOException {\n    assert docMaps == null || readers.size() == docMaps.size();\n\n    BKDMergeQueue queue = new BKDMergeQueue(bytesPerDim, readers.size());\n\n    for(int i=0;i<readers.size();i++) {\n      SimpleTextBKDReader bkd = readers.get(i);\n      MergeState.DocMap docMap;\n      if (docMaps == null) {\n        docMap = null;\n      } else {\n        docMap = docMaps.get(i);\n      }\n      MergeReader reader = new MergeReader(bkd, docMap);\n      if (reader.next()) {\n        queue.add(reader);\n      }\n    }\n\n    OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    while (queue.size() != 0) {\n      MergeReader reader = queue.top();\n      // System.out.println(\"iter reader=\" + reader);\n\n      // NOTE: doesn't work with subclasses (e.g. SimpleText!)\n      oneDimWriter.add(reader.state.scratchPackedValue, reader.docID);\n\n      if (reader.next()) {\n        queue.updateTop();\n      } else {\n        // This segment was exhausted\n        queue.pop();\n      }\n    }\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0e7448656541edc407546460641f47950451b16","date":1519150500,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#merge(IndexOutput,List[MergeState.DocMap],List[SimpleTextBKDReader]).mjava","sourceNew":null,"sourceOld":"  /** More efficient bulk-add for incoming {@link SimpleTextBKDReader}s.  This does a merge sort of the already\n   *  sorted values and currently only works when numDims==1.  This returns -1 if all documents containing\n   *  dimensional values were deleted. */\n  public long merge(IndexOutput out, List<MergeState.DocMap> docMaps, List<SimpleTextBKDReader> readers) throws IOException {\n    assert docMaps == null || readers.size() == docMaps.size();\n\n    BKDMergeQueue queue = new BKDMergeQueue(bytesPerDim, readers.size());\n\n    for(int i=0;i<readers.size();i++) {\n      SimpleTextBKDReader bkd = readers.get(i);\n      MergeState.DocMap docMap;\n      if (docMaps == null) {\n        docMap = null;\n      } else {\n        docMap = docMaps.get(i);\n      }\n      MergeReader reader = new MergeReader(bkd, docMap);\n      if (reader.next()) {\n        queue.add(reader);\n      }\n    }\n\n    OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    while (queue.size() != 0) {\n      MergeReader reader = queue.top();\n      // System.out.println(\"iter reader=\" + reader);\n\n      // NOTE: doesn't work with subclasses (e.g. SimpleText!)\n      oneDimWriter.add(reader.state.scratchPackedValue, reader.docID);\n\n      if (reader.next()) {\n        queue.updateTop();\n      } else {\n        // This segment was exhausted\n        queue.pop();\n      }\n    }\n\n    return oneDimWriter.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0e7448656541edc407546460641f47950451b16":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c0e7448656541edc407546460641f47950451b16"]},"commit2Childs":{"c0e7448656541edc407546460641f47950451b16":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["c0e7448656541edc407546460641f47950451b16","9856095f7afb5a607bf5e65077615ed91273508c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}