{"path":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniMRClientClusterFactory#create(Class[#],String,int,Configuration,File).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniMRClientClusterFactory#create(Class[#],String,int,Configuration,File).mjava","pathOld":"/dev/null","sourceNew":"  public static MiniMRClientCluster create(Class<?> caller, String identifier,\n      int noOfNMs, Configuration conf, File testWorkDir) throws IOException {\n\n    if (conf == null) {\n      conf = new Configuration();\n    }\n\n    FileSystem fs = FileSystem.get(conf);\n\n    Path testRootDir = new Path(testWorkDir.getPath(), identifier + \"-tmpDir\")\n        .makeQualified(fs);\n    Path appJar = new Path(testRootDir, \"MRAppJar.jar\");\n\n    // Copy MRAppJar and make it private.\n    Path appMasterJar = new Path(MiniMRYarnCluster.APPJAR);\n\n    fs.copyFromLocalFile(appMasterJar, appJar);\n    fs.setPermission(appJar, new FsPermission(\"744\"));\n\n    Job job = Job.getInstance(conf);\n\n    job.addFileToClassPath(appJar);\n\n    Path callerJar = new Path(JarFinder.getJar(caller));\n    Path remoteCallerJar = new Path(testRootDir, callerJar.getName());\n    fs.copyFromLocalFile(callerJar, remoteCallerJar);\n    fs.setPermission(remoteCallerJar, new FsPermission(\"744\"));\n    job.addFileToClassPath(remoteCallerJar);\n\n    MiniMRYarnCluster miniMRYarnCluster;\n    try {\n      miniMRYarnCluster = new MiniMRYarnCluster(identifier,\n          noOfNMs, testWorkDir);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    job.getConfiguration().set(\"minimrclientcluster.caller.name\",\n        identifier);\n    job.getConfiguration().setInt(\"minimrclientcluster.nodemanagers.number\",\n        noOfNMs);\n    miniMRYarnCluster.init(job.getConfiguration());\n    miniMRYarnCluster.start();\n\n    return new MiniMRYarnClusterAdapter(miniMRYarnCluster, testWorkDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/hack/MiniMRClientClusterFactory#create(Class[#],String,int,Configuration,File).mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/hack/MiniMRClientClusterFactory#create(Class[#],String,int,Configuration,File).mjava","sourceNew":"  public static MiniMRClientCluster create(Class<?> caller, String identifier,\n      int noOfNMs, Configuration conf, File testWorkDir) throws IOException {\n\n    if (conf == null) {\n      conf = new Configuration();\n    }\n\n    FileSystem fs = FileSystem.get(conf);\n\n    Path testRootDir = new Path(testWorkDir.getPath(), identifier + \"-tmpDir\")\n        .makeQualified(fs);\n    Path appJar = new Path(testRootDir, \"MRAppJar.jar\");\n\n    // Copy MRAppJar and make it private.\n    Path appMasterJar = new Path(MiniMRYarnCluster.APPJAR);\n\n    fs.copyFromLocalFile(appMasterJar, appJar);\n    fs.setPermission(appJar, new FsPermission(\"744\"));\n\n    Job job = Job.getInstance(conf);\n\n    job.addFileToClassPath(appJar);\n\n    Path callerJar = new Path(JarFinder.getJar(caller));\n    Path remoteCallerJar = new Path(testRootDir, callerJar.getName());\n    fs.copyFromLocalFile(callerJar, remoteCallerJar);\n    fs.setPermission(remoteCallerJar, new FsPermission(\"744\"));\n    job.addFileToClassPath(remoteCallerJar);\n\n    MiniMRYarnCluster miniMRYarnCluster;\n    try {\n      miniMRYarnCluster = new MiniMRYarnCluster(identifier,\n          noOfNMs, testWorkDir);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    job.getConfiguration().set(\"minimrclientcluster.caller.name\",\n        identifier);\n    job.getConfiguration().setInt(\"minimrclientcluster.nodemanagers.number\",\n        noOfNMs);\n    miniMRYarnCluster.init(job.getConfiguration());\n    miniMRYarnCluster.start();\n\n    return new MiniMRYarnClusterAdapter(miniMRYarnCluster, testWorkDir);\n  }\n\n","sourceOld":"  public static MiniMRClientCluster create(Class<?> caller, String identifier,\n      int noOfNMs, Configuration conf, File testWorkDir) throws IOException {\n\n    if (conf == null) {\n      conf = new Configuration();\n    }\n\n    FileSystem fs = FileSystem.get(conf);\n\n    Path testRootDir = new Path(testWorkDir.getPath(), identifier + \"-tmpDir\")\n        .makeQualified(fs);\n    Path appJar = new Path(testRootDir, \"MRAppJar.jar\");\n\n    // Copy MRAppJar and make it private.\n    Path appMasterJar = new Path(MiniMRYarnCluster.APPJAR);\n\n    fs.copyFromLocalFile(appMasterJar, appJar);\n    fs.setPermission(appJar, new FsPermission(\"744\"));\n\n    Job job = Job.getInstance(conf);\n\n    job.addFileToClassPath(appJar);\n\n    Path callerJar = new Path(JarFinder.getJar(caller));\n    Path remoteCallerJar = new Path(testRootDir, callerJar.getName());\n    fs.copyFromLocalFile(callerJar, remoteCallerJar);\n    fs.setPermission(remoteCallerJar, new FsPermission(\"744\"));\n    job.addFileToClassPath(remoteCallerJar);\n\n    MiniMRYarnCluster miniMRYarnCluster;\n    try {\n      miniMRYarnCluster = new MiniMRYarnCluster(identifier,\n          noOfNMs, testWorkDir);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n    job.getConfiguration().set(\"minimrclientcluster.caller.name\",\n        identifier);\n    job.getConfiguration().setInt(\"minimrclientcluster.nodemanagers.number\",\n        noOfNMs);\n    miniMRYarnCluster.init(job.getConfiguration());\n    miniMRYarnCluster.start();\n\n    return new MiniMRYarnClusterAdapter(miniMRYarnCluster, testWorkDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}