{"path":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits) {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","bugFix":["5af07783dbc171e26a694c4f7d735e30c2769faa","29d6eadc26bef1d3f5d3804b90cb7ba77162d007"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits) {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits)\n  throws IOException {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2","date":1591961131,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/search/CheckHits#checkDocIds(String,int[],ScoreDoc[]).mjava","sourceNew":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits) {\n    assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","sourceOld":"  /** Tests that a Hits has an expected order of documents */\n  public static void checkDocIds(String mes, int[] results, ScoreDoc[] hits) {\n    Assert.assertEquals(mes + \" nr of hits\", hits.length, results.length);\n    for (int i = 0; i < results.length; i++) {\n      Assert.assertEquals(mes + \" doc nrs for hit \" + i, results[i], hits[i].doc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2"],"f95c0e33e58652b2a4d8560c8297dbe86ff5b1f2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}