{"path":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","commits":[{"id":"e985300748139369c40cfe1aaa6b9475de6bc12a","date":1272467266,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = new RAMDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = new MockRAMDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = new RAMDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory(newRandom());\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = new MockRAMDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory(newRandom());\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = new RAMDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public boolean isOptimized() { return false; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c01638f4dd94981c1d3d52c4f7991246a5a24aba","date":1327876712,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":["e985300748139369c40cfe1aaa6b9475de6bc12a"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public long getVersion() { return 12; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public long getTimestamp() throws IOException { return 1;}\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexCommit#testEqualsHashCode().mjava","sourceNew":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testEqualsHashCode() throws Exception {\n    // LUCENE-2417: equals and hashCode() impl was inconsistent\n    final Directory dir = newDirectory();\n    \n    IndexCommit ic1 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"a\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n    \n    IndexCommit ic2 = new IndexCommit() {\n      @Override public String getSegmentsFileName() { return \"b\"; }\n      @Override public Directory getDirectory() { return dir; }\n      @Override public Collection<String> getFileNames() throws IOException { return null; }\n      @Override public void delete() {}\n      @Override public long getGeneration() { return 0; }\n      @Override public Map<String, String> getUserData() throws IOException { return null; }\n      @Override public boolean isDeleted() { return false; }\n      @Override public int getSegmentCount() { return 2; }\n    };\n\n    assertEquals(ic1, ic2);\n    assertEquals(\"hash codes are not equals\", ic1.hashCode(), ic2.hashCode());\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["e985300748139369c40cfe1aaa6b9475de6bc12a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e985300748139369c40cfe1aaa6b9475de6bc12a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5b6fdfce35d0adb18836cf8711abe487a934df33":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","c01638f4dd94981c1d3d52c4f7991246a5a24aba"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["e985300748139369c40cfe1aaa6b9475de6bc12a","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"c01638f4dd94981c1d3d52c4f7991246a5a24aba":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e985300748139369c40cfe1aaa6b9475de6bc12a"],"e985300748139369c40cfe1aaa6b9475de6bc12a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["c01638f4dd94981c1d3d52c4f7991246a5a24aba","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}