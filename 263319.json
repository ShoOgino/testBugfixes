{"path":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","commits":[{"id":"081b68cb9e8f4b5405b40bfb223fd7c587171aa1","date":1360072766,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    StoredDocument doc = searcher.doc(hits.scoreDocs[0].doc);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[0].doc, FIELD_NAME, doc, analyzer);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello <B>this</B> is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n    \n    doc = searcher.doc(hits.scoreDocs[1].doc);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[1].doc, FIELD_NAME, doc, analyzer);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"<B>This</B> piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4d4ec39bf5396230748ca859ff05ab024b6fc5","date":1360112310,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    StoredDocument doc = searcher.doc(hits.scoreDocs[0].doc);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[0].doc, FIELD_NAME, doc, analyzer);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello <B>this</B> is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n    \n    doc = searcher.doc(hits.scoreDocs[1].doc);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[1].doc, FIELD_NAME, doc, analyzer);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"<B>This</B> piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc","date":1366056945,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    StoredDocument doc = searcher.doc(hits.scoreDocs[0].doc);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[0].doc, FIELD_NAME, doc, analyzer);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello <B>this</B> is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n    \n    doc = searcher.doc(hits.scoreDocs[1].doc);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[1].doc, FIELD_NAME, doc, analyzer);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"<B>This</B> piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = new IndexSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    StoredDocument doc = searcher.doc(hits.scoreDocs[0].doc);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[0].doc, FIELD_NAME, doc, analyzer);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello <B>this</B> is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n    \n    doc = searcher.doc(hits.scoreDocs[1].doc);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[1].doc, FIELD_NAME, doc, analyzer);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"<B>This</B> piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aeebe27bce18b879b80f68494c52cda1021b5705","date":1417792137,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    StoredDocument doc = searcher.doc(hits.scoreDocs[0].doc);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[0].doc, FIELD_NAME, doc, analyzer);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n    \n    doc = searcher.doc(hits.scoreDocs[1].doc);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[1].doc, FIELD_NAME, doc, analyzer);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true);\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    StoredDocument doc = searcher.doc(hits.scoreDocs[0].doc);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[0].doc, FIELD_NAME, doc, analyzer);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello <B>this</B> is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n    \n    doc = searcher.doc(hits.scoreDocs[1].doc);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[1].doc, FIELD_NAME, doc, analyzer);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"<B>This</B> piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d62e4938659e263e96ae8188e11aea8a940aea5","date":1430230314,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    StoredDocument doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    StoredDocument doc = searcher.doc(hits.scoreDocs[0].doc);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[0].doc, FIELD_NAME, doc, analyzer);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n    \n    doc = searcher.doc(hits.scoreDocs[1].doc);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = TokenSources.getAnyTokenStream(searcher\n        .getIndexReader(), hits.scoreDocs[1].doc, FIELD_NAME, doc, analyzer);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    Document doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    StoredDocument doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10, new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE));\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    Document doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    Document doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10, new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE));\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    Document doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10);\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    Document doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest#testHighlightingCommonTermsQuery().mjava","sourceNew":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10, new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE));\n    assertEquals(2, hits.totalHits.value);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    Document doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","sourceOld":"  public void testHighlightingCommonTermsQuery() throws Exception {\n    CommonTermsQuery query = new CommonTermsQuery(Occur.MUST, Occur.SHOULD, 3);\n    query.add(new Term(FIELD_NAME, \"this\"));//stop-word\n    query.add(new Term(FIELD_NAME, \"long\"));\n    query.add(new Term(FIELD_NAME, \"very\"));\n\n    searcher = newSearcher(reader);\n    TopDocs hits = searcher.search(query, 10, new Sort(SortField.FIELD_DOC, SortField.FIELD_SCORE));\n    assertEquals(2, hits.totalHits);\n    QueryScorer scorer = new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(scorer);\n\n    final int docId0 = hits.scoreDocs[0].doc;\n    Document doc = searcher.doc(docId0);\n    String storedField = doc.get(FIELD_NAME);\n\n    TokenStream stream = getAnyTokenStream(FIELD_NAME, docId0);\n    Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n    highlighter.setTextFragmenter(fragmenter);\n    String fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"Hello this is a piece of text that is <B>very</B> <B>long</B> and contains too much preamble and the meat is really here which says kennedy has been shot\", fragment);\n\n    final int docId1 = hits.scoreDocs[1].doc;\n    doc = searcher.doc(docId1);\n    storedField = doc.get(FIELD_NAME);\n\n    stream = getAnyTokenStream(FIELD_NAME, docId1);\n    highlighter.setTextFragmenter(new SimpleSpanFragmenter(scorer));\n    fragment = highlighter.getBestFragment(stream, storedField);\n    assertEquals(\"This piece of text refers to Kennedy at the beginning then has a longer piece of text that is <B>very</B>\", fragment);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","615370d2b876c3435773b5174df2e2242ad7981a"],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"615370d2b876c3435773b5174df2e2242ad7981a":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d62e4938659e263e96ae8188e11aea8a940aea5":["aeebe27bce18b879b80f68494c52cda1021b5705"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["615370d2b876c3435773b5174df2e2242ad7981a"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"aeebe27bce18b879b80f68494c52cda1021b5705":["ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"081b68cb9e8f4b5405b40bfb223fd7c587171aa1":["3e4d4ec39bf5396230748ca859ff05ab024b6fc5","ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc"],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","83788ad129a5154d5c6562c4e8ce3db48793aada"],"3e4d4ec39bf5396230748ca859ff05ab024b6fc5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["081b68cb9e8f4b5405b40bfb223fd7c587171aa1","3e4d4ec39bf5396230748ca859ff05ab024b6fc5"],"5d62e4938659e263e96ae8188e11aea8a940aea5":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad1f7eb1a6bbf19f3d32b3baf2dee3db844eccdc":["aeebe27bce18b879b80f68494c52cda1021b5705"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"aeebe27bce18b879b80f68494c52cda1021b5705":["5d62e4938659e263e96ae8188e11aea8a940aea5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","3e4d4ec39bf5396230748ca859ff05ab024b6fc5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}