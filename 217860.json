{"path":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","commits":[{"id":"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc","date":1349823963,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"/dev/null","sourceNew":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(_TestUtil.getTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(TestUtil.getTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbbcc0fe8e47d9f734fa81a325f09c6354a8f986","date":1397611965,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    dir.close();\n  }\n\n","sourceOld":"  // uses lots of space and takes a few minutes\n  @Ignore(\"Very slow. Enable manually by removing @Ignore.\")\n  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.shutdown();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"656cfb06eff2244ff5a25ffb3ed3a79942ece85c","date":1413181096,"type":3,"author":"Shawn Heisey","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35fb92999b9df7df2ce2b35b83a044cbede61f45","date":1429037650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/Test2BPositions#test().mjava","sourceNew":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n      // 1 petabyte:\n      ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    BaseDirectoryWrapper dir = newFSDirectory(createTempDir(\"2BPositions\"));\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER);\n    }\n    \n    IndexWriter w = new IndexWriter(dir,\n        new IndexWriterConfig(new MockAnalyzer(random()))\n        .setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH)\n        .setRAMBufferSizeMB(256.0)\n        .setMergeScheduler(new ConcurrentMergeScheduler())\n        .setMergePolicy(newLogMergePolicy(false, 10))\n        .setOpenMode(IndexWriterConfig.OpenMode.CREATE)\n        .setCodec(TestUtil.getDefaultCodec()));\n\n    MergePolicy mp = w.getConfig().getMergePolicy();\n    if (mp instanceof LogByteSizeMergePolicy) {\n     // 1 petabyte:\n     ((LogByteSizeMergePolicy) mp).setMaxMergeMB(1024*1024*1024);\n    }\n\n    Document doc = new Document();\n    FieldType ft = new FieldType(TextField.TYPE_NOT_STORED);\n    ft.setOmitNorms(true);\n    Field field = new Field(\"field\", new MyTokenStream(), ft);\n    doc.add(field);\n    \n    final int numDocs = (Integer.MAX_VALUE / 26) + 1;\n    for (int i = 0; i < numDocs; i++) {\n      w.addDocument(doc);\n      if (VERBOSE && i % 100000 == 0) {\n        System.out.println(i + \" of \" + numDocs + \"...\");\n      }\n    }\n    w.forceMerge(1);\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fbbcc0fe8e47d9f734fa81a325f09c6354a8f986":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"55980207f1977bd1463465de1659b821347e2fa8":["d0ef034a4f10871667ae75181537775ddcf8ade4","656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"35fb92999b9df7df2ce2b35b83a044cbede61f45":["656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["d0d579490a72f2e6297eaa648940611234c57cf1"],"656cfb06eff2244ff5a25ffb3ed3a79942ece85c":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["fbbcc0fe8e47d9f734fa81a325f09c6354a8f986"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["35fb92999b9df7df2ce2b35b83a044cbede61f45"]},"commit2Childs":{"fbbcc0fe8e47d9f734fa81a325f09c6354a8f986":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"55980207f1977bd1463465de1659b821347e2fa8":[],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"d0d579490a72f2e6297eaa648940611234c57cf1":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"35fb92999b9df7df2ce2b35b83a044cbede61f45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"656cfb06eff2244ff5a25ffb3ed3a79942ece85c":["55980207f1977bd1463465de1659b821347e2fa8","35fb92999b9df7df2ce2b35b83a044cbede61f45"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a5e3ea6d5c2b839bafea03558af4d9e641ec73cc"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["55980207f1977bd1463465de1659b821347e2fa8","656cfb06eff2244ff5a25ffb3ed3a79942ece85c"],"a5e3ea6d5c2b839bafea03558af4d9e641ec73cc":["6613659748fe4411a7dcf85266e55db1f95f7315"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["fbbcc0fe8e47d9f734fa81a325f09c6354a8f986"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}