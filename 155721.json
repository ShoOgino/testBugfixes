{"path":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","commits":[{"id":"a946a349f268338bb6ef7cd87612926ae94e12f5","date":1497208405,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT*1000);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      //assertEquals(1,result.getResults().getNumFound());\n      fail(\"expect 404\");\n    }catch(Exception e){\n      e.printStackTrace();\n    }\n    finally{\n      runner.stop();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["aae5c025978fbaecb19a4f386e55c58a7e74022e","9799ebcab48102552d92f7807965a91fb6e116f7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aae5c025978fbaecb19a4f386e55c58a7e74022e","date":1497285634,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n        client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n        client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT * 1000);\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT*1000);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      //assertEquals(1,result.getResults().getNumFound());\n      fail(\"expect 404\");\n    }catch(Exception e){\n      e.printStackTrace();\n    }\n    finally{\n      runner.stop();\n    }\n  }\n\n","bugFix":["a946a349f268338bb6ef7cd87612926ae94e12f5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n        client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n        client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT * 1000);\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n        client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n        client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT * 1000);\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43d1e498704edd2bba13548a189eed4dfccff11b","date":1499143458,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n        client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n        client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT * 1000);\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2ea161f828a3a7a6eb9410a431aecda6d7ab1065","date":1499213384,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n      client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\")) {\n        client.setConnectionTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT);\n        client.setSoTimeout(SolrTestCaseJ4.DEFAULT_CONNECTION_TIMEOUT * 1000);\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9799ebcab48102552d92f7807965a91fb6e116f7","date":1564676118,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","bugFix":["a946a349f268338bb6ef7cd87612926ae94e12f5"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = new File(initCoreDataDir, getClass().getName() + \"-corex-\"\n        + System.nanoTime());\n    solrHomeDirectory.mkdirs();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1f4f89cef95d8efa9877bdd893d1b542c9b140","date":1574241654,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage(), rse.getMessage().contains(\"Problem accessing /solr/corex/select\"));\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage().contains(\"Can not find: /solr/corex/select\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27e594a0c4bfe5e235e9de38c78944c254b6e17c","date":1576249297,"type":3,"author":"erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    BaseHttpSolrClient.RemoteSolrException rse = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertEquals(\"Should have received a 404 error\", 404,  rse.code());\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage(), rse.getMessage().contains(\"Problem accessing /solr/corex/select\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06595b0c22c7d3075c4104d3820cccf95d9d8a43","date":1576491645,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/CoreAdminHandlerTest#testUnloadForever().mjava","sourceNew":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    BaseHttpSolrClient.RemoteSolrException rse = expectThrows(BaseHttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertEquals(\"Should have received a 404 error\", 404,  rse.code());\n  }\n\n","sourceOld":"  @Test\n  public void testUnloadForever() throws Exception  {\n    File solrHomeDirectory = createTempDir(\"solr-home\").toFile();\n    copySolrHomeToTemp(solrHomeDirectory, \"corex\");\n    File corex = new File(solrHomeDirectory, \"corex\");\n    FileUtils.write(new File(corex, \"core.properties\"), \"\", StandardCharsets.UTF_8);\n    JettySolrRunner runner = new JettySolrRunner(solrHomeDirectory.getAbsolutePath(), buildJettyConfig(\"/solr\"));\n    runner.start();\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"123\");\n      client.add(doc);\n      client.commit();\n    }\n\n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      QueryResponse result = client.query(new SolrQuery(\"id:*\"));\n      assertEquals(1,result.getResults().getNumFound());\n    }\n    \n    try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl().toString(), DEFAULT_CONNECTION_TIMEOUT,\n        DEFAULT_CONNECTION_TIMEOUT)) {\n      CoreAdminRequest.Unload req = new CoreAdminRequest.Unload(false);\n      req.setDeleteInstanceDir(false);//random().nextBoolean());\n      req.setCoreName(\"corex\");\n      req.process(client);\n    }\n\n    HttpSolrClient.RemoteSolrException rse = expectThrows(HttpSolrClient.RemoteSolrException.class, () -> {\n      try (HttpSolrClient client = getHttpSolrClient(runner.getBaseUrl() + \"/corex\", DEFAULT_CONNECTION_TIMEOUT,\n          DEFAULT_CONNECTION_TIMEOUT * 1000)) {\n        client.query(new SolrQuery(\"id:*\"));\n      } finally {\n        runner.stop();\n      }\n    });\n    assertTrue(rse.getMessage(), rse.getMessage().contains(\"Problem accessing /solr/corex/select\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aae5c025978fbaecb19a4f386e55c58a7e74022e":["a946a349f268338bb6ef7cd87612926ae94e12f5"],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["9799ebcab48102552d92f7807965a91fb6e116f7"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aae5c025978fbaecb19a4f386e55c58a7e74022e"],"f8061ddd97f3352007d927dae445884a6f3d857b":["43d1e498704edd2bba13548a189eed4dfccff11b","9799ebcab48102552d92f7807965a91fb6e116f7"],"43d1e498704edd2bba13548a189eed4dfccff11b":["28288370235ed02234a64753cdbf0c6ec096304a"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","43d1e498704edd2bba13548a189eed4dfccff11b"],"a946a349f268338bb6ef7cd87612926ae94e12f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9799ebcab48102552d92f7807965a91fb6e116f7":["43d1e498704edd2bba13548a189eed4dfccff11b"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":["de1f4f89cef95d8efa9877bdd893d1b542c9b140","27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"27e594a0c4bfe5e235e9de38c78944c254b6e17c":["de1f4f89cef95d8efa9877bdd893d1b542c9b140"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aae5c025978fbaecb19a4f386e55c58a7e74022e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["27e594a0c4bfe5e235e9de38c78944c254b6e17c"]},"commit2Childs":{"aae5c025978fbaecb19a4f386e55c58a7e74022e":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"de1f4f89cef95d8efa9877bdd893d1b542c9b140":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","27e594a0c4bfe5e235e9de38c78944c254b6e17c"],"28288370235ed02234a64753cdbf0c6ec096304a":["43d1e498704edd2bba13548a189eed4dfccff11b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"43d1e498704edd2bba13548a189eed4dfccff11b":["f8061ddd97f3352007d927dae445884a6f3d857b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","9799ebcab48102552d92f7807965a91fb6e116f7"],"2ea161f828a3a7a6eb9410a431aecda6d7ab1065":[],"a946a349f268338bb6ef7cd87612926ae94e12f5":["aae5c025978fbaecb19a4f386e55c58a7e74022e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28288370235ed02234a64753cdbf0c6ec096304a","a946a349f268338bb6ef7cd87612926ae94e12f5","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"9799ebcab48102552d92f7807965a91fb6e116f7":["de1f4f89cef95d8efa9877bdd893d1b542c9b140","f8061ddd97f3352007d927dae445884a6f3d857b"],"06595b0c22c7d3075c4104d3820cccf95d9d8a43":[],"27e594a0c4bfe5e235e9de38c78944c254b6e17c":["06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["2ea161f828a3a7a6eb9410a431aecda6d7ab1065"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","2ea161f828a3a7a6eb9410a431aecda6d7ab1065","06595b0c22c7d3075c4104d3820cccf95d9d8a43","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}