{"path":"lucene/core/src/test/org/apache/lucene/util/TestStringHelper#testSortKeyLength().mjava","commits":[{"id":"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793","date":1408030244,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringHelper#testSortKeyLength().mjava","pathOld":"/dev/null","sourceNew":"  public void testSortKeyLength() throws Exception {\n    assertEquals(3, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"for\")));\n    assertEquals(3, StringHelper.sortKeyLength(new BytesRef(\"foo1234\"), new BytesRef(\"for1234\")));\n    assertEquals(2, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"fz\")));\n    assertEquals(1, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"g\")));\n    assertEquals(4, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"food\")));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"456d7e7092cb043c740b4674301660ee8abc26fe","date":1517645879,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestStringHelper#testSortKeyLength().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestStringHelper#testSortKeyLength().mjava","sourceNew":"  public void testSortKeyLength() throws Exception {\n    assertEquals(3, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"for\")));\n    assertEquals(3, StringHelper.sortKeyLength(new BytesRef(\"foo1234\"), new BytesRef(\"for1234\")));\n    assertEquals(2, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"fz\")));\n    assertEquals(1, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"g\")));\n    assertEquals(4, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"food\")));\n    // we can detect terms are out of order if we see a duplicate\n    expectThrows(IllegalArgumentException.class, () -> {\n      StringHelper.sortKeyLength(new BytesRef(\"ab\"), new BytesRef(\"ab\"));\n    });\n  }\n\n","sourceOld":"  public void testSortKeyLength() throws Exception {\n    assertEquals(3, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"for\")));\n    assertEquals(3, StringHelper.sortKeyLength(new BytesRef(\"foo1234\"), new BytesRef(\"for1234\")));\n    assertEquals(2, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"fz\")));\n    assertEquals(1, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"g\")));\n    assertEquals(4, StringHelper.sortKeyLength(new BytesRef(\"foo\"), new BytesRef(\"food\")));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"456d7e7092cb043c740b4674301660ee8abc26fe":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["456d7e7092cb043c740b4674301660ee8abc26fe"]},"commit2Childs":{"456d7e7092cb043c740b4674301660ee8abc26fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793"],"0ce5e7f280a7b3f0f96f2623d9f0ce70f742b793":["456d7e7092cb043c740b4674301660ee8abc26fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}