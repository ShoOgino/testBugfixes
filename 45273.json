{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","sourceNew":"  public void testMatchAllDocs() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"*:*\"));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"(*:*)\"));\n    BooleanQuery bq = (BooleanQuery)qp.parse(\"+*:* -*:*\");\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","sourceOld":"  public void testMatchAllDocs() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"*:*\"));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"(*:*)\"));\n    BooleanQuery bq = (BooleanQuery)qp.parse(\"+*:* -*:*\");\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","sourceNew":"  public void testMatchAllDocs() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"*:*\",qp));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"(*:*)\",qp));\n    BooleanQuery bq = (BooleanQuery)getQuery(\"+*:* -*:*\",qp);\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","sourceOld":"  public void testMatchAllDocs() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"*:*\"));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"(*:*)\"));\n    BooleanQuery bq = (BooleanQuery)qp.parse(\"+*:* -*:*\");\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","3dd3270bbe1832a7b0b0986602736d4106d2473e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","sourceNew":"  public void testMatchAllDocs() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"*:*\",qp));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"(*:*)\",qp));\n    BooleanQuery bq = (BooleanQuery)getQuery(\"+*:* -*:*\",qp);\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","sourceOld":"  public void testMatchAllDocs() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"*:*\"));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"(*:*)\"));\n    BooleanQuery bq = (BooleanQuery)qp.parse(\"+*:* -*:*\");\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","sourceNew":"  public void testMatchAllDocs() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"*:*\",qp));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"(*:*)\",qp));\n    BooleanQuery bq = (BooleanQuery)getQuery(\"+*:* -*:*\",qp);\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","sourceOld":"  public void testMatchAllDocs() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"*:*\"));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(\"(*:*)\"));\n    BooleanQuery bq = (BooleanQuery)qp.parse(\"+*:* -*:*\");\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllDocs().mjava","sourceNew":"  public void testMatchAllDocs() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"*:*\",qp));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"(*:*)\",qp));\n    BooleanQuery bq = (BooleanQuery)getQuery(\"+*:* -*:*\",qp);\n    assertEquals(2, bq.clauses().size());\n    for (BooleanClause clause : bq) {\n      assertTrue(clause.getQuery() instanceof MatchAllDocsQuery);\n    }\n  }\n\n","sourceOld":"  public void testMatchAllDocs() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.WHITESPACE, false));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"*:*\",qp));\n    assertEquals(new MatchAllDocsQuery(), getQuery(\"(*:*)\",qp));\n    BooleanQuery bq = (BooleanQuery)getQuery(\"+*:* -*:*\",qp);\n    assertTrue(bq.getClauses()[0].getQuery() instanceof MatchAllDocsQuery);\n    assertTrue(bq.getClauses()[1].getQuery() instanceof MatchAllDocsQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}