{"path":"src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","commits":[{"id":"c9140b88498d055377eca9c7fe8be26209acd5ae","date":1168512805,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Checks is the index is optimized (if it has a single segment and no deletions)\n   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise\n   */\n  public boolean isOptimized() {\n      return segmentInfos.size() == 1 && hasDeletions() == false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"328c1568e471f0c6eaa49ec00334ca59e573710f","date":1173897963,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","sourceNew":"  /**\n   * Checks is the index is optimized (if it has a single segment and no deletions)\n   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise\n   */\n  public boolean isOptimized() {\n    ensureOpen();\n    return segmentInfos.size() == 1 && hasDeletions() == false;\n  }\n\n","sourceOld":"  /**\n   * Checks is the index is optimized (if it has a single segment and no deletions)\n   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise\n   */\n  public boolean isOptimized() {\n      return segmentInfos.size() == 1 && hasDeletions() == false;\n  }\n\n","bugFix":["c9140b88498d055377eca9c7fe8be26209acd5ae"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"125b5699f11b58d9be0820c6ce8b1648812902e8","date":1190273227,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","sourceNew":"  /**\n   * Checks is the index is optimized (if it has a single segment and \n   * no deletions).  Not implemented in the IndexReader base class.\n   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isOptimized() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Checks is the index is optimized (if it has a single segment and no deletions)\n   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise\n   */\n  public boolean isOptimized() {\n    ensureOpen();\n    return segmentInfos.size() == 1 && hasDeletions() == false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isOptimized().mjava","sourceNew":"  /**\n   * Checks is the index is optimized (if it has a single segment and \n   * no deletions).  Not implemented in the IndexReader base class.\n   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isOptimized() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","sourceOld":"  /**\n   * Checks is the index is optimized (if it has a single segment and \n   * no deletions).  Not implemented in the IndexReader base class.\n   * @return <code>true</code> if the index is optimized; <code>false</code> otherwise\n   * @throws UnsupportedOperationException unless overridden in subclass\n   */\n  public boolean isOptimized() {\n    throw new UnsupportedOperationException(\"This reader does not support this method.\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c9140b88498d055377eca9c7fe8be26209acd5ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["c9140b88498d055377eca9c7fe8be26209acd5ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["125b5699f11b58d9be0820c6ce8b1648812902e8"]},"commit2Childs":{"c9140b88498d055377eca9c7fe8be26209acd5ae":["328c1568e471f0c6eaa49ec00334ca59e573710f"],"125b5699f11b58d9be0820c6ce8b1648812902e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"328c1568e471f0c6eaa49ec00334ca59e573710f":["125b5699f11b58d9be0820c6ce8b1648812902e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9140b88498d055377eca9c7fe8be26209acd5ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}