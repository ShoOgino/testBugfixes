{"path":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","commits":[{"id":"2102da8a037e2ce5cb9f72256c58c8722b9cd706","date":1374864457,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanNotWindowNeg() throws Exception {\n     //test handling of invalid window < 0\n     SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n     SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n     SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            4, true);\n     SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n\n     SpanOrQuery or = new SpanOrQuery(term3);\n\n     SpanNotQuery query = new SpanNotQuery(near, or);\n\n     checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n     assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n     assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testSpanNotWindowNeg() throws Exception {\n     //test handling of invalid window < 0\n     SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n     SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n     SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            4, true);\n     SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n\n     SpanOrQuery or = new SpanOrQuery(term3);\n\n     SpanNotQuery query = new SpanNotQuery(near, or);\n\n     checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n     assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n     assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4f600f812447b5512daeaf8e5c9df5dbcc4a254","date":1428874774,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","sourceNew":"  public void testSpanNotWindowNeg() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or);\n\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  @Test\n  public void testSpanNotWindowNeg() throws Exception {\n     //test handling of invalid window < 0\n     SpanTermQuery term1 = new SpanTermQuery(new Term(\"field\", \"eight\"));\n     SpanTermQuery term2 = new SpanTermQuery(new Term(\"field\", \"one\"));\n     SpanNearQuery near = new SpanNearQuery(new SpanQuery[] {term1, term2},\n                                            4, true);\n     SpanTermQuery term3 = new SpanTermQuery(new Term(\"field\", \"forty\"));\n\n     SpanOrQuery or = new SpanOrQuery(term3);\n\n     SpanNotQuery query = new SpanNotQuery(near, or);\n\n     checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n     assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n     assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d57d8425f061bbc789486399b498a35f960765e","date":1478627123,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","sourceNew":"  public void testSpanNotWindowNegPost() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, 0, -1);\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, 0, -2);\n    checkHits(query, new int[]\n       {801, 821, 831, 841, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowNeg() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or);\n\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d57d8425f061bbc789486399b498a35f960765e","date":1478627123,"type":6,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPre().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","sourceNew":"  public void testSpanNotWindowNegPre() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, -2, 0);\n    checkHits(query, new int[]\n        {801, 821, 831, 851, 861, 871, 881, 891,\n            1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, -3, 0);\n    checkHits(query, new int[]\n        {801, 821, 831, 841, 851, 861, 871, 881, 891,\n            1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowNeg() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or);\n\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPost().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","sourceNew":"  public void testSpanNotWindowNegPost() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, 0, -1);\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, 0, -2);\n    checkHits(query, new int[]\n       {801, 821, 831, 841, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowNeg() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or);\n\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":6,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNegPre().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/spans/TestBasics#testSpanNotWindowNeg().mjava","sourceNew":"  public void testSpanNotWindowNegPre() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or, -2, 0);\n    checkHits(query, new int[]\n        {801, 821, 831, 851, 861, 871, 881, 891,\n            1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    query = spanNotQuery(near, or, -3, 0);\n    checkHits(query, new int[]\n        {801, 821, 831, 841, 851, 861, 871, 881, 891,\n            1801, 1821, 1831, 1841, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","sourceOld":"  public void testSpanNotWindowNeg() throws Exception {\n    //test handling of invalid window < 0\n    SpanQuery near = spanNearOrderedQuery(\"field\", 4, \"eight\", \"one\");\n    SpanQuery or = spanOrQuery(\"field\", \"forty\");\n    SpanQuery query = spanNotQuery(near, or);\n\n    checkHits(query, new int[]\n       {801, 821, 831, 851, 861, 871, 881, 891,\n               1801, 1821, 1831, 1851, 1861, 1871, 1881, 1891});\n\n    assertTrue(searcher.explain(query, 801).getValue() > 0.0f);\n    assertTrue(searcher.explain(query, 891).getValue() > 0.0f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254","7d57d8425f061bbc789486399b498a35f960765e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d57d8425f061bbc789486399b498a35f960765e"],"7d57d8425f061bbc789486399b498a35f960765e":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"]},"commit2Childs":{"c4f600f812447b5512daeaf8e5c9df5dbcc4a254":["199dfa410f1fdbfd3294106b04096cce5ed34b21","7d57d8425f061bbc789486399b498a35f960765e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["c4f600f812447b5512daeaf8e5c9df5dbcc4a254"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"7d57d8425f061bbc789486399b498a35f960765e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}