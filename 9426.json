{"path":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSameNormsAsBM25().mjava","commits":[{"id":"615370d2b876c3435773b5174df2e2242ad7981a","date":1495117651,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSameNormsAsBM25().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameNormsAsBM25() {\n    ClassicSimilarity sim1 = new ClassicSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 1000);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5a4bb2b5569a925d9d26743041864893512a7958"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSameNormsAsBM25().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameNormsAsBM25() {\n    ClassicSimilarity sim1 = new ClassicSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 1000);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a4bb2b5569a925d9d26743041864893512a7958","date":1519489313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSameNormsAsBM25().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/similarities/TestClassicSimilarity#testSameNormsAsBM25().mjava","sourceNew":"  public void testSameNormsAsBM25() {\n    ClassicSimilarity sim1 = new ClassicSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 1000);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      final int maxTermFrequency = 1;\n      final int uniqueTermCount = 1;\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", IndexOptions.DOCS_AND_FREQS, position, length, numOverlaps, 100, maxTermFrequency, uniqueTermCount);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","sourceOld":"  public void testSameNormsAsBM25() {\n    ClassicSimilarity sim1 = new ClassicSimilarity();\n    BM25Similarity sim2 = new BM25Similarity();\n    sim2.setDiscountOverlaps(true);\n    for (int iter = 0; iter < 100; ++iter) {\n      final int length = TestUtil.nextInt(random(), 1, 1000);\n      final int position = random().nextInt(length);\n      final int numOverlaps = random().nextInt(length);\n      FieldInvertState state = new FieldInvertState(Version.LATEST.major, \"foo\", position, length, numOverlaps, 100);\n      assertEquals(\n          sim2.computeNorm(state),\n          sim1.computeNorm(state),\n          0f);\n    }\n  }\n\n","bugFix":["615370d2b876c3435773b5174df2e2242ad7981a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","615370d2b876c3435773b5174df2e2242ad7981a"],"615370d2b876c3435773b5174df2e2242ad7981a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a4bb2b5569a925d9d26743041864893512a7958":["615370d2b876c3435773b5174df2e2242ad7981a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a4bb2b5569a925d9d26743041864893512a7958"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"615370d2b876c3435773b5174df2e2242ad7981a":["e9017cf144952056066919f1ebc7897ff9bd71b1","5a4bb2b5569a925d9d26743041864893512a7958"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","615370d2b876c3435773b5174df2e2242ad7981a"],"5a4bb2b5569a925d9d26743041864893512a7958":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}