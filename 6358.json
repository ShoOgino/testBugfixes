{"path":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#hasAdministratorAccess(ServletContext,HttpServletRequest,HttpServletResponse).mjava","commits":[{"id":"99b97f030e743d8dd4d7685202f71718d7e5af22","date":1548957620,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#hasAdministratorAccess(ServletContext,HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Does the user sending the HttpServletRequest has the administrator ACLs? If\n   * it isn't the case, response will be modified to send an error to the user.\n   *\n   * @param response used to send the error response if user does not have admin access.\n   * @return true if admin-authorized, false otherwise\n   * @throws IOException exception on error\n   */\n  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser = request.getRemoteUser();\n    if (remoteUser == null) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) != null &&\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      LOG.warn(\"User \" + remoteUser + \" is unauthorized to access the page \"\n          + request.getRequestURI() + \".\");\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34b74c124d68d8e306d6ef09624f3cd053b8a2fd","date":1548981962,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#hasAdministratorAccess(ServletContext,HttpServletRequest,HttpServletResponse).mjava","sourceNew":null,"sourceOld":"  /**\n   * Does the user sending the HttpServletRequest has the administrator ACLs? If\n   * it isn't the case, response will be modified to send an error to the user.\n   *\n   * @param response used to send the error response if user does not have admin access.\n   * @return true if admin-authorized, false otherwise\n   * @throws IOException exception on error\n   */\n  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser = request.getRemoteUser();\n    if (remoteUser == null) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) != null &&\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      LOG.warn(\"User \" + remoteUser + \" is unauthorized to access the page \"\n          + request.getRequestURI() + \".\");\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#hasAdministratorAccess(ServletContext,HttpServletRequest,HttpServletResponse).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Does the user sending the HttpServletRequest has the administrator ACLs? If\n   * it isn't the case, response will be modified to send an error to the user.\n   *\n   * @param response used to send the error response if user does not have admin access.\n   * @return true if admin-authorized, false otherwise\n   * @throws IOException exception on error\n   */\n  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser = request.getRemoteUser();\n    if (remoteUser == null) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) != null &&\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      LOG.warn(\"User \" + remoteUser + \" is unauthorized to access the page \"\n          + request.getRequestURI() + \".\");\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#hasAdministratorAccess(ServletContext,HttpServletRequest,HttpServletResponse).mjava","pathOld":"solr/core/src/test/org/apache/hadoop/http/HttpServer2#hasAdministratorAccess(ServletContext,HttpServletRequest,HttpServletResponse).mjava","sourceNew":"  /**\n   * Does the user sending the HttpServletRequest has the administrator ACLs? If\n   * it isn't the case, response will be modified to send an error to the user.\n   *\n   * @param response used to send the error response if user does not have admin access.\n   * @return true if admin-authorized, false otherwise\n   * @throws IOException exception on error\n   */\n  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser = request.getRemoteUser();\n    if (remoteUser == null) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) != null &&\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      LOG.warn(\"User {} is unauthorized to access the page {}.\", remoteUser, request.getRequestURI());\n      return false;\n    }\n\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Does the user sending the HttpServletRequest has the administrator ACLs? If\n   * it isn't the case, response will be modified to send an error to the user.\n   *\n   * @param response used to send the error response if user does not have admin access.\n   * @return true if admin-authorized, false otherwise\n   * @throws IOException exception on error\n   */\n  public static boolean hasAdministratorAccess(\n      ServletContext servletContext, HttpServletRequest request,\n      HttpServletResponse response) throws IOException {\n    Configuration conf =\n        (Configuration) servletContext.getAttribute(CONF_CONTEXT_ATTRIBUTE);\n    // If there is no authorization, anybody has administrator access.\n    if (!conf.getBoolean(\n        CommonConfigurationKeys.HADOOP_SECURITY_AUTHORIZATION, false)) {\n      return true;\n    }\n\n    String remoteUser = request.getRemoteUser();\n    if (remoteUser == null) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      return false;\n    }\n\n    if (servletContext.getAttribute(ADMINS_ACL) != null &&\n        !userHasAdministratorAccess(servletContext, remoteUser)) {\n      response.sendError(HttpServletResponse.SC_FORBIDDEN,\n          \"Unauthenticated users are not \" +\n              \"authorized to access this page.\");\n      LOG.warn(\"User \" + remoteUser + \" is unauthorized to access the page \"\n          + request.getRequestURI() + \".\");\n      return false;\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"]},"commit2Childs":{"34b74c124d68d8e306d6ef09624f3cd053b8a2fd":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"99b97f030e743d8dd4d7685202f71718d7e5af22":["34b74c124d68d8e306d6ef09624f3cd053b8a2fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99b97f030e743d8dd4d7685202f71718d7e5af22"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}