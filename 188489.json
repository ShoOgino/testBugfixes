{"path":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,Integer,Integer,boolean).mjava","commits":[{"id":"f0a4eeff354e8081247783f424a8e5a0fe106633","date":1355250757,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,Integer,Integer,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode);\n    \n    waitForEmptyQueue(10000);\n    \n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          liveNodes);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"042891089d57d0e6af18ea6cec15f9e9a7da7d25","date":1355271969,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode);\n    \n    waitForEmptyQueue(10000);\n    \n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          liveNodes);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode);\n    \n    waitForEmptyQueue(10000);\n    \n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          liveNodes);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9a57adc9bfabbc207ed17740dd86e0a2401ea385","date":1355507623,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,CreateNodeListOptions,Integer,Integer,Integer,boolean).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest#testTemplate(Integer,Integer,Integer,Integer,boolean).mjava","sourceNew":"  protected void testTemplate(Integer numberOfNodes, Integer numberOfNodesToCreateOn, CreateNodeListOptions createNodeListOption, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    assertTrue(\"Wrong usage of testTemplate. numberOfNodesToCreateOn \" + numberOfNodesToCreateOn + \" is not allowed to be higher than numberOfNodes \" + numberOfNodes, numberOfNodes.intValue() >= numberOfNodesToCreateOn.intValue());\n    assertTrue(\"Wrong usage of testTemplage. createNodeListOption has to be \" + CreateNodeListOptions.SEND + \" when numberOfNodes and numberOfNodesToCreateOn are unequal\", ((createNodeListOption == CreateNodeListOptions.SEND) || (numberOfNodes.intValue() == numberOfNodesToCreateOn.intValue())));\n    \n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    List<String> createNodeList = new ArrayList<String>();\n    int i = 0;\n    for (String node : liveNodes) {\n      if (i++ < numberOfNodesToCreateOn) {\n        createNodeList.add(node);\n      }\n    }\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode, (createNodeListOption != CreateNodeListOptions.SEND_NULL)?createNodeList:null, (createNodeListOption != CreateNodeListOptions.DONT_SEND));\n    \n    waitForEmptyQueue(10000);\n    \n    assertEquals(collectionExceptedToBeCreated, underTest.lastProcessMessageResult);\n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          createNodeList);\n    }\n  }\n\n","sourceOld":"  protected void testTemplate(Integer numberOfNodes, Integer replicationFactor,\n      Integer numberOfSlices, Integer maxShardsPerNode,\n      boolean collectionExceptedToBeCreated) throws Exception {\n    Set<String> liveNodes = commonMocks(numberOfNodes);\n    \n    List<SubmitCapture> submitCaptures = null;\n    if (collectionExceptedToBeCreated) {\n      submitCaptures = mockShardHandlerForCreateJob(numberOfSlices,\n          replicationFactor);\n    }\n    \n    replay(workQueueMock);\n    replay(solrZkClientMock);\n    replay(zkStateReaderMock);\n    replay(clusterStateMock);\n    replay(shardHandlerMock);\n    startComponentUnderTest();\n    \n    issueCreateJob(numberOfSlices, replicationFactor, maxShardsPerNode);\n    \n    waitForEmptyQueue(10000);\n    \n    verify(shardHandlerMock);\n    \n    if (collectionExceptedToBeCreated) {\n      verifySubmitCaptures(submitCaptures, numberOfSlices, replicationFactor,\n          liveNodes);\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f0a4eeff354e8081247783f424a8e5a0fe106633":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["f0a4eeff354e8081247783f424a8e5a0fe106633"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"]},"commit2Childs":{"f0a4eeff354e8081247783f424a8e5a0fe106633":["042891089d57d0e6af18ea6cec15f9e9a7da7d25"],"9a57adc9bfabbc207ed17740dd86e0a2401ea385":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"042891089d57d0e6af18ea6cec15f9e9a7da7d25":["9a57adc9bfabbc207ed17740dd86e0a2401ea385"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0a4eeff354e8081247783f424a8e5a0fe106633"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}