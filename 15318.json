{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#uniqueStems(char[],int).mjava","commits":[{"id":"8f976917c54bb925b908d73fc4c2092e4abb8508","date":1315634439,"type":0,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#uniqueStems(char[],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<Stem> uniqueStems(char word[], int length) {\n    List<Stem> stems = new ArrayList<Stem>();\n    CharArraySet terms = new CharArraySet(dictionary.getVersion(), 8, false);\n    if (dictionary.lookupWord(word, 0, length) != null) {\n      stems.add(new Stem(word, length));\n      terms.add(word);\n    }\n    List<Stem> otherStems = stem(word, length, null, 0);\n    for (Stem s : otherStems) {\n      if (!terms.contains(s.stem)) {\n        stems.add(s);\n        terms.add(s.stem);\n      }\n    }\n    return stems;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77d6144bb77983c683128c11b708057809173cff","date":1317852535,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#uniqueStems(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<Stem> uniqueStems(char word[], int length) {\n    List<Stem> stems = new ArrayList<Stem>();\n    CharArraySet terms = new CharArraySet(dictionary.getVersion(), 8, dictionary.isIgnoreCase());\n    if (dictionary.lookupWord(word, 0, length) != null) {\n      stems.add(new Stem(word, length));\n      terms.add(word);\n    }\n    List<Stem> otherStems = stem(word, length, null, 0);\n    for (Stem s : otherStems) {\n      if (!terms.contains(s.stem)) {\n        stems.add(s);\n        terms.add(s.stem);\n      }\n    }\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<Stem> uniqueStems(char word[], int length) {\n    List<Stem> stems = new ArrayList<Stem>();\n    CharArraySet terms = new CharArraySet(dictionary.getVersion(), 8, false);\n    if (dictionary.lookupWord(word, 0, length) != null) {\n      stems.add(new Stem(word, length));\n      terms.add(word);\n    }\n    List<Stem> otherStems = stem(word, length, null, 0);\n    for (Stem s : otherStems) {\n      if (!terms.contains(s.stem)) {\n        stems.add(s);\n        terms.add(s.stem);\n      }\n    }\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#uniqueStems(char[],int).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/hunspell/HunspellStemmer#uniqueStems(char[],int).mjava","sourceNew":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<Stem> uniqueStems(char word[], int length) {\n    List<Stem> stems = new ArrayList<Stem>();\n    CharArraySet terms = new CharArraySet(dictionary.getVersion(), 8, dictionary.isIgnoreCase());\n    if (dictionary.lookupWord(word, 0, length) != null) {\n      stems.add(new Stem(word, length));\n      terms.add(word);\n    }\n    List<Stem> otherStems = stem(word, length, null, 0);\n    for (Stem s : otherStems) {\n      if (!terms.contains(s.stem)) {\n        stems.add(s);\n        terms.add(s.stem);\n      }\n    }\n    return stems;\n  }\n\n","sourceOld":"  /**\n   * Find the unique stem(s) of the provided word\n   * \n   * @param word Word to find the stems for\n   * @return List of stems for the word\n   */\n  public List<Stem> uniqueStems(char word[], int length) {\n    List<Stem> stems = new ArrayList<Stem>();\n    CharArraySet terms = new CharArraySet(dictionary.getVersion(), 8, dictionary.isIgnoreCase());\n    if (dictionary.lookupWord(word, 0, length) != null) {\n      stems.add(new Stem(word, length));\n      terms.add(word);\n    }\n    List<Stem> otherStems = stem(word, length, null, 0);\n    for (Stem s : otherStems) {\n      if (!terms.contains(s.stem)) {\n        stems.add(s);\n        terms.add(s.stem);\n      }\n    }\n    return stems;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["77d6144bb77983c683128c11b708057809173cff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8f976917c54bb925b908d73fc4c2092e4abb8508":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"77d6144bb77983c683128c11b708057809173cff":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8f976917c54bb925b908d73fc4c2092e4abb8508"],"8f976917c54bb925b908d73fc4c2092e4abb8508":["77d6144bb77983c683128c11b708057809173cff"],"77d6144bb77983c683128c11b708057809173cff":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}