{"path":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ctx.getDocList().matches());\n      l.add((long) ctx.getDocList().offset());\n      \n      Float maxScore = null;\n      if (ctx.wantsScores()) {\n        maxScore = ctx.getDocList().maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      boolean wantsScores = returnFields.wantsScore() && ctx.docs.hasScores();\n      List l = new ArrayList(3);\n      l.add((long) ctx.docs.matches());\n      l.add((long) ctx.docs.offset());\n      \n      Float maxScore = null;\n      if (wantsScores) {\n        maxScore = ctx.docs.maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"640ded7811e1b7d29236a5e2934ec3cd266a8199","date":1588973147,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List<Object> l = new ArrayList<>(4);\n      l.add((long) ctx.getDocList().matches());\n      l.add((long) ctx.getDocList().offset());\n      \n      Float maxScore = null;\n      if (ctx.wantsScores()) {\n        maxScore = ctx.getDocList().maxScore();\n      }\n      l.add(maxScore);\n      l.add(ctx.getDocList().hitCountRelation() == TotalHits.Relation.EQUAL_TO);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List l = new ArrayList(3);\n      l.add((long) ctx.getDocList().matches());\n      l.add((long) ctx.getDocList().offset());\n      \n      Float maxScore = null;\n      if (ctx.wantsScores()) {\n        maxScore = ctx.getDocList().maxScore();\n      }\n      l.add(maxScore);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#writeResults(ResultContext,JavaBinCodec).mjava","sourceNew":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List<Object> l = new ArrayList<>(4);\n      l.add( ctx.getDocList().matches());\n      l.add((long) ctx.getDocList().offset());\n      \n      Float maxScore = null;\n      if (ctx.wantsScores()) {\n        maxScore = ctx.getDocList().maxScore();\n      }\n      l.add(maxScore);\n      l.add(ctx.getDocList().hitCountRelation() == TotalHits.Relation.EQUAL_TO);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","sourceOld":"    public void writeResults(ResultContext ctx, JavaBinCodec codec) throws IOException {\n      codec.writeTag(JavaBinCodec.SOLRDOCLST);\n      List<Object> l = new ArrayList<>(4);\n      l.add((long) ctx.getDocList().matches());\n      l.add((long) ctx.getDocList().offset());\n      \n      Float maxScore = null;\n      if (ctx.wantsScores()) {\n        maxScore = ctx.getDocList().maxScore();\n      }\n      l.add(maxScore);\n      l.add(ctx.getDocList().hitCountRelation() == TotalHits.Relation.EQUAL_TO);\n      codec.writeArray(l);\n      \n      // this is a seprate function so that streaming responses can use just that part\n      writeResultsBody( ctx, codec );\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["c26f00b574427b55127e869b935845554afde1fa","19275ba31e621f6da1b83bf13af75233876fd3d4"],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"640ded7811e1b7d29236a5e2934ec3cd266a8199":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["640ded7811e1b7d29236a5e2934ec3cd266a8199"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}