{"path":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testNewFieldQuery().mjava","commits":[{"id":"51f51e7b8a13634e9783049218b3e19e860e203c","date":1297464713,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\", new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /** custom behavior, the synonyms are expanded, unless you use quote operator */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\", new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /** custom behavior, the synonyms are expanded, unless you use quote operator */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testNewFieldQuery().mjava","pathOld":"/dev/null","sourceNew":"  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\", new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /** custom behavior, the synonyms are expanded, unless you use quote operator */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testNewFieldQuery().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testNewFieldQuery().mjava","sourceNew":"  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\", new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /** custom behavior, the synonyms are expanded, unless you use quote operator */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","sourceOld":"  public void testNewFieldQuery() throws Exception {\n    /** ordinary behavior, synonyms form uncoordinated boolean query */\n    QueryParser dumb = new QueryParser(TEST_VERSION_CURRENT, \"field\", new Analyzer1());\n    BooleanQuery expanded = new BooleanQuery(true);\n    expanded.add(new TermQuery(new Term(\"field\", \"dogs\")), BooleanClause.Occur.SHOULD);\n    expanded.add(new TermQuery(new Term(\"field\", \"dog\")), BooleanClause.Occur.SHOULD);\n    assertEquals(expanded, dumb.parse(\"\\\"dogs\\\"\"));\n    /** even with the phrase operator the behavior is the same */\n    assertEquals(expanded, dumb.parse(\"dogs\"));\n    \n    /** custom behavior, the synonyms are expanded, unless you use quote operator */\n    QueryParser smart = new SmartQueryParser();\n    assertEquals(expanded, smart.parse(\"dogs\"));\n    \n    Query unexpanded = new TermQuery(new Term(\"field\", \"dogs\"));\n    assertEquals(unexpanded, smart.parse(\"\\\"dogs\\\"\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51f51e7b8a13634e9783049218b3e19e860e203c"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["51f51e7b8a13634e9783049218b3e19e860e203c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"51f51e7b8a13634e9783049218b3e19e860e203c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","51f51e7b8a13634e9783049218b3e19e860e203c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f1bdbf92da222965b46c0a942c3857ba56e5c638","51f51e7b8a13634e9783049218b3e19e860e203c","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"51f51e7b8a13634e9783049218b3e19e860e203c":["f1bdbf92da222965b46c0a942c3857ba56e5c638","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}