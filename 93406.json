{"path":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","commits":[{"id":"97f74f84954e9fefbac4cb38b9bf339e1757600d","date":1533750605,"type":0,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","pathOld":"/dev/null","sourceNew":"  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24491e12b0e85893eccafcbaef34f087deedb9f5","date":1541174782,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","sourceNew":"  /** create a query to find all polygons that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","sourceOld":"  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c286b0d8c507a88b289407e2fe161effa275c6b0","date":1562615977,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","sourceOld":"  /** create a query to find all polygons that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    if (queryRelation == QueryRelation.CONTAINS && polygons.length > 1) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i =0; i < polygons.length; i++) {\n        builder.add(newPolygonQuery(field, queryRelation, polygons[i]), BooleanClause.Occur.MUST);\n      }\n      return builder.build();\n    }\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    if (queryRelation == QueryRelation.CONTAINS && polygons.length > 1) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i =0; i < polygons.length; i++) {\n        builder.add(newPolygonQuery(field, queryRelation, polygons[i]), BooleanClause.Occur.MUST);\n      }\n      return builder.build();\n    }\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/LatLonShape#newPolygonQuery(String,QueryRelation,Polygon...).mjava","sourceNew":"  /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    if (queryRelation == QueryRelation.CONTAINS && polygons.length > 1) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i =0; i < polygons.length; i++) {\n        builder.add(newPolygonQuery(field, queryRelation, polygons[i]), BooleanClause.Occur.MUST);\n      }\n      return builder.build();\n    }\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","sourceOld":"  /** create a query to find all indexed geo shapes that intersect a provided polygon (or array of polygons)\n   *  note: does not support dateline crossing\n   **/\n  public static Query newPolygonQuery(String field, QueryRelation queryRelation, Polygon... polygons) {\n    if (queryRelation == QueryRelation.CONTAINS && polygons.length > 1) {\n      BooleanQuery.Builder builder = new BooleanQuery.Builder();\n      for (int i =0; i < polygons.length; i++) {\n        builder.add(newPolygonQuery(field, queryRelation, polygons[i]), BooleanClause.Occur.MUST);\n      }\n      return builder.build();\n    }\n    return new LatLonShapePolygonQuery(field, queryRelation, polygons);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["c286b0d8c507a88b289407e2fe161effa275c6b0","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"24491e12b0e85893eccafcbaef34f087deedb9f5":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["24491e12b0e85893eccafcbaef34f087deedb9f5"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"24491e12b0e85893eccafcbaef34f087deedb9f5":["c286b0d8c507a88b289407e2fe161effa275c6b0"],"97f74f84954e9fefbac4cb38b9bf339e1757600d":["24491e12b0e85893eccafcbaef34f087deedb9f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["97f74f84954e9fefbac4cb38b9bf339e1757600d"],"c286b0d8c507a88b289407e2fe161effa275c6b0":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}