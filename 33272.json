{"path":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","commits":[{"id":"9bc766d645fa848f86c381c7f6acf2c881c99399","date":1425549246,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      SolrClient client = new HttpSolrClient(runner.getBaseUrl().toString());\n\n      CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n      createReq.setCoreName(\"newcore\");\n      createReq.setConfigSet(\"minimal\");\n\n      client.request(createReq);\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e1bd264e4ce79d0cfaebe71f1cd0446f7c97f53b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      SolrClient client = new HttpSolrClient(runner.getBaseUrl().toString());\n\n      CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n      createReq.setCoreName(\"newcore\");\n      createReq.setConfigSet(\"minimal\");\n\n      client.request(createReq);\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"859081acf00749f5dd462772c571d611d4a4d2db","date":1459527719,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      SolrClient client = new HttpSolrClient(runner.getBaseUrl().toString());\n\n      CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n      createReq.setCoreName(\"newcore\");\n      createReq.setConfigSet(\"minimal\");\n\n      client.request(createReq);\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = new HttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","date":1477689538,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(StandardCharsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(StandardCharsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(Charsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e1bd264e4ce79d0cfaebe71f1cd0446f7c97f53b","date":1543892074,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","pathOld":"solr/core/src/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner#testPassSolrHomeToRunner().mjava","sourceNew":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(StandardCharsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    } finally {\n      runner.stop();\n    }\n\n  }\n\n","sourceOld":"  @Test\n  public void testPassSolrHomeToRunner() throws Exception {\n\n    // We set a non-standard coreRootDirectory, create a core, and check that it has been\n    // built in the correct place\n\n    Path solrHome = createTempDir();\n    Path coresDir = createTempDir(\"crazy_path_to_cores\");\n\n    Path configsets = Paths.get(TEST_HOME()).resolve(\"configsets\");\n\n    String solrxml\n        = \"<solr><str name=\\\"configSetBaseDir\\\">CONFIGSETS</str><str name=\\\"coreRootDirectory\\\">COREROOT</str></solr>\"\n        .replace(\"CONFIGSETS\", configsets.toString())\n        .replace(\"COREROOT\", coresDir.toString());\n    Files.write(solrHome.resolve(\"solr.xml\"), solrxml.getBytes(StandardCharsets.UTF_8));\n\n    JettyConfig jettyConfig = buildJettyConfig(\"/solr\");\n\n    JettySolrRunner runner = new JettySolrRunner(solrHome.toString(), new Properties(), jettyConfig);\n    try {\n      runner.start();\n\n      try (SolrClient client = getHttpSolrClient(runner.getBaseUrl().toString())) {\n        CoreAdminRequest.Create createReq = new CoreAdminRequest.Create();\n        createReq.setCoreName(\"newcore\");\n        createReq.setConfigSet(\"minimal\");\n\n        client.request(createReq);\n      }\n\n      assertTrue(Files.exists(coresDir.resolve(\"newcore\").resolve(\"core.properties\")));\n\n    }\n    finally {\n      runner.stop();\n    }\n\n  }\n\n","bugFix":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9bc766d645fa848f86c381c7f6acf2c881c99399"],"859081acf00749f5dd462772c571d611d4a4d2db":["9bc766d645fa848f86c381c7f6acf2c881c99399"],"e1bd264e4ce79d0cfaebe71f1cd0446f7c97f53b":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["859081acf00749f5dd462772c571d611d4a4d2db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["859081acf00749f5dd462772c571d611d4a4d2db","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"320888923ec13b91f53082558f01f4c9960dd226":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","c609c76a49c17e5c1c8a5d5cd2d685be9f306a47"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e1bd264e4ce79d0cfaebe71f1cd0446f7c97f53b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"859081acf00749f5dd462772c571d611d4a4d2db":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e1bd264e4ce79d0cfaebe71f1cd0446f7c97f53b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9bc766d645fa848f86c381c7f6acf2c881c99399"],"c609c76a49c17e5c1c8a5d5cd2d685be9f306a47":["e1bd264e4ce79d0cfaebe71f1cd0446f7c97f53b","320888923ec13b91f53082558f01f4c9960dd226"],"9bc766d645fa848f86c381c7f6acf2c881c99399":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","859081acf00749f5dd462772c571d611d4a4d2db"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["c609c76a49c17e5c1c8a5d5cd2d685be9f306a47","320888923ec13b91f53082558f01f4c9960dd226"],"320888923ec13b91f53082558f01f4c9960dd226":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}