{"path":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","sourceNew":"  /**\n   * Returns the set of reachable accept states.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getAcceptStates() {\n    expandSingleton();\n    HashSet<State> accepts = new HashSet<State>();\n    HashSet<State> visited = new HashSet<State>();\n    LinkedList<State> worklist = new LinkedList<State>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      if (s.accept) accepts.add(s);\n      for (Transition t : s.getTransitions())\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return accepts;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of reachable accept states.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getAcceptStates() {\n    expandSingleton();\n    HashSet<State> accepts = new HashSet<State>();\n    HashSet<State> visited = new HashSet<State>();\n    LinkedList<State> worklist = new LinkedList<State>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      if (s.accept) accepts.add(s);\n      for (Transition t : s.getTransitions())\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return accepts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","sourceNew":"  /**\n   * Returns the set of reachable accept states.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getAcceptStates() {\n    expandSingleton();\n    HashSet<State> accepts = new HashSet<>();\n    HashSet<State> visited = new HashSet<>();\n    LinkedList<State> worklist = new LinkedList<>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      if (s.accept) accepts.add(s);\n      for (Transition t : s.getTransitions())\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return accepts;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of reachable accept states.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getAcceptStates() {\n    expandSingleton();\n    HashSet<State> accepts = new HashSet<State>();\n    HashSet<State> visited = new HashSet<State>();\n    LinkedList<State> worklist = new LinkedList<State>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      if (s.accept) accepts.add(s);\n      for (Transition t : s.getTransitions())\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return accepts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns the set of reachable accept states.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getAcceptStates() {\n    expandSingleton();\n    HashSet<State> accepts = new HashSet<>();\n    HashSet<State> visited = new HashSet<>();\n    LinkedList<State> worklist = new LinkedList<>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      if (s.accept) accepts.add(s);\n      for (Transition t : s.getTransitions())\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return accepts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/LightAutomaton#getAcceptStates().mjava","sourceNew":"  public Set<Integer> getAcceptStates() {\n    return finalStates;\n  }\n\n","sourceOld":"  public Set<Integer> getAcceptStates() {\n    return finalStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bab620c8ab32bb77a62753eca4afb8e47efa87c","date":1402997861,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","sourceNew":"  /** Returns accept states. */\n  public Set<Integer> getAcceptStates() {\n    return acceptStates;\n  }\n\n","sourceOld":"  public Set<Integer> getAcceptStates() {\n    return finalStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0","date":1403106109,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","sourceNew":"  /** Returns accept states.  If the bit is set then that state is an accept state. */\n  FixedBitSet getAcceptStates() {\n    return isAccept;\n  }\n\n","sourceOld":"  /** Returns accept states. */\n  public Set<Integer> getAcceptStates() {\n    return acceptStates;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6950511e8508a30eaacc2f8469121cf32be2ef6d","date":1403109868,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","sourceNew":"  /** Returns accept states.  If the bit is set then that state is an accept state. */\n  BitSet getAcceptStates() {\n    return isAccept;\n  }\n\n","sourceOld":"  /** Returns accept states.  If the bit is set then that state is an accept state. */\n  FixedBitSet getAcceptStates() {\n    return isAccept;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/automaton/Automaton#getAcceptStates().mjava","sourceNew":"  /** Returns accept states.  If the bit is set then that state is an accept state. */\n  BitSet getAcceptStates() {\n    return isAccept;\n  }\n\n","sourceOld":"  /**\n   * Returns the set of reachable accept states.\n   * \n   * @return set of {@link State} objects\n   */\n  public Set<State> getAcceptStates() {\n    expandSingleton();\n    HashSet<State> accepts = new HashSet<>();\n    HashSet<State> visited = new HashSet<>();\n    LinkedList<State> worklist = new LinkedList<>();\n    worklist.add(initial);\n    visited.add(initial);\n    while (worklist.size() > 0) {\n      State s = worklist.removeFirst();\n      if (s.accept) accepts.add(s);\n      for (Transition t : s.getTransitions())\n        if (!visited.contains(t.to)) {\n          visited.add(t.to);\n          worklist.add(t.to);\n        }\n    }\n    return accepts;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"5c84485629d80d203608e8975a1139de9933cc38":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","6950511e8508a30eaacc2f8469121cf32be2ef6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"a546f0e920177e9588c7ac5e8c46ce22c43f8ee0":["6950511e8508a30eaacc2f8469121cf32be2ef6d"],"6bab620c8ab32bb77a62753eca4afb8e47efa87c":["a546f0e920177e9588c7ac5e8c46ce22c43f8ee0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["6bab620c8ab32bb77a62753eca4afb8e47efa87c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"6950511e8508a30eaacc2f8469121cf32be2ef6d":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}