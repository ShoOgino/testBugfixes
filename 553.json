{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","commits":[{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/block/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8","date":1373996650,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b, false), rightEnum.seekExact(b, false));\n      assertEquals(leftEnum.seekExact(b, true), rightEnum.seekExact(b, true));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b, false);\n      rightStatus = rightEnum.seekCeil(b, false);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b, true);\n      rightStatus = rightEnum.seekCeil(b, true);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<BytesRef>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<BytesRef>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":6,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":6,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene50/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat3#assertTermsSeeking(Terms,Terms).mjava","sourceNew":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","sourceOld":"  private void assertTermsSeeking(Terms leftTerms, Terms rightTerms) throws Exception {\n    TermsEnum leftEnum = null;\n    TermsEnum rightEnum = null;\n    \n    // just an upper bound\n    int numTests = atLeast(20);\n    Random random = random();\n    \n    // collect this number of terms from the left side\n    HashSet<BytesRef> tests = new HashSet<>();\n    int numPasses = 0;\n    while (numPasses < 10 && tests.size() < numTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      BytesRef term = null;\n      while ((term = leftEnum.next()) != null) {\n        int code = random.nextInt(10);\n        if (code == 0) {\n          // the term\n          tests.add(BytesRef.deepCopyOf(term));\n        } else if (code == 1) {\n          // truncated subsequence of term\n          term = BytesRef.deepCopyOf(term);\n          if (term.length > 0) {\n            // truncate it\n            term.length = random.nextInt(term.length);\n          }\n        } else if (code == 2) {\n          // term, but ensure a non-zero offset\n          byte newbytes[] = new byte[term.length+5];\n          System.arraycopy(term.bytes, term.offset, newbytes, 5, term.length);\n          tests.add(new BytesRef(newbytes, 5, term.length));\n        }\n      }\n      numPasses++;\n    }\n    \n    ArrayList<BytesRef> shuffledTests = new ArrayList<>(tests);\n    Collections.shuffle(shuffledTests, random);\n    \n    for (BytesRef b : shuffledTests) {\n      leftEnum = leftTerms.iterator(leftEnum);\n      rightEnum = rightTerms.iterator(rightEnum);\n      \n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      assertEquals(leftEnum.seekExact(b), rightEnum.seekExact(b));\n      \n      SeekStatus leftStatus;\n      SeekStatus rightStatus;\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n      \n      leftStatus = leftEnum.seekCeil(b);\n      rightStatus = rightEnum.seekCeil(b);\n      assertEquals(leftStatus, rightStatus);\n      if (leftStatus != SeekStatus.END) {\n        assertEquals(leftEnum.term(), rightEnum.term());\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"99eb4a732d1a908f4636ace52928876136bf1896":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","99eb4a732d1a908f4636ace52928876136bf1896"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","db4fdbf3d262768eabc027cd8321edca0cd11fa8","eee5f2a24465d2c9a5f86ab84b7c35041a30fda8"],"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eee5f2a24465d2c9a5f86ab84b7c35041a30fda8":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}