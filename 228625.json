{"path":"lucene/sandbox/src/java/org/apache/lucene/geo/XYRectangle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","commits":[{"id":"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3","date":1576052211,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/XYRectangle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // Short cut, lines and points cannot contain a bbox\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Bounding boxes disjoint?\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Points belong to the shape so if points are inside the rectangle then it cannot be within.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    // If any of the edges intersects an edge belonging to the shape then it cannot be within.\n    WithinRelation relation = WithinRelation.DISJOINT;\n    if (edgesIntersect(ax, ay, bx, by) == true) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (edgesIntersect(bx, by, cx, cy) == true) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (edgesIntersect(cx, cy, ax, ay) == true) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    // If any of the rectangle edges crosses a triangle edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, this.minX, this.minY, ax, ay, bx, by, cx, cy)) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","date":1576073026,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/geo/XYRectangle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // Short cut, lines and points cannot contain a bbox\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Bounding boxes disjoint?\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Points belong to the shape so if points are inside the rectangle then it cannot be within.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    // If any of the edges intersects an edge belonging to the shape then it cannot be within.\n    WithinRelation relation = WithinRelation.DISJOINT;\n    if (edgesIntersect(ax, ay, bx, by) == true) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (edgesIntersect(bx, by, cx, cy) == true) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (edgesIntersect(cx, cy, ax, ay) == true) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    // If any of the rectangle edges crosses a triangle edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, this.minX, this.minY, ax, ay, bx, by, cx, cy)) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/XYRectangle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/XYRectangle2D#withinTriangle(double,double,double,double,double,double,boolean,double,double,boolean,double,double,boolean).mjava","sourceNew":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // Short cut, lines and points cannot contain a bbox\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Bounding boxes disjoint?\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Points belong to the shape so if points are inside the rectangle then it cannot be within.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    // If any of the edges intersects an edge belonging to the shape then it cannot be within.\n    WithinRelation relation = WithinRelation.DISJOINT;\n    if (edgesIntersect(ax, ay, bx, by) == true) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (edgesIntersect(bx, by, cx, cy) == true) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (edgesIntersect(cx, cy, ax, ay) == true) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    // If any of the rectangle edges crosses a triangle edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, this.minX, this.minY, ax, ay, bx, by, cx, cy)) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":"  @Override\n  public WithinRelation withinTriangle(double minX, double maxX, double minY, double maxY,\n                                       double ax, double ay, boolean ab, double bx, double by, boolean bc, double cx, double cy, boolean ca) {\n    // Short cut, lines and points cannot contain a bbox\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Bounding boxes disjoint?\n    if (Component2D.disjoint(this.minX, this.maxX, this.minY, this.maxY, minX, maxX, minY, maxY)) {\n      return WithinRelation.DISJOINT;\n    }\n\n    // Points belong to the shape so if points are inside the rectangle then it cannot be within.\n    if (contains(ax, ay) || contains(bx, by) || contains(cx, cy)) {\n      return WithinRelation.NOTWITHIN;\n    }\n    // If any of the edges intersects an edge belonging to the shape then it cannot be within.\n    WithinRelation relation = WithinRelation.DISJOINT;\n    if (edgesIntersect(ax, ay, bx, by) == true) {\n      if (ab == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    if (edgesIntersect(bx, by, cx, cy) == true) {\n      if (bc == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (edgesIntersect(cx, cy, ax, ay) == true) {\n      if (ca == true) {\n        return WithinRelation.NOTWITHIN;\n      } else {\n        relation = WithinRelation.CANDIDATE;\n      }\n    }\n    // If any of the rectangle edges crosses a triangle edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == WithinRelation.CANDIDATE) {\n      return WithinRelation.CANDIDATE;\n    }\n    // Check if shape is within the triangle\n    if (Component2D.pointInTriangle(minX, maxX, minY, maxY, this.minX, this.minY, ax, ay, bx, by, cx, cy)) {\n      return WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3f2d8fb73c718c3fc5600f453cc514f18ae1b8c3":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6c6b7e01cb749c3b01e226e06085dfb1d9ed8eab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}