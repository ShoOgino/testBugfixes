{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFileStreamDirectoryCrawl().mjava","commits":[{"id":"4e7e81cd6c3e108547bc12beb23ba00ae90448b9","date":1564060380,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFileStreamDirectoryCrawl().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testFileStreamDirectoryCrawl() throws Exception {\n    final String fileStream = \"files(\\\"directory1\\\")\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", fileStream);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+FILESTREAM_COLLECTION;\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(8, tuples.size());\n\n    for (int i = 0; i < 4; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"secondLevel1.txt line \" + String.valueOf(i+1), t.get(\"line\"));\n      assertEquals(\"directory1/secondLevel1.txt\", t.get(\"file\"));\n    }\n\n    for (int i = 4; i < 8; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"secondLevel2.txt line \" + String.valueOf(i - 3), t.get(\"line\"));\n      assertEquals(\"directory1/secondLevel2.txt\", t.get(\"file\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa57c615885d274eb8087f89b6a9e1f84e655a74","date":1565267901,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testCatStreamDirectoryCrawl().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest#testFileStreamDirectoryCrawl().mjava","sourceNew":"  @Test\n  public void testCatStreamDirectoryCrawl() throws Exception {\n    final String catStream = \"cat(\\\"directory1\\\")\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", catStream);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+FILESTREAM_COLLECTION;\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(8, tuples.size());\n\n    final String expectedSecondLevel1Path = \"directory1\" + File.separator + \"secondLevel1.txt\";\n    for (int i = 0; i < 4; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"secondLevel1.txt line \" + String.valueOf(i+1), t.get(\"line\"));\n      assertEquals(expectedSecondLevel1Path, t.get(\"file\"));\n    }\n\n    final String expectedSecondLevel2Path = \"directory1\" + File.separator + \"secondLevel2.txt\";\n    for (int i = 4; i < 8; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"secondLevel2.txt line \" + String.valueOf(i - 3), t.get(\"line\"));\n      assertEquals(expectedSecondLevel2Path, t.get(\"file\"));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testFileStreamDirectoryCrawl() throws Exception {\n    final String fileStream = \"files(\\\"directory1\\\")\";\n    ModifiableSolrParams paramsLoc = new ModifiableSolrParams();\n    paramsLoc.set(\"expr\", fileStream);\n    paramsLoc.set(\"qt\", \"/stream\");\n    String url = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+FILESTREAM_COLLECTION;\n\n    SolrStream solrStream = new SolrStream(url, paramsLoc);\n\n    StreamContext context = new StreamContext();\n    solrStream.setStreamContext(context);\n    List<Tuple> tuples = getTuples(solrStream);\n    assertEquals(8, tuples.size());\n\n    for (int i = 0; i < 4; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"secondLevel1.txt line \" + String.valueOf(i+1), t.get(\"line\"));\n      assertEquals(\"directory1/secondLevel1.txt\", t.get(\"file\"));\n    }\n\n    for (int i = 4; i < 8; i++) {\n      Tuple t = tuples.get(i);\n      assertEquals(\"secondLevel2.txt line \" + String.valueOf(i - 3), t.get(\"line\"));\n      assertEquals(\"directory1/secondLevel2.txt\", t.get(\"file\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa57c615885d274eb8087f89b6a9e1f84e655a74"]},"commit2Childs":{"4e7e81cd6c3e108547bc12beb23ba00ae90448b9":["fa57c615885d274eb8087f89b6a9e1f84e655a74"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e7e81cd6c3e108547bc12beb23ba00ae90448b9"],"fa57c615885d274eb8087f89b6a9e1f84e655a74":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}