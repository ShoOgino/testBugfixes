{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","commits":[{"id":"119f84a673d2ea32c0ec18c36987696dd31aa174","date":1528551316,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"/dev/null","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    JSONWriter.write (writer, true, JSONWriter.JSON_NL_MAP, val);\n\n    assertEquals(2l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    JSONWriter.write (writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    assertEquals(2l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    JSONWriter.write (writer, true, JSONWriter.JSON_NL_MAP, val);\n\n    assertEquals(2l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1a22c4da9c47def40b5b95474f637bb7b8da392","date":1528603500,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write (writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    JSONWriter.write (writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    assertEquals(2l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(Utils.fromJSONString(writer.toString()), true,\"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"/dev/null","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write (writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"/dev/null","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write (writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","date":1533364463,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write (writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16a22f8085bb46850c91784e94f7714345011404","date":1533741843,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/PULL\"));\n    assertEquals(0l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/TLOG\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a27e78e3d29dee02bab19ded25336471e96882","date":1539677468,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testViolationOutput.json\"))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n\n    String dataproviderdata = \"{\" +\n        \"  'liveNodes': [\" +\n        \"    'node1:8983',\" +\n        \"    'node2:8984',\" +\n        \"    'node3:8985'\" +\n        \"  ],\" +\n        \"  'replicaInfo': {\" +\n        \"    'node1:8983': {\" +\n        \"      'c1': {\" +\n        \"        's1': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ],\" +\n        \"        's2': [\" +\n        \"          {'r1': {'type': 'NRT'}},\" +\n        \"          {'r2': {'type': 'NRT'}}\" +\n        \"        ]\" +\n        \"      }\" +\n        \"    }\" +\n        \"  },\" +\n        \"  'nodeValues': {\" +\n        \"    'node1:8983': {\" +\n        \"      'cores': 4,\" +\n        \"      'freedisk': 334,\" +\n        \"      'port': 8983\" +\n        \"    },\" +\n        \"    'node2:8984': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1000,\" +\n        \"      'port': 8984\" +\n        \"    },\" +\n        \"    'node3:8985': {\" +\n        \"      'cores': 0,\" +\n        \"      'freedisk': 1500,\" +\n        \"      'port': 8985\" +\n        \"    }\" +\n        \"  }\" +\n        \"}\";\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) Utils.fromJSONString(dataproviderdata))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99","date":1571689506,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testViolationOutput.json\"))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    \n    if (random().nextBoolean()) {\n      new SolrJSONWriter(writer)\n          .writeObj(val)\n          .close();\n    } else {\n      JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n    }\n    \n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testViolationOutput.json\"))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    new SolrJSONWriter(writer)\n        .writeObj(val)\n        .close();\n    JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n\n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testViolationOutput.json\"))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    \n    if (random().nextBoolean()) {\n      new SolrJSONWriter(writer)\n          .writeObj(val)\n          .close();\n    } else {\n      JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n    }\n    \n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testViolationOutput.json\"))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    \n    if (random().nextBoolean()) {\n      new SolrJSONWriter(writer)\n          .writeObj(val)\n          .close();\n    } else {\n      JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n    }\n    \n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testViolationOutput().mjava","sourceNew":null,"sourceOld":"  public void testViolationOutput() throws IOException {\n    String autoScalingjson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { 'maximize': 'freedisk', 'precision': 50},\" +\n        \"    { 'minimize': 'cores', 'precision': 3}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { 'replica': 0, shard:'#EACH', port : '8983'}\" +\n        \"  ]\" +\n        \"}\";\n\n    @SuppressWarnings({\"unchecked\"})\n    AutoScalingConfig cfg = new AutoScalingConfig((Map<String, Object>) Utils.fromJSONString(autoScalingjson));\n    List<Violation> violations = cfg.getPolicy().createSession(cloudManagerWithData((Map) loadFromResource(\"testViolationOutput.json\"))).getViolations();\n    StringWriter writer = new StringWriter();\n    NamedList<Object> val = new NamedList<>();\n    val.add(\"violations\", violations);\n    \n    if (random().nextBoolean()) {\n      new SolrJSONWriter(writer)\n          .writeObj(val)\n          .close();\n    } else {\n      JSONWriter.write(writer, true, JsonTextWriter.JSON_NL_MAP, val);\n    }\n    \n    Object root = Utils.fromJSONString(writer.toString());\n    assertEquals(2l,\n        Utils.getObjectByPath(root, true, \"violations[0]/violation/replica/NRT\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"3f504512a03d978990cbff30db0522b354e846db":["9ba1b632c041956c93c41aa1143d16a567014891"],"26dad91f15019714a045b4d8c5f40162b2058b54":["119f84a673d2ea32c0ec18c36987696dd31aa174"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["f5a27e78e3d29dee02bab19ded25336471e96882"],"16a22f8085bb46850c91784e94f7714345011404":["cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb"],"c1a22c4da9c47def40b5b95474f637bb7b8da392":["26dad91f15019714a045b4d8c5f40162b2058b54"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1a22c4da9c47def40b5b95474f637bb7b8da392"],"119f84a673d2ea32c0ec18c36987696dd31aa174":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["c1a22c4da9c47def40b5b95474f637bb7b8da392"],"f5a27e78e3d29dee02bab19ded25336471e96882":["16a22f8085bb46850c91784e94f7714345011404"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c1a22c4da9c47def40b5b95474f637bb7b8da392"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"26dad91f15019714a045b4d8c5f40162b2058b54":["c1a22c4da9c47def40b5b95474f637bb7b8da392"],"61f55b4999c3f858f4f4acc9c6dc57af2c1acf99":["9ba1b632c041956c93c41aa1143d16a567014891"],"16a22f8085bb46850c91784e94f7714345011404":["f5a27e78e3d29dee02bab19ded25336471e96882"],"c1a22c4da9c47def40b5b95474f637bb7b8da392":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"119f84a673d2ea32c0ec18c36987696dd31aa174":["26dad91f15019714a045b4d8c5f40162b2058b54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","119f84a673d2ea32c0ec18c36987696dd31aa174","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cb4df98176b6dd0ae6ceba71eaa59c9bcb8fe2eb":["16a22f8085bb46850c91784e94f7714345011404"],"f5a27e78e3d29dee02bab19ded25336471e96882":["61f55b4999c3f858f4f4acc9c6dc57af2c1acf99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}