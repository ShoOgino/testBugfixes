{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","commits":[{"id":"950b7a6881d14da782b60444c11295e3ec50d41a","date":1458379095,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    return new OfflinePointReader(tempDir, out.getName(), packedBytesLength, start, length, longOrds);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start) throws IOException {\n    assert closed;\n    return new OfflinePointReader(tempDir, out.getName(), packedBytesLength, start, count-start, longOrds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416f9e28900210be57b69bc12e2954fb98ed7ebe","date":1458479803,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    return new OfflinePointReader(tempDir, out.getName(), packedBytesLength, start, length, longOrds, singleValuePerDoc);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    return new OfflinePointReader(tempDir, out.getName(), packedBytesLength, start, length, longOrds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40","date":1458553787,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    assert expectedCount == 0 || count == expectedCount;\n    return new OfflinePointReader(tempDir, out.getName(), packedBytesLength, start, length, longOrds, singleValuePerDoc);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    return new OfflinePointReader(tempDir, out.getName(), packedBytesLength, start, length, longOrds, singleValuePerDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    assert expectedCount == 0 || count == expectedCount;\n    return new OfflinePointReader(tempDir, name, packedBytesLength, start, length, longOrds, singleValuePerDoc);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    assert expectedCount == 0 || count == expectedCount;\n    return new OfflinePointReader(tempDir, out.getName(), packedBytesLength, start, length, longOrds, singleValuePerDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"78bdc7d6906146edb12a1a6c1f765ba680ed5124","date":1549523533,"type":3,"author":"iverase","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    byte[] buffer  = new byte[packedBytesLength + Integer.BYTES];\n    return getReader(start, length,  buffer);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    assert closed;\n    assert start + length <= count: \"start=\" + start + \" length=\" + length + \" count=\" + count;\n    assert expectedCount == 0 || count == expectedCount;\n    return new OfflinePointReader(tempDir, name, packedBytesLength, start, length, longOrds, singleValuePerDoc);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/OfflinePointWriter#getReader(long,long).mjava","sourceNew":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    byte[] buffer  = new byte[config.bytesPerDoc];\n    return getReader(start, length,  buffer);\n  }\n\n","sourceOld":"  @Override\n  public PointReader getReader(long start, long length) throws IOException {\n    byte[] buffer  = new byte[packedBytesLength + Integer.BYTES];\n    return getReader(start, length,  buffer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["ee52259641568741fbc6ecc51284431e2a36475c"],"ee52259641568741fbc6ecc51284431e2a36475c":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["950b7a6881d14da782b60444c11295e3ec50d41a"],"950b7a6881d14da782b60444c11295e3ec50d41a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40":["ee52259641568741fbc6ecc51284431e2a36475c"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["950b7a6881d14da782b60444c11295e3ec50d41a"],"78bdc7d6906146edb12a1a6c1f765ba680ed5124":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"ee52259641568741fbc6ecc51284431e2a36475c":["78bdc7d6906146edb12a1a6c1f765ba680ed5124"],"416f9e28900210be57b69bc12e2954fb98ed7ebe":["51b2a4c0f6c28a8ba7c41911b421cea2ede8ef40"],"950b7a6881d14da782b60444c11295e3ec50d41a":["416f9e28900210be57b69bc12e2954fb98ed7ebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}