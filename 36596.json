{"path":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],int[],Similarity,byte[]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],int[],Similarity,byte[]).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],int[],Similarity,byte[]).mjava","sourceNew":"  PhraseScorer(Weight weight, TermPositions[] tps, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","sourceOld":"  PhraseScorer(Weight weight, TermPositions[] tps, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#PhraseScorer(Weight,TermPositions[],int[],Similarity,byte[]).mjava","sourceNew":null,"sourceOld":"  PhraseScorer(Weight weight, TermPositions[] tps, int[] offsets,\n      Similarity similarity, byte[] norms) {\n    super(similarity);\n    this.norms = norms;\n    this.weight = weight;\n    this.value = weight.getValue();\n\n    // convert tps to a list of phrase positions.\n    // note: phrase-position differs from term-position in that its position\n    // reflects the phrase offset: pp.pos = tp.pos - offset.\n    // this allows to easily identify a matching (exact) phrase \n    // when all PhrasePositions have exactly the same position.\n    for (int i = 0; i < tps.length; i++) {\n      PhrasePositions pp = new PhrasePositions(tps[i], offsets[i]);\n      if (last != null) {\t\t\t  // add next to end of list\n        last.next = pp;\n      } else {\n        first = pp;\n      }\n      last = pp;\n    }\n\n    pq = new PhraseQueue(tps.length);             // construct empty pq\n    first.doc = -1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}