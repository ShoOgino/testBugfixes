{"path":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","commits":[{"id":"c495edcca4d0bc51bf62d9be3527c87bf9b44ded","date":1498673617,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,\n                                      PivotNode<?> childPivot,\n                                      ExpressionFactory expressionFactory,\n                                      Map<String, AnalyticsExpression> expressions) throws SolrException {\n    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have a name.\");\n    }\n    if (pivotRequest.expression == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have an expression to facet over, '\" + pivotRequest.name + \"' does not.\");\n    }\n    \n    // The second parameter must be a mapping expression\n    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);\n    if (!expr.getExpressionType().isUnreduced()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be mapping expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' contains a reduction: \" + pivotRequest.expression);\n    }\n    if (!(expr instanceof StringValueStream)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be castable to string expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' is not: '\" + pivotRequest.expression);\n    }\n    \n    PivotNode<?> pivot;\n    if (childPivot == null) {\n      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);\n    } else {\n      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);\n    }\n    \n    // Check if the pivot is sorted\n    if (pivotRequest.sort != null) {\n      pivot.setSort(constructSort(pivotRequest.sort, expressions));\n    }\n    return pivot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,\n                                      PivotNode<?> childPivot,\n                                      ExpressionFactory expressionFactory,\n                                      Map<String, AnalyticsExpression> expressions) throws SolrException {\n    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have a name.\");\n    }\n    if (pivotRequest.expression == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have an expression to facet over, '\" + pivotRequest.name + \"' does not.\");\n    }\n    \n    // The second parameter must be a mapping expression\n    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);\n    if (!expr.getExpressionType().isUnreduced()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be mapping expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' contains a reduction: \" + pivotRequest.expression);\n    }\n    if (!(expr instanceof StringValueStream)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be castable to string expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' is not: '\" + pivotRequest.expression);\n    }\n    \n    PivotNode<?> pivot;\n    if (childPivot == null) {\n      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);\n    } else {\n      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);\n    }\n    \n    // Check if the pivot is sorted\n    if (pivotRequest.sort != null) {\n      pivot.setSort(constructSort(pivotRequest.sort, expressions));\n    }\n    return pivot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30c8e5574b55d57947e989443dfde611646530ee","date":1499131153,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,\n                                      PivotNode<?> childPivot,\n                                      ExpressionFactory expressionFactory,\n                                      Map<String, AnalyticsExpression> expressions) throws SolrException {\n    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have a name.\");\n    }\n    if (pivotRequest.expression == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have an expression to facet over, '\" + pivotRequest.name + \"' does not.\");\n    }\n    \n    // The second parameter must be a mapping expression\n    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);\n    if (!expr.getExpressionType().isUnreduced()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be mapping expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' contains a reduction: \" + pivotRequest.expression);\n    }\n    if (!(expr instanceof StringValueStream)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be castable to string expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' is not: '\" + pivotRequest.expression);\n    }\n    \n    PivotNode<?> pivot;\n    if (childPivot == null) {\n      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);\n    } else {\n      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);\n    }\n    \n    // Check if the pivot is sorted\n    if (pivotRequest.sort != null) {\n      pivot.setSort(constructSort(pivotRequest.sort, expressions));\n    }\n    return pivot;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,\n                                      PivotNode<?> childPivot,\n                                      ExpressionFactory expressionFactory,\n                                      Map<String, AnalyticsExpression> expressions) throws SolrException {\n    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have a name.\");\n    }\n    if (pivotRequest.expression == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have an expression to facet over, '\" + pivotRequest.name + \"' does not.\");\n    }\n\n    // The second parameter must be a mapping expression\n    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);\n    if (!expr.getExpressionType().isUnreduced()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be mapping expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' contains a reduction: \" + pivotRequest.expression);\n    }\n    if (!(expr instanceof StringValueStream)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be castable to string expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' is not: '\" + pivotRequest.expression);\n    }\n\n    PivotNode<?> pivot;\n    if (childPivot == null) {\n      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);\n    } else {\n      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);\n    }\n\n    // Check if the pivot is sorted\n    if (pivotRequest.sort != null) {\n      pivot.setSort(constructSort(pivotRequest.sort, expressions));\n    }\n    return pivot;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,\n                                      PivotNode<?> childPivot,\n                                      ExpressionFactory expressionFactory,\n                                      Map<String, AnalyticsExpression> expressions) throws SolrException {\n    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have a name.\");\n    }\n    if (pivotRequest.expression == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have an expression to facet over, '\" + pivotRequest.name + \"' does not.\");\n    }\n    \n    // The second parameter must be a mapping expression\n    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);\n    if (!expr.getExpressionType().isUnreduced()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be mapping expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' contains a reduction: \" + pivotRequest.expression);\n    }\n    if (!(expr instanceof StringValueStream)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be castable to string expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' is not: '\" + pivotRequest.expression);\n    }\n    \n    PivotNode<?> pivot;\n    if (childPivot == null) {\n      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);\n    } else {\n      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);\n    }\n    \n    // Check if the pivot is sorted\n    if (pivotRequest.sort != null) {\n      pivot.setSort(constructSort(pivotRequest.sort, expressions));\n    }\n    return pivot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","pathOld":"solr/contrib/analytics/src/java/org/apache/solr/analytics/AnalyticsRequestParser#constructPivot(AnalyticsPivotRequest,PivotNode[#],ExpressionFactory,Map[String,AnalyticsExpression]).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,\n                                      PivotNode<?> childPivot,\n                                      ExpressionFactory expressionFactory,\n                                      Map<String, AnalyticsExpression> expressions) throws SolrException {\n    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have a name.\");\n    }\n    if (pivotRequest.expression == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have an expression to facet over, '\" + pivotRequest.name + \"' does not.\");\n    }\n\n    // The second parameter must be a mapping expression\n    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);\n    if (!expr.getExpressionType().isUnreduced()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be mapping expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' contains a reduction: \" + pivotRequest.expression);\n    }\n    if (!(expr instanceof StringValueStream)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be castable to string expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' is not: '\" + pivotRequest.expression);\n    }\n\n    PivotNode<?> pivot;\n    if (childPivot == null) {\n      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);\n    } else {\n      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);\n    }\n\n    // Check if the pivot is sorted\n    if (pivotRequest.sort != null) {\n      pivot.setSort(constructSort(pivotRequest.sort, expressions));\n    }\n    return pivot;\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  private static PivotNode<?> constructPivot(AnalyticsPivotRequest pivotRequest,\n                                      PivotNode<?> childPivot,\n                                      ExpressionFactory expressionFactory,\n                                      Map<String, AnalyticsExpression> expressions) throws SolrException {\n    if (pivotRequest.name == null || pivotRequest.name.length() == 0) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have a name.\");\n    }\n    if (pivotRequest.expression == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivots must have an expression to facet over, '\" + pivotRequest.name + \"' does not.\");\n    }\n    \n    // The second parameter must be a mapping expression\n    AnalyticsValueStream expr = expressionFactory.createExpression(pivotRequest.expression);\n    if (!expr.getExpressionType().isUnreduced()) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be mapping expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' contains a reduction: \" + pivotRequest.expression);\n    }\n    if (!(expr instanceof StringValueStream)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Pivot expressions must be castable to string expressions, \"\n          + \"the following expression in pivot '\" + pivotRequest.name + \"' is not: '\" + pivotRequest.expression);\n    }\n    \n    PivotNode<?> pivot;\n    if (childPivot == null) {\n      pivot = new PivotNode.PivotLeaf(pivotRequest.name, (StringValueStream)expr);\n    } else {\n      pivot = new PivotNode.PivotBranch(pivotRequest.name, (StringValueStream)expr, childPivot);\n    }\n    \n    // Check if the pivot is sorted\n    if (pivotRequest.sort != null) {\n      pivot.setSort(constructSort(pivotRequest.sort, expressions));\n    }\n    return pivot;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30c8e5574b55d57947e989443dfde611646530ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28288370235ed02234a64753cdbf0c6ec096304a"],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c495edcca4d0bc51bf62d9be3527c87bf9b44ded"],"f8061ddd97f3352007d927dae445884a6f3d857b":["28288370235ed02234a64753cdbf0c6ec096304a","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["30c8e5574b55d57947e989443dfde611646530ee","c495edcca4d0bc51bf62d9be3527c87bf9b44ded","28288370235ed02234a64753cdbf0c6ec096304a"],"30c8e5574b55d57947e989443dfde611646530ee":[],"c495edcca4d0bc51bf62d9be3527c87bf9b44ded":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["1e4e64b7199d2f2a17be7f3926c7532553910dce","30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["30c8e5574b55d57947e989443dfde611646530ee","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}