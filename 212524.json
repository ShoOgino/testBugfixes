{"path":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","commits":[{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a fields code is\n   * write-once. If the fields codec is already set this method will throw an\n   * {@link IllegalArgumentException}\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a fields code is\n   * write-once. If the fields codec is already set this method will throw an\n   * {@link IllegalArgumentException}\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c2a58aba04c7a3c754fc5bc2d5c43f589741a05","date":1290194447,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","sourceNew":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a field's codec is\n   * write-once. If the field's codec is already set this method will throw an\n   * {@link IllegalArgumentException}.\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a fields code is\n   * write-once. If the fields codec is already set this method will throw an\n   * {@link IllegalArgumentException}\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","sourceNew":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a field's codec is\n   * write-once. If the field's codec is already set this method will throw an\n   * {@link IllegalArgumentException}.\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","sourceOld":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a fields code is\n   * write-once. If the fields codec is already set this method will throw an\n   * {@link IllegalArgumentException}\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a field's codec is\n   * write-once. If the field's codec is already set this method will throw an\n   * {@link IllegalArgumentException}.\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/CodecProvider#setFieldCodec(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Sets the {@link Codec} for a given field. Not that setting a field's codec is\n   * write-once. If the field's codec is already set this method will throw an\n   * {@link IllegalArgumentException}.\n   * \n   * @param field\n   *          the name of the field\n   * @param codec\n   *          the name of the codec\n   * @throws IllegalArgumentException\n   *           if the codec for the given field is already set\n   * \n   */\n  public synchronized void setFieldCodec(String field, String codec) {\n    if (perFieldMap.containsKey(field))\n      throw new IllegalArgumentException(\"codec for field: \" + field\n          + \" already set to \" + perFieldMap.get(field));\n    perFieldMap.put(field, codec);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["1c2a58aba04c7a3c754fc5bc2d5c43f589741a05"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85a883878c0af761245ab048babc63d099f835f3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1c2a58aba04c7a3c754fc5bc2d5c43f589741a05"],"1c2a58aba04c7a3c754fc5bc2d5c43f589741a05":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"3bb13258feba31ab676502787ab2e1779f129b7a":["85a883878c0af761245ab048babc63d099f835f3","1c2a58aba04c7a3c754fc5bc2d5c43f589741a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["85a883878c0af761245ab048babc63d099f835f3","1c2a58aba04c7a3c754fc5bc2d5c43f589741a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"85a883878c0af761245ab048babc63d099f835f3":["3bb13258feba31ab676502787ab2e1779f129b7a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"1c2a58aba04c7a3c754fc5bc2d5c43f589741a05":["7b91922b55d15444d554721b352861d028eb8278","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}