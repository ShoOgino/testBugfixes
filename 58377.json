{"path":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c78233a0e50eb58fd450127b827606496ba9af3","date":1303915802,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery()) {                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          }\n          // Since the BooleanQuery only has 1 clause, the BooleanQuery will be\n          // written out. Therefore the rewritten Query's boost must incorporate both\n          // the clause's boost, and the boost of the BooleanQuery itself\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null) {\n          // The BooleanQuery clone is lazily initialized so only initialize\n          // it if a rewritten clause differs from the original clause (and hasn't been\n          // initialized already).  If nothing differs, the clone isn't needlessly created\n          clone = (BooleanQuery)this.clone();\n        }\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d5df8e07c035d62d982894b439322da40e0938","date":1303923139,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery()) {                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          }\n          // Since the BooleanQuery only has 1 clause, the BooleanQuery will be\n          // written out. Therefore the rewritten Query's boost must incorporate both\n          // the clause's boost, and the boost of the BooleanQuery itself\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null) {\n          // The BooleanQuery clone is lazily initialized so only initialize\n          // it if a rewritten clause differs from the original clause (and hasn't been\n          // initialized already).  If nothing differs, the clone isn't needlessly created\n          clone = (BooleanQuery)this.clone();\n        }\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery()) {                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          }\n          // Since the BooleanQuery only has 1 clause, the BooleanQuery will be\n          // written out. Therefore the rewritten Query's boost must incorporate both\n          // the clause's boost, and the boost of the BooleanQuery itself\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null) {\n          // The BooleanQuery clone is lazily initialized so only initialize\n          // it if a rewritten clause differs from the original clause (and hasn't been\n          // initialized already).  If nothing differs, the clone isn't needlessly created\n          clone = (BooleanQuery)this.clone();\n        }\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery()) {                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          }\n          // Since the BooleanQuery only has 1 clause, the BooleanQuery will be\n          // written out. Therefore the rewritten Query's boost must incorporate both\n          // the clause's boost, and the boost of the BooleanQuery itself\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null) {\n          // The BooleanQuery clone is lazily initialized so only initialize\n          // it if a rewritten clause differs from the original clause (and hasn't been\n          // initialized already).  If nothing differs, the clone isn't needlessly created\n          clone = (BooleanQuery)this.clone();\n        }\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery())                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null)\n          clone = (BooleanQuery)this.clone();\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanQuery#rewrite(IndexReader).mjava","sourceNew":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery()) {                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          }\n          // Since the BooleanQuery only has 1 clause, the BooleanQuery will be\n          // written out. Therefore the rewritten Query's boost must incorporate both\n          // the clause's boost, and the boost of the BooleanQuery itself\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null) {\n          // The BooleanQuery clone is lazily initialized so only initialize\n          // it if a rewritten clause differs from the original clause (and hasn't been\n          // initialized already).  If nothing differs, the clone isn't needlessly created\n          clone = (BooleanQuery)this.clone();\n        }\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","sourceOld":"  @Override\n  public Query rewrite(IndexReader reader) throws IOException {\n    if (minNrShouldMatch == 0 && clauses.size() == 1) {                    // optimize 1-clause queries\n      BooleanClause c = clauses.get(0);\n      if (!c.isProhibited()) {\t\t\t  // just return clause\n\n        Query query = c.getQuery().rewrite(reader);    // rewrite first\n\n        if (getBoost() != 1.0f) {                 // incorporate boost\n          if (query == c.getQuery()) {                   // if rewrite was no-op\n            query = (Query)query.clone();         // then clone before boost\n          }\n          // Since the BooleanQuery only has 1 clause, the BooleanQuery will be\n          // written out. Therefore the rewritten Query's boost must incorporate both\n          // the clause's boost, and the boost of the BooleanQuery itself\n          query.setBoost(getBoost() * query.getBoost());\n        }\n\n        return query;\n      }\n    }\n\n    BooleanQuery clone = null;                    // recursively rewrite\n    for (int i = 0 ; i < clauses.size(); i++) {\n      BooleanClause c = clauses.get(i);\n      Query query = c.getQuery().rewrite(reader);\n      if (query != c.getQuery()) {                     // clause rewrote: must clone\n        if (clone == null) {\n          // The BooleanQuery clone is lazily initialized so only initialize\n          // it if a rewritten clause differs from the original clause (and hasn't been\n          // initialized already).  If nothing differs, the clone isn't needlessly created\n          clone = (BooleanQuery)this.clone();\n        }\n        clone.clauses.set(i, new BooleanClause(query, c.getOccur()));\n      }\n    }\n    if (clone != null) {\n      return clone;                               // some clauses rewrote\n    } else\n      return this;                                // no clauses rewrote\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d5df8e07c035d62d982894b439322da40e0938":["9454a6510e2db155fb01faa5c049b06ece95fab9","5c78233a0e50eb58fd450127b827606496ba9af3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c78233a0e50eb58fd450127b827606496ba9af3"],"5c78233a0e50eb58fd450127b827606496ba9af3":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","5c78233a0e50eb58fd450127b827606496ba9af3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","5c78233a0e50eb58fd450127b827606496ba9af3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d4d5df8e07c035d62d982894b439322da40e0938":[],"5c78233a0e50eb58fd450127b827606496ba9af3":["d4d5df8e07c035d62d982894b439322da40e0938","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d4d5df8e07c035d62d982894b439322da40e0938","5c78233a0e50eb58fd450127b827606496ba9af3","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d4d5df8e07c035d62d982894b439322da40e0938","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}