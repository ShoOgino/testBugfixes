{"path":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testEquals().mjava","commits":[{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  public void testEquals() {\n    final float boost = random().nextFloat() * 3 - 1;\n    BoostQuery q1 = new BoostQuery(new MatchAllDocsQuery(), boost);\n    BoostQuery q2 = new BoostQuery(new MatchAllDocsQuery(), boost);\n    assertEquals(q1, q2);\n    assertEquals(q1.getBoost(), q2.getBoost(), 0f);\n\n    float boost2 = boost;\n    while (boost == boost2) {\n      boost2 = random().nextFloat() * 3 - 1;\n    }\n    BoostQuery q3 = new BoostQuery(new MatchAllDocsQuery(), boost2);\n    assertFalse(q1.equals(q3));\n    assertFalse(q1.hashCode() == q3.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb","date":1512565563,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testEquals().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoostQuery#testEquals().mjava","sourceNew":"  public void testEquals() {\n    final float boost = random().nextFloat() * 3;\n    BoostQuery q1 = new BoostQuery(new MatchAllDocsQuery(), boost);\n    BoostQuery q2 = new BoostQuery(new MatchAllDocsQuery(), boost);\n    assertEquals(q1, q2);\n    assertEquals(q1.getBoost(), q2.getBoost(), 0f);\n\n    float boost2 = boost;\n    while (boost == boost2) {\n      boost2 = random().nextFloat() * 3;\n    }\n    BoostQuery q3 = new BoostQuery(new MatchAllDocsQuery(), boost2);\n    assertFalse(q1.equals(q3));\n    assertFalse(q1.hashCode() == q3.hashCode());\n  }\n\n","sourceOld":"  public void testEquals() {\n    final float boost = random().nextFloat() * 3 - 1;\n    BoostQuery q1 = new BoostQuery(new MatchAllDocsQuery(), boost);\n    BoostQuery q2 = new BoostQuery(new MatchAllDocsQuery(), boost);\n    assertEquals(q1, q2);\n    assertEquals(q1.getBoost(), q2.getBoost(), 0f);\n\n    float boost2 = boost;\n    while (boost == boost2) {\n      boost2 = random().nextFloat() * 3 - 1;\n    }\n    BoostQuery q3 = new BoostQuery(new MatchAllDocsQuery(), boost2);\n    assertFalse(q1.equals(q3));\n    assertFalse(q1.hashCode() == q3.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"]},"commit2Childs":{"784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["784ee6cdfa2c32c6eb6c2cd6383ffe4bd320c1fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}