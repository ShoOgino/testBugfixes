{"path":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimizingConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","commits":[{"id":"2375622520a4e480775e3104a2f9a423536755b4","date":1536005521,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimizingConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<CacheingMatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      MatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      subs.add(new CacheingMatchesIterator(mi));\n    }\n    IntervalIterator it = function.apply(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new ConjunctionMatchesIterator(it, subs);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0936d9ca6b07dcd85961f5c9734232bc34813d3","date":1546870120,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimizingConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimizingConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<CachingMatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      MatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      subs.add(new CachingMatchesIterator(mi));\n    }\n    IntervalIterator it = function.apply(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new ConjunctionMatchesIterator(it, subs);\n  }\n\n","sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<CacheingMatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      MatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      subs.add(new CacheingMatchesIterator(mi));\n    }\n    IntervalIterator it = function.apply(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new ConjunctionMatchesIterator(it, subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde","date":1553685823,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/search/intervals/MinimizingConjunctionIntervalsSource#matches(String,LeafReaderContext,int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public MatchesIterator matches(String field, LeafReaderContext ctx, int doc) throws IOException {\n    List<CachingMatchesIterator> subs = new ArrayList<>();\n    for (IntervalsSource source : subSources) {\n      MatchesIterator mi = source.matches(field, ctx, doc);\n      if (mi == null) {\n        return null;\n      }\n      subs.add(new CachingMatchesIterator(mi));\n    }\n    IntervalIterator it = function.apply(subs.stream().map(m -> IntervalMatches.wrapMatches(m, doc)).collect(Collectors.toList()));\n    if (it.advance(doc) != doc) {\n      return null;\n    }\n    if (it.nextInterval() == IntervalIterator.NO_MORE_INTERVALS) {\n      return null;\n    }\n    return new ConjunctionMatchesIterator(it, subs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["a0936d9ca6b07dcd85961f5c9734232bc34813d3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2375622520a4e480775e3104a2f9a423536755b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0936d9ca6b07dcd85961f5c9734232bc34813d3":["2375622520a4e480775e3104a2f9a423536755b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"]},"commit2Childs":{"4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2375622520a4e480775e3104a2f9a423536755b4"],"2375622520a4e480775e3104a2f9a423536755b4":["a0936d9ca6b07dcd85961f5c9734232bc34813d3"],"a0936d9ca6b07dcd85961f5c9734232bc34813d3":["4d6b91e82c7e49f615a22d1e5db2bca0d2a99dde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}