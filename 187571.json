{"path":"modules/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","commits":[{"id":"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e","date":1330665960,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/strategy/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.info(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.info(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.info(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.info(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e926bd3ef9ddb33b80a118393c4b1528384e22ee","date":1331604764,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.info(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.info(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e47768b261c28e7e6032060e8331475c81057953","date":1331681297,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"modules/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"/dev/null","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","pathOld":"modules/spatial/src/java/org/apache/lucene/spatial/util/ShapeFieldCacheProvider#getCache(AtomicReader).mjava","sourceNew":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","sourceOld":"  public synchronized ShapeFieldCache<T> getCache(AtomicReader reader) throws IOException {\n    ShapeFieldCache<T> idx = sidx.get(reader);\n    if (idx != null) {\n      return idx;\n    }\n    long startTime = System.currentTimeMillis();\n\n    log.fine(\"Building Cache [\" + reader.maxDoc() + \"]\");\n    idx = new ShapeFieldCache<T>(reader.maxDoc(),defaultSize);\n    int count = 0;\n    DocsEnum docs = null;\n    Terms terms = reader.terms(shapeField);\n    TermsEnum te = null;\n    if (terms != null) {\n      te = terms.iterator(te);\n      BytesRef term = te.next();\n      while (term != null) {\n        T shape = readShape(term);\n        if( shape != null ) {\n          docs = te.docs(null, docs, false);\n          Integer docid = docs.nextDoc();\n          while (docid != DocIdSetIterator.NO_MORE_DOCS) {\n            idx.add( docid, shape );\n            docid = docs.nextDoc();\n            count++;\n          }\n        }\n        term = te.next();\n      }\n    }\n    sidx.put(reader, idx);\n    long elapsed = System.currentTimeMillis() - startTime;\n    log.fine(\"Cached: [\" + count + \" in \" + elapsed + \"ms] \" + idx);\n    return idx;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["e47768b261c28e7e6032060e8331475c81057953"],"e926bd3ef9ddb33b80a118393c4b1528384e22ee":["de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e47768b261c28e7e6032060e8331475c81057953":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e926bd3ef9ddb33b80a118393c4b1528384e22ee"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e926bd3ef9ddb33b80a118393c4b1528384e22ee":["e47768b261c28e7e6032060e8331475c81057953"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e47768b261c28e7e6032060e8331475c81057953","de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e"],"e47768b261c28e7e6032060e8331475c81057953":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"de3ae51f6d7d658f4c6d1cc9b74cc4b5e45f294e":["e926bd3ef9ddb33b80a118393c4b1528384e22ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}