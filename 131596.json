{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","pathOld":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9dd42aeb8984bdfef80056722e7c1c239b7e3c07","date":1274826512,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":["1e15bea9339982eec538668b67ae252b28e0003e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e15bea9339982eec538668b67ae252b28e0003e","date":1319539476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against. If this is a\n   *          {@link org.apache.lucene.analysis.util.CharArraySet CharArraySet} it\n   *          must have set ignoreCase=false and only contain lower case\n   *          strings.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,CharArraySet).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilter#HyphenationCompoundWordTokenFilter(Version,TokenStream,HyphenationTree,Set[#]).mjava","sourceNew":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, CharArraySet dictionary) {\n    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link HyphenationCompoundWordTokenFilter} instance. \n   * \n   * @param matchVersion\n   *          Lucene version to enable correct Unicode 4.0 behavior in the\n   *          dictionaries if Version > 3.0. See <a\n   *          href=\"CompoundWordTokenFilterBase#version\"\n   *          >CompoundWordTokenFilterBase</a> for details.\n   * @param input\n   *          the {@link TokenStream} to process\n   * @param hyphenator\n   *          the hyphenation pattern tree to use for hyphenation\n   * @param dictionary\n   *          the word dictionary to match against.\n   */\n  public HyphenationCompoundWordTokenFilter(Version matchVersion, TokenStream input,\n      HyphenationTree hyphenator, Set<?> dictionary) {\n    this(matchVersion, input, hyphenator, dictionary, DEFAULT_MIN_WORD_SIZE,\n        DEFAULT_MIN_SUBWORD_SIZE, DEFAULT_MAX_SUBWORD_SIZE, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e15bea9339982eec538668b67ae252b28e0003e":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["1e15bea9339982eec538668b67ae252b28e0003e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"]},"commit2Childs":{"1e15bea9339982eec538668b67ae252b28e0003e":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"9dd42aeb8984bdfef80056722e7c1c239b7e3c07":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["9dd42aeb8984bdfef80056722e7c1c239b7e3c07"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["1e15bea9339982eec538668b67ae252b28e0003e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}