{"path":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipLeaderOperations().mjava","commits":[{"id":"27d63bd6ea608c208e37fd3e13e7b27f06da6b60","date":1507105517,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipLeaderOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestShardsWithSingleReplica#testSkipLeaderOperations().mjava","sourceNew":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.stopJettySolrRunner(solrRunner);\n    }\n    waitForState(\"Expected empty liveNodes\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.startJettySolrRunner(solrRunner);\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipLeaderOperations().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestSkipOverseerOperations#testSkipLeaderOperations().mjava","sourceNew":"  public void testSkipLeaderOperations() throws Exception {\n\n    String overseerLeader = getOverseerLeader();\n    \n    assertNotNull(overseerLeader);\n    assertTrue(overseerLeader.length() > 0);\n    \n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    \n    assertEquals(2, notOverseerNodes.size());\n    \n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(\"collection1\", 2, 2);\n\n    ZkStateReader reader = cluster.getSolrClient().getZkStateReader();\n    \n    List<String> nodes = new ArrayList<>();\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      nodes.add(solrRunner.getNodeName());\n    }\n    \n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    \n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      cluster.waitForJettyToStop(solrRunner);\n    }\n    \n    reader.waitForLiveNodes(30, TimeUnit.SECONDS, new LiveNodesPredicate() {\n      \n      @Override\n      public boolean matches(SortedSet<String> oldLiveNodes, SortedSet<String> newLiveNodes) {\n        boolean success = true;\n        for (String lostNodeName : nodes) {\n          if (newLiveNodes.contains(lostNodeName)) {\n            success = false;\n            break;\n          }\n        }\n        \n        return success;\n      }\n    });\n    \n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n    \n    cluster.waitForAllNodes(30);\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 2));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testSkipLeaderOperations() throws Exception {\n    String overseerLeader = getOverseerLeader();\n    List<JettySolrRunner> notOverseerNodes = cluster.getJettySolrRunners()\n        .stream()\n        .filter(solrRunner -> !solrRunner.getNodeName().equals(overseerLeader))\n        .collect(Collectors.toList());\n    String collection = \"collection1\";\n    CollectionAdminRequest\n        .createCollection(collection, 2, 1)\n        .setCreateNodeSet(notOverseerNodes\n            .stream()\n            .map(JettySolrRunner::getNodeName)\n            .collect(Collectors.joining(\",\"))\n        )\n        .process(cluster.getSolrClient());\n\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.stop();\n    }\n    waitForState(\"Expected single liveNode\", collection,\n        (liveNodes, collectionState) -> liveNodes.size() == 1);\n\n    CollectionAdminResponse resp = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    for (JettySolrRunner solrRunner : notOverseerNodes) {\n      solrRunner.start();\n    }\n\n    waitForState(\"Expected 2x1 for collection: \" + collection, collection,\n        clusterShape(2, 1));\n    CollectionAdminResponse resp2 = CollectionAdminRequest.getOverseerStatus().process(cluster.getSolrClient());\n    assertEquals(getNumLeaderOpeations(resp), getNumLeaderOpeations(resp2));\n    CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n  }\n\n","bugFix":["691d1439503ec32e198724114f6cd32446c86ac6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"]},"commit2Childs":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}