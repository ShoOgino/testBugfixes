{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","commits":[{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosReader#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05da2d758a6089e737cdfc230e57a51b472b94b6","date":1413392310,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","date":1413458798,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS_TYPE);\n        String nrmType = readString(NORMS_TYPE.length, scratch);\n        final DocValuesType normsType = docValuesType(nrmType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, normsType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        final IndexOptions indexOptions;\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        if (\"null\".equals(s)) {\n          indexOptions = null;\n        } else {\n          indexOptions = IndexOptions.valueOf(s);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        final IndexOptions indexOptions;\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        if (\"null\".equals(s)) {\n          indexOptions = null;\n        } else {\n          indexOptions = IndexOptions.valueOf(s);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), ISINDEXED);\n        boolean isIndexed = Boolean.parseBoolean(readString(ISINDEXED.length, scratch));\n        \n        final IndexOptions indexOptions;\n        if (isIndexed) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n          indexOptions = IndexOptions.valueOf(readString(INDEXOPTIONS.length, scratch));          \n        } else {\n          indexOptions = null;\n        }\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        final IndexOptions indexOptions;\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        if (\"null\".equals(s)) {\n          indexOptions = null;\n        } else {\n          indexOptions = IndexOptions.valueOf(s);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts));\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DATA_DIM_COUNT);\n        int dataDimensionalCount = Integer.parseInt(readString(DATA_DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEX_DIM_COUNT);\n        int indexDimensionalCount = Integer.parseInt(readString(INDEX_DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dataDimensionalCount, indexDimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldInfosFormat#read(Directory,SegmentInfo,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DATA_DIM_COUNT);\n        int dimensionalCount = Integer.parseInt(readString(DATA_DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEX_DIM_COUNT);\n        int indexDimensionalCount = Integer.parseInt(readString(INDEX_DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dimensionalCount, indexDimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, FIELD_INFOS_EXTENSION);\n    ChecksumIndexInput input = directory.openChecksumInput(fileName, iocontext);\n    BytesRefBuilder scratch = new BytesRefBuilder();\n    \n    boolean success = false;\n    try {\n      \n      SimpleTextUtil.readLine(input, scratch);\n      assert StringHelper.startsWith(scratch.get(), NUMFIELDS);\n      final int size = Integer.parseInt(readString(NUMFIELDS.length, scratch));\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NAME);\n        String name = readString(NAME.length, scratch);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUMBER);\n        int fieldNumber = Integer.parseInt(readString(NUMBER.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEXOPTIONS);\n        String s = readString(INDEXOPTIONS.length, scratch);\n        final IndexOptions indexOptions = IndexOptions.valueOf(s);\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), STORETV);\n        boolean storeTermVector = Boolean.parseBoolean(readString(STORETV.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), PAYLOADS);\n        boolean storePayloads = Boolean.parseBoolean(readString(PAYLOADS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NORMS);\n        boolean omitNorms = !Boolean.parseBoolean(readString(NORMS.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES);\n        String dvType = readString(DOCVALUES.length, scratch);\n        final DocValuesType docValuesType = docValuesType(dvType);\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DOCVALUES_GEN);\n        final long dvGen = Long.parseLong(readString(DOCVALUES_GEN.length, scratch));\n        \n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), NUM_ATTS);\n        int numAtts = Integer.parseInt(readString(NUM_ATTS.length, scratch));\n        Map<String,String> atts = new HashMap<>();\n\n        for (int j = 0; j < numAtts; j++) {\n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_KEY);\n          String key = readString(ATT_KEY.length, scratch);\n        \n          SimpleTextUtil.readLine(input, scratch);\n          assert StringHelper.startsWith(scratch.get(), ATT_VALUE);\n          String value = readString(ATT_VALUE.length, scratch);\n          atts.put(key, value);\n        }\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DATA_DIM_COUNT);\n        int dataDimensionalCount = Integer.parseInt(readString(DATA_DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), INDEX_DIM_COUNT);\n        int indexDimensionalCount = Integer.parseInt(readString(INDEX_DIM_COUNT.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), DIM_NUM_BYTES);\n        int dimensionalNumBytes = Integer.parseInt(readString(DIM_NUM_BYTES.length, scratch));\n\n        SimpleTextUtil.readLine(input, scratch);\n        assert StringHelper.startsWith(scratch.get(), SOFT_DELETES);\n        boolean isSoftDeletesField = Boolean.parseBoolean(readString(SOFT_DELETES.length, scratch));\n\n        infos[i] = new FieldInfo(name, fieldNumber, storeTermVector, \n                                 omitNorms, storePayloads, indexOptions, docValuesType, dvGen, Collections.unmodifiableMap(atts),\n                                 dataDimensionalCount, indexDimensionalCount, dimensionalNumBytes, isSoftDeletesField);\n      }\n\n      SimpleTextUtil.checkFooter(input);\n      \n      FieldInfos fieldInfos = new FieldInfos(infos);\n      success = true;\n      return fieldInfos;\n    } finally {\n      if (success) {\n        input.close();\n      } else {\n        IOUtils.closeWhileHandlingException(input);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["55980207f1977bd1463465de1659b821347e2fa8","05da2d758a6089e737cdfc230e57a51b472b94b6"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["05da2d758a6089e737cdfc230e57a51b472b94b6"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"05da2d758a6089e737cdfc230e57a51b472b94b6":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84","3184874f7f3aca850248483485b4995343066875"],"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["05da2d758a6089e737cdfc230e57a51b472b94b6","55980207f1977bd1463465de1659b821347e2fa8"],"c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84":["0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"55980207f1977bd1463465de1659b821347e2fa8":["c93b0dbaa6abe99bc8d1b476bcacc27b324b2b84"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","55980207f1977bd1463465de1659b821347e2fa8"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["f6652c943595e92c187ee904c382863013eae28f","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}