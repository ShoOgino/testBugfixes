{"path":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5e0fe26a7a1290b0745e3cde32af3b14c36b61c","date":1312222874,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested\n        // This typically happens when distributed search adds extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        for( String fname : doc.getFieldNames() ) {\n          if( !returnFields.wantsField( fname ) ) {\n            doc.removeFields( fname );\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":["794957d0f3853445bdf9319bfb72f8b8c2443a7d","6aedf81f068e430dec27d94310415cc6ff52731c"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","date":1318552491,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":["da0acfe5ceed804451d76c8f887855b3d060e132"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7e4907084808af8fdb14b9809e6dceaccf6867b","date":1343473006,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b4b3034108b2b3689aa88f921f19fe7a72dbc12","date":1344506516,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9","date":1434467834,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema(); \n        \n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = getValue(sf, f);\n        } \n        catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      if (o instanceof SolrDocument) {\n        // Remove any fields that were not requested.\n        // This typically happens when distributed search adds \n        // extra fields to an internal request\n        SolrDocument doc = (SolrDocument)o;\n        Iterator<Map.Entry<String, Object>> i = doc.iterator();\n        while ( i.hasNext() ) {\n          String fname = i.next().getKey();\n          if ( !returnFields.wantsField( fname ) ) {\n            i.remove();\n          }\n        }\n        return doc;\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc","date":1440797084,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new ResultContext();\n        ctx.docs = (DocList) o;\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof StorableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        StorableField f = (StorableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba","date":1458935972,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        ReturnFields orig = returnFields;\n        ResultContext res = (ResultContext)o;\n        if(res.getReturnFields()!=null) {\n          returnFields = res.getReturnFields();\n        }\n        writeResults(res, codec);\n        returnFields = orig;\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        writeResults((ResultContext) o, codec);\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        ReturnFields orig = returnFields;\n        ResultContext res = (ResultContext)o;\n        if(res.getReturnFields()!=null) {\n          returnFields = res.getReturnFields();\n        }\n        writeResults(res, codec);\n        returnFields = orig;\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          log.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        ReturnFields orig = returnFields;\n        ResultContext res = (ResultContext)o;\n        if(res.getReturnFields()!=null) {\n          returnFields = res.getReturnFields();\n        }\n        writeResults(res, codec);\n        returnFields = orig;\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          LOG.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e7ba4f223712927a09f4dfb65a4c261d07ccc54","date":1544513757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof StoredField) {\n        CharSequence val = ((StoredField) o).getCharSequenceValue();\n        if (val instanceof Utf8CharSequence) {\n          codec.writeUTF8Str((Utf8CharSequence) val);\n          return null;\n        }\n      }\n      if (o instanceof ResultContext) {\n        ReturnFields orig = returnFields;\n        ResultContext res = (ResultContext)o;\n        if(res.getReturnFields()!=null) {\n          returnFields = res.getReturnFields();\n        }\n//        if (useUtf8CharSeq) {\n        ResultContext.READASBYTES.set(fieldName -> {\n          SchemaField fld = res.getRequest().getSchema().getFieldOrNull(fieldName);\n          return fld != null && fld.getType().isUtf8Field();\n        });\n\n        try {\n          writeResults(res, codec);\n        } finally {\n          ResultContext.READASBYTES.remove();\n        }\n        returnFields = orig;\n\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          log.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof ResultContext) {\n        ReturnFields orig = returnFields;\n        ResultContext res = (ResultContext)o;\n        if(res.getReturnFields()!=null) {\n          returnFields = res.getReturnFields();\n        }\n        writeResults(res, codec);\n        returnFields = orig;\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          log.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/BinaryResponseWriter.Resolver#resolve(Object,JavaBinCodec).mjava","sourceNew":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof StoredField) {\n        CharSequence val = ((StoredField) o).getCharSequenceValue();\n        if (val instanceof Utf8CharSequence) {\n          codec.writeUTF8Str((Utf8CharSequence) val);\n          return null;\n        }\n      }\n      if (o instanceof ResultContext) {\n        ReturnFields orig = returnFields;\n        ResultContext res = (ResultContext)o;\n        if(res.getReturnFields()!=null) {\n          returnFields = res.getReturnFields();\n        }\n//        if (useUtf8CharSeq) {\n        ResultContext.READASBYTES.set(fieldName -> {\n          SchemaField fld = res.getRequest().getSchema().getFieldOrNull(fieldName);\n          return fld != null && fld.getType().isUtf8Field();\n        });\n\n        try {\n          writeResults(res, codec);\n        } finally {\n          ResultContext.READASBYTES.remove();\n        }\n        returnFields = orig;\n\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          log.warn(\"Error reading a field : {}\", o, e);\n        }\n      }\n      return o;\n    }\n\n","sourceOld":"    @Override\n    public Object resolve(Object o, JavaBinCodec codec) throws IOException {\n      if (o instanceof StoredField) {\n        CharSequence val = ((StoredField) o).getCharSequenceValue();\n        if (val instanceof Utf8CharSequence) {\n          codec.writeUTF8Str((Utf8CharSequence) val);\n          return null;\n        }\n      }\n      if (o instanceof ResultContext) {\n        ReturnFields orig = returnFields;\n        ResultContext res = (ResultContext)o;\n        if(res.getReturnFields()!=null) {\n          returnFields = res.getReturnFields();\n        }\n//        if (useUtf8CharSeq) {\n        ResultContext.READASBYTES.set(fieldName -> {\n          SchemaField fld = res.getRequest().getSchema().getFieldOrNull(fieldName);\n          return fld != null && fld.getType().isUtf8Field();\n        });\n\n        try {\n          writeResults(res, codec);\n        } finally {\n          ResultContext.READASBYTES.remove();\n        }\n        returnFields = orig;\n\n        return null; // null means we completely handled it\n      }\n      if (o instanceof DocList) {\n        ResultContext ctx = new BasicResultContext((DocList)o, returnFields, null, null, solrQueryRequest);\n        writeResults(ctx, codec);\n        return null; // null means we completely handled it\n      }\n      if( o instanceof IndexableField ) {\n        if(schema == null) schema = solrQueryRequest.getSchema();\n\n        IndexableField f = (IndexableField)o;\n        SchemaField sf = schema.getFieldOrNull(f.name());\n        try {\n          o = DocsStreamer.getValue(sf, f);\n        } catch (Exception e) {\n          log.warn(\"Error reading a field : \" + o, e);\n        }\n      }\n      return o;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["1d028314cced5858683a1bb4741423d0f934257b","7530de27b87b961b51f01bd1299b7004d46e8823"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["7530de27b87b961b51f01bd1299b7004d46e8823","19275ba31e621f6da1b83bf13af75233876fd3d4"],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["7530de27b87b961b51f01bd1299b7004d46e8823"],"e5e0fe26a7a1290b0745e3cde32af3b14c36b61c":["c26f00b574427b55127e869b935845554afde1fa"],"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"1d028314cced5858683a1bb4741423d0f934257b":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390","3b4b3034108b2b3689aa88f921f19fe7a72dbc12"],"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390":["e5e0fe26a7a1290b0745e3cde32af3b14c36b61c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3b4b3034108b2b3689aa88f921f19fe7a72dbc12":["a7e4907084808af8fdb14b9809e6dceaccf6867b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["1d028314cced5858683a1bb4741423d0f934257b"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"4e7ba4f223712927a09f4dfb65a4c261d07ccc54":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"c26f00b574427b55127e869b935845554afde1fa":["e5e0fe26a7a1290b0745e3cde32af3b14c36b61c"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9"],"e5e0fe26a7a1290b0745e3cde32af3b14c36b61c":["14fd29e977ffb76db89d8ecd4fd70fbd9a51d390"],"a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"1d028314cced5858683a1bb4741423d0f934257b":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"14fd29e977ffb76db89d8ecd4fd70fbd9a51d390":["1d028314cced5858683a1bb4741423d0f934257b","a7e4907084808af8fdb14b9809e6dceaccf6867b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"3b4b3034108b2b3689aa88f921f19fe7a72dbc12":["1d028314cced5858683a1bb4741423d0f934257b"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"b263a3dc926f93ae0dadfc542cdcaa2f8c5a95c9":["7b8f0dc1dfedc7fda86aefc0cdabde0efae2d1dc"],"a7e4907084808af8fdb14b9809e6dceaccf6867b":["3b4b3034108b2b3689aa88f921f19fe7a72dbc12"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["4e7ba4f223712927a09f4dfb65a4c261d07ccc54"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["a6361f06d7cb11c97d6848b4e1a734c7da7ad9ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}