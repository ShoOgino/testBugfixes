{"path":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","commits":[{"id":"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5","date":1196805804,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (IOException cie) {\n                RuntimeException re = new RuntimeException(\"addDocument failed\");\n                re.initCause(cie);\n                throw re;\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"235efcba838a273934c5dd0ef66bb07c7fb0d718","date":1201256475,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (IOException cie) {\n                RuntimeException re = new RuntimeException(\"addDocument failed\");\n                re.initCause(cie);\n                throw re;\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (IOException cie) {\n                RuntimeException re = new RuntimeException(\"addDocument failed\");\n                re.initCause(cie);\n                throw re;\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d60f4e15b3e2fb549c23c8f2096249d439876df8","date":1204035825,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                RuntimeException re = new RuntimeException(\"addDocument failed\");\n                re.initCause(t);\n                throw re;\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (IOException cie) {\n                RuntimeException re = new RuntimeException(\"addDocument failed\");\n                re.initCause(cie);\n                throw re;\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                RuntimeException re = new RuntimeException(\"addDocument failed\");\n                re.initCause(t);\n                throw re;\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.TOKENIZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp,\n                                               IndexWriter.MaxFieldLength.LIMITED);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ba7fd1181f778e9954547e8e6a47587ebf08e3fb","date":1238267455,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws IOException {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      try {\n        Thread.sleep(20);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n      if (!t.isAlive())\n        break;\n    }\n\n    try {\n      t.join();\n    } catch (InterruptedException ie) {\n      Thread.currentThread().interrupt();\n    }\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, true, new StandardAnalyzer(), dp);\n\n    // Force frequent commits\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aa4b66eb16ead894fa7130904af6ecf34331f050","date":1258198413,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              Thread.currentThread().interrupt();\n              throw new RuntimeException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~7 seconds\n    final long stopTime = System.currentTimeMillis() + 7000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":["71da933d30aea361ccc224d6544c451cbf49916d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7","date":1261132949,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          while(System.currentTimeMillis() < stopTime) {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          }\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    while(System.currentTimeMillis() < stopTime) {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n      if (!t.isAlive())\n        break;\n    }\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setAnalyzer(\n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(TEST_VERSION_CURRENT), dp, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    // Force frequent flushes\n    writer.setMaxBufferedDocs(2);\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","pathOld":"src/test/org/apache/lucene/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = new SnapshotDeletionPolicy(new KeepOnlyLastCommitDeletionPolicy());\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, \n        new StandardAnalyzer(TEST_VERSION_CURRENT)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n\n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5350389bf83287111f7760b9e3db3af8e3648474"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"d60f4e15b3e2fb549c23c8f2096249d439876df8":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["87c966e9308847938a7c905c2e46a56d8df788b8"],"87c966e9308847938a7c905c2e46a56d8df788b8":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"5350389bf83287111f7760b9e3db3af8e3648474":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5":["235efcba838a273934c5dd0ef66bb07c7fb0d718"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["ba7fd1181f778e9954547e8e6a47587ebf08e3fb"],"235efcba838a273934c5dd0ef66bb07c7fb0d718":["d60f4e15b3e2fb549c23c8f2096249d439876df8"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"aa4b66eb16ead894fa7130904af6ecf34331f050":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"ba7fd1181f778e9954547e8e6a47587ebf08e3fb":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1326054a8d3aa66382d49decc7f330955c9c6f71":["aa4b66eb16ead894fa7130904af6ecf34331f050"],"d60f4e15b3e2fb549c23c8f2096249d439876df8":["5350389bf83287111f7760b9e3db3af8e3648474"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3d8ca99f990f6d6c6f14a1a826740a63a9d9d4b5"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"87c966e9308847938a7c905c2e46a56d8df788b8":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"5350389bf83287111f7760b9e3db3af8e3648474":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a6e0058e8d624d1fea85b51b1dba5d5623dc2eb7":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}