{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f","date":1425902085,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser, collection);\n  }\n\n","sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser, collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d","date":1592006776,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrClient#request(SolrRequest,String).mjava","sourceNew":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(@SuppressWarnings({\"rawtypes\"})final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser, collection);\n  }\n\n","sourceOld":"  /**\n   * Process the request. If\n   * {@link org.apache.solr.client.solrj.SolrRequest#getResponseParser()} is\n   * null, then use {@link #getParser()}\n   * \n   * @param request\n   *          The {@link org.apache.solr.client.solrj.SolrRequest} to process\n   * @return The {@link org.apache.solr.common.util.NamedList} result\n   * @throws IOException If there is a low-level I/O error.\n   * \n   * @see #request(org.apache.solr.client.solrj.SolrRequest,\n   *      org.apache.solr.client.solrj.ResponseParser)\n   */\n  @Override\n  public NamedList<Object> request(final SolrRequest request, String collection)\n      throws SolrServerException, IOException {\n    ResponseParser responseParser = request.getResponseParser();\n    if (responseParser == null) {\n      responseParser = parser;\n    }\n    return request(request, responseParser, collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","0f4f6e13eb95702dc635119d2ccd4fa5fafcc88d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["5c7e2b481e19bdaf52e10f5b2fd6faecc4ec952f"]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}