{"path":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Lift#liftUp(Row,List[Row]).mjava","commits":[{"id":"67748b41458c73d49a48168362cc7f4c960a2542","date":1272890662,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Lift#liftUp(Row,List[Row]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Reduce the trie using Lift-Up reduction.\n   * <p>\n   * The Lift-Up reduction propagates all leaf-values (patch commands), where\n   * possible, to higher levels which are closer to the root of the trie.\n   * \n   * @param in the Row to consider when optimizing\n   * @param nodes contains the patch commands\n   */\n  public void liftUp(Row in, List<Row> nodes) {\n    Iterator<Cell> i = in.cells.values().iterator();\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0) {\n        Row to = nodes.get(c.ref);\n        int sum = to.uniformCmd(changeSkip);\n        if (sum >= 0) {\n          if (sum == c.cmd) {\n            if (changeSkip) {\n              if (c.skip != to.uniformSkip + 1) {\n                continue;\n              }\n              c.skip = to.uniformSkip + 1;\n            } else {\n              c.skip = 0;\n            }\n            c.cnt += to.uniformCnt;\n            c.ref = -1;\n          } else if (c.cmd < 0) {\n            c.cnt = to.uniformCnt;\n            c.cmd = sum;\n            c.ref = -1;\n            if (changeSkip) {\n              c.skip = to.uniformSkip + 1;\n            } else {\n              c.skip = 0;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/Lift#liftUp(Row,List[Row]).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/Lift#liftUp(Row,List[Row]).mjava","sourceNew":"  /**\n   * Reduce the trie using Lift-Up reduction.\n   * <p>\n   * The Lift-Up reduction propagates all leaf-values (patch commands), where\n   * possible, to higher levels which are closer to the root of the trie.\n   * \n   * @param in the Row to consider when optimizing\n   * @param nodes contains the patch commands\n   */\n  public void liftUp(Row in, List<Row> nodes) {\n    Iterator<Cell> i = in.cells.values().iterator();\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0) {\n        Row to = nodes.get(c.ref);\n        int sum = to.uniformCmd(changeSkip);\n        if (sum >= 0) {\n          if (sum == c.cmd) {\n            if (changeSkip) {\n              if (c.skip != to.uniformSkip + 1) {\n                continue;\n              }\n              c.skip = to.uniformSkip + 1;\n            } else {\n              c.skip = 0;\n            }\n            c.cnt += to.uniformCnt;\n            c.ref = -1;\n          } else if (c.cmd < 0) {\n            c.cnt = to.uniformCnt;\n            c.cmd = sum;\n            c.ref = -1;\n            if (changeSkip) {\n              c.skip = to.uniformSkip + 1;\n            } else {\n              c.skip = 0;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Reduce the trie using Lift-Up reduction.\n   * <p>\n   * The Lift-Up reduction propagates all leaf-values (patch commands), where\n   * possible, to higher levels which are closer to the root of the trie.\n   * \n   * @param in the Row to consider when optimizing\n   * @param nodes contains the patch commands\n   */\n  public void liftUp(Row in, List<Row> nodes) {\n    Iterator<Cell> i = in.cells.values().iterator();\n    for (; i.hasNext();) {\n      Cell c = i.next();\n      if (c.ref >= 0) {\n        Row to = nodes.get(c.ref);\n        int sum = to.uniformCmd(changeSkip);\n        if (sum >= 0) {\n          if (sum == c.cmd) {\n            if (changeSkip) {\n              if (c.skip != to.uniformSkip + 1) {\n                continue;\n              }\n              c.skip = to.uniformSkip + 1;\n            } else {\n              c.skip = 0;\n            }\n            c.cnt += to.uniformCnt;\n            c.ref = -1;\n          } else if (c.cmd < 0) {\n            c.cnt = to.uniformCnt;\n            c.cmd = sum;\n            c.ref = -1;\n            if (changeSkip) {\n              c.skip = to.uniformSkip + 1;\n            } else {\n              c.skip = 0;\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67748b41458c73d49a48168362cc7f4c960a2542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["67748b41458c73d49a48168362cc7f4c960a2542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67748b41458c73d49a48168362cc7f4c960a2542"],"67748b41458c73d49a48168362cc7f4c960a2542":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}