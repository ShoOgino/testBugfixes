{"path":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<String, Int>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","bugFix":null,"bugIntro":["e562682007e295029696e354ac6947531b083c79"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d","date":1405005344,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  public PriorityQueue<Object[]> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e562682007e295029696e354ac6947531b083c79","date":1459152450,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis#retrieveTerms(Reader,String).mjava","sourceNew":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Map<String, Int>> field2termFreqMap = new HashMap<>();\n    addTermFrequencies(r, field2termFreqMap, fieldName);\n    return createQueue(field2termFreqMap);\n  }\n\n","sourceOld":"  /**\n   * Find words for a more-like-this query former.\n   * The result is a priority queue of arrays with one entry for <b>every word</b> in the document.\n   * Each array has 6 elements.\n   * The elements are:\n   * <ol>\n   * <li> The word (String)\n   * <li> The top field that this word comes from (String)\n   * <li> The score for this word (Float)\n   * <li> The IDF value (Float)\n   * <li> The frequency of this word in the index (Integer)\n   * <li> The frequency of this word in the source document (Integer)\n   * </ol>\n   * This is a somewhat \"advanced\" routine, and in general only the 1st entry in the array is of interest.\n   * This method is exposed so that you can identify the \"interesting words\" in a document.\n   * For an easier method to call see {@link #retrieveInterestingTerms retrieveInterestingTerms()}.\n   *\n   * @param r the reader that has the content of the document\n   * @param fieldName field passed to the analyzer to use when analyzing the content\n   * @return the most interesting words in the document ordered by score, with the highest scoring, or best entry, first\n   * @see #retrieveInterestingTerms\n   */\n  private PriorityQueue<ScoreTerm> retrieveTerms(Reader r, String fieldName) throws IOException {\n    Map<String, Int> words = new HashMap<>();\n    addTermFrequencies(r, words, fieldName);\n    return createQueue(words);\n  }\n\n","bugFix":["ae46d105c94ea6ceb5201189bf9611bdef91b1b4","634f330c54fd3f9f491d52036dc3f40b4f4d8934","e141595402370bee958745de8b1c9de1fa182581"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e562682007e295029696e354ac6947531b083c79":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e562682007e295029696e354ac6947531b083c79"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"2f73cfcb38e83bad8ad6dce5dd4f021d44efe73d":["e562682007e295029696e354ac6947531b083c79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"e562682007e295029696e354ac6947531b083c79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}