{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"/dev/null","sourceNew":"  public int doLogic() throws IOException {\r\n    Directory dir = getRunData().getDirectory();\r\n    Analyzer analyzer = getRunData().getAnalyzer();\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\r\n    \r\n    Config config = getRunData().getConfig();\r\n    \r\n    boolean cmpnd = config.get(\"compound\",true);\r\n    int mrgf = config.get(\"merge.factor\",10);\r\n    int mxbf = config.get(\"max.buffered\",10);\r\n\r\n    // must update params for newly opened writer\r\n    writer.setMaxBufferedDocs(mxbf);\r\n    writer.setMergeFactor(mrgf);\r\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\r\n    \r\n    getRunData().setIndexWriter(writer);\r\n    return 1;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\r\n    Directory dir = getRunData().getDirectory();\r\n    Analyzer analyzer = getRunData().getAnalyzer();\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\r\n    \r\n    Config config = getRunData().getConfig();\r\n    \r\n    boolean cmpnd = config.get(\"compound\",true);\r\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n\r\n    // must update params for newly opened writer\r\n    writer.setMaxBufferedDocs(mxbf);\r\n    writer.setMergeFactor(mrgf);\r\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\r\n    \r\n    getRunData().setIndexWriter(writer);\r\n    return 1;\r\n  }\r\n\n","sourceOld":"  public int doLogic() throws IOException {\r\n    Directory dir = getRunData().getDirectory();\r\n    Analyzer analyzer = getRunData().getAnalyzer();\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\r\n    \r\n    Config config = getRunData().getConfig();\r\n    \r\n    boolean cmpnd = config.get(\"compound\",true);\r\n    int mrgf = config.get(\"merge.factor\",10);\r\n    int mxbf = config.get(\"max.buffered\",10);\r\n\r\n    // must update params for newly opened writer\r\n    writer.setMaxBufferedDocs(mxbf);\r\n    writer.setMergeFactor(mrgf);\r\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\r\n    \r\n    getRunData().setIndexWriter(writer);\r\n    return 1;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n\n    // must update params for newly opened writer\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\r\n    Directory dir = getRunData().getDirectory();\r\n    Analyzer analyzer = getRunData().getAnalyzer();\r\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\r\n    \r\n    Config config = getRunData().getConfig();\r\n    \r\n    boolean cmpnd = config.get(\"compound\",true);\r\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n\r\n    // must update params for newly opened writer\r\n    writer.setMaxBufferedDocs(mxbf);\r\n    writer.setMergeFactor(mrgf);\r\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\r\n    \r\n    getRunData().setIndexWriter(writer);\r\n    return 1;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105afd3f649c3faf4685df2d26cc3be1f7e51b2b","date":1183256350,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n\n    // must update params for newly opened writer\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n\n    // must update params for newly opened writer\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c528d38c8d9b2452e932321931b11e7c19a96d5","date":1185353698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n    double flushAtRAMUsage = config.get(\"ram.flush.mb\", OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    boolean autoCommit = config.get(\"autocommit\", OpenIndexTask.DEFAULT_AUTO_COMMIT);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, analyzer, false);\n\n    // must update params for newly opened writer\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    IndexWriter writer = new IndexWriter(dir, analyzer, false);\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n\n    // must update params for newly opened writer\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4","date":1190750527,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n    double flushAtRAMUsage = config.get(\"ram.flush.mb\", DEFAULT_RAM_FLUSH_MB);\n    boolean autoCommit = config.get(\"autocommit\", DEFAULT_AUTO_COMMIT);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, analyzer, false);\n\n    // must update params for newly opened writer\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    else if (mxbf != 0)\n      writer.setMaxBufferedDocs(mxbf);\n    else\n      throw new RuntimeException(\"either max.buffered or ram.flush.mb must be non-zero\");\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n    double flushAtRAMUsage = config.get(\"ram.flush.mb\", OpenIndexTask.DEFAULT_RAM_FLUSH_MB);\n    boolean autoCommit = config.get(\"autocommit\", OpenIndexTask.DEFAULT_AUTO_COMMIT);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, analyzer, false);\n\n    // must update params for newly opened writer\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d6b7628166e3e58a411c83f120233cbaf3fc052","date":1199324898,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n    double flushAtRAMUsage = config.get(\"ram.flush.mb\", DEFAULT_RAM_FLUSH_MB);\n    boolean autoCommit = config.get(\"autocommit\", DEFAULT_AUTO_COMMIT);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, analyzer, false);\n\n    // must update params for newly opened writer\n    writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n    double flushAtRAMUsage = config.get(\"ram.flush.mb\", DEFAULT_RAM_FLUSH_MB);\n    boolean autoCommit = config.get(\"autocommit\", DEFAULT_AUTO_COMMIT);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, analyzer, false);\n\n    // must update params for newly opened writer\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    else if (mxbf != 0)\n      writer.setMaxBufferedDocs(mxbf);\n    else\n      throw new RuntimeException(\"either max.buffered or ram.flush.mb must be non-zero\");\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95bf9c30ed04bd202c0161831dc06decc6670b73","date":1200828698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         config.get(\"autocommit\", DEFAULT_AUTO_COMMIT),\n                                         runData.getAnalyzer(),\n                                         false);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    Directory dir = getRunData().getDirectory();\n    Analyzer analyzer = getRunData().getAnalyzer();\n    \n    Config config = getRunData().getConfig();\n    \n    boolean cmpnd = config.get(\"compound\",true);\n    int mrgf = config.get(\"merge.factor\",DEFAULT_MERGE_PFACTOR);\n    int mxbf = config.get(\"max.buffered\",DEFAULT_MAX_BUFFERED);\n    int mxfl = config.get(\"max.field.length\",DEFAULT_MAX_FIELD_LENGTH);\n    double flushAtRAMUsage = config.get(\"ram.flush.mb\", DEFAULT_RAM_FLUSH_MB);\n    boolean autoCommit = config.get(\"autocommit\", DEFAULT_AUTO_COMMIT);\n    IndexWriter writer = new IndexWriter(dir, autoCommit, analyzer, false);\n\n    // must update params for newly opened writer\n    writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    writer.setMaxBufferedDocs(mxbf);\n    writer.setMaxFieldLength(mxfl);\n    writer.setMergeFactor(mrgf);\n    writer.setUseCompoundFile(cmpnd); // this one redundant?\n    if (flushAtRAMUsage > 0)\n      writer.setRAMBufferSizeMB(flushAtRAMUsage);\n    \n    getRunData().setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         config.get(\"autocommit\", DEFAULT_AUTO_COMMIT),\n                                         runData.getAnalyzer(),\n                                         false, IndexWriter.MaxFieldLength.LIMITED);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         config.get(\"autocommit\", DEFAULT_AUTO_COMMIT),\n                                         runData.getAnalyzer(),\n                                         false);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         config.get(\"autocommit\", DEFAULT_AUTO_COMMIT),\n                                         runData.getAnalyzer(),\n                                         false);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         config.get(\"autocommit\", DEFAULT_AUTO_COMMIT),\n                                         runData.getAnalyzer(),\n                                         false, IndexWriter.MaxFieldLength.LIMITED);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         false,\n                                         IndexWriter.MaxFieldLength.UNLIMITED);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         config.get(\"autocommit\", DEFAULT_AUTO_COMMIT),\n                                         runData.getAnalyzer(),\n                                         false);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d57eb7c98c08c03af6e4cd83509df31c81ac16af","date":1257684312,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         false,\n                                         IndexWriter.MaxFieldLength.UNLIMITED);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         false,\n                                         IndexWriter.MaxFieldLength.UNLIMITED);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3353540ef2debe4c4c017e9d86e2c60f9e784336","date":1258197258,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         CreateIndexTask.getIndexDeletionPolicy(config),\n                                         IndexWriter.MaxFieldLength.UNLIMITED,\n                                         ic);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         false,\n                                         IndexWriter.MaxFieldLength.UNLIMITED);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n        new IndexWriterConfig(Version.LUCENE_CURRENT).setAnalyzer(\n            runData.getAnalyzer()).setIndexDeletionPolicy(\n            CreateIndexTask.getIndexDeletionPolicy(config)).setIndexCommit(ic));\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         CreateIndexTask.getIndexDeletionPolicy(config),\n                                         IndexWriter.MaxFieldLength.UNLIMITED,\n                                         ic);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         CreateIndexTask.getIndexDeletionPolicy(config),\n                                         IndexWriter.MaxFieldLength.UNLIMITED,\n                                         ic);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n        new IndexWriterConfig(Version.LUCENE_CURRENT).setAnalyzer(\n            runData.getAnalyzer()).setIndexDeletionPolicy(\n            CreateIndexTask.getIndexDeletionPolicy(config)).setIndexCommit(ic));\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n        new IndexWriterConfig(Version.LUCENE_CURRENT, runData.getAnalyzer())\n            .setIndexDeletionPolicy(CreateIndexTask.getIndexDeletionPolicy(config))\n            .setIndexCommit(ic));\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n                                         runData.getAnalyzer(),\n                                         CreateIndexTask.getIndexDeletionPolicy(config),\n                                         IndexWriter.MaxFieldLength.UNLIMITED,\n                                         ic);\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/OpenIndexTask#doLogic().mjava","sourceNew":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n        new IndexWriterConfig(Version.LUCENE_CURRENT, runData.getAnalyzer())\n            .setIndexDeletionPolicy(CreateIndexTask.getIndexDeletionPolicy(config))\n            .setIndexCommit(ic));\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","sourceOld":"  @Override\n  public int doLogic() throws IOException {\n    PerfRunData runData = getRunData();\n    Config config = runData.getConfig();\n    final IndexCommit ic;\n    if (commitUserData != null) {\n      ic = OpenReaderTask.findIndexCommit(runData.getDirectory(), commitUserData);\n    } else {\n      ic = null;\n    }\n    \n    IndexWriter writer = new IndexWriter(runData.getDirectory(),\n        new IndexWriterConfig(Version.LUCENE_CURRENT, runData.getAnalyzer())\n            .setIndexDeletionPolicy(CreateIndexTask.getIndexDeletionPolicy(config))\n            .setIndexCommit(ic));\n    CreateIndexTask.setIndexWriterConfig(writer, config);\n    runData.setIndexWriter(writer);\n    return 1;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95bf9c30ed04bd202c0161831dc06decc6670b73":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["95bf9c30ed04bd202c0161831dc06decc6670b73"],"3353540ef2debe4c4c017e9d86e2c60f9e784336":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["105afd3f649c3faf4685df2d26cc3be1f7e51b2b"],"105afd3f649c3faf4685df2d26cc3be1f7e51b2b":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d6b7628166e3e58a411c83f120233cbaf3fc052":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"87c966e9308847938a7c905c2e46a56d8df788b8":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"95bf9c30ed04bd202c0161831dc06decc6670b73":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["87c966e9308847938a7c905c2e46a56d8df788b8"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["105afd3f649c3faf4685df2d26cc3be1f7e51b2b"],"d57eb7c98c08c03af6e4cd83509df31c81ac16af":["3353540ef2debe4c4c017e9d86e2c60f9e784336"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"3353540ef2debe4c4c017e9d86e2c60f9e784336":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"3c528d38c8d9b2452e932321931b11e7c19a96d5":["2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4"],"105afd3f649c3faf4685df2d26cc3be1f7e51b2b":["3c528d38c8d9b2452e932321931b11e7c19a96d5"],"2e0d75d47683f1bcf4a7c6de9d79ac3b91de51c4":["1d6b7628166e3e58a411c83f120233cbaf3fc052"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"1d6b7628166e3e58a411c83f120233cbaf3fc052":["95bf9c30ed04bd202c0161831dc06decc6670b73"],"87c966e9308847938a7c905c2e46a56d8df788b8":["d57eb7c98c08c03af6e4cd83509df31c81ac16af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}