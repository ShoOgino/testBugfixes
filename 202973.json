{"path":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","commits":[{"id":"4039ee26c484fda13f0428eeeb09969370ff9149","date":1183229536,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    UpdateRequestProcessor processor = processorFactory.getInstance( req );\n    \n    AddUpdateCommand addCmd = null;   \n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return processor.getResponse();\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n//              } else if (MODE.equals(attrName)) {\n//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            SolrInputDocument doc = readDoc( parser );\n            processor.processAdd( addCmd, doc );\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    UpdateRequestProcessor processor = processorFactory.getInstance( req );\n    \n    AddUpdateCommand addCmd = null;   \n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return processor.getResponse();\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n//              } else if (MODE.equals(attrName)) {\n//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            SolrInputDocument doc = readDoc( parser );\n            processor.processAdd( addCmd, doc );\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b59d86a78c7ec52b8678546cbe2b05cebe819cf","date":1183497921,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    UpdateRequestProcessor processor = processorFactory.getInstance( req );\n    \n    AddUpdateCommand addCmd = null;   \n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return processor.finish();\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n//              } else if (MODE.equals(attrName)) {\n//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            SolrInputDocument doc = readDoc( parser );\n            processor.processAdd( addCmd, doc );\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    UpdateRequestProcessor processor = processorFactory.getInstance( req );\n    \n    AddUpdateCommand addCmd = null;   \n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return processor.getResponse();\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n//              } else if (MODE.equals(attrName)) {\n//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            SolrInputDocument doc = readDoc( parser );\n            processor.processAdd( addCmd, doc );\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87b35b4a5f61517716607e0ae9fe449bdbbf6bb6","date":1183656998,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    UpdateRequestProcessor processor = processorFactory.getInstance( req );\n    \n    AddUpdateCommand addCmd = null;   \n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return processor.finish();\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n//              } else if (MODE.equals(attrName)) {\n//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            addCmd.indexedId = null;\n            SolrInputDocument doc = readDoc( parser );\n            processor.processAdd( addCmd, doc );\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    UpdateRequestProcessor processor = processorFactory.getInstance( req );\n    \n    AddUpdateCommand addCmd = null;   \n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return processor.finish();\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n//              } else if (MODE.equals(attrName)) {\n//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            SolrInputDocument doc = readDoc( parser );\n            processor.processAdd( addCmd, doc );\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6589002090bd74db749eef5befe2f447c0e3dd49","date":1184345280,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(UpdateRequestProcessor,XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#processUpdate(SolrQueryRequest,SolrCore,XMLStreamReader).mjava","sourceNew":"  /**\n   * @since solr 1.2\n   */\n  void processUpdate( UpdateRequestProcessor processor, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    AddUpdateCommand addCmd = null;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return;\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            addCmd.clear();\n            addCmd.solrDoc = readDoc( parser );\n            processor.processAdd(addCmd);\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","sourceOld":"  /**\n   * @since solr 1.2\n   */\n  NamedList<Object> processUpdate( SolrQueryRequest req, SolrCore core, XMLStreamReader parser)\n    throws XMLStreamException, IOException, FactoryConfigurationError,\n          InstantiationException, IllegalAccessException,\n          TransformerConfigurationException \n  {\n    UpdateRequestProcessor processor = processorFactory.getInstance( req );\n    \n    AddUpdateCommand addCmd = null;   \n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT:\n          parser.close();\n          return processor.finish();\n\n        case XMLStreamConstants.START_ELEMENT:\n          String currTag = parser.getLocalName();\n          if (currTag.equals(ADD)) {\n            log.finest(\"SolrCore.update(add)\");\n            \n            addCmd = new AddUpdateCommand();\n            boolean overwrite=true;  // the default\n\n            Boolean overwritePending = null;\n            Boolean overwriteCommitted = null;\n            for (int i=0; i<parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (OVERWRITE.equals(attrName)) {\n                overwrite = StrUtils.parseBoolean(attrVal);\n//              } else if (MODE.equals(attrName)) {\n//                addCmd.mode = SolrPluginUtils.parseAndValidateFieldModes(attrVal,schema);\n              } else if (ALLOW_DUPS.equals(attrName)) {\n                overwrite = !StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_PENDING.equals(attrName) ) {\n                overwritePending = StrUtils.parseBoolean(attrVal);\n              } else if ( OVERWRITE_COMMITTED.equals(attrName) ) {\n                overwriteCommitted = StrUtils.parseBoolean(attrVal);\n              } else {\n                log.warning(\"Unknown attribute id in add:\" + attrName);\n              }\n            }\n            \n            // check if these flags are set\n            if( overwritePending != null && overwriteCommitted != null ) {\n              if( overwritePending != overwriteCommitted ) {\n                throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \n                    \"can't have different values for 'overwritePending' and 'overwriteCommitted'\" );\n              }\n              overwrite=overwritePending;\n            }\n            addCmd.overwriteCommitted =  overwrite;\n            addCmd.overwritePending   =  overwrite;\n            addCmd.allowDups          = !overwrite;\n          } \n          else if (\"doc\".equals(currTag)) {\n            log.finest(\"adding doc...\");\n            addCmd.indexedId = null;\n            SolrInputDocument doc = readDoc( parser );\n            processor.processAdd( addCmd, doc );\n          } \n          else if ( COMMIT.equals(currTag) || OPTIMIZE.equals(currTag)) {\n            log.finest(\"parsing \" + currTag);\n\n            CommitUpdateCommand cmd = new CommitUpdateCommand(OPTIMIZE.equals(currTag));\n\n            boolean sawWaitSearcher = false, sawWaitFlush = false;\n            for (int i = 0; i < parser.getAttributeCount(); i++) {\n              String attrName = parser.getAttributeLocalName(i);\n              String attrVal = parser.getAttributeValue(i);\n              if (WAIT_FLUSH.equals(attrName)) {\n                cmd.waitFlush = StrUtils.parseBoolean(attrVal);\n                sawWaitFlush = true;\n              } else if (WAIT_SEARCHER.equals(attrName)) {\n                cmd.waitSearcher = StrUtils.parseBoolean(attrVal);\n                sawWaitSearcher = true;\n              } else {\n                log.warning(\"unexpected attribute commit/@\" + attrName);\n              }\n            }\n\n            // If waitFlush is specified and waitSearcher wasn't, then\n            // clear waitSearcher.\n            if (sawWaitFlush && !sawWaitSearcher) {\n              cmd.waitSearcher = false;\n            }\n            processor.processCommit( cmd );\n          } // end commit\n          else if (DELETE.equals(currTag)) {\n            log.finest(\"parsing delete\");\n            processDelete( processor, parser);\n          } // end delete\n          break;\n       }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4039ee26c484fda13f0428eeeb09969370ff9149":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b59d86a78c7ec52b8678546cbe2b05cebe819cf":["4039ee26c484fda13f0428eeeb09969370ff9149"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"6589002090bd74db749eef5befe2f447c0e3dd49":["87b35b4a5f61517716607e0ae9fe449bdbbf6bb6"],"87b35b4a5f61517716607e0ae9fe449bdbbf6bb6":["7b59d86a78c7ec52b8678546cbe2b05cebe819cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4039ee26c484fda13f0428eeeb09969370ff9149":["7b59d86a78c7ec52b8678546cbe2b05cebe819cf"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4039ee26c484fda13f0428eeeb09969370ff9149"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7b59d86a78c7ec52b8678546cbe2b05cebe819cf":["87b35b4a5f61517716607e0ae9fe449bdbbf6bb6"],"6589002090bd74db749eef5befe2f447c0e3dd49":[],"87b35b4a5f61517716607e0ae9fe449bdbbf6bb6":["6589002090bd74db749eef5befe2f447c0e3dd49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6589002090bd74db749eef5befe2f447c0e3dd49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}