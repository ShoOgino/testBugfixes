{"path":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","commits":[{"id":"39899cd24f88f2d580857d57be8aebc1f467f5c6","date":1363793635,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setIndexed(fieldInfo.isIndexed());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setIndexed(fieldInfo.isIndexed());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setIndexed(fieldInfo.isIndexed());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,byte[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, byte[] bytes) throws IOException {\n      String value = new String(bytes, StandardCharsets.UTF_8);\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"399d127639ae13222a8545b50e0ac545a6bcd2d7","date":1428704686,"type":6,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.SetNonLazyFieldSelector#stringField(FieldInfo,byte[]).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, byte[] bytes) throws IOException {\n      String value = new String(bytes, StandardCharsets.UTF_8);\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"500188ac33da6ce742a5b18858f34701ef16c77a","date":1558462722,"type":1,"author":"Namgyu Kim","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,String).mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/document/TestLazyDocument.LazyTestingStoredFieldVisitor#stringField(FieldInfo,byte[]).mjava","sourceNew":"    @Override\n    public void stringField(FieldInfo fieldInfo, String value) throws IOException {\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      Objects.requireNonNull(value, \"String value should not be null\");\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","sourceOld":"    @Override\n    public void stringField(FieldInfo fieldInfo, byte[] bytes) throws IOException {\n      String value = new String(bytes, StandardCharsets.UTF_8);\n      final FieldType ft = new FieldType(TextField.TYPE_STORED);\n      ft.setStoreTermVectors(fieldInfo.hasVectors());\n      ft.setOmitNorms(fieldInfo.omitsNorms());\n      ft.setIndexOptions(fieldInfo.getIndexOptions());\n      doc.add(new Field(fieldInfo.name, value, ft));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["39899cd24f88f2d580857d57be8aebc1f467f5c6","3184874f7f3aca850248483485b4995343066875"],"39899cd24f88f2d580857d57be8aebc1f467f5c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"500188ac33da6ce742a5b18858f34701ef16c77a":["399d127639ae13222a8545b50e0ac545a6bcd2d7"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["3184874f7f3aca850248483485b4995343066875"],"3184874f7f3aca850248483485b4995343066875":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["500188ac33da6ce742a5b18858f34701ef16c77a"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"39899cd24f88f2d580857d57be8aebc1f467f5c6":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","3184874f7f3aca850248483485b4995343066875"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39899cd24f88f2d580857d57be8aebc1f467f5c6"],"500188ac33da6ce742a5b18858f34701ef16c77a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"399d127639ae13222a8545b50e0ac545a6bcd2d7":["500188ac33da6ce742a5b18858f34701ef16c77a"],"3184874f7f3aca850248483485b4995343066875":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","399d127639ae13222a8545b50e0ac545a6bcd2d7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}