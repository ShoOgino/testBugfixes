{"path":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    TermEnum aprioriTermEnum = aprioriReader.terms();\n    TermEnum testTermEnum = testReader.terms();\n\n\n    while (true) {\n\n      if (!aprioriTermEnum.next()) {\n        assertFalse(testTermEnum.next());\n        break;\n      }\n      assertTrue(testTermEnum.next());\n\n      assertEquals(aprioriTermEnum.term(), testTermEnum.term());\n      assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n      // compare termDocs seeking\n\n      TermDocs aprioriTermDocsSeeker = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocsSeeker = testReader.termDocs(testTermEnum.term());\n\n      while (aprioriTermDocsSeeker.next()) {\n        assertTrue(testTermDocsSeeker.skipTo(aprioriTermDocsSeeker.doc()));\n        assertEquals(aprioriTermDocsSeeker.doc(), testTermDocsSeeker.doc());\n      }\n\n      aprioriTermDocsSeeker.close();\n      testTermDocsSeeker.close();\n\n      // compare documents per term\n\n      assertEquals(aprioriReader.docFreq(aprioriTermEnum.term()), testReader.docFreq(testTermEnum.term()));\n\n      TermDocs aprioriTermDocs = aprioriReader.termDocs(aprioriTermEnum.term());\n      TermDocs testTermDocs = testReader.termDocs(testTermEnum.term());\n\n      while (true) {\n        if (!aprioriTermDocs.next()) {\n          assertFalse(testTermDocs.next());\n          break;\n        }\n        assertTrue(testTermDocs.next());\n\n        assertEquals(aprioriTermDocs.doc(), testTermDocs.doc());\n        assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n      }\n\n      aprioriTermDocs.close();\n      testTermDocs.close();\n\n      // compare term positions\n\n      TermPositions testTermPositions = testReader.termPositions(testTermEnum.term());\n      TermPositions aprioriTermPositions = aprioriReader.termPositions(aprioriTermEnum.term());\n\n      if (aprioriTermPositions != null) {\n\n        for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n          boolean hasNext = aprioriTermPositions.next();\n          if (hasNext) {\n            assertTrue(testTermPositions.next());\n\n            assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n\n            for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n              int aprioriPos = aprioriTermPositions.nextPosition();\n              int testPos = testTermPositions.nextPosition();\n\n              if (aprioriPos != testPos) {\n                assertEquals(aprioriPos, testPos);\n              }\n\n\n              assertEquals(aprioriTermPositions.isPayloadAvailable(), testTermPositions.isPayloadAvailable());\n              if (aprioriTermPositions.isPayloadAvailable()) {\n                assertEquals(aprioriTermPositions.getPayloadLength(), testTermPositions.getPayloadLength());\n                byte[] aprioriPayloads = aprioriTermPositions.getPayload(new byte[aprioriTermPositions.getPayloadLength()], 0);\n                byte[] testPayloads = testTermPositions.getPayload(new byte[testTermPositions.getPayloadLength()], 0);\n                for (int i = 0; i < aprioriPayloads.length; i++) {\n                  assertEquals(aprioriPayloads[i], testPayloads[i]);\n                }\n              }\n\n            }\n          }\n        }\n\n        aprioriTermPositions.close();\n        testTermPositions.close();\n\n      }\n    }\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n\n    }\n\n    aprioriTermEnum.close();\n    testTermEnum.close();\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"406e7055a3e99d3fa6ce49a555a51dd18b321806","date":1282520243,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":["e7a005111928c661ab5d236ed6a3a079b438d2cf","84b845bea7b5e25a9e616e0b2b032633489df98b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n\n    }\n\n    for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n      assertEquals(aprioriReader.isDeleted(docIndex), testReader.isDeleted(docIndex));\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        MultiNorms.norms(testReader, (String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        MultiNorms.norms(testReader, (String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        MultiNorms.norms(testReader, (String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        MultiNorms.norms(testReader, (String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d53c3f769ca0f9e7434937b792877770271aecf","date":1294785129,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        MultiNorms.norms(testReader, (String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        MultiNorms.norms(testReader, (String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        MultiNorms.norms(testReader, (String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        MultiNorms.norms(testReader, (String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        MultiNorms.norms(testReader, (String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        MultiNorms.norms(testReader, (String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = aprioriReader.norms((String) field);\n      byte[] testNorms = testReader.norms((String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        aprioriReader.norms((String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        testReader.norms((String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        aprioriReader.norms((String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        testReader.norms((String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ecd298fdc085e7eba27afa7fae58df1ba1a2808","date":1295102557,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16843358872ed92ba92888ab99df297550b9a36a","date":1295144724,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc()];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 0);\n\n        testNorms = new byte[testReader.maxDoc()];\n        MultiNorms.norms(testReader, (String) field, testNorms, 0);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n\n\n        // test norms as used by multireader\n\n        aprioriNorms = new byte[aprioriReader.maxDoc() + 10];\n        MultiNorms.norms(aprioriReader, (String) field, aprioriNorms, 10);\n\n        testNorms = new byte[testReader.maxDoc() + 10];\n        MultiNorms.norms(testReader, (String) field, testNorms, 10);\n\n        assertEquals(aprioriNorms.length, testNorms.length);\n        \n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apLiveDocs = MultiFields.getLiveDocs(aprioriReader);\n    final Bits testLiveDocs = MultiFields.getLiveDocs(testReader);\n    assertTrue((apLiveDocs != null && testLiveDocs != null) || \n               (apLiveDocs == null && testLiveDocs == null));\n    if (apLiveDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apLiveDocs.get(docIndex), testLiveDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getLiveDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apLiveDocs = MultiFields.getLiveDocs(aprioriReader);\n    final Bits testLiveDocs = MultiFields.getLiveDocs(testReader);\n    assertTrue((apLiveDocs != null && testLiveDocs != null) || \n               (apLiveDocs == null && testLiveDocs == null));\n    if (apLiveDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apLiveDocs.get(docIndex), testLiveDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getLiveDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apLiveDocs = MultiFields.getLiveDocs(aprioriReader);\n    final Bits testLiveDocs = MultiFields.getLiveDocs(testReader);\n    assertTrue((apLiveDocs != null && testLiveDocs != null) || \n               (apLiveDocs == null && testLiveDocs == null));\n    if (apLiveDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apLiveDocs.get(docIndex), testLiveDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getLiveDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apDelDocs = MultiFields.getDeletedDocs(aprioriReader);\n    final Bits testDelDocs = MultiFields.getDeletedDocs(testReader);\n    assertTrue((apDelDocs != null && testDelDocs != null) || \n               (apDelDocs == null && testDelDocs == null));\n    if (apDelDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apDelDocs.get(docIndex), testDelDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getDeletedDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getDeletedDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getDeletedDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getDeletedDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/instantiated/src/test/org/apache/lucene/store/instantiated/TestIndicesEquals#testEquals(Directory,InstantiatedIndex).mjava","sourceNew":null,"sourceOld":"  protected void testEquals(Directory aprioriIndex, InstantiatedIndex testIndex) throws Exception {\n\n    if (VERBOSE) {\n      System.out.println(\"TEST: testEquals\");\n    }\n    testTermDocsSomeMore(aprioriIndex, testIndex);\n\n    IndexReader aprioriReader = IndexReader.open(aprioriIndex, false);\n    IndexReader testReader = testIndex.indexReaderFactory();\n\n    assertEquals(aprioriReader.numDocs(), testReader.numDocs());\n\n    // assert field options\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED), testReader.getFieldNames(IndexReader.FieldOption.INDEXED));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_NO_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.INDEXED_WITH_TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS), testReader.getFieldNames(IndexReader.FieldOption.STORES_PAYLOADS));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET), testReader.getFieldNames(IndexReader.FieldOption.TERMVECTOR_WITH_POSITION_OFFSET));\n    assertEquals(aprioriReader.getFieldNames(IndexReader.FieldOption.UNINDEXED), testReader.getFieldNames(IndexReader.FieldOption.UNINDEXED));\n\n    for (Object field : aprioriReader.getFieldNames(IndexReader.FieldOption.ALL)) {\n\n      // test norms as used by normal use\n\n      byte[] aprioriNorms = MultiNorms.norms(aprioriReader, (String) field);\n      byte[] testNorms = MultiNorms.norms(testReader, (String) field);\n\n      if (aprioriNorms != null) {\n        assertEquals(aprioriNorms.length, testNorms.length);\n\n        for (int i = 0; i < aprioriNorms.length; i++) {\n          assertEquals(\"norms does not equals for field \" + field + \" in document \" + i, aprioriNorms[i], testNorms[i]);\n        }\n      }\n    }\n\n    final Bits apLiveDocs = MultiFields.getLiveDocs(aprioriReader);\n    final Bits testLiveDocs = MultiFields.getLiveDocs(testReader);\n    assertTrue((apLiveDocs != null && testLiveDocs != null) || \n               (apLiveDocs == null && testLiveDocs == null));\n    if (apLiveDocs != null) {\n      for (int docIndex = 0; docIndex < aprioriReader.numDocs(); docIndex++) {\n        assertEquals(apLiveDocs.get(docIndex), testLiveDocs.get(docIndex));\n      }\n    }\n\n    // compare term enumeration stepping\n\n    FieldsEnum aprioriFieldsEnum = MultiFields.getFields(aprioriReader).iterator();\n    FieldsEnum testFieldsEnum = MultiFields.getFields(testReader).iterator();\n\n    String aprioriField;\n    while((aprioriField = aprioriFieldsEnum.next()) != null) {\n      String testField = testFieldsEnum.next();\n      if (VERBOSE) {\n        System.out.println(\"TEST: verify field=\" + testField);\n      }\n      assertEquals(aprioriField, testField);\n\n      TermsEnum aprioriTermEnum = aprioriFieldsEnum.terms();\n      TermsEnum testTermEnum = testFieldsEnum.terms();\n\n      BytesRef aprioriText;\n      while((aprioriText = aprioriTermEnum.next()) != null) {\n        assertEquals(aprioriText, testTermEnum.next());\n        if (VERBOSE) {\n          System.out.println(\"TEST:   verify term=\" + aprioriText.utf8ToString());\n        }\n\n        assertTrue(aprioriTermEnum.docFreq() == testTermEnum.docFreq());\n        final long totalTermFreq = aprioriTermEnum.totalTermFreq();\n        if (totalTermFreq != -1) {\n          assertEquals(totalTermFreq, testTermEnum.totalTermFreq());\n        }\n\n        // compare termDocs seeking\n\n        DocsEnum aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsEnum testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), null);\n        \n        while (aprioriTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS) {\n          assertTrue(testTermDocs.advance(aprioriTermDocs.docID()) != DocsEnum.NO_MORE_DOCS);\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n        }\n        \n        // compare documents per term\n        \n        assertEquals(aprioriReader.docFreq(aprioriField, aprioriTermEnum.term()), testReader.docFreq(aprioriField, testTermEnum.term()));\n\n        aprioriTermDocs = aprioriTermEnum.docs(MultiFields.getLiveDocs(aprioriReader), aprioriTermDocs);\n        testTermDocs = testTermEnum.docs(MultiFields.getLiveDocs(testReader), testTermDocs);\n\n        while (true) {\n          if (aprioriTermDocs.nextDoc() == DocsEnum.NO_MORE_DOCS) {\n            assertEquals(DocsEnum.NO_MORE_DOCS, testTermDocs.nextDoc());\n            break;\n          }\n          if (VERBOSE) {\n            System.out.println(\"TEST:     verify doc=\" + aprioriTermDocs.docID());\n          }\n\n          assertTrue(testTermDocs.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          assertEquals(aprioriTermDocs.docID(), testTermDocs.docID());\n          assertEquals(aprioriTermDocs.freq(), testTermDocs.freq());\n        }\n\n        // compare term positions\n\n        DocsAndPositionsEnum aprioriTermPositions = aprioriTermEnum.docsAndPositions(MultiFields.getLiveDocs(aprioriReader), null);\n        DocsAndPositionsEnum testTermPositions = testTermEnum.docsAndPositions(MultiFields.getLiveDocs(testReader), null);\n\n        if (VERBOSE) {\n          System.out.println(\"TEST: enum1=\" + aprioriTermPositions + \" enum2=\" + testTermPositions);\n        }\n        if (aprioriTermPositions != null) {\n\n          for (int docIndex = 0; docIndex < aprioriReader.maxDoc(); docIndex++) {\n            boolean hasNext = aprioriTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS;\n            if (hasNext) {\n              assertTrue(testTermPositions.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n              if (VERBOSE) {\n                System.out.println(\"TEST:     verify doc=\" + aprioriTermPositions.docID());\n              }\n              \n              assertEquals(aprioriTermPositions.freq(), testTermPositions.freq());\n\n              for (int termPositionIndex = 0; termPositionIndex < aprioriTermPositions.freq(); termPositionIndex++) {\n                int aprioriPos = aprioriTermPositions.nextPosition();\n                int testPos = testTermPositions.nextPosition();\n\n                if (VERBOSE) {\n                  System.out.println(\"TEST:       verify pos=\" + aprioriPos);\n                }\n\n                assertEquals(aprioriPos, testPos);\n\n                assertEquals(aprioriTermPositions.hasPayload(), testTermPositions.hasPayload());\n                if (aprioriTermPositions.hasPayload()) {\n                  BytesRef apPayload = aprioriTermPositions.getPayload();\n                  BytesRef testPayload = testTermPositions.getPayload();\n                  assertEquals(apPayload, testPayload);\n                }\n              }\n            }\n          }\n        }\n      }\n      assertNull(testTermEnum.next());\n    }\n    assertNull(testFieldsEnum.next());\n\n    // compare term vectors and position vectors\n\n    for (int documentNumber = 0; documentNumber < aprioriReader.numDocs(); documentNumber++) {\n\n      if (documentNumber > 0) {\n        assertNotNull(aprioriReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(aprioriReader.getTermFreqVector(documentNumber, \"b1\"));\n\n        assertNotNull(testReader.getTermFreqVector(documentNumber, \"b0\"));\n        assertNull(testReader.getTermFreqVector(documentNumber, \"b1\"));\n\n      }\n\n      TermFreqVector[] aprioriFreqVectors = aprioriReader.getTermFreqVectors(documentNumber);\n      TermFreqVector[] testFreqVectors = testReader.getTermFreqVectors(documentNumber);\n\n      if (aprioriFreqVectors != null && testFreqVectors != null) {\n\n        Arrays.sort(aprioriFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n        Arrays.sort(testFreqVectors, new Comparator<TermFreqVector>() {\n          public int compare(TermFreqVector termFreqVector, TermFreqVector termFreqVector1) {\n            return termFreqVector.getField().compareTo(termFreqVector1.getField());\n          }\n        });\n\n        assertEquals(\"document \" + documentNumber + \" vectors does not match\", aprioriFreqVectors.length, testFreqVectors.length);\n\n        for (int freqVectorIndex = 0; freqVectorIndex < aprioriFreqVectors.length; freqVectorIndex++) {\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTermFrequencies(), testFreqVectors[freqVectorIndex].getTermFrequencies()));\n          assertTrue(Arrays.equals(aprioriFreqVectors[freqVectorIndex].getTerms(), testFreqVectors[freqVectorIndex].getTerms()));\n\n          if (aprioriFreqVectors[freqVectorIndex] instanceof TermPositionVector) {\n            TermPositionVector aprioriTermPositionVector = (TermPositionVector) aprioriFreqVectors[freqVectorIndex];\n            TermPositionVector testTermPositionVector = (TermPositionVector) testFreqVectors[freqVectorIndex];\n\n            for (int positionVectorIndex = 0; positionVectorIndex < aprioriFreqVectors[freqVectorIndex].getTerms().length; positionVectorIndex++)\n            {\n              if (aprioriTermPositionVector.getOffsets(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getOffsets(positionVectorIndex), testTermPositionVector.getOffsets(positionVectorIndex)));\n              }\n\n              if (aprioriTermPositionVector.getTermPositions(positionVectorIndex) != null) {\n                assertTrue(Arrays.equals(aprioriTermPositionVector.getTermPositions(positionVectorIndex), testTermPositionVector.getTermPositions(positionVectorIndex)));\n              }\n            }\n          }\n\n        }\n      }\n    }\n\n    aprioriReader.close();\n    testReader.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["3d53c3f769ca0f9e7434937b792877770271aecf"],"70ad682703b8585f5d0a637efec044d57ec05efb":["406e7055a3e99d3fa6ce49a555a51dd18b321806","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["406e7055a3e99d3fa6ce49a555a51dd18b321806"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"16843358872ed92ba92888ab99df297550b9a36a":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"3cc749c053615f5871f3b95715fe292f34e70a53":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["6ecd298fdc085e7eba27afa7fae58df1ba1a2808","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3d53c3f769ca0f9e7434937b792877770271aecf":["b0d06946f61921459f43309f86ed621ebe67eebe"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["868da859b43505d9d2a023bfeae6dd0c795f5295","6ecd298fdc085e7eba27afa7fae58df1ba1a2808"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b0d06946f61921459f43309f86ed621ebe67eebe":["70ad682703b8585f5d0a637efec044d57ec05efb","3d53c3f769ca0f9e7434937b792877770271aecf"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["3cc749c053615f5871f3b95715fe292f34e70a53","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"16843358872ed92ba92888ab99df297550b9a36a":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","406e7055a3e99d3fa6ce49a555a51dd18b321806"],"3d53c3f769ca0f9e7434937b792877770271aecf":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"406e7055a3e99d3fa6ce49a555a51dd18b321806":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["16843358872ed92ba92888ab99df297550b9a36a"],"6ecd298fdc085e7eba27afa7fae58df1ba1a2808":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","16843358872ed92ba92888ab99df297550b9a36a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","29ef99d61cda9641b6250bf9567329a6e65f901d"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["5f4e87790277826a2aea119328600dfb07761f32","28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["16843358872ed92ba92888ab99df297550b9a36a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}