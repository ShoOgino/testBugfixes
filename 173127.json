{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b457657086a94b6291d86ffe5621f5dadab634","date":1337598421,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve the block (as long\n   * as none them were deleted).  But it's possible in the\n   * future that Lucene may more aggressively re-order\n   * documents (for example, perhaps to obtain better index\n   * compression), in which case you may need to fully\n   * re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","date":1341524239,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws CorruptIndexException, IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d028314cced5858683a1bb4741423d0f934257b","date":1346596535,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * <p><b>NOTE</b>: if this method hits an OutOfMemoryError\n   * you should immediately close the writer.  See <a\n   * href=\"#OOME\">above</a> for details.</p>\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    addDocuments(docs, analyzer);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-IndexDocument]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(IndexDocument)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends IndexDocument> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f6df47cbfd656ea50ca2996361f7954531ee18b","date":1464133540,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16ebfabc294f23b88b6a39722a02c9d39b353195","date":1464343867,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6483e4260c08168709c02238ae083a51519a28dd","date":1465117546,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"191128ac5b85671b1671e2c857437694283b6ebf","date":1465297861,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public void addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"110125c995236a7f61057dd04b039ed2d267f3a1","date":1521014987,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#addDocuments(Iterable[#-extends-Iterable[#-extends-IndexableField]]).mjava","sourceNew":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments((DocumentsWriterDeleteQueue.Node<?>) null, docs);\n  }\n\n","sourceOld":"  /**\n   * Atomically adds a block of documents with sequentially\n   * assigned document IDs, such that an external reader\n   * will see all or none of the documents.\n   *\n   * <p><b>WARNING</b>: the index does not currently record\n   * which documents were added as a block.  Today this is\n   * fine, because merging will preserve a block. The order of\n   * documents within a segment will be preserved, even when child\n   * documents within a block are deleted. Most search features\n   * (like result grouping and block joining) require you to\n   * mark documents; when these documents are deleted these\n   * search features will not work as expected. Obviously adding\n   * documents to an existing block will require you the reindex\n   * the entire block.\n   *\n   * <p>However it's possible that in the future Lucene may\n   * merge more aggressively re-order documents (for example,\n   * perhaps to obtain better index compression), in which case\n   * you may need to fully re-index your documents at that time.\n   *\n   * <p>See {@link #addDocument(Iterable)} for details on\n   * index and IndexWriter state after an Exception, and\n   * flushing/merging temporary free space requirements.</p>\n   *\n   * <p><b>NOTE</b>: tools that do offline splitting of an index\n   * (for example, IndexSplitter in contrib) or\n   * re-sorting of documents (for example, IndexSorter in\n   * contrib) are not aware of these atomically added documents\n   * and will likely break them up.  Use such tools at your\n   * own risk!\n   *\n   * @return The <a href=\"#sequence_number\">sequence number</a>\n   * for this operation\n   *\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   *\n   * @lucene.experimental\n   */\n  public long addDocuments(Iterable<? extends Iterable<? extends IndexableField>> docs) throws IOException {\n    return updateDocuments(null, docs);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6483e4260c08168709c02238ae083a51519a28dd":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","16ebfabc294f23b88b6a39722a02c9d39b353195"],"191128ac5b85671b1671e2c857437694283b6ebf":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["191128ac5b85671b1671e2c857437694283b6ebf"],"43b457657086a94b6291d86ffe5621f5dadab634":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["0f6df47cbfd656ea50ca2996361f7954531ee18b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","191128ac5b85671b1671e2c857437694283b6ebf"],"1d028314cced5858683a1bb4741423d0f934257b":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["43b457657086a94b6291d86ffe5621f5dadab634","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["43b457657086a94b6291d86ffe5621f5dadab634"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"ef0d8a69209261514c5739c770bba706c2308450":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","43b457657086a94b6291d86ffe5621f5dadab634"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["110125c995236a7f61057dd04b039ed2d267f3a1"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1d028314cced5858683a1bb4741423d0f934257b"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["43b457657086a94b6291d86ffe5621f5dadab634","ef0d8a69209261514c5739c770bba706c2308450"],"6483e4260c08168709c02238ae083a51519a28dd":["191128ac5b85671b1671e2c857437694283b6ebf"],"191128ac5b85671b1671e2c857437694283b6ebf":["110125c995236a7f61057dd04b039ed2d267f3a1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"16ebfabc294f23b88b6a39722a02c9d39b353195":["6483e4260c08168709c02238ae083a51519a28dd"],"110125c995236a7f61057dd04b039ed2d267f3a1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43b457657086a94b6291d86ffe5621f5dadab634":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe","ef0d8a69209261514c5739c770bba706c2308450"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1d028314cced5858683a1bb4741423d0f934257b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a":["1d028314cced5858683a1bb4741423d0f934257b"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["1d028314cced5858683a1bb4741423d0f934257b","33e9fa3b49f4a365a04fdfc8a32dbcd0df798f5a","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"0f6df47cbfd656ea50ca2996361f7954531ee18b":["16ebfabc294f23b88b6a39722a02c9d39b353195"],"ef0d8a69209261514c5739c770bba706c2308450":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["6483e4260c08168709c02238ae083a51519a28dd","191128ac5b85671b1671e2c857437694283b6ebf","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f6df47cbfd656ea50ca2996361f7954531ee18b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe33227f6805edab2036cbb80645cc4e2d1fa424","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}