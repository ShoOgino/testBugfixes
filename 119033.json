{"path":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#initialize(Class[#-extends-AbstractAnalysisFactory]).mjava","commits":[{"id":"b25aad9e32a4ea939af5033914bd68e852a5f13d","date":1476113868,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#initialize(Class[#-extends-AbstractAnalysisFactory]).mjava","pathOld":"/dev/null","sourceNew":"  /** tries to initialize a factory with no arguments */\n  private AbstractAnalysisFactory initialize(Class<? extends AbstractAnalysisFactory> factoryClazz) throws IOException {\n    Map<String,String> args = new HashMap<>();\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    Constructor<? extends AbstractAnalysisFactory> ctor;\n    try {\n      ctor = factoryClazz.getConstructor(Map.class);\n    } catch (Exception e) {\n      throw new RuntimeException(\"factory '\" + factoryClazz + \"' does not have a proper ctor!\");\n    }\n    \n    AbstractAnalysisFactory factory = null;\n    try {\n      factory = ctor.newInstance(args);\n    } catch (InstantiationException | IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      if (e.getCause() instanceof IllegalArgumentException) {\n        // it's ok if we dont provide the right parameters to throw this\n        return null;\n      }\n    }\n    \n    if (factory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) factory).inform(new StringMockResourceLoader(\"\"));\n      } catch (IOException ignored) {\n        // it's ok if the right files arent available or whatever to throw this\n      } catch (IllegalArgumentException ignored) {\n        // is this ok? I guess so\n      }\n    }\n    return factory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestFactories#initialize(Class[#-extends-AbstractAnalysisFactory]).mjava","pathOld":"/dev/null","sourceNew":"  /** tries to initialize a factory with no arguments */\n  private AbstractAnalysisFactory initialize(Class<? extends AbstractAnalysisFactory> factoryClazz) throws IOException {\n    Map<String,String> args = new HashMap<>();\n    args.put(\"luceneMatchVersion\", Version.LATEST.toString());\n    Constructor<? extends AbstractAnalysisFactory> ctor;\n    try {\n      ctor = factoryClazz.getConstructor(Map.class);\n    } catch (Exception e) {\n      throw new RuntimeException(\"factory '\" + factoryClazz + \"' does not have a proper ctor!\");\n    }\n    \n    AbstractAnalysisFactory factory = null;\n    try {\n      factory = ctor.newInstance(args);\n    } catch (InstantiationException | IllegalAccessException e) {\n      throw new RuntimeException(e);\n    } catch (InvocationTargetException e) {\n      if (e.getCause() instanceof IllegalArgumentException) {\n        // it's ok if we dont provide the right parameters to throw this\n        return null;\n      }\n    }\n    \n    if (factory instanceof ResourceLoaderAware) {\n      try {\n        ((ResourceLoaderAware) factory).inform(new StringMockResourceLoader(\"\"));\n      } catch (IOException ignored) {\n        // it's ok if the right files arent available or whatever to throw this\n      } catch (IllegalArgumentException ignored) {\n        // is this ok? I guess so\n      }\n    }\n    return factory;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b25aad9e32a4ea939af5033914bd68e852a5f13d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b25aad9e32a4ea939af5033914bd68e852a5f13d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b25aad9e32a4ea939af5033914bd68e852a5f13d"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b25aad9e32a4ea939af5033914bd68e852a5f13d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b25aad9e32a4ea939af5033914bd68e852a5f13d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}