{"path":"lucene/core/src/java/org/apache/lucene/index/TermStates#TermStates(Term,IndexReaderContext).mjava","commits":[{"id":"a6e9f769521480a623f897c0d59089b919fa4239","date":1515161835,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermStates#TermStates(Term,IndexReaderContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/TermContext#TermContext(IndexReaderContext).mjava","sourceNew":"  private TermStates(Term term, IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n    this.term = term;\n  }\n\n","sourceOld":"  /**\n   * Creates an empty {@link TermContext} from a {@link IndexReaderContext}\n   */\n  public TermContext(IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/TermStates#TermStates(Term,IndexReaderContext).mjava","pathOld":"/dev/null","sourceNew":"  private TermStates(Term term, IndexReaderContext context) {\n    assert context != null && context.isTopLevel;\n    topReaderContextIdentity = context.identity;\n    docFreq = 0;\n    totalTermFreq = 0;\n    final int len;\n    if (context.leaves() == null) {\n      len = 1;\n    } else {\n      len = context.leaves().size();\n    }\n    states = new TermState[len];\n    this.term = term;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6e9f769521480a623f897c0d59089b919fa4239"],"a6e9f769521480a623f897c0d59089b919fa4239":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a6e9f769521480a623f897c0d59089b919fa4239":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","a6e9f769521480a623f897c0d59089b919fa4239"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}