{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","commits":[{"id":"fa449cfca84dac88c4179c4b771dd9d1e80e8348","date":1334340256,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    System.out.println(\"server:\" + server1.getClass().toString());\n\n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["e2132eec5fa7dd07fc7ea6aa460a9d4f945e11b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2132eec5fa7dd07fc7ea6aa460a9d4f945e11b1","date":1334815294,"type":3,"author":"Sami Siren","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","sourceNew":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    System.out.println(\"server:\" + server1.getClass().toString());\n\n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n  }\n\n","bugFix":["fa449cfca84dac88c4179c4b771dd9d1e80e8348"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","sourceNew":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n    if (!(server1 instanceof EmbeddedSolrServer)) {\n      /* Do not shutdown in case of using EmbeddedSolrServer, \n       * as that would shutdown the CoreContainer */\n      server1.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","sourceNew":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n    if (!(server1 instanceof EmbeddedSolrServer)) {\n      /* Do not close in case of using EmbeddedSolrServer,\n       * as that would close the CoreContainer */\n      server1.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n    if (!(server1 instanceof EmbeddedSolrServer)) {\n      /* Do not shutdown in case of using EmbeddedSolrServer, \n       * as that would shutdown the CoreContainer */\n      server1.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","sourceNew":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrClient client = createNewSolrClient();\n    \n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    client.request(req);\n    client.request(req);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = client.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n    if (!(client instanceof EmbeddedSolrServer)) {\n      /* Do not close in case of using EmbeddedSolrServer,\n       * as that would close the CoreContainer */\n      client.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrServer server1 = createNewSolrServer();\n    \n    server1.deleteByQuery( \"*:*\" );\n    server1.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    server1.request(req);\n    server1.request(req);\n    server1.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = server1.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n    if (!(server1 instanceof EmbeddedSolrServer)) {\n      /* Do not close in case of using EmbeddedSolrServer,\n       * as that would close the CoreContainer */\n      server1.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testUpdateRequestWithParameters().mjava","sourceNew":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrClient client = createNewSolrClient();\n    \n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    client.request(req);\n    client.request(req);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = client.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n    if (!(client instanceof EmbeddedSolrServer)) {\n      /* Do not close in case of using EmbeddedSolrServer,\n       * as that would close the CoreContainer */\n      client.close();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testUpdateRequestWithParameters() throws Exception {\n    SolrClient client = createNewSolrClient();\n    \n    client.deleteByQuery(\"*:*\");\n    client.commit();\n    \n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"id1\");\n    \n    UpdateRequest req = new UpdateRequest();\n    req.setParam(\"overwrite\", \"false\");\n    req.add(doc);\n    client.request(req);\n    client.request(req);\n    client.commit();\n    \n    SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    QueryResponse rsp = client.query(query);\n    \n    SolrDocumentList out = rsp.getResults();\n    assertEquals(2, out.getNumFound());\n    if (!(client instanceof EmbeddedSolrServer)) {\n      /* Do not close in case of using EmbeddedSolrServer,\n       * as that would close the CoreContainer */\n      client.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["e2132eec5fa7dd07fc7ea6aa460a9d4f945e11b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"fa449cfca84dac88c4179c4b771dd9d1e80e8348":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"e2132eec5fa7dd07fc7ea6aa460a9d4f945e11b1":["fa449cfca84dac88c4179c4b771dd9d1e80e8348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cc3b13b430571c2e169f98fe38e1e7666f88522d"]},"commit2Childs":{"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa449cfca84dac88c4179c4b771dd9d1e80e8348"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["bafca15d8e408346a67f4282ad1143b88023893b"],"fa449cfca84dac88c4179c4b771dd9d1e80e8348":["e2132eec5fa7dd07fc7ea6aa460a9d4f945e11b1"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e2132eec5fa7dd07fc7ea6aa460a9d4f945e11b1":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}