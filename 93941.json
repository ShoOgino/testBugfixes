{"path":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldInfos(IndexReader,IndexReader).mjava","commits":[{"id":"aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a","date":1329823675,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldInfos(IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void assertFieldInfos(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<String>();\n    TreeSet<String> right = new TreeSet<String>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldInfos(IndexReader,IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public void assertFieldInfos(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<String>();\n    TreeSet<String> right = new TreeSet<String>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51c8450b3b616b6777f722ff4083c0bf946381a2","date":1363812022,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase#assertFieldInfosEquals(String,IndexReader,IndexReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDuelingCodecs#assertFieldInfos(IndexReader,IndexReader).mjava","sourceNew":"  public void assertFieldInfosEquals(String info, IndexReader leftReader, IndexReader rightReader) throws IOException {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<String>();\n    TreeSet<String> right = new TreeSet<String>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","sourceOld":"  public void assertFieldInfos(IndexReader leftReader, IndexReader rightReader) throws Exception {\n    FieldInfos leftInfos = MultiFields.getMergedFieldInfos(leftReader);\n    FieldInfos rightInfos = MultiFields.getMergedFieldInfos(rightReader);\n    \n    // TODO: would be great to verify more than just the names of the fields!\n    TreeSet<String> left = new TreeSet<String>();\n    TreeSet<String> right = new TreeSet<String>();\n    \n    for (FieldInfo fi : leftInfos) {\n      left.add(fi.name);\n    }\n    \n    for (FieldInfo fi : rightInfos) {\n      right.add(fi.name);\n    }\n    \n    assertEquals(info, left, right);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["51c8450b3b616b6777f722ff4083c0bf946381a2"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a"],"aa5e9d5b9508f9503c1a7a8a9fae90af6be6cb3a":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","51c8450b3b616b6777f722ff4083c0bf946381a2"],"51c8450b3b616b6777f722ff4083c0bf946381a2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}