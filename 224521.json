{"path":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String,String).mjava","commits":[{"id":"daa9f76a48e97bb2d40fc67ecdaad33d166d596e","date":1488856307,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String,String).mjava","pathOld":"/dev/null","sourceNew":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field, String type) throws Exception {\n    String date1 = \"1995-01-10T10:59:10Z\";\n    String date2 = \"1995-01-11T10:59:10Z\";\n    String date3 = \"1995-01-12T10:59:10Z\";\n    assertU(adoc(sdoc(\"id\", \"1\", field, date1)));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", date2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", date1))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(date1, date2, date3)))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date3+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac5a6354a5800dd1ade225010d614eeb8acf9152","date":1499731103,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String,String).mjava","sourceNew":null,"sourceOld":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field, String type) throws Exception {\n    String date1 = \"1995-01-10T10:59:10Z\";\n    String date2 = \"1995-01-11T10:59:10Z\";\n    String date3 = \"1995-01-12T10:59:10Z\";\n    assertU(adoc(sdoc(\"id\", \"1\", field, date1)));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", date2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", date1))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(date1, date2, date3)))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date3+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":4,"author":"Cao Manh Dat","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String,String).mjava","sourceNew":null,"sourceOld":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field, String type) throws Exception {\n    String date1 = \"1995-01-10T10:59:10Z\";\n    String date2 = \"1995-01-11T10:59:10Z\";\n    String date3 = \"1995-01-12T10:59:10Z\";\n    assertU(adoc(sdoc(\"id\", \"1\", field, date1)));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", date2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", date1))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(date1, date2, date3)))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date3+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/schema/TestPointFields#testMultiValuedDatePointFieldsAtomicUpdates(String,String).mjava","sourceNew":null,"sourceOld":"  private void testMultiValuedDatePointFieldsAtomicUpdates(String field, String type) throws Exception {\n    String date1 = \"1995-01-10T10:59:10Z\";\n    String date2 = \"1995-01-11T10:59:10Z\";\n    String date3 = \"1995-01-12T10:59:10Z\";\n    assertU(adoc(sdoc(\"id\", \"1\", field, date1)));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"add\", date2))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=2\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"remove\", date1))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=1\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"set\", ImmutableList.of(date1, date2, date3)))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date1+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date2+\"']\",\n        \"//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \"[.='\"+date3+\"']\",\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=3\");\n\n    assertU(adoc(sdoc(\"id\", \"1\", field, ImmutableMap.of(\"removeregex\", \".*\"))));\n    assertU(commit());\n\n    assertQ(req(\"q\", \"id:1\"),\n        \"count(//result/doc[1]/arr[@name='\" + field + \"']/\" + type + \")=0\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e","ac5a6354a5800dd1ade225010d614eeb8acf9152"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ac5a6354a5800dd1ade225010d614eeb8acf9152"]},"commit2Childs":{"daa9f76a48e97bb2d40fc67ecdaad33d166d596e":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","ac5a6354a5800dd1ade225010d614eeb8acf9152","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["daa9f76a48e97bb2d40fc67ecdaad33d166d596e"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"ac5a6354a5800dd1ade225010d614eeb8acf9152":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}