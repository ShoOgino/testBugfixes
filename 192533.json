{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ZkStateReader).mjava","sourceNew":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, ZkStateReader zkStateReader) {\n    // for backward compatibility\n    String autoAddReplicas = zkStateReader.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, zkStateReader);\n    ClusterState clusterState = zkStateReader.getClusterState();\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Policy.Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Policy.Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Policy.Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9ccfe45460d496c5e5e1b70396521dac842d966","date":1516798975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","date":1516881857,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return new NoneSuggester();\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return new NoneSuggester();\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","date":1523453934,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43345f1452f9510f8aaadae6156fe0c834e7d957","date":1523483670,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,ActionContext,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoAddReplicasPlanAction#getSuggester(Policy.Session,TriggerEvent,SolrCloudManager).mjava","sourceNew":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, ActionContext context, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, context, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","sourceOld":"  @Override\n  protected Suggester getSuggester(Policy.Session session, TriggerEvent event, SolrCloudManager cloudManager) {\n    // for backward compatibility\n    ClusterStateProvider stateProvider = cloudManager.getClusterStateProvider();\n    String autoAddReplicas = stateProvider.getClusterProperty(ZkStateReader.AUTO_ADD_REPLICAS, (String) null);\n    if (autoAddReplicas != null && autoAddReplicas.equals(\"false\")) {\n      return NoneSuggester.get(session);\n    }\n\n    Suggester suggester = super.getSuggester(session, event, cloudManager);\n    ClusterState clusterState;\n    try {\n      clusterState = stateProvider.getClusterState();\n    } catch (IOException e) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Exception getting cluster state\", e);\n    }\n\n    boolean anyCollections = false;\n    for (DocCollection collection: clusterState.getCollectionsMap().values()) {\n      if (collection.getAutoAddReplicas()) {\n        anyCollections = true;\n        suggester.hint(Suggester.Hint.COLL, collection.getName());\n      }\n    }\n\n    if (!anyCollections) return NoneSuggester.get(session);\n    return suggester;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["eaca6a0674512222004d9a2b0ca95d86bda20f1c","d9ccfe45460d496c5e5e1b70396521dac842d966"],"d9ccfe45460d496c5e5e1b70396521dac842d966":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"]},"commit2Childs":{"ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1":["43345f1452f9510f8aaadae6156fe0c834e7d957"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441","d9ccfe45460d496c5e5e1b70396521dac842d966"],"43345f1452f9510f8aaadae6156fe0c834e7d957":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"43a787a75ad72a9bf26e8ff714d8b6d01f9eb441":["ce71a9836bf1eba34a0ab31884e9eb8ad3f1cef1","43345f1452f9510f8aaadae6156fe0c834e7d957"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d9ccfe45460d496c5e5e1b70396521dac842d966":["43a787a75ad72a9bf26e8ff714d8b6d01f9eb441"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}