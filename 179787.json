{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,String,SolrCore,CoreContainer,boolean).mjava","commits":[{"id":"84f20f331d8001864545c7021812d8c6509c7593","date":1517216128,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,String,SolrCore,CoreContainer,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,SolrCore,CoreContainer,boolean).mjava","sourceNew":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String coreZkNodeName, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      ZkShardTerms zkShardTerms = getShardTerms(collection, shardId);\n      if (zkShardTerms.registered(coreZkNodeName) && !zkShardTerms.canBecomeLeader(coreZkNodeName)) {\n        log.info(\"Leader's term larger than core \" + core.getName() + \"; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180","date":1539076849,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,String,SolrCore,CoreContainer,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,String,SolrCore,CoreContainer,boolean).mjava","sourceNew":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String coreZkNodeName, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      ZkShardTerms zkShardTerms = getShardTerms(collection, shardId);\n      if (zkShardTerms.registered(coreZkNodeName) && !zkShardTerms.canBecomeLeader(coreZkNodeName)) {\n        log.info(\"Leader's term larger than core \" + core.getName() + \"; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String coreZkNodeName, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      // see if the leader told us to recover\n      final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId,\n          core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());\n      if (lirState == Replica.State.DOWN) {\n        log.info(\"Leader marked core \" + core.getName() + \" down; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      ZkShardTerms zkShardTerms = getShardTerms(collection, shardId);\n      if (zkShardTerms.registered(coreZkNodeName) && !zkShardTerms.canBecomeLeader(coreZkNodeName)) {\n        log.info(\"Leader's term larger than core \" + core.getName() + \"; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,String,SolrCore,CoreContainer,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#checkRecovery(boolean,boolean,boolean,String,String,String,SolrCore,CoreContainer,boolean).mjava","sourceNew":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String coreZkNodeName, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Core needs to recover:{}\", core.getName());\n        }\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      ZkShardTerms zkShardTerms = getShardTerms(collection, shardId);\n      if (zkShardTerms.registered(coreZkNodeName) && !zkShardTerms.canBecomeLeader(coreZkNodeName)) {\n        if (log.isInfoEnabled()) {\n          log.info(\"Leader's term larger than core {}; starting recovery process\", core.getName());\n        }\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Returns whether or not a recovery was started\n   */\n  private boolean checkRecovery(boolean recoverReloadedCores, final boolean isLeader, boolean skipRecovery,\n                                final String collection, String coreZkNodeName, String shardId,\n                                SolrCore core, CoreContainer cc, boolean afterExpiration) {\n    if (SKIP_AUTO_RECOVERY) {\n      log.warn(\"Skipping recovery according to sys prop solrcloud.skip.autorecovery\");\n      return false;\n    }\n    boolean doRecovery = true;\n    if (!isLeader) {\n\n      if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {\n        doRecovery = false;\n      }\n\n      if (doRecovery) {\n        log.info(\"Core needs to recover:\" + core.getName());\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n\n      ZkShardTerms zkShardTerms = getShardTerms(collection, shardId);\n      if (zkShardTerms.registered(coreZkNodeName) && !zkShardTerms.canBecomeLeader(coreZkNodeName)) {\n        log.info(\"Leader's term larger than core \" + core.getName() + \"; starting recovery process\");\n        core.getUpdateHandler().getSolrCoreState().doRecovery(cc, core.getCoreDescriptor());\n        return true;\n      }\n    } else {\n      log.info(\"I am the leader, no recovery necessary\");\n    }\n\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad4957cde742defe6db19689abdc267c5d948066":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"84f20f331d8001864545c7021812d8c6509c7593":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["84f20f331d8001864545c7021812d8c6509c7593"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad4957cde742defe6db19689abdc267c5d948066"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["84f20f331d8001864545c7021812d8c6509c7593"],"ad4957cde742defe6db19689abdc267c5d948066":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"84f20f331d8001864545c7021812d8c6509c7593":["b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180"],"b6d72c72ee67b4aa8bc8bdd91bae9069b04fc180":["ad4957cde742defe6db19689abdc267c5d948066"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}