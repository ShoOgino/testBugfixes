{"path":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsWithDeletions(TermVectorsWriter,TermVectorsReader,IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsWithDeletions(TermVectorsWriter,TermVectorsReader,IndexReader).mjava","pathOld":"backwards/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsWithDeletions(TermVectorsWriter,TermVectorsReader,IndexReader).mjava","sourceNew":"  private void copyVectorsWithDeletions(final TermVectorsWriter termVectorsWriter,\n                                        final TermVectorsReader matchingVectorsReader,\n                                        final IndexReader reader)\n    throws IOException, MergeAbortedException {\n    final int maxDoc = reader.maxDoc();\n    if (matchingVectorsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      for (int docNum = 0; docNum < maxDoc;) {\n        if (reader.isDeleted(docNum)) {\n          // skip deleted docs\n          ++docNum;\n          continue;\n        }\n        // We can optimize this case (doing a bulk byte copy) since the field \n        // numbers are identical\n        int start = docNum, numDocs = 0;\n        do {\n          docNum++;\n          numDocs++;\n          if (docNum >= maxDoc) break;\n          if (reader.isDeleted(docNum)) {\n            docNum++;\n            break;\n          }\n        } while(numDocs < MAX_RAW_MERGE_DOCS);\n        \n        matchingVectorsReader.rawDocs(rawDocLengths, rawDocLengths2, start, numDocs);\n        termVectorsWriter.addRawDocuments(matchingVectorsReader, rawDocLengths, rawDocLengths2, numDocs);\n        checkAbort.work(300 * numDocs);\n      }\n    } else {\n      for (int docNum = 0; docNum < maxDoc; docNum++) {\n        if (reader.isDeleted(docNum)) {\n          // skip deleted docs\n          continue;\n        }\n        \n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        TermFreqVector[] vectors = reader.getTermFreqVectors(docNum);\n        termVectorsWriter.addAllDocVectors(vectors);\n        checkAbort.work(300);\n      }\n    }\n  }\n\n","sourceOld":"  private void copyVectorsWithDeletions(final TermVectorsWriter termVectorsWriter,\n                                        final TermVectorsReader matchingVectorsReader,\n                                        final IndexReader reader)\n    throws IOException, MergeAbortedException {\n    final int maxDoc = reader.maxDoc();\n    if (matchingVectorsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      for (int docNum = 0; docNum < maxDoc;) {\n        if (reader.isDeleted(docNum)) {\n          // skip deleted docs\n          ++docNum;\n          continue;\n        }\n        // We can optimize this case (doing a bulk byte copy) since the field \n        // numbers are identical\n        int start = docNum, numDocs = 0;\n        do {\n          docNum++;\n          numDocs++;\n          if (docNum >= maxDoc) break;\n          if (reader.isDeleted(docNum)) {\n            docNum++;\n            break;\n          }\n        } while(numDocs < MAX_RAW_MERGE_DOCS);\n        \n        matchingVectorsReader.rawDocs(rawDocLengths, rawDocLengths2, start, numDocs);\n        termVectorsWriter.addRawDocuments(matchingVectorsReader, rawDocLengths, rawDocLengths2, numDocs);\n        checkAbort.work(300 * numDocs);\n      }\n    } else {\n      for (int docNum = 0; docNum < maxDoc; docNum++) {\n        if (reader.isDeleted(docNum)) {\n          // skip deleted docs\n          continue;\n        }\n        \n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        TermFreqVector[] vectors = reader.getTermFreqVectors(docNum);\n        termVectorsWriter.addAllDocVectors(vectors);\n        checkAbort.work(300);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/SegmentMerger#copyVectorsWithDeletions(TermVectorsWriter,TermVectorsReader,IndexReader).mjava","sourceNew":null,"sourceOld":"  private void copyVectorsWithDeletions(final TermVectorsWriter termVectorsWriter,\n                                        final TermVectorsReader matchingVectorsReader,\n                                        final IndexReader reader)\n    throws IOException, MergeAbortedException {\n    final int maxDoc = reader.maxDoc();\n    if (matchingVectorsReader != null) {\n      // We can bulk-copy because the fieldInfos are \"congruent\"\n      for (int docNum = 0; docNum < maxDoc;) {\n        if (reader.isDeleted(docNum)) {\n          // skip deleted docs\n          ++docNum;\n          continue;\n        }\n        // We can optimize this case (doing a bulk byte copy) since the field \n        // numbers are identical\n        int start = docNum, numDocs = 0;\n        do {\n          docNum++;\n          numDocs++;\n          if (docNum >= maxDoc) break;\n          if (reader.isDeleted(docNum)) {\n            docNum++;\n            break;\n          }\n        } while(numDocs < MAX_RAW_MERGE_DOCS);\n        \n        matchingVectorsReader.rawDocs(rawDocLengths, rawDocLengths2, start, numDocs);\n        termVectorsWriter.addRawDocuments(matchingVectorsReader, rawDocLengths, rawDocLengths2, numDocs);\n        checkAbort.work(300 * numDocs);\n      }\n    } else {\n      for (int docNum = 0; docNum < maxDoc; docNum++) {\n        if (reader.isDeleted(docNum)) {\n          // skip deleted docs\n          continue;\n        }\n        \n        // NOTE: it's very important to first assign to vectors then pass it to\n        // termVectorsWriter.addAllDocVectors; see LUCENE-1282\n        TermFreqVector[] vectors = reader.getTermFreqVectors(docNum);\n        termVectorsWriter.addAllDocVectors(vectors);\n        checkAbort.work(300);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}