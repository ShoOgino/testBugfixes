{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene45/Lucene45DocValuesConsumer#addNumericField(FieldInfo,Iterable[Number],boolean).mjava","sourceNew":null,"sourceOld":"  void addNumericField(FieldInfo field, Iterable<Number> values, boolean optimizeStorage) throws IOException {\n    long count = 0;\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    long gcd = 0;\n    boolean missing = false;\n    // TODO: more efficient?\n    HashSet<Long> uniqueValues = null;\n    if (optimizeStorage) {\n      uniqueValues = new HashSet<>();\n\n      for (Number nv : values) {\n        final long v;\n        if (nv == null) {\n          v = 0;\n          missing = true;\n        } else {\n          v = nv.longValue();\n        }\n\n        if (gcd != 1) {\n          if (v < Long.MIN_VALUE / 2 || v > Long.MAX_VALUE / 2) {\n            // in that case v - minValue might overflow and make the GCD computation return\n            // wrong results. Since these extreme values are unlikely, we just discard\n            // GCD computation for them\n            gcd = 1;\n          } else if (count != 0) { // minValue needs to be set first\n            gcd = MathUtil.gcd(gcd, v - minValue);\n          }\n        }\n\n        minValue = Math.min(minValue, v);\n        maxValue = Math.max(maxValue, v);\n\n        if (uniqueValues != null) {\n          if (uniqueValues.add(v)) {\n            if (uniqueValues.size() > 256) {\n              uniqueValues = null;\n            }\n          }\n        }\n\n        ++count;\n      }\n    } else {\n      for (@SuppressWarnings(\"unused\") Number nv : values) {\n        ++count;\n      }\n    }\n    \n    final long delta = maxValue - minValue;\n\n    final int format;\n    if (uniqueValues != null\n        && (PackedInts.bitsRequired(uniqueValues.size() - 1) < PackedInts.unsignedBitsRequired(delta))\n        && count <= Integer.MAX_VALUE) {\n      format = TABLE_COMPRESSED;\n    } else if (gcd != 0 && gcd != 1) {\n      format = GCD_COMPRESSED;\n    } else {\n      format = DELTA_COMPRESSED;\n    }\n    meta.writeVInt(field.number);\n    meta.writeByte(Lucene45DocValuesFormat.NUMERIC);\n    meta.writeVInt(format);\n    if (missing) {\n      meta.writeLong(data.getFilePointer());\n      writeMissingBitset(values);\n    } else {\n      meta.writeLong(-1L);\n    }\n    meta.writeVInt(PackedInts.VERSION_CURRENT);\n    meta.writeLong(data.getFilePointer());\n    meta.writeVLong(count);\n    meta.writeVInt(BLOCK_SIZE);\n\n    switch (format) {\n      case GCD_COMPRESSED:\n        meta.writeLong(minValue);\n        meta.writeLong(gcd);\n        final BlockPackedWriter quotientWriter = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          long value = nv == null ? 0 : nv.longValue();\n          quotientWriter.add((value - minValue) / gcd);\n        }\n        quotientWriter.finish();\n        break;\n      case DELTA_COMPRESSED:\n        final BlockPackedWriter writer = new BlockPackedWriter(data, BLOCK_SIZE);\n        for (Number nv : values) {\n          writer.add(nv == null ? 0 : nv.longValue());\n        }\n        writer.finish();\n        break;\n      case TABLE_COMPRESSED:\n        final Long[] decode = uniqueValues.toArray(new Long[uniqueValues.size()]);\n        final HashMap<Long,Integer> encode = new HashMap<>();\n        meta.writeVInt(decode.length);\n        for (int i = 0; i < decode.length; i++) {\n          meta.writeLong(decode[i]);\n          encode.put(decode[i], i);\n        }\n        final int bitsRequired = PackedInts.bitsRequired(uniqueValues.size() - 1);\n        final PackedInts.Writer ordsWriter = PackedInts.getWriterNoHeader(data, PackedInts.Format.PACKED, (int) count, bitsRequired, PackedInts.DEFAULT_BUFFER_SIZE);\n        for (Number nv : values) {\n          ordsWriter.add(encode.get(nv == null ? 0 : nv.longValue()));\n        }\n        ordsWriter.finish();\n        break;\n      default:\n        throw new AssertionError();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}