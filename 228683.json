{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","commits":[{"id":"bb6a4d0a88fea57ec3a4044266f6ed46659457a5","date":1490362041,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressForbidden(reason = \"currentTimeMillis is used to find the resume time for the trigger\")\n  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(\"timeout\", null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || (!triggers.containsKey(triggerName)) && !\"#EACH\".equals(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      if (\"#EACH\".equals(triggerName) || triggerName.equals(entry.getKey())) {\n        Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n        triggerProps.put(\"enabled\", false);\n        if (resumeTime != null) {\n          triggerProps.put(\"resumeAt\", resumeTime.getTime());\n        }\n        zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(\"timeout\", null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTime(), TimeUnit.NANOSECONDS)\n            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || (!triggers.containsKey(triggerName)) && !\"#EACH\".equals(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      if (\"#EACH\".equals(triggerName) || triggerName.equals(entry.getKey())) {\n        Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n        triggerProps.put(\"enabled\", false);\n        if (resumeTime != null) {\n          triggerProps.put(\"resumeAt\", resumeTime.getTime());\n        }\n        zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"currentTimeMillis is used to find the resume time for the trigger\")\n  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(\"timeout\", null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || (!triggers.containsKey(triggerName)) && !\"#EACH\".equals(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      if (\"#EACH\".equals(triggerName) || triggerName.equals(entry.getKey())) {\n        Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n        triggerProps.put(\"enabled\", false);\n        if (resumeTime != null) {\n          triggerProps.put(\"resumeAt\", resumeTime.getTime());\n        }\n        zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(\"timeout\", null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTime(), TimeUnit.NANOSECONDS)\n            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || (!triggers.containsKey(triggerName)) && !\"#EACH\".equals(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      if (\"#EACH\".equals(triggerName) || triggerName.equals(entry.getKey())) {\n        Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n        triggerProps.put(\"enabled\", false);\n        if (resumeTime != null) {\n          triggerProps.put(\"resumeAt\", resumeTime.getTime());\n        }\n        zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  @SuppressForbidden(reason = \"currentTimeMillis is used to find the resume time for the trigger\")\n  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(\"timeout\", null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(System.currentTimeMillis() + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || (!triggers.containsKey(triggerName)) && !\"#EACH\".equals(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      if (\"#EACH\".equals(triggerName) || triggerName.equals(entry.getKey())) {\n        Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n        triggerProps.put(\"enabled\", false);\n        if (resumeTime != null) {\n          triggerProps.put(\"resumeAt\", resumeTime.getTime());\n        }\n        zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf","date":1496154116,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(TIMEOUT, null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTime(), TimeUnit.NANOSECONDS)\n            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    Set<String> changed = new HashSet<>();\n\n    if (triggers == null) {\n      if (Policy.EACH.equals(triggerName)) {\n      // no harm no foul\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n      }\n    } else {\n      if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n      }\n      for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n        if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n          Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n          Boolean enabled = (Boolean)triggerProps.get(ENABLED);\n          if (enabled == null || enabled) {\n            triggerProps.put(ENABLED, false);\n            if (resumeTime != null) {\n              triggerProps.put(RESUME_AT, resumeTime.getTime());\n            }\n            zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n            changed.add(entry.getKey());\n          }\n        }\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","sourceOld":"  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(\"name\");\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(\"timeout\", null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTime(), TimeUnit.NANOSECONDS)\n            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    if (triggers == null || (!triggers.containsKey(triggerName)) && !\"#EACH\".equals(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n      if (\"#EACH\".equals(triggerName) || triggerName.equals(entry.getKey())) {\n        Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n        triggerProps.put(\"enabled\", false);\n        if (resumeTime != null) {\n          triggerProps.put(\"resumeAt\", resumeTime.getTime());\n        }\n        zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n      }\n    }\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleSuspendTrigger(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                                 AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(TIMEOUT, null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTime(), TimeUnit.NANOSECONDS)\n            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, AutoScalingConfig.TriggerConfig> triggers = currentConfig.getTriggerConfigs();\n    Set<String> changed = new HashSet<>();\n\n    if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n    }\n    Map<String, AutoScalingConfig.TriggerConfig> newTriggers = new HashMap<>();\n    for (Map.Entry<String, AutoScalingConfig.TriggerConfig> entry : triggers.entrySet()) {\n      if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n        AutoScalingConfig.TriggerConfig trigger = entry.getValue();\n        if (trigger.enabled) {\n          trigger = trigger.withEnabled(false);\n          if (resumeTime != null) {\n            trigger = trigger.withProperty(RESUME_AT, resumeTime.getTime());\n          }\n          newTriggers.put(entry.getKey(), trigger);\n          changed.add(trigger.name);\n        } else {\n          newTriggers.put(entry.getKey(), entry.getValue());\n        }\n      } else {\n        newTriggers.put(entry.getKey(), entry.getValue());\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    if (!changed.isEmpty()) {\n      currentConfig = currentConfig.withTriggerConfigs(newTriggers);\n    }\n    return currentConfig;\n  }\n\n","sourceOld":"  private void handleSuspendTrigger(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String triggerName = op.getStr(NAME);\n\n    if (triggerName == null || triggerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The trigger name cannot be null or empty\");\n    }\n\n    String timeout = op.getStr(TIMEOUT, null);\n    Date resumeTime = null;\n    if (timeout != null) {\n      try {\n        int timeoutSeconds = parseHumanTime(timeout);\n        resumeTime = new Date(TimeUnit.MILLISECONDS.convert(timeSource.getTime(), TimeUnit.NANOSECONDS)\n            + TimeUnit.MILLISECONDS.convert(timeoutSeconds, TimeUnit.SECONDS));\n      } catch (IllegalArgumentException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid 'timeout' value for suspend trigger: \" + triggerName);\n      }\n    }\n\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> triggers = (Map<String, Object>) autoScalingConf.get(\"triggers\");\n    Set<String> changed = new HashSet<>();\n\n    if (triggers == null) {\n      if (Policy.EACH.equals(triggerName)) {\n      // no harm no foul\n      } else {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n      }\n    } else {\n      if (!Policy.EACH.equals(triggerName) && !triggers.containsKey(triggerName)) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No trigger exists with name: \" + triggerName);\n      }\n      for (Map.Entry<String, Object> entry : triggers.entrySet()) {\n        if (Policy.EACH.equals(triggerName) || triggerName.equals(entry.getKey())) {\n          Map<String, Object> triggerProps = (Map<String, Object>) entry.getValue();\n          Boolean enabled = (Boolean)triggerProps.get(ENABLED);\n          if (enabled == null || enabled) {\n            triggerProps.put(ENABLED, false);\n            if (resumeTime != null) {\n              triggerProps.put(RESUME_AT, resumeTime.getTime());\n            }\n            zkSetTrigger(container.getZkController().getZkStateReader(), entry.getKey(), triggerProps);\n            changed.add(entry.getKey());\n          }\n        }\n      }\n    }\n    rsp.getValues().add(\"changed\", changed);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5","464244264804e3f981bf1fb4b732516d8d62dbc2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["66bf265775ef85fdd57c7b2bd73d9f3897fae1cf"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bb6a4d0a88fea57ec3a4044266f6ed46659457a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb6a4d0a88fea57ec3a4044266f6ed46659457a5":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"66bf265775ef85fdd57c7b2bd73d9f3897fae1cf":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}