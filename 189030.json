{"path":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","commits":[{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"solr/contrib/solr-mr/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n      }\n    }\n  }\n\n","sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"/dev/null","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n        client.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrClient client = new HttpSolrClient(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n        client.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrServer client = new HttpSolrServer(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n        client.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws Exception {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        try (HttpSolrClient client = new HttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.set(\"distrib\", false);\n          QueryResponse replicaResults = client.query(query);\n          long count = replicaResults.getResults().getNumFound();\n          if (found != -1) {\n            assertEquals(slice.getName() + \" is inconsistent \"\n                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n          }\n          found = count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws SolrServerException {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        HttpSolrClient client = new HttpSolrClient(\n            new ZkCoreNodeProps(replica).getCoreUrl());\n        SolrQuery query = new SolrQuery(\"*:*\");\n        query.set(\"distrib\", false);\n        QueryResponse replicaResults = client.query(query);\n        long count = replicaResults.getResults().getNumFound();\n        if (found != -1) {\n          assertEquals(slice.getName() + \" is inconsistent \"\n              + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n        }\n        found = count;\n        client.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws Exception {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        try (HttpSolrClient client = getHttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.set(\"distrib\", false);\n          QueryResponse replicaResults = client.query(query);\n          long count = replicaResults.getResults().getNumFound();\n          if (found != -1) {\n            assertEquals(slice.getName() + \" is inconsistent \"\n                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n          }\n          found = count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws Exception {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        try (HttpSolrClient client = new HttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.set(\"distrib\", false);\n          QueryResponse replicaResults = client.query(query);\n          long count = replicaResults.getResults().getNumFound();\n          if (found != -1) {\n            assertEquals(slice.getName() + \" is inconsistent \"\n                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n          }\n          found = count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":"  private void checkConsistency(String replicatedCollection)\n      throws Exception {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        try (HttpSolrClient client = getHttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.set(\"distrib\", false);\n          QueryResponse replicaResults = client.query(query);\n          long count = replicaResults.getResults().getNumFound();\n          if (found != -1) {\n            assertEquals(slice.getName() + \" is inconsistent \"\n                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n          }\n          found = count;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws Exception {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        try (HttpSolrClient client = new HttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.set(\"distrib\", false);\n          QueryResponse replicaResults = client.query(query);\n          long count = replicaResults.getResults().getNumFound();\n          if (found != -1) {\n            assertEquals(slice.getName() + \" is inconsistent \"\n                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n          }\n          found = count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"12109b652e9210b8d58fca47f6c4a725d058a58e","date":1490373076,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":null,"sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws Exception {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        try (HttpSolrClient client = getHttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.set(\"distrib\", false);\n          QueryResponse replicaResults = client.query(query);\n          long count = replicaResults.getResults().getNumFound();\n          if (found != -1) {\n            assertEquals(slice.getName() + \" is inconsistent \"\n                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n          }\n          found = count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe1c4aa9af769a38e878f608070f672efbeac27f","date":1490594650,"type":4,"author":"Steve Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/map-reduce/src/test/org/apache/solr/hadoop/MorphlineGoLiveMiniMRTest#checkConsistency(String).mjava","sourceNew":null,"sourceOld":"  private void checkConsistency(String replicatedCollection)\n      throws Exception {\n    Collection<Slice> slices = cloudClient.getZkStateReader().getClusterState()\n        .getSlices(replicatedCollection);\n    for (Slice slice : slices) {\n      Collection<Replica> replicas = slice.getReplicas();\n      long found = -1;\n      for (Replica replica : replicas) {\n        try (HttpSolrClient client = getHttpSolrClient(new ZkCoreNodeProps(replica).getCoreUrl())) {\n          SolrQuery query = new SolrQuery(\"*:*\");\n          query.set(\"distrib\", false);\n          QueryResponse replicaResults = client.query(query);\n          long count = replicaResults.getResults().getNumFound();\n          if (found != -1) {\n            assertEquals(slice.getName() + \" is inconsistent \"\n                + new ZkCoreNodeProps(replica).getCoreUrl(), found, count);\n          }\n          found = count;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cc3b13b430571c2e169f98fe38e1e7666f88522d","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"fe1c4aa9af769a38e878f608070f672efbeac27f":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["12109b652e9210b8d58fca47f6c4a725d058a58e"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["4c7856260bc28f285ae7bfefa99b28db4dca6daf","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"12109b652e9210b8d58fca47f6c4a725d058a58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70f91c8322fbffe3a3a897ef20ea19119cac10cd","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["12109b652e9210b8d58fca47f6c4a725d058a58e","fe1c4aa9af769a38e878f608070f672efbeac27f"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"fe1c4aa9af769a38e878f608070f672efbeac27f":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","fe1c4aa9af769a38e878f608070f672efbeac27f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}