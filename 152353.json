{"path":"src/java/org/apache/solr/request/BaseResponseWriter#getDoc(int,IdxInfo).mjava","commits":[{"id":"1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a","date":1259147253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/request/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"/dev/null","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.binaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10b17ff7ad534c3b34a34944d80a87d217011d9c","date":1263262796,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/BaseResponseWriter#getDoc(int,IdxInfo).mjava","pathOld":"src/java/org/apache/solr/request/BaseResponseWriter#getDoc(int,IdxInfo).mjava","sourceNew":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.binaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","sourceOld":"  private static SolrDocument getDoc(int id, IdxInfo info) throws IOException {\r\n    Document doc = info.searcher.doc(id);\r\n    SolrDocument solrDoc = new SolrDocument();\r\n    for (Fieldable f : (List<Fieldable>) doc.getFields()) {\r\n      String fieldName = f.name();\r\n      if (info.returnFields != null && !info.returnFields.contains(fieldName))\r\n        continue;\r\n      SchemaField sf = info.schema.getFieldOrNull(fieldName);\r\n      FieldType ft = null;\r\n      if (sf != null) ft = sf.getType();\r\n      Object val = null;\r\n      if (ft == null) { // handle fields not in the schema\r\n        if (f.isBinary())\r\n          val = f.binaryValue();\r\n        else\r\n          val = f.stringValue();\r\n      } else {\r\n        try {\r\n          if (BinaryResponseWriter.KNOWN_TYPES.contains(ft.getClass())) {\r\n            val = ft.toObject(f);\r\n          } else {\r\n            val = ft.toExternal(f);\r\n          }\r\n        } catch (Exception e) {\r\n          // There is a chance of the underlying field not really matching the\r\n          // actual field type . So ,it can throw exception\r\n          LOG.warn(\"Error reading a field from document : \" + solrDoc, e);\r\n          // if it happens log it and continue\r\n          continue;\r\n        }\r\n      }\r\n      if (sf != null && sf.multiValued() && !solrDoc.containsKey(fieldName)) {\r\n        ArrayList l = new ArrayList();\r\n        l.add(val);\r\n        solrDoc.addField(fieldName, l);\r\n      } else {\r\n        solrDoc.addField(fieldName, val);\r\n      }\r\n    }\r\n\r\n    return solrDoc;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"10b17ff7ad534c3b34a34944d80a87d217011d9c":["1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a"],"1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a"],"10b17ff7ad534c3b34a34944d80a87d217011d9c":[],"1f54d9fd45db3494ecd4bf1c2583d7f65f4dc49a":["10b17ff7ad534c3b34a34944d80a87d217011d9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["10b17ff7ad534c3b34a34944d80a87d217011d9c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}