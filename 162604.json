{"path":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/MultiTrie2#decompose(CharSequence).mjava","commits":[{"id":"67748b41458c73d49a48168362cc7f4c960a2542","date":1272890662,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/MultiTrie2#decompose(CharSequence).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Break the given patch command into its constituent pieces. The pieces are\n   * delimited by NOOP commands.\n   * \n   * @param cmd the patch command\n   * @return an array containing the pieces of the command\n   */\n  public CharSequence[] decompose(CharSequence cmd) {\n    int parts = 0;\n    \n    for (int i = 0; 0 <= i && i < cmd.length();) {\n      int next = dashEven(cmd, i);\n      if (i == next) {\n        parts++;\n        i = next + 2;\n      } else {\n        parts++;\n        i = next;\n      }\n    }\n    \n    CharSequence part[] = new CharSequence[parts];\n    int x = 0;\n    \n    for (int i = 0; 0 <= i && i < cmd.length();) {\n      int next = dashEven(cmd, i);\n      if (i == next) {\n        part[x++] = cmd.subSequence(i, i + 2);\n        i = next + 2;\n      } else {\n        part[x++] = (next < 0) ? cmd.subSequence(i, cmd.length()) : cmd.subSequence(i, next);\n        i = next;\n      }\n    }\n    return part;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/java/org/egothor/stemmer/MultiTrie2#decompose(CharSequence).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/java/org/egothor/stemmer/MultiTrie2#decompose(CharSequence).mjava","sourceNew":"  /**\n   * Break the given patch command into its constituent pieces. The pieces are\n   * delimited by NOOP commands.\n   * \n   * @param cmd the patch command\n   * @return an array containing the pieces of the command\n   */\n  public CharSequence[] decompose(CharSequence cmd) {\n    int parts = 0;\n    \n    for (int i = 0; 0 <= i && i < cmd.length();) {\n      int next = dashEven(cmd, i);\n      if (i == next) {\n        parts++;\n        i = next + 2;\n      } else {\n        parts++;\n        i = next;\n      }\n    }\n    \n    CharSequence part[] = new CharSequence[parts];\n    int x = 0;\n    \n    for (int i = 0; 0 <= i && i < cmd.length();) {\n      int next = dashEven(cmd, i);\n      if (i == next) {\n        part[x++] = cmd.subSequence(i, i + 2);\n        i = next + 2;\n      } else {\n        part[x++] = (next < 0) ? cmd.subSequence(i, cmd.length()) : cmd.subSequence(i, next);\n        i = next;\n      }\n    }\n    return part;\n  }\n\n","sourceOld":"  /**\n   * Break the given patch command into its constituent pieces. The pieces are\n   * delimited by NOOP commands.\n   * \n   * @param cmd the patch command\n   * @return an array containing the pieces of the command\n   */\n  public CharSequence[] decompose(CharSequence cmd) {\n    int parts = 0;\n    \n    for (int i = 0; 0 <= i && i < cmd.length();) {\n      int next = dashEven(cmd, i);\n      if (i == next) {\n        parts++;\n        i = next + 2;\n      } else {\n        parts++;\n        i = next;\n      }\n    }\n    \n    CharSequence part[] = new CharSequence[parts];\n    int x = 0;\n    \n    for (int i = 0; 0 <= i && i < cmd.length();) {\n      int next = dashEven(cmd, i);\n      if (i == next) {\n        part[x++] = cmd.subSequence(i, i + 2);\n        i = next + 2;\n      } else {\n        part[x++] = (next < 0) ? cmd.subSequence(i, cmd.length()) : cmd.subSequence(i, next);\n        i = next;\n      }\n    }\n    return part;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67748b41458c73d49a48168362cc7f4c960a2542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["67748b41458c73d49a48168362cc7f4c960a2542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67748b41458c73d49a48168362cc7f4c960a2542"],"67748b41458c73d49a48168362cc7f4c960a2542":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}