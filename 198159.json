{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","commits":[{"id":"e25729298aefe258b77e1b2676ae1088c1a2c49d","date":1338320376,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"/dev/null","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = 128;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n\n    MergeState.DocMap docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, maxDoc, liveDocs, PackedInts.COMPACT);\n    MergeState.DocMap docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, 0, liveDocs, PackedInts.COMPACT);\n    assertTrue(equals(docMap1, docMap2));\n    \n    liveDocs.set(1);\n    for (int i = 7; i < 79; ++i) {\n      liveDocs.set(i);\n    }\n    liveDocs.set(80);\n    liveDocs.set(88);\n    int numDocs = liveDocs.cardinality();\n    docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, maxDoc - numDocs, liveDocs, PackedInts.COMPACT);\n    docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, numDocs, liveDocs, PackedInts.COMPACT);\n    assertTrue(equals(docMap1, docMap2));\n\n    liveDocs.set(0, maxDoc);\n    docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, 0, liveDocs, PackedInts.COMPACT);\n    docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, maxDoc, liveDocs, PackedInts.COMPACT);\n    assertTrue(equals(docMap1, docMap2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dff0843e8b2ca3aecd360f2e6db0f777d42935ee","date":1361489674,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = _TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = _TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildDocMap() {\n    final int maxDoc = 128;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n\n    MergeState.DocMap docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, maxDoc, liveDocs, PackedInts.COMPACT);\n    MergeState.DocMap docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, 0, liveDocs, PackedInts.COMPACT);\n    assertTrue(equals(docMap1, docMap2));\n    \n    liveDocs.set(1);\n    for (int i = 7; i < 79; ++i) {\n      liveDocs.set(i);\n    }\n    liveDocs.set(80);\n    liveDocs.set(88);\n    int numDocs = liveDocs.cardinality();\n    docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, maxDoc - numDocs, liveDocs, PackedInts.COMPACT);\n    docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, numDocs, liveDocs, PackedInts.COMPACT);\n    assertTrue(equals(docMap1, docMap2));\n\n    liveDocs.set(0, maxDoc);\n    docMap1 = MergeState.DocMap.buildDelCountDocmap(maxDoc, 0, liveDocs, PackedInts.COMPACT);\n    docMap2 = MergeState.DocMap.buildDirectDocMap(maxDoc, maxDoc, liveDocs, PackedInts.COMPACT);\n    assertTrue(equals(docMap1, docMap2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildDocMap() {\n    final int maxDoc = _TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = _TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final PackedLongValues docMap = MergeState.removeDeletes(maxDoc, liveDocs);\n\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (liveDocs.get(i) == false) {\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final PackedLongValues docMap = MergeState.removeDeletes(maxDoc, liveDocs);\n\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (liveDocs.get(i) == false) {\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final PackedLongValues docMap = MergeState.removeDeletes(maxDoc, liveDocs);\n\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (liveDocs.get(i) == false) {\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final PackedLongValues docMap = MergeState.removeDeletes(maxDoc, liveDocs);\n\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (liveDocs.get(i) == false) {\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentMerger#testBuildDocMap().mjava","sourceNew":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final PackedLongValues docMap = MergeState.removeDeletes(maxDoc, liveDocs);\n\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (liveDocs.get(i) == false) {\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","sourceOld":"  public void testBuildDocMap() {\n    final int maxDoc = TestUtil.nextInt(random(), 1, 128);\n    final int numDocs = TestUtil.nextInt(random(), 0, maxDoc);\n    final int numDeletedDocs = maxDoc - numDocs;\n    final FixedBitSet liveDocs = new FixedBitSet(maxDoc);\n    for (int i = 0; i < numDocs; ++i) {\n      while (true) {\n        final int docID = random().nextInt(maxDoc);\n        if (!liveDocs.get(docID)) {\n          liveDocs.set(docID);\n          break;\n        }\n      }\n    }\n\n    final MergeState.DocMap docMap = MergeState.DocMap.build(maxDoc, liveDocs);\n\n    assertEquals(maxDoc, docMap.maxDoc());\n    assertEquals(numDocs, docMap.numDocs());\n    assertEquals(numDeletedDocs, docMap.numDeletedDocs());\n    // assert the mapping is compact\n    for (int i = 0, del = 0; i < maxDoc; ++i) {\n      if (!liveDocs.get(i)) {\n        assertEquals(-1, docMap.get(i));\n        ++del;\n      } else {\n        assertEquals(i - del, docMap.get(i));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dff0843e8b2ca3aecd360f2e6db0f777d42935ee":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"e25729298aefe258b77e1b2676ae1088c1a2c49d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["dff0843e8b2ca3aecd360f2e6db0f777d42935ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0ad30c6a479e764150a3316e57263319775f1df2":["6613659748fe4411a7dcf85266e55db1f95f7315","3d33e731a93d4b57e662ff094f64f94a745422d4"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["6613659748fe4411a7dcf85266e55db1f95f7315","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6613659748fe4411a7dcf85266e55db1f95f7315","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["6613659748fe4411a7dcf85266e55db1f95f7315","0ad30c6a479e764150a3316e57263319775f1df2"]},"commit2Childs":{"dff0843e8b2ca3aecd360f2e6db0f777d42935ee":["6613659748fe4411a7dcf85266e55db1f95f7315"],"e25729298aefe258b77e1b2676ae1088c1a2c49d":["dff0843e8b2ca3aecd360f2e6db0f777d42935ee"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ceaef6cfc68c8ab22a684192e469a8280f9e6e70","0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e25729298aefe258b77e1b2676ae1088c1a2c49d"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}