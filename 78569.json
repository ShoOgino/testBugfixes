{"path":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8259c922a83abc544609227a60d48e5ee93e7e","date":1317679620,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n          reopened = true;\n        } else {\n          newReader = IndexReader.openIfChanged(oldReader);\n          if (newReader != null) {\n            reopened = true;\n          } else {\n            newReader = oldReader;\n          }\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n        } else {\n          newReader = oldReader.reopen();\n        }\n        newReaders.add(newReader);\n        // if at least one of the subreaders was updated we remember that\n        // and return a new ParallelReader\n        if (newReader != oldReader) {\n          reopened = true;\n        }\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return this;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ac7dd9818a7652666183eb1d4bfadc4317bba7df","date":1323510702,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n          reopened = true;\n        } else {\n          newReader = IndexReader.openIfChanged(oldReader);\n          if (newReader != null) {\n            reopened = true;\n          } else {\n            newReader = oldReader;\n          }\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n          reopened = true;\n        } else {\n          newReader = IndexReader.openIfChanged(oldReader);\n          if (newReader != null) {\n            reopened = true;\n          } else {\n            newReader = oldReader;\n          }\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","bugFix":["6db660b56f04fdb2853d25cdee8ee0d36559a521"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n          reopened = true;\n        } else {\n          newReader = IndexReader.openIfChanged(oldReader);\n          if (newReader != null) {\n            reopened = true;\n          } else {\n            newReader = oldReader;\n          }\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","sourceOld":"  protected IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n          reopened = true;\n        } else {\n          newReader = IndexReader.openIfChanged(oldReader);\n          if (newReader != null) {\n            reopened = true;\n          } else {\n            newReader = oldReader;\n          }\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/ParallelReader#doReopen(boolean).mjava","sourceNew":null,"sourceOld":"  private IndexReader doReopen(boolean doClone) throws CorruptIndexException, IOException {\n    ensureOpen();\n    \n    boolean reopened = false;\n    List<IndexReader> newReaders = new ArrayList<IndexReader>();\n    \n    boolean success = false;\n    \n    try {\n      for (final IndexReader oldReader : readers) {\n        IndexReader newReader = null;\n        if (doClone) {\n          newReader = (IndexReader) oldReader.clone();\n          reopened = true;\n        } else {\n          newReader = IndexReader.openIfChanged(oldReader);\n          if (newReader != null) {\n            reopened = true;\n          } else {\n            newReader = oldReader;\n          }\n        }\n        newReaders.add(newReader);\n      }\n      success = true;\n    } finally {\n      if (!success && reopened) {\n        for (int i = 0; i < newReaders.size(); i++) {\n          IndexReader r = newReaders.get(i);\n          if (r != readers.get(i)) {\n            try {\n              r.close();\n            } catch (IOException ignore) {\n              // keep going - we want to clean up as much as possible\n            }\n          }\n        }\n      }\n    }\n\n    if (reopened) {\n      List<Boolean> newDecrefOnClose = new ArrayList<Boolean>();\n      // TODO: maybe add a special reopen-ctor for norm-copying?\n      ParallelReader pr = new ParallelReader();\n      for (int i = 0; i < readers.size(); i++) {\n        IndexReader oldReader = readers.get(i);\n        IndexReader newReader = newReaders.get(i);\n        if (newReader == oldReader) {\n          newDecrefOnClose.add(Boolean.TRUE);\n          newReader.incRef();\n        } else {\n          // this is a new subreader instance, so on close() we don't\n          // decRef but close it \n          newDecrefOnClose.add(Boolean.FALSE);\n        }\n        pr.add(newReader, !storedFieldReaders.contains(oldReader));\n      }\n      pr.decrefOnClose = newDecrefOnClose;\n      pr.incRefReaders = incRefReaders;\n      return pr;\n    } else {\n      // No subreader was refreshed\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["b0d06946f61921459f43309f86ed621ebe67eebe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["8a8259c922a83abc544609227a60d48e5ee93e7e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["8a8259c922a83abc544609227a60d48e5ee93e7e","ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["ac7dd9818a7652666183eb1d4bfadc4317bba7df"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","b0d06946f61921459f43309f86ed621ebe67eebe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8a8259c922a83abc544609227a60d48e5ee93e7e":["ac7dd9818a7652666183eb1d4bfadc4317bba7df","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"70ad682703b8585f5d0a637efec044d57ec05efb":[],"b0d06946f61921459f43309f86ed621ebe67eebe":["8a8259c922a83abc544609227a60d48e5ee93e7e","70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295"],"ac7dd9818a7652666183eb1d4bfadc4317bba7df":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","9ce667c6d3400b22523701c549c0d35e26da8b46"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}