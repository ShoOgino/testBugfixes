{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"340509d2f7de0da778f8f5f2708af1bec36ca9af","date":1343177885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ba781c85445e8d9544105ba6c4c34b5f4219752","date":1344816119,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#collectClassesForPackage(String,List[Class[#]]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  private static void collectClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File directory = new File(uri);\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            collectClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#collectClassesForPackage(String,List[Class[#]]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  private static void collectClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File directory = new File(uri);\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            collectClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#collectClassesForPackage(String,List[Class[#]]).mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains#getClassesForPackage(String,List[Class[#]]).mjava","sourceNew":"  private static void collectClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final URI uri = resources.nextElement().toURI();\n      if (!\"file\".equalsIgnoreCase(uri.getScheme()))\n        continue;\n      final File directory = new File(uri);\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            collectClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  static void getClassesForPackage(String pckgname, List<Class<?>> classes) throws Exception {\n    final ClassLoader cld = TestRandomChains.class.getClassLoader();\n    final String path = pckgname.replace('.', '/');\n    final Enumeration<URL> resources = cld.getResources(path);\n    while (resources.hasMoreElements()) {\n      final File directory = new File(resources.nextElement().toURI());\n      if (directory.exists()) {\n        String[] files = directory.list();\n        for (String file : files) {\n          if (new File(directory, file).isDirectory()) {\n            // recurse\n            String subPackage = pckgname + \".\" + file;\n            getClassesForPackage(subPackage, classes);\n          }\n          if (file.endsWith(\".class\")) {\n            String clazzName = file.substring(0, file.length() - 6);\n            // exclude Test classes that happen to be in these packages.\n            // class.ForName'ing some of them can cause trouble.\n            if (!clazzName.endsWith(\"Test\") && !clazzName.startsWith(\"Test\")) {\n              // Don't run static initializers, as we won't use most of them.\n              // Java will do that automatically once accessed/instantiated.\n              classes.add(Class.forName(pckgname + '.' + clazzName, false, cld));\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5a1a22b1ad88b436661458df567f3fdb446392a4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","0ba781c85445e8d9544105ba6c4c34b5f4219752"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","5a1a22b1ad88b436661458df567f3fdb446392a4"],"0ba781c85445e8d9544105ba6c4c34b5f4219752":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"340509d2f7de0da778f8f5f2708af1bec36ca9af":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["b89678825b68eccaf09e6ab71675fc0b0af1e099","340509d2f7de0da778f8f5f2708af1bec36ca9af"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["aba371508186796cc6151d8223a5b4e16d02e26e","0ba781c85445e8d9544105ba6c4c34b5f4219752"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0ba781c85445e8d9544105ba6c4c34b5f4219752"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","340509d2f7de0da778f8f5f2708af1bec36ca9af","5a1a22b1ad88b436661458df567f3fdb446392a4"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"0ba781c85445e8d9544105ba6c4c34b5f4219752":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"340509d2f7de0da778f8f5f2708af1bec36ca9af":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","0ba781c85445e8d9544105ba6c4c34b5f4219752"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}