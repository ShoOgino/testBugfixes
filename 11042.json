{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","commits":[{"id":"7c9cc1cf78edc774cdf339bab3ae62f077929607","date":1072205195,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...}, null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new Hashtable();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new Hashtable();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.put(word, word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9","date":1078974336,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...}, null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...}, null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new Hashtable();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new Hashtable();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.put(word, word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer#loadStopWords(InputStream,String).mjava","sourceNew":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...}, null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","sourceOld":"    /**\n     * Loads stopwords hash from resource stream (file, database...).\n     * @param   wordfile    File containing the wordlist\n     * @param   encoding    Encoding used (win-1250, iso-8859-2, ...}, null for default system encoding\n     */\n    public void loadStopWords( InputStream wordfile, String encoding ) {\n        if ( wordfile == null ) {\n            stoptable = new HashSet();\n            return;\n        }\n        try {\n            // clear any previous table (if present)\n            stoptable = new HashSet();\n\n            InputStreamReader isr;\n            if (encoding == null)\n                isr = new InputStreamReader(wordfile);\n            else\n                isr = new InputStreamReader(wordfile, encoding);\n\n\n            LineNumberReader lnr = new LineNumberReader(isr);\n            String word;\n            while ( ( word = lnr.readLine() ) != null ) {\n                stoptable.add(word);\n            }\n\n        } catch ( IOException e ) {\n            stoptable = null;\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c9cc1cf78edc774cdf339bab3ae62f077929607":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["7c9cc1cf78edc774cdf339bab3ae62f077929607"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c9cc1cf78edc774cdf339bab3ae62f077929607"],"7c9cc1cf78edc774cdf339bab3ae62f077929607":["37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9"],"37c74a185a49d74a8a2de1f102ffe2fbf8c80ff9":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}