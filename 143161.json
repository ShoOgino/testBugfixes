{"path":"src/test/org/apache/solr/search/TestFastLRUCache#testOldestItems().mjava","commits":[{"id":"48dd7857ec646cce5ab6c5e7c48a27754559f4be","date":1234349649,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#testOldestItems().mjava","pathOld":"/dev/null","sourceNew":"  public void testOldestItems() {\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(100, 90);\n    for (int i = 0; i < 50; i++) {\n      cache.put(i + 1, \"\" + (i + 1));\n    }\n    cache.get(1);\n    cache.get(3);\n    Map<Integer, String> m = cache.getOldestAccessedItems(5);\n    //7 6 5 4 2\n    assertNotNull(m.get(7));\n    assertNotNull(m.get(6));\n    assertNotNull(m.get(5));\n    assertNotNull(m.get(4));\n    assertNotNull(m.get(2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0d8dceae0594e66ce62ce0f775689af35a2266c","date":1251260302,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/search/TestFastLRUCache#testOldestItems().mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#testOldestItems().mjava","sourceNew":"  public void testOldestItems() {\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(100, 90);\n    for (int i = 0; i < 50; i++) {\n      cache.put(i + 1, \"\" + (i + 1));\n    }\n    cache.get(1);\n    cache.get(3);\n    Map<Integer, String> m = cache.getOldestAccessedItems(5);\n    //7 6 5 4 2\n    assertNotNull(m.get(7));\n    assertNotNull(m.get(6));\n    assertNotNull(m.get(5));\n    assertNotNull(m.get(4));\n    assertNotNull(m.get(2));\n    cache.destroy();\n  }\n\n","sourceOld":"  public void testOldestItems() {\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(100, 90);\n    for (int i = 0; i < 50; i++) {\n      cache.put(i + 1, \"\" + (i + 1));\n    }\n    cache.get(1);\n    cache.get(3);\n    Map<Integer, String> m = cache.getOldestAccessedItems(5);\n    //7 6 5 4 2\n    assertNotNull(m.get(7));\n    assertNotNull(m.get(6));\n    assertNotNull(m.get(5));\n    assertNotNull(m.get(4));\n    assertNotNull(m.get(2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testOldestItems().mjava","pathOld":"src/test/org/apache/solr/search/TestFastLRUCache#testOldestItems().mjava","sourceNew":"  public void testOldestItems() {\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(100, 90);\n    for (int i = 0; i < 50; i++) {\n      cache.put(i + 1, \"\" + (i + 1));\n    }\n    cache.get(1);\n    cache.get(3);\n    Map<Integer, String> m = cache.getOldestAccessedItems(5);\n    //7 6 5 4 2\n    assertNotNull(m.get(7));\n    assertNotNull(m.get(6));\n    assertNotNull(m.get(5));\n    assertNotNull(m.get(4));\n    assertNotNull(m.get(2));\n    cache.destroy();\n  }\n\n","sourceOld":"  public void testOldestItems() {\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(100, 90);\n    for (int i = 0; i < 50; i++) {\n      cache.put(i + 1, \"\" + (i + 1));\n    }\n    cache.get(1);\n    cache.get(3);\n    Map<Integer, String> m = cache.getOldestAccessedItems(5);\n    //7 6 5 4 2\n    assertNotNull(m.get(7));\n    assertNotNull(m.get(6));\n    assertNotNull(m.get(5));\n    assertNotNull(m.get(4));\n    assertNotNull(m.get(2));\n    cache.destroy();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0d8dceae0594e66ce62ce0f775689af35a2266c":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c0d8dceae0594e66ce62ce0f775689af35a2266c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c0d8dceae0594e66ce62ce0f775689af35a2266c":["ad94625fb8d088209f46650c8097196fec67f00c"],"48dd7857ec646cce5ab6c5e7c48a27754559f4be":["c0d8dceae0594e66ce62ce0f775689af35a2266c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["48dd7857ec646cce5ab6c5e7c48a27754559f4be"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}