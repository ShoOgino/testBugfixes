{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","commits":[{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","pathOld":"/dev/null","sourceNew":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n\n      // TODO: shouldn't we add hasFreqs to Terms?\n      // then we don't need FieldInfos here?\n      boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_ONLY) > 0;\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        \n        if (hasPayloads) {\n          flags = flags | DocsAndPositionsEnum.FLAG_PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | DocsEnum.FLAG_FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsAndPositionsEnum posEnum = null;\n      DocsEnum docsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        if (hasPositions) {\n          posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n          docsEnum = posEnum;\n        } else {\n          docsEnum = termsEnum.docs(null, docsEnum, flags);\n        }\n        assert docsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = docsEnum.nextDoc();\n          if (doc == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = docsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = posEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = posEnum.startOffset();\n                  int endOffset = posEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = posEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db","date":1381416174,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","sourceNew":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        \n        if (hasPayloads) {\n          flags = flags | DocsAndPositionsEnum.FLAG_PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | DocsEnum.FLAG_FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsAndPositionsEnum posEnum = null;\n      DocsEnum docsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        if (hasPositions) {\n          posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n          docsEnum = posEnum;\n        } else {\n          docsEnum = termsEnum.docs(null, docsEnum, flags);\n        }\n        assert docsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = docsEnum.nextDoc();\n          if (doc == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = docsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = posEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = posEnum.startOffset();\n                  int endOffset = posEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = posEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n\n      // TODO: shouldn't we add hasFreqs to Terms?\n      // then we don't need FieldInfos here?\n      boolean hasFreqs = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_ONLY) > 0;\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        \n        if (hasPayloads) {\n          flags = flags | DocsAndPositionsEnum.FLAG_PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | DocsEnum.FLAG_FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsAndPositionsEnum posEnum = null;\n      DocsEnum docsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        if (hasPositions) {\n          posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n          docsEnum = posEnum;\n        } else {\n          docsEnum = termsEnum.docs(null, docsEnum, flags);\n        }\n        assert docsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = docsEnum.nextDoc();\n          if (doc == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = docsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = posEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = posEnum.startOffset();\n                  int endOffset = posEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = posEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","sourceNew":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        flags = PostingsEnum.FLAG_POSITIONS;\n        if (hasPayloads) {\n          flags = flags | PostingsEnum.FLAG_PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | PostingsEnum.FLAG_OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | PostingsEnum.FLAG_FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum postingsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n\n        assert postingsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = postingsEnum.nextDoc();\n          if (doc == PostingsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = postingsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = postingsEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = postingsEnum.startOffset();\n                  int endOffset = postingsEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = postingsEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        \n        if (hasPayloads) {\n          flags = flags | DocsAndPositionsEnum.FLAG_PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | DocsAndPositionsEnum.FLAG_OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | DocsEnum.FLAG_FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      DocsAndPositionsEnum posEnum = null;\n      DocsEnum docsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        if (hasPositions) {\n          posEnum = termsEnum.docsAndPositions(null, posEnum, flags);\n          docsEnum = posEnum;\n        } else {\n          docsEnum = termsEnum.docs(null, docsEnum, flags);\n        }\n        assert docsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = docsEnum.nextDoc();\n          if (doc == DocsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = docsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = posEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = posEnum.startOffset();\n                  int endOffset = posEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = posEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","sourceNew":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        flags = PostingsEnum.POSITIONS;\n        if (hasPayloads) {\n          flags = flags | PostingsEnum.PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | PostingsEnum.OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | PostingsEnum.FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum postingsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n\n        assert postingsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = postingsEnum.nextDoc();\n          if (doc == PostingsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = postingsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = postingsEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = postingsEnum.startOffset();\n                  int endOffset = postingsEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = postingsEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        flags = PostingsEnum.FLAG_POSITIONS;\n        if (hasPayloads) {\n          flags = flags | PostingsEnum.FLAG_PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | PostingsEnum.FLAG_OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | PostingsEnum.FLAG_FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum postingsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n\n        assert postingsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = postingsEnum.nextDoc();\n          if (doc == PostingsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = postingsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = postingsEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = postingsEnum.startOffset();\n                  int endOffset = postingsEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = postingsEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","sourceNew":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        flags = PostingsEnum.POSITIONS;\n        if (hasPayloads) {\n          flags = flags | PostingsEnum.PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | PostingsEnum.OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | PostingsEnum.FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      PostingsEnum postingsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n\n        assert postingsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = postingsEnum.nextDoc();\n          if (doc == PostingsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = postingsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = postingsEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = postingsEnum.startOffset();\n                  int endOffset = postingsEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = postingsEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        flags = PostingsEnum.POSITIONS;\n        if (hasPayloads) {\n          flags = flags | PostingsEnum.PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | PostingsEnum.OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | PostingsEnum.FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator(null);\n      PostingsEnum postingsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n\n        assert postingsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = postingsEnum.nextDoc();\n          if (doc == PostingsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = postingsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = postingsEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = postingsEnum.startOffset();\n                  int endOffset = postingsEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = postingsEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextFieldsWriter#write(FieldInfos,Fields).mjava","sourceNew":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        flags = PostingsEnum.POSITIONS;\n        if (hasPayloads) {\n          flags = flags | PostingsEnum.PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | PostingsEnum.OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | PostingsEnum.FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      PostingsEnum postingsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        postingsEnum = termsEnum.postings(postingsEnum, flags);\n\n        assert postingsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = postingsEnum.nextDoc();\n          if (doc == PostingsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = postingsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = postingsEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = postingsEnum.startOffset();\n                  int endOffset = postingsEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = postingsEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void write(FieldInfos fieldInfos, Fields fields) throws IOException {\n\n    // for each field\n    for(String field : fields) {\n      Terms terms = fields.terms(field);\n      if (terms == null) {\n        // Annoyingly, this can happen!\n        continue;\n      }\n      FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n\n      boolean wroteField = false;\n\n      boolean hasPositions = terms.hasPositions();\n      boolean hasFreqs = terms.hasFreqs();\n      boolean hasPayloads = fieldInfo.hasPayloads();\n      boolean hasOffsets = terms.hasOffsets();\n\n      int flags = 0;\n      if (hasPositions) {\n        flags = PostingsEnum.POSITIONS;\n        if (hasPayloads) {\n          flags = flags | PostingsEnum.PAYLOADS;\n        }\n        if (hasOffsets) {\n          flags = flags | PostingsEnum.OFFSETS;\n        }\n      } else {\n        if (hasFreqs) {\n          flags = flags | PostingsEnum.FREQS;\n        }\n      }\n\n      TermsEnum termsEnum = terms.iterator();\n      PostingsEnum postingsEnum = null;\n\n      // for each term in field\n      while(true) {\n        BytesRef term = termsEnum.next();\n        if (term == null) {\n          break;\n        }\n\n        postingsEnum = termsEnum.postings(null, postingsEnum, flags);\n\n        assert postingsEnum != null: \"termsEnum=\" + termsEnum + \" hasPos=\" + hasPositions + \" flags=\" + flags;\n\n        boolean wroteTerm = false;\n\n        // for each doc in field+term\n        while(true) {\n          int doc = postingsEnum.nextDoc();\n          if (doc == PostingsEnum.NO_MORE_DOCS) {\n            break;\n          }\n\n          if (!wroteTerm) {\n\n            if (!wroteField) {\n              // we lazily do this, in case the field had\n              // no terms              \n              write(FIELD);\n              write(field);\n              newline();\n              wroteField = true;\n            }\n\n            // we lazily do this, in case the term had\n            // zero docs\n            write(TERM);\n            write(term);\n            newline();\n            wroteTerm = true;\n          }\n\n          write(DOC);\n          write(Integer.toString(doc));\n          newline();\n          if (hasFreqs) {\n            int freq = postingsEnum.freq();\n            write(FREQ);\n            write(Integer.toString(freq));\n            newline();\n\n            if (hasPositions) {\n              // for assert:\n              int lastStartOffset = 0;\n\n              // for each pos in field+term+doc\n              for(int i=0;i<freq;i++) {\n                int position = postingsEnum.nextPosition();\n\n                write(POS);\n                write(Integer.toString(position));\n                newline();\n\n                if (hasOffsets) {\n                  int startOffset = postingsEnum.startOffset();\n                  int endOffset = postingsEnum.endOffset();\n                  assert endOffset >= startOffset;\n                  assert startOffset >= lastStartOffset: \"startOffset=\" + startOffset + \" lastStartOffset=\" + lastStartOffset;\n                  lastStartOffset = startOffset;\n                  write(START_OFFSET);\n                  write(Integer.toString(startOffset));\n                  newline();\n                  write(END_OFFSET);\n                  write(Integer.toString(endOffset));\n                  newline();\n                }\n\n                BytesRef payload = postingsEnum.getPayload();\n\n                if (payload != null && payload.length > 0) {\n                  assert payload.length != 0;\n                  write(PAYLOAD);\n                  write(payload);\n                  newline();\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"51f5280f31484820499077f41fcdfe92d527d9dc":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"34bbd0c9efc37fd35a3ffdb47172aaebf7ab06db":["51f5280f31484820499077f41fcdfe92d527d9dc"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}