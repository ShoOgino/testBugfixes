{"path":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testExpressions(Map[String,ETP]).mjava","commits":[{"id":"3bd4c6955956e76c96eb12dfe64108ed03522983","date":1508262722,"type":0,"author":"Houston Putman","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testExpressions(Map[String,ETP]).mjava","pathOld":"/dev/null","sourceNew":"  protected void testExpressions(Map<String, ETP> expressions) throws Exception {\n    StringBuilder analyticsRequest = new StringBuilder(\"{ \\\"expressions\\\": {\");\n    String expressionsStr = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\\\"\" + entry.getValue().expression + '\"')\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    analyticsRequest.append(expressionsStr);\n    analyticsRequest.append(\"}}\");\n\n    String results = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\" + entry.getValue().expectedResultStr())\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    \n    testAnalytics(analyticsRequest.toString(), \"results=={\"+results+\", \\\"_UNORDERED_\\\":true}\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e4e64b7199d2f2a17be7f3926c7532553910dce","date":1564342581,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testExpressions(Map[String,ETP]).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testExpressions(Map[String,ETP]).mjava","sourceNew":"  protected void testExpressions(Map<String, ETP> expressions) throws Exception {\n    StringBuilder analyticsRequest = new StringBuilder(\"{ \\\"expressions\\\": {\");\n    String expressionsStr = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\\\"\" + entry.getValue().expression + '\"')\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    analyticsRequest.append(expressionsStr);\n    analyticsRequest.append(\"}}\");\n\n    String results = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\" + entry.getValue().expectedResultStr())\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n\n    testAnalytics(analyticsRequest.toString(), \"results=={\"+results+\", \\\"_UNORDERED_\\\":true}\");\n  }\n\n","sourceOld":"  protected void testExpressions(Map<String, ETP> expressions) throws Exception {\n    StringBuilder analyticsRequest = new StringBuilder(\"{ \\\"expressions\\\": {\");\n    String expressionsStr = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\\\"\" + entry.getValue().expression + '\"')\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    analyticsRequest.append(expressionsStr);\n    analyticsRequest.append(\"}}\");\n\n    String results = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\" + entry.getValue().expectedResultStr())\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    \n    testAnalytics(analyticsRequest.toString(), \"results=={\"+results+\", \\\"_UNORDERED_\\\":true}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testExpressions(Map[String,ETP]).mjava","pathOld":"solr/contrib/analytics/src/test/org/apache/solr/analytics/SolrAnalyticsTestCase#testExpressions(Map[String,ETP]).mjava","sourceNew":"  protected void testExpressions(Map<String, ETP> expressions) throws Exception {\n    StringBuilder analyticsRequest = new StringBuilder(\"{ \\\"expressions\\\": {\");\n    String expressionsStr = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\\\"\" + entry.getValue().expression + '\"')\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    analyticsRequest.append(expressionsStr);\n    analyticsRequest.append(\"}}\");\n\n    String results = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\" + entry.getValue().expectedResultStr())\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n\n    testAnalytics(analyticsRequest.toString(), \"results=={\"+results+\", \\\"_UNORDERED_\\\":true}\");\n  }\n\n","sourceOld":"  protected void testExpressions(Map<String, ETP> expressions) throws Exception {\n    StringBuilder analyticsRequest = new StringBuilder(\"{ \\\"expressions\\\": {\");\n    String expressionsStr = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\\\"\" + entry.getValue().expression + '\"')\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    analyticsRequest.append(expressionsStr);\n    analyticsRequest.append(\"}}\");\n\n    String results = expressions.entrySet()\n        .stream()\n        .map( entry -> '\"' + entry.getKey() + \"\\\":\" + entry.getValue().expectedResultStr())\n        .reduce((a,b) -> a + ',' + b)\n        .orElseGet(() -> \"\");\n    \n    testAnalytics(analyticsRequest.toString(), \"results=={\"+results+\", \\\"_UNORDERED_\\\":true}\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["3bd4c6955956e76c96eb12dfe64108ed03522983","1e4e64b7199d2f2a17be7f3926c7532553910dce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1e4e64b7199d2f2a17be7f3926c7532553910dce"],"3bd4c6955956e76c96eb12dfe64108ed03522983":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1e4e64b7199d2f2a17be7f3926c7532553910dce":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bd4c6955956e76c96eb12dfe64108ed03522983"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"3bd4c6955956e76c96eb12dfe64108ed03522983":["1e4e64b7199d2f2a17be7f3926c7532553910dce","f8061ddd97f3352007d927dae445884a6f3d857b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}