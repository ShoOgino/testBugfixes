{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","commits":[{"id":"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc","date":1320437768,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"/dev/null","sourceNew":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    if (VERBOSE) {\n      writer.setInfoStream(System.out);\n    }\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterNRTIsCurrent#testIsCurrentWithThreads().mjava","sourceNew":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","sourceOld":"  public void testIsCurrentWithThreads() throws CorruptIndexException,\n      LockObtainFailedException, IOException, InterruptedException {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT,\n        new MockAnalyzer(random));\n    IndexWriter writer = new IndexWriter(dir, conf);\n    ReaderHolder holder = new ReaderHolder();\n    ReaderThread[] threads = new ReaderThread[atLeast(3)];\n    final CountDownLatch latch = new CountDownLatch(1);\n    WriterThread writerThread = new WriterThread(holder, writer,\n        atLeast(500), random, latch);\n    for (int i = 0; i < threads.length; i++) {\n      threads[i] = new ReaderThread(holder, latch);\n      threads[i].start();\n    }\n    writerThread.start();\n\n    writerThread.join();\n    boolean failed = writerThread.failed != null;\n    if (failed)\n      writerThread.failed.printStackTrace();\n    for (int i = 0; i < threads.length; i++) {\n      threads[i].join();\n      if (threads[i].failed != null) {\n        threads[i].failed.printStackTrace();\n        failed = true;\n      }\n    }\n    assertFalse(failed);\n    writer.close();\n    dir.close();\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["06584e6e98d592b34e1329b384182f368d2025e8"],"06584e6e98d592b34e1329b384182f368d2025e8":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"06584e6e98d592b34e1329b384182f368d2025e8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a1c3710e755dc60691ac0d7fe23c9fcba0537bdc":["06584e6e98d592b34e1329b384182f368d2025e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a1c3710e755dc60691ac0d7fe23c9fcba0537bdc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}