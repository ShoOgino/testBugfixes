{"path":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","pathOld":"solr/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/ZkControllerTest#testReadShards().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testReadShards() throws Exception {\n    String zkDir = dataDir.getAbsolutePath() + File.separator\n        + \"zookeeper/server1/data\";\n    ZkTestServer server = null;\n    SolrZkClient zkClient = null;\n    ZkController zkController = null;\n    try {\n      server = new ZkTestServer(zkDir);\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), TIMEOUT);\n      String shardsPath = \"/collections/collection1/shards/shardid1\";\n      zkClient.makePath(shardsPath);\n\n      addShardToZk(zkClient, shardsPath, SHARD1, URL1);\n      addShardToZk(zkClient, shardsPath, SHARD2, URL2);\n      addShardToZk(zkClient, shardsPath, SHARD3, URL3);\n\n      if (DEBUG) {\n        zkClient.printLayoutToStdOut();\n      }\n\n      zkController = new ZkController(server.getZkAddress(),\n          TIMEOUT, 1000, \"localhost\", \"8983\", \"solr\");\n \n      zkController.getZkStateReader().updateCloudState(true);\n      CloudState cloudInfo = zkController.getCloudState();\n      Map<String,Slice> slices = cloudInfo.getSlices(\"collection1\");\n      assertNotNull(slices);\n\n      for (Slice slice : slices.values()) {\n        Map<String,ZkNodeProps> shards = slice.getShards();\n        if (DEBUG) {\n          for (String shardName : shards.keySet()) {\n            ZkNodeProps props = shards.get(shardName);\n            System.out.println(\"shard:\" + shardName);\n            System.out.println(\"props:\" + props.toString());\n          }\n        }\n        assertNotNull(shards.get(SHARD1));\n        assertNotNull(shards.get(SHARD2));\n        assertNotNull(shards.get(SHARD3));\n\n        ZkNodeProps props = shards.get(SHARD1);\n        assertEquals(URL1, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD2);\n        assertEquals(URL2, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n        props = shards.get(SHARD3);\n        assertEquals(URL3, props.get(ZkStateReader.URL_PROP));\n        assertEquals(TEST_NODE_NAME, props.get(ZkStateReader.NODE_NAME));\n\n      }\n\n    } finally {\n      if (zkClient != null) {\n        zkClient.close();\n      }\n      if (zkController != null) {\n        zkController.close();\n      }\n      if (server != null) {\n        server.shutdown();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"]},"commit2Childs":{"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}