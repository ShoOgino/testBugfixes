{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClearLockDisabled().mjava","commits":[{"id":"c761d502ca1f6c5324aa909468ebc4f761c92c1f","date":1412431978,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClearLockDisabled().mjava","pathOld":"/dev/null","sourceNew":"  // test that cfs reader is read-only\n  public void testClearLockDisabled() throws IOException {\n    final String testfile = \"_123.test\";\n\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(testfile, IOContext.DEFAULT);\n    out.writeInt(3);\n    out.close();\n \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Collections.<String>emptyList(), MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    try {\n      cfs.clearLock(\"foobar\");\n      fail(\"didn't get expected exception\");\n    } catch (UnsupportedOperationException expected) {\n      // expected UOE\n    }\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClearLockDisabled().mjava","pathOld":"/dev/null","sourceNew":"  // test that cfs reader is read-only\n  public void testClearLockDisabled() throws IOException {\n    final String testfile = \"_123.test\";\n\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(testfile, IOContext.DEFAULT);\n    out.writeInt(3);\n    out.close();\n \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Collections.<String>emptyList(), MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    try {\n      cfs.clearLock(\"foobar\");\n      fail(\"didn't get expected exception\");\n    } catch (UnsupportedOperationException expected) {\n      // expected UOE\n    }\n    cfs.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#testClearLockDisabled().mjava","sourceNew":null,"sourceOld":"  // test that cfs reader is read-only\n  public void testClearLockDisabled() throws IOException {\n    final String testfile = \"_123.test\";\n\n    Directory dir = newDirectory();\n    IndexOutput out = dir.createOutput(testfile, IOContext.DEFAULT);\n    out.writeInt(3);\n    out.close();\n \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, Collections.<String>emptyList(), MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    try {\n      cfs.clearLock(\"foobar\");\n      fail(\"didn't get expected exception\");\n    } catch (UnsupportedOperationException expected) {\n      // expected UOE\n    }\n    cfs.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c761d502ca1f6c5324aa909468ebc4f761c92c1f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c761d502ca1f6c5324aa909468ebc4f761c92c1f"],"285cdc737de75b7cc7c284a156b20214deb67bca":["9bb9a29a5e71a90295f175df8919802993142c9a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"c761d502ca1f6c5324aa909468ebc4f761c92c1f":["9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["285cdc737de75b7cc7c284a156b20214deb67bca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c761d502ca1f6c5324aa909468ebc4f761c92c1f","9bb9a29a5e71a90295f175df8919802993142c9a"],"285cdc737de75b7cc7c284a156b20214deb67bca":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}