{"path":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.CannedTokenizer#incrementToken().mjava","commits":[{"id":"f0852ebe96f807ea1c84a88f9aaa4985a2088594","date":1304368766,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.CannedTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        final TokenAndPos token = tokens[upto++];\n        termAtt.setEmpty();\n        termAtt.append(token.token);\n        posIncrAtt.setPositionIncrement(token.pos - lastPos);\n        lastPos = token.pos;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.CannedTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        final TokenAndPos token = tokens[upto++];\n        termAtt.setEmpty();\n        termAtt.append(token.token);\n        posIncrAtt.setPositionIncrement(token.pos - lastPos);\n        lastPos = token.pos;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.CannedTokenizer#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        final TokenAndPos token = tokens[upto++];\n        termAtt.setEmpty();\n        termAtt.append(token.token);\n        posIncrAtt.setPositionIncrement(token.pos - lastPos);\n        lastPos = token.pos;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/analysis/CannedAnalyzer.CannedTokenizer#incrementToken().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestMultiPhraseQuery.CannedTokenizer#incrementToken().mjava","sourceNew":"    @Override\n    public final boolean incrementToken() throws IOException {\n      if (upto < tokens.length) {\n        final Token token = tokens[upto++];     \n        // TODO: can we just capture/restoreState so\n        // we get all attrs...?\n        clearAttributes();      \n        termAtt.setEmpty();\n        termAtt.append(token.toString());\n        posIncrAtt.setPositionIncrement(token.getPositionIncrement());\n        offsetAtt.setOffset(token.startOffset(), token.endOffset());\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","sourceOld":"    @Override\n    public final boolean incrementToken() throws IOException {\n      clearAttributes();      \n      if (upto < tokens.length) {\n        final TokenAndPos token = tokens[upto++];\n        termAtt.setEmpty();\n        termAtt.append(token.token);\n        posIncrAtt.setPositionIncrement(token.pos - lastPos);\n        lastPos = token.pos;\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f0852ebe96f807ea1c84a88f9aaa4985a2088594":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f0852ebe96f807ea1c84a88f9aaa4985a2088594"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["f0852ebe96f807ea1c84a88f9aaa4985a2088594"]},"commit2Childs":{"f0852ebe96f807ea1c84a88f9aaa4985a2088594":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","31f025ae60076ae95274433f3fe8e6ace2857a87"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f0852ebe96f807ea1c84a88f9aaa4985a2088594","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"31f025ae60076ae95274433f3fe8e6ace2857a87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}