{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","commits":[{"id":"9fc0d60683b47b5d922124c31f57c8b34734f9e6","date":1480846684,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","pathOld":"/dev/null","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","pathOld":"/dev/null","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedIndexBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":3,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/simpletext/SimpleTextBKDWriter#writeField1Dim(IndexOutput,String,MutablePointValues).mjava","sourceNew":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(config, maxDoc, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","sourceOld":"  /* In the 1D case, we can simply sort points in ascending order and use the\n   * same writing logic as we use at merge time. */\n  private long writeField1Dim(IndexOutput out, String fieldName, MutablePointValues reader) throws IOException {\n    MutablePointsReaderUtils.sort(maxDoc, packedIndexBytesLength, reader, 0, Math.toIntExact(reader.size()));\n\n    final OneDimensionBKDWriter oneDimWriter = new OneDimensionBKDWriter(out);\n\n    reader.intersect(new IntersectVisitor() {\n\n      @Override\n      public void visit(int docID, byte[] packedValue) throws IOException {\n        oneDimWriter.add(packedValue, docID);\n      }\n\n      @Override\n      public void visit(int docID) throws IOException {\n        throw new IllegalStateException();\n      }\n\n      @Override\n      public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n        return Relation.CELL_CROSSES_QUERY;\n      }\n    });\n\n    return oneDimWriter.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9fc0d60683b47b5d922124c31f57c8b34734f9e6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"9fc0d60683b47b5d922124c31f57c8b34734f9e6":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fc0d60683b47b5d922124c31f57c8b34734f9e6","9856095f7afb5a607bf5e65077615ed91273508c"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}