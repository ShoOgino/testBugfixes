{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectScorers(Collection[Scorer]).mjava","commits":[{"id":"dca67e06c96e95a8d9ef07418b6299bfd981523b","date":1484639518,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectScorers(Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectScorers(List[Scorer]).mjava","sourceNew":"  /** Create a conjunction over the provided {@link Scorer}s. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectScorers(Collection<Scorer> scorers) {\n    if (scorers.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      addScorer(scorer, allIterators, twoPhaseIterators);\n    }\n\n    return createConjunction(allIterators, twoPhaseIterators);\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided {@link Scorer}s. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectScorers(List<Scorer> scorers) {\n    if (scorers.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      addScorer(scorer, allIterators, twoPhaseIterators);\n    }\n\n    return createConjunction(allIterators, twoPhaseIterators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectScorers(Collection[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionDISI#intersectScorers(List[Scorer]).mjava","sourceNew":"  /** Create a conjunction over the provided {@link Scorer}s. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectScorers(Collection<Scorer> scorers) {\n    if (scorers.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      addScorer(scorer, allIterators, twoPhaseIterators);\n    }\n\n    return createConjunction(allIterators, twoPhaseIterators);\n  }\n\n","sourceOld":"  /** Create a conjunction over the provided {@link Scorer}s. Note that the\n   * returned {@link DocIdSetIterator} might leverage two-phase iteration in\n   * which case it is possible to retrieve the {@link TwoPhaseIterator} using\n   * {@link TwoPhaseIterator#unwrap}. */\n  public static DocIdSetIterator intersectScorers(List<Scorer> scorers) {\n    if (scorers.size() < 2) {\n      throw new IllegalArgumentException(\"Cannot make a ConjunctionDISI of less than 2 iterators\");\n    }\n    final List<DocIdSetIterator> allIterators = new ArrayList<>();\n    final List<TwoPhaseIterator> twoPhaseIterators = new ArrayList<>();\n    for (Scorer scorer : scorers) {\n      addScorer(scorer, allIterators, twoPhaseIterators);\n    }\n\n    return createConjunction(allIterators, twoPhaseIterators);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dca67e06c96e95a8d9ef07418b6299bfd981523b"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dca67e06c96e95a8d9ef07418b6299bfd981523b"]},"commit2Childs":{"dca67e06c96e95a8d9ef07418b6299bfd981523b":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dca67e06c96e95a8d9ef07418b6299bfd981523b","302d34f2c66e8d489ee13078305c330cbf67b226"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}