{"path":"solr/core/src/test/org/apache/solr/TestHighlightDedupGrouping#basicTest().mjava","commits":[{"id":"3717ad5d6103c6c5c87888e9d0e791b9124c98b6","date":1392066483,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestHighlightDedupGrouping#basicTest().mjava","pathOld":"/dev/null","sourceNew":"  private void basicTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    int docid = 1;\n    int group = 5;\n    for (int shard = 0 ; shard < shardCount ; ++shard) {\n      addDoc(docid, group, shard); // add the same doc to both shards\n      clients.get(shard).commit();\n    }\n\n    QueryResponse rsp = queryServer(params\n        (\"q\",           id_s1 + \":\" + docid,\n         \"shards\",      shards,\n         \"group\",       \"true\",\n         \"group.field\", id_s1,\n         \"group.limit\", Integer.toString(shardCount),\n         \"hl\",          \"true\",\n         \"hl.fl\",       id_s1\n        ));\n\n    // The number of highlit documents should be the same as the de-duplicated docs\n    assertEquals(1, rsp.getHighlighting().values().size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"072f211dfa8387028bb978d128c35bf9a450bbbf","date":1406041363,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestHighlightDedupGrouping#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestHighlightDedupGrouping#basicTest().mjava","sourceNew":"  private void basicTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    int docid = 1;\n    int group = 5;\n    for (int shard = 0 ; shard < shardCount ; ++shard) {\n      addDoc(docid, group, shard); // add the same doc to both shards\n      clients.get(shard).commit();\n    }\n\n    QueryResponse rsp = queryServer(params\n        (\"q\",           id_s1 + \":\" + docid,\n         \"shards\",      shards,\n         \"group\",       \"true\",\n         \"group.field\", id_s1,\n         \"group.limit\", Integer.toString(shardCount),\n         \"hl\",          \"true\",\n         \"hl.fl\",       id_s1\n        ));\n\n    // The number of highlit documents should be the same as the de-duplicated docs\n    assertEquals(1, rsp.getHighlighting().values().size());\n  }\n\n","sourceOld":"  private void basicTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"QTime\", SKIPVAL);\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    int docid = 1;\n    int group = 5;\n    for (int shard = 0 ; shard < shardCount ; ++shard) {\n      addDoc(docid, group, shard); // add the same doc to both shards\n      clients.get(shard).commit();\n    }\n\n    QueryResponse rsp = queryServer(params\n        (\"q\",           id_s1 + \":\" + docid,\n         \"shards\",      shards,\n         \"group\",       \"true\",\n         \"group.field\", id_s1,\n         \"group.limit\", Integer.toString(shardCount),\n         \"hl\",          \"true\",\n         \"hl.fl\",       id_s1\n        ));\n\n    // The number of highlit documents should be the same as the de-duplicated docs\n    assertEquals(1, rsp.getHighlighting().values().size());\n  }\n\n","bugFix":["3717ad5d6103c6c5c87888e9d0e791b9124c98b6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"abb23fcc2461782ab204e61213240feb77d355aa","date":1422029612,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestHighlightDedupGrouping#basicTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/TestHighlightDedupGrouping#basicTest().mjava","sourceNew":"  private void basicTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    int docid = 1;\n    int group = 5;\n    for (int shard = 0 ; shard < getShardCount(); ++shard) {\n      addDoc(docid, group, shard); // add the same doc to both shards\n      clients.get(shard).commit();\n    }\n\n    QueryResponse rsp = queryServer(params\n        (\"q\",           id_s1 + \":\" + docid,\n         \"shards\",      shards,\n         \"group\",       \"true\",\n         \"group.field\", id_s1,\n         \"group.limit\", Integer.toString(getShardCount()),\n         \"hl\",          \"true\",\n         \"hl.fl\",       id_s1\n        ));\n\n    // The number of highlit documents should be the same as the de-duplicated docs\n    assertEquals(1, rsp.getHighlighting().values().size());\n  }\n\n","sourceOld":"  private void basicTest() throws Exception {\n    del(\"*:*\");\n    commit();\n\n    handle.clear();\n    handle.put(\"timestamp\", SKIPVAL);\n    handle.put(\"grouped\", UNORDERED);   // distrib grouping doesn't guarantee order of top level group commands\n\n    int docid = 1;\n    int group = 5;\n    for (int shard = 0 ; shard < shardCount ; ++shard) {\n      addDoc(docid, group, shard); // add the same doc to both shards\n      clients.get(shard).commit();\n    }\n\n    QueryResponse rsp = queryServer(params\n        (\"q\",           id_s1 + \":\" + docid,\n         \"shards\",      shards,\n         \"group\",       \"true\",\n         \"group.field\", id_s1,\n         \"group.limit\", Integer.toString(shardCount),\n         \"hl\",          \"true\",\n         \"hl.fl\",       id_s1\n        ));\n\n    // The number of highlit documents should be the same as the de-duplicated docs\n    assertEquals(1, rsp.getHighlighting().values().size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"072f211dfa8387028bb978d128c35bf9a450bbbf":["3717ad5d6103c6c5c87888e9d0e791b9124c98b6"],"abb23fcc2461782ab204e61213240feb77d355aa":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3717ad5d6103c6c5c87888e9d0e791b9124c98b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["abb23fcc2461782ab204e61213240feb77d355aa"]},"commit2Childs":{"072f211dfa8387028bb978d128c35bf9a450bbbf":["abb23fcc2461782ab204e61213240feb77d355aa"],"abb23fcc2461782ab204e61213240feb77d355aa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3717ad5d6103c6c5c87888e9d0e791b9124c98b6"],"3717ad5d6103c6c5c87888e9d0e791b9124c98b6":["072f211dfa8387028bb978d128c35bf9a450bbbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}