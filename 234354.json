{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","commits":[{"id":"dcd5215a06a4284c4cecb6fd8e55461411b6cca4","date":1469032255,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"/dev/null","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a2748831fb25b0e9d5a4c315047bf877c887460","date":1498155650,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(Thread.currentThread().getContextClassLoader().getResourceAsStream(\"SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55ed5a78f8a4b37108ac73a894a105db562d303e","date":1500477652,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionsHandler#createSysConfigSet(CoreContainer).mjava","sourceNew":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + CollectionAdminParams.SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","sourceOld":"  private static void createSysConfigSet(CoreContainer coreContainer) throws KeeperException, InterruptedException {\n    SolrZkClient zk = coreContainer.getZkController().getZkStateReader().getZkClient();\n    ZkCmdExecutor cmdExecutor = new ZkCmdExecutor(zk.getZkClientTimeout());\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE, zk);\n    cmdExecutor.ensureExists(ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL, zk);\n\n    try {\n      String path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/schema.xml\";\n      byte[] data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSchema.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n      path = ZkStateReader.CONFIGS_ZKNODE + \"/\" + SYSTEM_COLL + \"/solrconfig.xml\";\n      data = IOUtils.toByteArray(CollectionsHandler.class.getResourceAsStream(\"/SystemCollectionSolrConfig.xml\"));\n      assert data != null && data.length > 0;\n      cmdExecutor.ensureExists(path, data, CreateMode.PERSISTENT, zk);\n    } catch (IOException e) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, e);\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","55ed5a78f8a4b37108ac73a894a105db562d303e"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["dcd5215a06a4284c4cecb6fd8e55461411b6cca4"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","5a2748831fb25b0e9d5a4c315047bf877c887460"],"dcd5215a06a4284c4cecb6fd8e55461411b6cca4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"28288370235ed02234a64753cdbf0c6ec096304a":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","5a2748831fb25b0e9d5a4c315047bf877c887460"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","dcd5215a06a4284c4cecb6fd8e55461411b6cca4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"55ed5a78f8a4b37108ac73a894a105db562d303e":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["5a2748831fb25b0e9d5a4c315047bf877c887460","9856095f7afb5a607bf5e65077615ed91273508c","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"5a2748831fb25b0e9d5a4c315047bf877c887460":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dcd5215a06a4284c4cecb6fd8e55461411b6cca4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["55ed5a78f8a4b37108ac73a894a105db562d303e"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"dcd5215a06a4284c4cecb6fd8e55461411b6cca4":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}