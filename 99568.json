{"path":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6cce7e17930f156b7456ee7fc32f691979f641e2","date":1349444322,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case FIXED_INTS_8:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case FIXED_INTS_8:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/NumericIndexDocValueSource#getValues(Map,AtomicReaderContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FunctionValues getValues(Map context, AtomicReaderContext readerContext) throws IOException {\n    final Source source = readerContext.reader().docValues(field)\n        .getSource();\n    Type type = source.getType();\n    switch (type) {\n    case FLOAT_32:\n    case FLOAT_64:\n      // TODO (chrism) Change to use FloatDocValues and IntDocValues\n      return new FunctionValues() {\n\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getFloat(doc);\n        }\n      };\n\n    case FIXED_INTS_8:\n    case FIXED_INTS_16:\n    case FIXED_INTS_32:\n    case FIXED_INTS_64:\n    case VAR_INTS:\n      return new FunctionValues() {\n        @Override\n        public String toString(int doc) {\n          return \"float: [\" + floatVal(doc) + \"]\";\n        }\n\n        @Override\n        public float floatVal(int doc) {\n          return (float) source.getInt(doc);\n        }\n      };\n    default:\n      throw new IOException(\"Type: \" + type + \"is not numeric\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6cce7e17930f156b7456ee7fc32f691979f641e2","0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0837ab0472feecb3a54260729d845f839e1cbd72":["6cce7e17930f156b7456ee7fc32f691979f641e2"],"6cce7e17930f156b7456ee7fc32f691979f641e2":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["6cce7e17930f156b7456ee7fc32f691979f641e2"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"0837ab0472feecb3a54260729d845f839e1cbd72":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"6cce7e17930f156b7456ee7fc32f691979f641e2":["d4d69c535930b5cce125cff868d40f6373dc27d4","0837ab0472feecb3a54260729d845f839e1cbd72"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}