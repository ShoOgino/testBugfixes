{"path":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","commits":[{"id":"72210c8d5b81704dea0379ab74b7714e77ab3263","date":1442020665,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","pathOld":"/dev/null","sourceNew":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n   \n    File solrXml = new File(SolrTestCaseJ4.TEST_HOME(), \"solr-no-core.xml\");\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54","date":1446047031,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","sourceNew":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir());\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","sourceOld":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n   \n    File solrXml = new File(SolrTestCaseJ4.TEST_HOME(), \"solr-no-core.xml\");\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir().toFile(), solrXml, buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f929b717ab7f8b4a75621bbf4e3c3b08ba561381","date":1446062278,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","sourceNew":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","sourceOld":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir());\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c","date":1456187117,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","sourceNew":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","sourceOld":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","sourceNew":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","sourceOld":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e89a32cc825033ebae8bb9e1c6877c2d9d76749e","date":1476790453,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","sourceNew":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), configName);\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .process(miniCluster.getSolrClient());\n\n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","sourceOld":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/PingRequestHandlerTest#testPingInClusterWithNoHealthCheck().mjava","sourceNew":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      miniCluster.uploadConfigSet(SolrTestCaseJ4.TEST_PATH().resolve(\"collection1\").resolve(\"conf\"), configName);\n      CollectionAdminRequest.createCollection(collectionName, configName, NUM_SHARDS, REPLICATION_FACTOR)\n          .process(miniCluster.getSolrClient());\n\n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","sourceOld":" public void testPingInClusterWithNoHealthCheck() throws Exception {\n\n    MiniSolrCloudCluster miniCluster = new MiniSolrCloudCluster(NUM_SERVERS, createTempDir(), buildJettyConfig(\"/solr\"));\n\n    final CloudSolrClient cloudSolrClient = miniCluster.getSolrClient();\n\n    try {\n      assertNotNull(miniCluster.getZkServer());\n      List<JettySolrRunner> jettys = miniCluster.getJettySolrRunners();\n      assertEquals(NUM_SERVERS, jettys.size());\n      for (JettySolrRunner jetty : jettys) {\n        assertTrue(jetty.isRunning());\n      }\n\n      // create collection\n      String collectionName = \"testSolrCloudCollection\";\n      String configName = \"solrCloudCollectionConfig\";\n      File configDir = new File(SolrTestCaseJ4.TEST_HOME() + File.separator + \"collection1\" + File.separator + \"conf\");\n      miniCluster.uploadConfigDir(configDir, configName);\n      miniCluster.createCollection(collectionName, NUM_SHARDS, REPLICATION_FACTOR, configName, null); \n   \n      // Send distributed and non-distributed ping query\n      SolrPingWithDistrib reqDistrib = new SolrPingWithDistrib();\n      reqDistrib.setDistrib(true);\n      SolrPingResponse rsp = reqDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus()); \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      \n      SolrPing reqNonDistrib = new SolrPing();\n      rsp = reqNonDistrib.process(cloudSolrClient, collectionName);\n      assertEquals(0, rsp.getStatus());   \n      assertTrue(rsp.getResponseHeader().getBooleanArg((\"zkConnected\")));\n\n      // delete the collection we created earlier\n      miniCluster.deleteCollection(collectionName);\n\n    }\n    finally {\n      miniCluster.shutdown();\n    } \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["419a8f52c6635419beb951255cacbbb281044c57"],"72210c8d5b81704dea0379ab74b7714e77ab3263":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"f929b717ab7f8b4a75621bbf4e3c3b08ba561381":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["72210c8d5b81704dea0379ab74b7714e77ab3263"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["419a8f52c6635419beb951255cacbbb281044c57","e89a32cc825033ebae8bb9e1c6877c2d9d76749e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e"]},"commit2Childs":{"e89a32cc825033ebae8bb9e1c6877c2d9d76749e":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"72210c8d5b81704dea0379ab74b7714e77ab3263":["f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["72210c8d5b81704dea0379ab74b7714e77ab3263"],"419a8f52c6635419beb951255cacbbb281044c57":["e89a32cc825033ebae8bb9e1c6877c2d9d76749e","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"f929b717ab7f8b4a75621bbf4e3c3b08ba561381":["419a8f52c6635419beb951255cacbbb281044c57","e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c"],"e80313f2bd5f966a6e44d8213f2d3d5f7c1d656c":["419a8f52c6635419beb951255cacbbb281044c57"],"f0c130ec24cbb2eef3d8e7f0e971736f0bea8f54":["f929b717ab7f8b4a75621bbf4e3c3b08ba561381"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}