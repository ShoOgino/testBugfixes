{"path":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseDelete().mjava","commits":[{"id":"042e4d934397657ba04c82b46cc5665076bc5c58","date":1336511170,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseDelete().mjava","pathOld":"/dev/null","sourceNew":"    DeleteUpdateCommand parseDelete() throws IOException {\n      assertNextEvent( JSONParser.OBJECT_START );\n  \n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n  \n      while( true ) {\n        int ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(parser.getString());\n            }\n            else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            }\n            else if( \"commitWithin\".equals(key) ) { \n              cmd.commitWithin = Integer.parseInt(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key \n                +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n          return cmd;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"baa723a66f51909657c89c07a455b3c15da9f761","date":1338908663,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#handleDeleteMap(int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/loader/JsonLoader.SingleThreadedJsonLoader#parseDelete().mjava","sourceNew":"    void handleDeleteMap(int ev) throws IOException {\n      assert ev == JSONParser.OBJECT_START;\n\n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n\n      while( true ) {\n        ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(parser.getString());\n            }\n            else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            }\n            else if( \"commitWithin\".equals(key) ) {\n              cmd.commitWithin = Integer.parseInt(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key\n                    +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n\n          processor.processDelete(cmd);\n          return;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n                  +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","sourceOld":"    DeleteUpdateCommand parseDelete() throws IOException {\n      assertNextEvent( JSONParser.OBJECT_START );\n  \n      DeleteUpdateCommand cmd = new DeleteUpdateCommand(req);\n      cmd.commitWithin = commitWithin;\n  \n      while( true ) {\n        int ev = parser.nextEvent();\n        if( ev == JSONParser.STRING ) {\n          String key = parser.getString();\n          if( parser.wasKey() ) {\n            if( \"id\".equals( key ) ) {\n              cmd.setId(parser.getString());\n            }\n            else if( \"query\".equals(key) ) {\n              cmd.setQuery(parser.getString());\n            }\n            else if( \"commitWithin\".equals(key) ) { \n              cmd.commitWithin = Integer.parseInt(parser.getString());\n            } else {\n              throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Unknown key: \"+key+\" [\"+parser.getPosition()+\"]\" );\n            }\n          }\n          else {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"invalid string: \" + key \n                +\" at [\"+parser.getPosition()+\"]\" );\n          }\n        }\n        else if( ev == JSONParser.OBJECT_END ) {\n          if( cmd.getId() == null && cmd.getQuery() == null ) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Missing id or query for delete [\"+parser.getPosition()+\"]\" );\n          }\n          return cmd;\n        }\n        else {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Got: \"+JSONParser.getEventString( ev  )\n              +\" at [\"+parser.getPosition()+\"]\" );\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"042e4d934397657ba04c82b46cc5665076bc5c58":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"baa723a66f51909657c89c07a455b3c15da9f761":["042e4d934397657ba04c82b46cc5665076bc5c58"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["baa723a66f51909657c89c07a455b3c15da9f761"]},"commit2Childs":{"042e4d934397657ba04c82b46cc5665076bc5c58":["baa723a66f51909657c89c07a455b3c15da9f761"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["042e4d934397657ba04c82b46cc5665076bc5c58"],"baa723a66f51909657c89c07a455b3c15da9f761":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}