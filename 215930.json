{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","sourceNew":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9e87c4193bc100c3b96235f14bee01a5b2009ce5","date":1287756261,"type":5,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#discardEscapeChar(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","sourceNew":"  /**\r\n   * Returns a String where the escape char has been\r\n   * removed, or kept only once if there was a double escape.\r\n   *\r\n   * Supports escaped unicode characters, e. g. translates\r\n   * <code>\\\\u0041</code> to <code>A</code>.\r\n   *\r\n   */\r\n  String discardEscapeChar(String input) throws ParseException {\r\n    // Create char array to hold unescaped char sequence\r\n    char[] output = new char[input.length()];\r\n\r\n    // The length of the output can be less than the input\r\n    // due to discarded escape chars. This variable holds\r\n    // the actual length of the output\r\n    int length = 0;\r\n\r\n    // We remember whether the last processed character was\r\n    // an escape character\r\n    boolean lastCharWasEscapeChar = false;\r\n\r\n    // The multiplier the current unicode digit must be multiplied with.\r\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\r\n    int codePointMultiplier = 0;\r\n\r\n    // Used to calculate the codepoint of the escaped unicode character\r\n    int codePoint = 0;\r\n\r\n    for (int i = 0; i < input.length(); i++) {\r\n      char curChar = input.charAt(i);\r\n      if (codePointMultiplier > 0) {\r\n        codePoint += hexToInt(curChar) * codePointMultiplier;\r\n        codePointMultiplier >>>= 4;\r\n        if (codePointMultiplier == 0) {\r\n          output[length++] = (char)codePoint;\r\n          codePoint = 0;\r\n        }\r\n      } else if (lastCharWasEscapeChar) {\r\n        if (curChar == 'u') {\r\n          // found an escaped unicode character\r\n          codePointMultiplier = 16 * 16 * 16;\r\n        } else {\r\n          // this character was escaped\r\n          output[length] = curChar;\r\n          length++;\r\n        }\r\n        lastCharWasEscapeChar = false;\r\n      } else {\r\n        if (curChar == '\\\\') {\r\n          lastCharWasEscapeChar = true;\r\n        } else {\r\n          output[length] = curChar;\r\n          length++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (codePointMultiplier > 0) {\r\n      throw new ParseException(\"Truncated unicode escape sequence.\");\r\n    }\r\n\r\n    if (lastCharWasEscapeChar) {\r\n      throw new ParseException(\"Term can not end with escape character.\");\r\n    }\r\n\r\n    return new String(output, 0, length);\r\n  }\r\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#discardEscapeChar(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","sourceNew":"  /**\r\n   * Returns a String where the escape char has been\r\n   * removed, or kept only once if there was a double escape.\r\n   *\r\n   * Supports escaped unicode characters, e. g. translates\r\n   * <code>\\\\u0041</code> to <code>A</code>.\r\n   *\r\n   */\r\n  String discardEscapeChar(String input) throws ParseException {\r\n    // Create char array to hold unescaped char sequence\r\n    char[] output = new char[input.length()];\r\n\r\n    // The length of the output can be less than the input\r\n    // due to discarded escape chars. This variable holds\r\n    // the actual length of the output\r\n    int length = 0;\r\n\r\n    // We remember whether the last processed character was\r\n    // an escape character\r\n    boolean lastCharWasEscapeChar = false;\r\n\r\n    // The multiplier the current unicode digit must be multiplied with.\r\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\r\n    int codePointMultiplier = 0;\r\n\r\n    // Used to calculate the codepoint of the escaped unicode character\r\n    int codePoint = 0;\r\n\r\n    for (int i = 0; i < input.length(); i++) {\r\n      char curChar = input.charAt(i);\r\n      if (codePointMultiplier > 0) {\r\n        codePoint += hexToInt(curChar) * codePointMultiplier;\r\n        codePointMultiplier >>>= 4;\r\n        if (codePointMultiplier == 0) {\r\n          output[length++] = (char)codePoint;\r\n          codePoint = 0;\r\n        }\r\n      } else if (lastCharWasEscapeChar) {\r\n        if (curChar == 'u') {\r\n          // found an escaped unicode character\r\n          codePointMultiplier = 16 * 16 * 16;\r\n        } else {\r\n          // this character was escaped\r\n          output[length] = curChar;\r\n          length++;\r\n        }\r\n        lastCharWasEscapeChar = false;\r\n      } else {\r\n        if (curChar == '\\\\') {\r\n          lastCharWasEscapeChar = true;\r\n        } else {\r\n          output[length] = curChar;\r\n          length++;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (codePointMultiplier > 0) {\r\n      throw new ParseException(\"Truncated unicode escape sequence.\");\r\n    }\r\n\r\n    if (lastCharWasEscapeChar) {\r\n      throw new ParseException(\"Term can not end with escape character.\");\r\n    }\r\n\r\n    return new String(output, 0, length);\r\n  }\r\n\n","sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#discardEscapeChar(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns a String where the escape char has been\n   * removed, or kept only once if there was a double escape.\n   * \n   * Supports escaped unicode characters, e. g. translates\n   * <code>\\\\u0041</code> to <code>A</code>.\n   * \n   */\n  private String discardEscapeChar(String input) throws ParseException {\n    // Create char array to hold unescaped char sequence\n    char[] output = new char[input.length()];\n\n    // The length of the output can be less than the input\n    // due to discarded escape chars. This variable holds\n    // the actual length of the output\n    int length = 0;\n\n    // We remember whether the last processed character was \n    // an escape character\n    boolean lastCharWasEscapeChar = false;\n\n    // The multiplier the current unicode digit must be multiplied with.\n    // E. g. the first digit must be multiplied with 16^3, the second with 16^2...\n    int codePointMultiplier = 0;\n\n    // Used to calculate the codepoint of the escaped unicode character\n    int codePoint = 0;\n\n    for (int i = 0; i < input.length(); i++) {\n      char curChar = input.charAt(i);\n      if (codePointMultiplier > 0) {\n        codePoint += hexToInt(curChar) * codePointMultiplier;\n        codePointMultiplier >>>= 4;\n        if (codePointMultiplier == 0) {\n          output[length++] = (char)codePoint;\n          codePoint = 0;\n        }\n      } else if (lastCharWasEscapeChar) {\n        if (curChar == 'u') {\n          // found an escaped unicode character\n          codePointMultiplier = 16 * 16 * 16;\n        } else {\n          // this character was escaped\n          output[length] = curChar;\n          length++;\n        }\n        lastCharWasEscapeChar = false;\n      } else {\n        if (curChar == '\\\\') {\n          lastCharWasEscapeChar = true;\n        } else {\n          output[length] = curChar;\n          length++;\n        }\n      }\n    }\n\n    if (codePointMultiplier > 0) {\n      throw new ParseException(\"Truncated unicode escape sequence.\");\n    }\n\n    if (lastCharWasEscapeChar) {\n      throw new ParseException(\"Term can not end with escape character.\");\n    }\n\n    return new String(output, 0, length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9e87c4193bc100c3b96235f14bee01a5b2009ce5"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9e87c4193bc100c3b96235f14bee01a5b2009ce5":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["9e87c4193bc100c3b96235f14bee01a5b2009ce5","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}