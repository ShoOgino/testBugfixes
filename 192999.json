{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"3241e06e642196396b80bb293acd9c0814d079e0","date":1343094999,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a1a22b1ad88b436661458df567f3fdb446392a4","date":1343224444,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":1,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/analysis/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57da959ec15bb701bd1d1bf3c613b69009ff4bfd","date":1364833800,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#CapitalizationFilterFactory(Map[String,String]).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory#init(Map[String,String]).mjava","sourceNew":"  /** Creates a new CapitalizationFilterFactory */\n  public CapitalizationFilterFactory(Map<String, String> args) {\n    super(args);\n    assureMatchVersion();\n    boolean ignoreCase = getBoolean(args, KEEP_IGNORE_CASE, false);\n    String k = args.remove(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.remove(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    minWordLength = getInt(args, MIN_WORD_LENGTH, 0);\n    maxWordCount = getInt(args, MAX_WORD_COUNT, CapitalizationFilter.DEFAULT_MAX_WORD_COUNT);\n    maxTokenLength = getInt(args, MAX_TOKEN_LENGTH, CapitalizationFilter.DEFAULT_MAX_TOKEN_LENGTH);\n    onlyFirstWord = getBoolean(args, ONLY_FIRST_WORD, true);\n    forceFirstLetter = getBoolean(args, FORCE_FIRST_LETTER, true);\n    if (!args.isEmpty()) {\n      throw new IllegalArgumentException(\"Unknown parameters: \" + args);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    assureMatchVersion();\n\n    String k = args.get(KEEP);\n    if (k != null) {\n      StringTokenizer st = new StringTokenizer(k);\n      boolean ignoreCase = false;\n      String ignoreStr = args.get(KEEP_IGNORE_CASE);\n      if (\"true\".equalsIgnoreCase(ignoreStr)) {\n        ignoreCase = true;\n      }\n      keep = new CharArraySet(luceneMatchVersion, 10, ignoreCase);\n      while (st.hasMoreTokens()) {\n        k = st.nextToken().trim();\n        keep.add(k.toCharArray());\n      }\n    }\n\n    k = args.get(OK_PREFIX);\n    if (k != null) {\n      okPrefix = new ArrayList<char[]>();\n      StringTokenizer st = new StringTokenizer(k);\n      while (st.hasMoreTokens()) {\n        okPrefix.add(st.nextToken().trim().toCharArray());\n      }\n    }\n\n    k = args.get(MIN_WORD_LENGTH);\n    if (k != null) {\n      minWordLength = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_WORD_COUNT);\n    if (k != null) {\n      maxWordCount = Integer.valueOf(k);\n    }\n\n    k = args.get(MAX_TOKEN_LENGTH);\n    if (k != null) {\n      maxTokenLength = Integer.valueOf(k);\n    }\n\n    k = args.get(ONLY_FIRST_WORD);\n    if (k != null) {\n      onlyFirstWord = Boolean.valueOf(k);\n    }\n\n    k = args.get(FORCE_FIRST_LETTER);\n    if (k != null) {\n      forceFirstLetter = Boolean.valueOf(k);\n    }\n  }\n\n","bugFix":null,"bugIntro":["623b5245fbd9d5af9f458826ba9ed3d6212db24d"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5a1a22b1ad88b436661458df567f3fdb446392a4"],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3241e06e642196396b80bb293acd9c0814d079e0"],"3241e06e642196396b80bb293acd9c0814d079e0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57da959ec15bb701bd1d1bf3c613b69009ff4bfd"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","5a1a22b1ad88b436661458df567f3fdb446392a4","3241e06e642196396b80bb293acd9c0814d079e0"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"57da959ec15bb701bd1d1bf3c613b69009ff4bfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5a1a22b1ad88b436661458df567f3fdb446392a4":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","57da959ec15bb701bd1d1bf3c613b69009ff4bfd"],"3241e06e642196396b80bb293acd9c0814d079e0":["5a1a22b1ad88b436661458df567f3fdb446392a4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}