{"path":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/SingleHostConcurrentStorageLock#releaseLock(String).mjava","commits":[{"id":"303ca293666286b4ae2b0b4dbf10d3bf60ed727c","date":1153866181,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/SingleHostConcurrentStorageLock#releaseLock(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#releaseLock(java.lang.String)\n     */\n    public boolean releaseLock(String key) {\n        this.writeLock.lock();\n        try{\n            if(this.isClosed.get())\n                throw new IllegalStateException(\"Lock has been closed\");\n            Thread t = Thread.currentThread();\n            if(!this.threads.containsKey(t))\n                return false;\n            \n            if(!this.locks.containsKey(key))\n                return false;\n            if(t != this.locks.get(key))\n                throw new ConcurrencyException(\"Illegal lock access -- current thread is not owner\");\n            this.locks.remove(key);\n            this.threads.remove(t);\n            return true;\n            \n        }finally{\n            this.writeLock.unlock();\n        }\n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/SingleHostConcurrentStorageLock#releaseLock(String).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/SingleHostConcurrentStorageLock#releaseLock(String).mjava","sourceNew":"    /**\n     * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#releaseLock(java.lang.String)\n     */\n    public boolean releaseLock(String key) {\n        this.writeLock.lock();\n        try{\n            if(this.isClosed.get())\n                throw new IllegalStateException(\"Lock has been closed\");\n            Thread t = Thread.currentThread();\n            if(!this.threads.containsKey(t))\n                return false;\n            \n            if(!this.locks.containsKey(key))\n                return false;\n            if(t != this.locks.get(key))\n                throw new ConcurrencyException(\"Illegal lock access -- current thread is not owner\");\n            this.locks.remove(key);\n            this.threads.remove(t);\n            return true;\n            \n        }finally{\n            this.writeLock.unlock();\n        }\n        \n    }\n\n","sourceOld":"    /**\n     * @see org.apache.lucene.gdata.storage.lucenestorage.ConcurrentStorageLock#releaseLock(java.lang.String)\n     */\n    public boolean releaseLock(String key) {\n        this.writeLock.lock();\n        try{\n            if(this.isClosed.get())\n                throw new IllegalStateException(\"Lock has been closed\");\n            Thread t = Thread.currentThread();\n            if(!this.threads.containsKey(t))\n                return false;\n            \n            if(!this.locks.containsKey(key))\n                return false;\n            if(t != this.locks.get(key))\n                throw new ConcurrencyException(\"Illegal lock access -- current thread is not owner\");\n            this.locks.remove(key);\n            this.threads.remove(t);\n            return true;\n            \n        }finally{\n            this.writeLock.unlock();\n        }\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5824af871ba6863399636aa5989bfc0ef2ea448c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["303ca293666286b4ae2b0b4dbf10d3bf60ed727c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"303ca293666286b4ae2b0b4dbf10d3bf60ed727c":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}